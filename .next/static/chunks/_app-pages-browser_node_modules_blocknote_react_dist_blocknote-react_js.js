"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_blocknote_react_dist_blocknote-react_js"],{

/***/ "(app-pages-browser)/./node_modules/@blocknote/core/dist/blocknote.js":
/*!********************************************************!*\
  !*** ./node_modules/@blocknote/core/dist/blocknote.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AudioBlock: () => (/* binding */ gr),\n/* harmony export */   BlockNoteEditor: () => (/* binding */ _o),\n/* harmony export */   BlockNoteSchema: () => (/* binding */ Be),\n/* harmony export */   COLORS_DARK_MODE_DEFAULT: () => (/* binding */ wc),\n/* harmony export */   COLORS_DEFAULT: () => (/* binding */ kc),\n/* harmony export */   CodeBlock: () => (/* binding */ wr),\n/* harmony export */   DEFAULT_LINK_PROTOCOL: () => (/* binding */ $i),\n/* harmony export */   EMPTY_CELL_HEIGHT: () => (/* binding */ ac),\n/* harmony export */   EMPTY_CELL_WIDTH: () => (/* binding */ mo),\n/* harmony export */   Exporter: () => (/* binding */ yc),\n/* harmony export */   FILE_AUDIO_ICON_SVG: () => (/* binding */ dr),\n/* harmony export */   FILE_ICON_SVG: () => (/* binding */ cr),\n/* harmony export */   FILE_IMAGE_ICON_SVG: () => (/* binding */ Tr),\n/* harmony export */   FILE_VIDEO_ICON_SVG: () => (/* binding */ ps),\n/* harmony export */   FileBlock: () => (/* binding */ Br),\n/* harmony export */   FilePanelProsemirrorPlugin: () => (/* binding */ Pi),\n/* harmony export */   FilePanelView: () => (/* binding */ Mi),\n/* harmony export */   FormattingToolbarProsemirrorPlugin: () => (/* binding */ Ai),\n/* harmony export */   FormattingToolbarView: () => (/* binding */ Ii),\n/* harmony export */   HTMLToBlocks: () => (/* binding */ Mo),\n/* harmony export */   ImageBlock: () => (/* binding */ Ar),\n/* harmony export */   LinkToolbarProsemirrorPlugin: () => (/* binding */ Vi),\n/* harmony export */   PageBreak: () => (/* binding */ _r),\n/* harmony export */   SideMenuProsemirrorPlugin: () => (/* binding */ ea),\n/* harmony export */   SideMenuView: () => (/* binding */ Zi),\n/* harmony export */   SuggestionMenuProseMirrorPlugin: () => (/* binding */ sa),\n/* harmony export */   TableHandlesProsemirrorPlugin: () => (/* binding */ da),\n/* harmony export */   TableHandlesView: () => (/* binding */ la),\n/* harmony export */   UniqueID: () => (/* binding */ ve),\n/* harmony export */   UnreachableCaseError: () => (/* binding */ $),\n/* harmony export */   VALID_LINK_PROTOCOLS: () => (/* binding */ Ui),\n/* harmony export */   VideoBlock: () => (/* binding */ bs),\n/* harmony export */   addIdsToBlock: () => (/* binding */ Ta),\n/* harmony export */   addIdsToBlocks: () => (/* binding */ xa),\n/* harmony export */   addInlineContentAttributes: () => (/* binding */ Ct),\n/* harmony export */   addInlineContentKeyboardShortcuts: () => (/* binding */ $n),\n/* harmony export */   addStyleAttributes: () => (/* binding */ Gn),\n/* harmony export */   applyNonSelectableBlockFix: () => (/* binding */ Vn),\n/* harmony export */   assertEmpty: () => (/* binding */ tc),\n/* harmony export */   audioBlockConfig: () => (/* binding */ ur),\n/* harmony export */   audioParse: () => (/* binding */ fr),\n/* harmony export */   audioPropSchema: () => (/* binding */ pr),\n/* harmony export */   audioRender: () => (/* binding */ hr),\n/* harmony export */   audioToExternalHTML: () => (/* binding */ mr),\n/* harmony export */   blockToNode: () => (/* binding */ ie),\n/* harmony export */   blocksToMarkdown: () => (/* binding */ Gs),\n/* harmony export */   camelToDataKebab: () => (/* binding */ He),\n/* harmony export */   checkBlockHasDefaultProp: () => (/* binding */ uc),\n/* harmony export */   checkBlockIsDefaultType: () => (/* binding */ Cs),\n/* harmony export */   checkBlockIsFileBlock: () => (/* binding */ lc),\n/* harmony export */   checkBlockIsFileBlockWithPlaceholder: () => (/* binding */ pc),\n/* harmony export */   checkBlockIsFileBlockWithPreview: () => (/* binding */ dc),\n/* harmony export */   checkBlockTypeHasDefaultProp: () => (/* binding */ vs),\n/* harmony export */   checkDefaultBlockTypeInSchema: () => (/* binding */ L),\n/* harmony export */   checkDefaultInlineContentTypeInSchema: () => (/* binding */ ys),\n/* harmony export */   checkPageBreakBlocksInSchema: () => (/* binding */ Ss),\n/* harmony export */   cleanHTMLToMarkdown: () => (/* binding */ ht),\n/* harmony export */   combineByGroup: () => (/* binding */ Ec),\n/* harmony export */   contentNodeToInlineContent: () => (/* binding */ _e),\n/* harmony export */   contentNodeToTableContent: () => (/* binding */ Jt),\n/* harmony export */   createAddFileButton: () => (/* binding */ ar),\n/* harmony export */   createBlockSpec: () => (/* binding */ Se),\n/* harmony export */   createBlockSpecFromStronglyTypedTiptapNode: () => (/* binding */ Z),\n/* harmony export */   createDefaultBlockDOMOutputSpec: () => (/* binding */ z),\n/* harmony export */   createExternalHTMLExporter: () => (/* binding */ Ve),\n/* harmony export */   createFigureWithCaption: () => (/* binding */ dt),\n/* harmony export */   createFileBlockWrapper: () => (/* binding */ lt),\n/* harmony export */   createFileNameWithIcon: () => (/* binding */ lr),\n/* harmony export */   createInlineContentSpec: () => (/* binding */ rc),\n/* harmony export */   createInlineContentSpecFromTipTapNode: () => (/* binding */ zn),\n/* harmony export */   createInternalBlockSpec: () => (/* binding */ Kt),\n/* harmony export */   createInternalHTMLSerializer: () => (/* binding */ ir),\n/* harmony export */   createInternalInlineContentSpec: () => (/* binding */ Fn),\n/* harmony export */   createInternalStyleSpec: () => (/* binding */ Zt),\n/* harmony export */   createLinkWithCaption: () => (/* binding */ $e),\n/* harmony export */   createResizableFileBlockWrapper: () => (/* binding */ lo),\n/* harmony export */   createStronglyTypedTiptapNode: () => (/* binding */ W),\n/* harmony export */   createStyleSpec: () => (/* binding */ sc),\n/* harmony export */   createStyleSpecFromTipTapMark: () => (/* binding */ ee),\n/* harmony export */   createSuggestionMenu: () => (/* binding */ bc),\n/* harmony export */   defaultBlockSchema: () => (/* binding */ ks),\n/* harmony export */   defaultBlockSpecs: () => (/* binding */ go),\n/* harmony export */   defaultBlockToHTML: () => (/* binding */ yt),\n/* harmony export */   defaultCodeBlockPropSchema: () => (/* binding */ br),\n/* harmony export */   defaultInlineContentSchema: () => (/* binding */ ws),\n/* harmony export */   defaultInlineContentSpecs: () => (/* binding */ ko),\n/* harmony export */   defaultProps: () => (/* binding */ S),\n/* harmony export */   defaultStyleSchema: () => (/* binding */ cc),\n/* harmony export */   defaultStyleSpecs: () => (/* binding */ bo),\n/* harmony export */   esmDependencies: () => (/* binding */ ce),\n/* harmony export */   fileBlockConfig: () => (/* binding */ Cr),\n/* harmony export */   fileParse: () => (/* binding */ Er),\n/* harmony export */   filePropSchema: () => (/* binding */ yr),\n/* harmony export */   fileRender: () => (/* binding */ vr),\n/* harmony export */   fileToExternalHTML: () => (/* binding */ Sr),\n/* harmony export */   filenameFromURL: () => (/* binding */ nc),\n/* harmony export */   filterSuggestionItems: () => (/* binding */ fc),\n/* harmony export */   formatKeyboardShortcut: () => (/* binding */ K),\n/* harmony export */   formattingToolbarPluginKey: () => (/* binding */ Li),\n/* harmony export */   getBlockFromPos: () => (/* binding */ Rn),\n/* harmony export */   getBlockInfo: () => (/* binding */ ne),\n/* harmony export */   getBlockInfoFromResolvedPos: () => (/* binding */ Ce),\n/* harmony export */   getBlockInfoFromSelection: () => (/* binding */ C),\n/* harmony export */   getBlockInfoWithManualOffset: () => (/* binding */ st),\n/* harmony export */   getBlockNoteExtensions: () => (/* binding */ ka),\n/* harmony export */   getBlockSchemaFromSpecs: () => (/* binding */ Xt),\n/* harmony export */   getColspan: () => (/* binding */ ge),\n/* harmony export */   getDefaultEmojiPickerItems: () => (/* binding */ vc),\n/* harmony export */   getDefaultSlashMenuItems: () => (/* binding */ hc),\n/* harmony export */   getInlineContentParseRules: () => (/* binding */ Wn),\n/* harmony export */   getInlineContentSchemaFromSpecs: () => (/* binding */ Yt),\n/* harmony export */   getNearestBlockPos: () => (/* binding */ X),\n/* harmony export */   getNodeById: () => (/* binding */ D),\n/* harmony export */   getPageBreakSlashMenuItems: () => (/* binding */ gc),\n/* harmony export */   getParseRules: () => (/* binding */ Un),\n/* harmony export */   getRowspan: () => (/* binding */ Ye),\n/* harmony export */   getStyleParseRules: () => (/* binding */ qn),\n/* harmony export */   getStyleSchemaFromSpecs: () => (/* binding */ Qt),\n/* harmony export */   imageBlockConfig: () => (/* binding */ Mr),\n/* harmony export */   imageParse: () => (/* binding */ Ir),\n/* harmony export */   imagePropSchema: () => (/* binding */ xr),\n/* harmony export */   imageRender: () => (/* binding */ Pr),\n/* harmony export */   imageToExternalHTML: () => (/* binding */ Lr),\n/* harmony export */   inheritedProps: () => (/* binding */ qt),\n/* harmony export */   initializeESMDependencies: () => (/* binding */ ut),\n/* harmony export */   inlineContentToNodes: () => (/* binding */ O),\n/* harmony export */   insertOrUpdateBlock: () => (/* binding */ P),\n/* harmony export */   isAppleOS: () => (/* binding */ _n),\n/* harmony export */   isLinkInlineContent: () => (/* binding */ wt),\n/* harmony export */   isPartialLinkInlineContent: () => (/* binding */ it),\n/* harmony export */   isPartialTableCell: () => (/* binding */ me),\n/* harmony export */   isSafari: () => (/* binding */ oc),\n/* harmony export */   isStyledTextInlineContent: () => (/* binding */ J),\n/* harmony export */   isTableCell: () => (/* binding */ at),\n/* harmony export */   isTableCellSelection: () => (/* binding */ It),\n/* harmony export */   linkToolbarPluginKey: () => (/* binding */ Ri),\n/* harmony export */   mapTableCell: () => (/* binding */ Je),\n/* harmony export */   mappingFactory: () => (/* binding */ Cc),\n/* harmony export */   markdownToBlocks: () => (/* binding */ Qs),\n/* harmony export */   markdownToHTML: () => (/* binding */ Po),\n/* harmony export */   mergeCSSClasses: () => (/* binding */ Y),\n/* harmony export */   nodeToBlock: () => (/* binding */ E),\n/* harmony export */   nodeToCustomInlineContent: () => (/* binding */ Ze),\n/* harmony export */   pageBreakConfig: () => (/* binding */ Nr),\n/* harmony export */   pageBreakParse: () => (/* binding */ Dr),\n/* harmony export */   pageBreakRender: () => (/* binding */ Hr),\n/* harmony export */   pageBreakSchema: () => (/* binding */ wo),\n/* harmony export */   pageBreakToExternalHTML: () => (/* binding */ Or),\n/* harmony export */   parseEmbedElement: () => (/* binding */ xt),\n/* harmony export */   parseFigureElement: () => (/* binding */ Ue),\n/* harmony export */   partialBlockToBlockForTesting: () => (/* binding */ Ro),\n/* harmony export */   partialBlocksToBlocksForTesting: () => (/* binding */ Sc),\n/* harmony export */   propsToAttributes: () => (/* binding */ Ee),\n/* harmony export */   shikiHighlighterPromiseSymbol: () => (/* binding */ We),\n/* harmony export */   shikiParserSymbol: () => (/* binding */ Bt),\n/* harmony export */   sideMenuPluginKey: () => (/* binding */ Qi),\n/* harmony export */   stylePropsToAttributes: () => (/* binding */ jn),\n/* harmony export */   tableContentToNodes: () => (/* binding */ Re),\n/* harmony export */   tableHandlesPluginKey: () => (/* binding */ fe),\n/* harmony export */   updateBlock: () => (/* binding */ tr),\n/* harmony export */   updateBlockCommand: () => (/* binding */ x),\n/* harmony export */   uploadToTmpFilesDotOrg_DEV_ONLY: () => (/* binding */ ic),\n/* harmony export */   videoBlockConfig: () => (/* binding */ hs),\n/* harmony export */   videoParse: () => (/* binding */ ms),\n/* harmony export */   videoPropSchema: () => (/* binding */ us),\n/* harmony export */   videoRender: () => (/* binding */ fs),\n/* harmony export */   videoToExternalHTML: () => (/* binding */ gs),\n/* harmony export */   withPageBreak: () => (/* binding */ mc),\n/* harmony export */   wrapInBlockStructure: () => (/* binding */ Te)\n/* harmony export */ });\n/* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! prosemirror-model */ \"(app-pages-browser)/./node_modules/prosemirror-model/dist/index.js\");\n/* harmony import */ var prosemirror_transform__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! prosemirror-transform */ \"(app-pages-browser)/./node_modules/prosemirror-transform/dist/index.js\");\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @tiptap/core */ \"(app-pages-browser)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! prosemirror-state */ \"(app-pages-browser)/./node_modules/prosemirror-state/dist/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\");\n/* harmony import */ var prosemirror_highlight__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! prosemirror-highlight */ \"(app-pages-browser)/./node_modules/prosemirror-highlight/dist/index.js\");\n/* harmony import */ var prosemirror_highlight_shiki__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! prosemirror-highlight/shiki */ \"(app-pages-browser)/./node_modules/prosemirror-highlight/dist/shiki.js\");\n/* harmony import */ var prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-tables */ \"(app-pages-browser)/./node_modules/prosemirror-tables/dist/index.js\");\n/* harmony import */ var _tiptap_extension_bold__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/extension-bold */ \"(app-pages-browser)/./node_modules/@tiptap/extension-bold/dist/index.js\");\n/* harmony import */ var _tiptap_extension_code__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tiptap/extension-code */ \"(app-pages-browser)/./node_modules/@tiptap/extension-code/dist/index.js\");\n/* harmony import */ var _tiptap_extension_italic__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tiptap/extension-italic */ \"(app-pages-browser)/./node_modules/@tiptap/extension-italic/dist/index.js\");\n/* harmony import */ var _tiptap_extension_strike__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tiptap/extension-strike */ \"(app-pages-browser)/./node_modules/@tiptap/extension-strike/dist/index.js\");\n/* harmony import */ var _tiptap_extension_underline__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tiptap/extension-underline */ \"(app-pages-browser)/./node_modules/@tiptap/extension-underline/dist/index.js\");\n/* harmony import */ var _tiptap_extension_table_cell__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tiptap/extension-table-cell */ \"(app-pages-browser)/./node_modules/@tiptap/extension-table-cell/dist/index.js\");\n/* harmony import */ var _tiptap_extension_table_header__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @tiptap/extension-table-header */ \"(app-pages-browser)/./node_modules/@tiptap/extension-table-header/dist/index.js\");\n/* harmony import */ var _tiptap_extension_table_row__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @tiptap/extension-table-row */ \"(app-pages-browser)/./node_modules/@tiptap/extension-table-row/dist/index.js\");\n/* harmony import */ var _tiptap_extension_gapcursor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @tiptap/extension-gapcursor */ \"(app-pages-browser)/./node_modules/@tiptap/extension-gapcursor/dist/index.js\");\n/* harmony import */ var _tiptap_extension_history__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @tiptap/extension-history */ \"(app-pages-browser)/./node_modules/@tiptap/extension-history/dist/index.js\");\n/* harmony import */ var _tiptap_extension_link__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @tiptap/extension-link */ \"(app-pages-browser)/./node_modules/@tiptap/extension-link/dist/index.js\");\n/* harmony import */ var _tiptap_extension_text__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @tiptap/extension-text */ \"(app-pages-browser)/./node_modules/@tiptap/extension-text/dist/index.js\");\n/* harmony import */ var _tiptap_extension_collaboration__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @tiptap/extension-collaboration */ \"(app-pages-browser)/./node_modules/@tiptap/extension-collaboration/dist/index.js\");\n/* harmony import */ var _tiptap_extension_collaboration_cursor__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @tiptap/extension-collaboration-cursor */ \"(app-pages-browser)/./node_modules/@tiptap/extension-collaboration-cursor/dist/index.js\");\n/* harmony import */ var prosemirror_view__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! prosemirror-view */ \"(app-pages-browser)/./node_modules/prosemirror-view/dist/index.js\");\n/* harmony import */ var y_prosemirror__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! y-prosemirror */ \"(app-pages-browser)/./node_modules/y-prosemirror/src/plugins/keys.js\");\n/* harmony import */ var y_prosemirror__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! y-prosemirror */ \"(app-pages-browser)/./node_modules/y-prosemirror/src/plugins/sync-plugin.js\");\n/* harmony import */ var y_prosemirror__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! y-prosemirror */ \"(app-pages-browser)/./node_modules/y-prosemirror/src/lib.js\");\n/* harmony import */ var prosemirror_dropcursor__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! prosemirror-dropcursor */ \"(app-pages-browser)/./node_modules/prosemirror-dropcursor/dist/index.js\");\n/* harmony import */ var _en_B7ycW7c8_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./en-B7ycW7c8.js */ \"(app-pages-browser)/./node_modules/@blocknote/core/dist/en-B7ycW7c8.js\");\nvar Vo = Object.defineProperty;\nvar Uo = (e, o, t) => o in e ? Vo(e, o, { enumerable: !0, configurable: !0, writable: !0, value: t }) : e[o] = t;\nvar u = (e, o, t) => Uo(e, typeof o != \"symbol\" ? o + \"\" : o, t);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass $ extends Error {\n  constructor(o) {\n    super(`Unreachable case: ${o}`);\n  }\n}\nfunction tc(e, o = !0) {\n  const { \"data-test\": t, ...n } = e;\n  if (Object.keys(n).length > 0 && o)\n    throw new Error(\"Object must be empty \" + JSON.stringify(e));\n}\nfunction X(e, o) {\n  const t = e.resolve(o);\n  if (t.nodeAfter && t.nodeAfter.type.isInGroup(\"bnBlock\"))\n    return {\n      posBeforeNode: t.pos,\n      node: t.nodeAfter\n    };\n  let n = t.depth, r = t.node(n);\n  for (; n > 0; ) {\n    if (r.type.isInGroup(\"bnBlock\"))\n      return {\n        posBeforeNode: t.before(n),\n        node: r\n      };\n    n--, r = t.node(n);\n  }\n  const s = [];\n  e.descendants((a, c) => {\n    a.type.isInGroup(\"bnBlock\") && s.push(c);\n  }), console.warn(`Position ${o} is not within a blockContainer node.`);\n  const i = e.resolve(\n    s.find((a) => a >= o) || s[s.length - 1]\n  );\n  return {\n    posBeforeNode: i.pos,\n    node: i.nodeAfter\n  };\n}\nfunction st(e, o) {\n  if (!e.type.isInGroup(\"bnBlock\"))\n    throw new Error(\n      `Attempted to get bnBlock node at position but found node of different type ${e.type}`\n    );\n  const t = e, n = o, r = n + t.nodeSize, s = {\n    node: t,\n    beforePos: n,\n    afterPos: r\n  };\n  if (t.type.name === \"blockContainer\") {\n    let i, a;\n    if (t.forEach((c, l) => {\n      if (c.type.spec.group === \"blockContent\") {\n        const d = c, p = n + l + 1, h = p + c.nodeSize;\n        i = {\n          node: d,\n          beforePos: p,\n          afterPos: h\n        };\n      } else if (c.type.name === \"blockGroup\") {\n        const d = c, p = n + l + 1, h = p + c.nodeSize;\n        a = {\n          node: d,\n          beforePos: p,\n          afterPos: h\n        };\n      }\n    }), !i)\n      throw new Error(\n        `blockContainer node does not contain a blockContent node in its children: ${t}`\n      );\n    return {\n      isBlockContainer: !0,\n      bnBlock: s,\n      blockContent: i,\n      childContainer: a,\n      blockNoteType: i.node.type.name\n    };\n  } else {\n    if (!s.node.type.isInGroup(\"childContainer\"))\n      throw new Error(\n        `bnBlock node is not in the childContainer group: ${s.node}`\n      );\n    return {\n      isBlockContainer: !1,\n      bnBlock: s,\n      childContainer: s,\n      blockNoteType: s.node.type.name\n    };\n  }\n}\nfunction ne(e) {\n  return st(e.node, e.posBeforeNode);\n}\nfunction Ce(e) {\n  if (!e.nodeAfter)\n    throw new Error(\n      `Attempted to get blockContainer node at position ${e.pos} but a node at this position does not exist`\n    );\n  return st(e.nodeAfter, e.pos);\n}\nfunction C(e) {\n  const o = X(e.doc, e.selection.anchor);\n  return ne(o);\n}\nfunction Dn(e, o = JSON.stringify) {\n  const t = {};\n  return e.filter((n) => {\n    const r = o(n);\n    return Object.prototype.hasOwnProperty.call(t, r) ? !1 : t[r] = !0;\n  });\n}\nfunction On(e) {\n  const o = e.filter(\n    (n, r) => e.indexOf(n) !== r\n  );\n  return Dn(o);\n}\nconst ve = _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.Extension.create({\n  name: \"uniqueID\",\n  // we’ll set a very high priority to make sure this runs first\n  // and is compatible with `appendTransaction` hooks of other extensions\n  priority: 1e4,\n  addOptions() {\n    return {\n      attributeName: \"id\",\n      types: [],\n      setIdAttribute: !1,\n      generateID: () => {\n        if (typeof window < \"u\" && window.__TEST_OPTIONS) {\n          const e = window.__TEST_OPTIONS;\n          return e.mockID === void 0 ? e.mockID = 0 : e.mockID++, e.mockID.toString();\n        }\n        return (0,uuid__WEBPACK_IMPORTED_MODULE_16__[\"default\"])();\n      },\n      filterTransaction: null\n    };\n  },\n  addGlobalAttributes() {\n    return [\n      {\n        types: this.options.types,\n        attributes: {\n          [this.options.attributeName]: {\n            default: null,\n            parseHTML: (e) => e.getAttribute(`data-${this.options.attributeName}`),\n            renderHTML: (e) => {\n              const o = {\n                [`data-${this.options.attributeName}`]: e[this.options.attributeName]\n              };\n              return this.options.setIdAttribute ? {\n                ...o,\n                id: e[this.options.attributeName]\n              } : o;\n            }\n          }\n        }\n      }\n    ];\n  },\n  // check initial content for missing ids\n  // onCreate() {\n  //   // Don’t do this when the collaboration extension is active\n  //   // because this may update the content, so Y.js tries to merge these changes.\n  //   // This leads to empty block nodes.\n  //   // See: https://github.com/ueberdosis/tiptap/issues/2400\n  //   if (\n  //     this.editor.extensionManager.extensions.find(\n  //       (extension) => extension.name === \"collaboration\"\n  //     )\n  //   ) {\n  //     return;\n  //   }\n  //   const { view, state } = this.editor;\n  //   const { tr, doc } = state;\n  //   const { types, attributeName, generateID } = this.options;\n  //   const nodesWithoutId = findChildren(doc, (node) => {\n  //     return (\n  //       types.includes(node.type.name) && node.attrs[attributeName] === null\n  //     );\n  //   });\n  //   nodesWithoutId.forEach(({ node, pos }) => {\n  //     tr.setNodeMarkup(pos, undefined, {\n  //       ...node.attrs,\n  //       [attributeName]: generateID(),\n  //     });\n  //   });\n  //   tr.setMeta(\"addToHistory\", false);\n  //   view.dispatch(tr);\n  // },\n  addProseMirrorPlugins() {\n    let e = null, o = !1;\n    return [\n      new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.Plugin({\n        key: new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.PluginKey(\"uniqueID\"),\n        appendTransaction: (t, n, r) => {\n          const s = t.some((m) => m.docChanged) && !n.doc.eq(r.doc), i = this.options.filterTransaction && t.some((m) => {\n            let g, b;\n            return !(!((b = (g = this.options).filterTransaction) === null || b === void 0) && b.call(g, m));\n          });\n          if (!s || i)\n            return;\n          const { tr: a } = r, { types: c, attributeName: l, generateID: d } = this.options, p = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_15__.combineTransactionSteps)(\n            n.doc,\n            t\n          ), { mapping: h } = p;\n          if ((0,_tiptap_core__WEBPACK_IMPORTED_MODULE_15__.getChangedRanges)(p).forEach(({ newRange: m }) => {\n            const g = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_15__.findChildrenInRange)(\n              r.doc,\n              m,\n              (w) => c.includes(w.type.name)\n            ), b = g.map(({ node: w }) => w.attrs[l]).filter((w) => w !== null), k = On(b);\n            g.forEach(({ node: w, pos: y }) => {\n              let T;\n              const F = (T = a.doc.nodeAt(y)) === null || T === void 0 ? void 0 : T.attrs[l];\n              if (F === null) {\n                const v = n.doc.type.createAndFill().content;\n                if (n.doc.content.findDiffStart(v) === null) {\n                  const ae = JSON.parse(\n                    JSON.stringify(r.doc.toJSON())\n                  );\n                  if (ae.content[0].content[0].attrs.id = \"initialBlockId\", JSON.stringify(ae.content) === JSON.stringify(v.toJSON())) {\n                    a.setNodeMarkup(y, void 0, {\n                      ...w.attrs,\n                      [l]: \"initialBlockId\"\n                    });\n                    return;\n                  }\n                }\n                a.setNodeMarkup(y, void 0, {\n                  ...w.attrs,\n                  [l]: d()\n                });\n                return;\n              }\n              const { deleted: j } = h.invert().mapResult(y);\n              j && k.includes(F) && a.setNodeMarkup(y, void 0, {\n                ...w.attrs,\n                [l]: d()\n              });\n            });\n          }), !!a.steps.length)\n            return a;\n        },\n        // we register a global drag handler to track the current drag source element\n        view(t) {\n          const n = (r) => {\n            let s;\n            e = !((s = t.dom.parentElement) === null || s === void 0) && s.contains(r.target) ? t.dom.parentElement : null;\n          };\n          return window.addEventListener(\"dragstart\", n), {\n            destroy() {\n              window.removeEventListener(\"dragstart\", n);\n            }\n          };\n        },\n        props: {\n          // `handleDOMEvents` is called before `transformPasted` so we can do\n          // some checks before. However, `transformPasted` only runs when\n          // editor content is pasted - not external content.\n          handleDOMEvents: {\n            // only create new ids for dropped content while holding `alt`\n            // or content is dragged from another editor\n            drop: (t, n) => {\n              let r;\n              return e !== t.dom.parentElement || ((r = n.dataTransfer) === null || r === void 0 ? void 0 : r.effectAllowed) === \"copy\" ? o = !0 : o = !1, e = null, !1;\n            },\n            // always create new ids on pasted content\n            paste: () => (o = !0, !1)\n          },\n          // we’ll remove ids for every pasted node\n          // so we can create a new one within `appendTransaction`\n          transformPasted: (t) => {\n            if (!o)\n              return t;\n            const { types: n, attributeName: r } = this.options, s = (i) => {\n              const a = [];\n              return i.forEach((c) => {\n                if (c.isText) {\n                  a.push(c);\n                  return;\n                }\n                if (!n.includes(c.type.name)) {\n                  a.push(c.copy(s(c.content)));\n                  return;\n                }\n                const l = c.type.create(\n                  {\n                    ...c.attrs,\n                    [r]: null\n                  },\n                  s(c.content),\n                  c.marks\n                );\n                a.push(l);\n              }), prosemirror_model__WEBPACK_IMPORTED_MODULE_18__.Fragment.from(a);\n            };\n            return o = !1, new prosemirror_model__WEBPACK_IMPORTED_MODULE_18__.Slice(\n              s(t.content),\n              t.openStart,\n              t.openEnd\n            );\n          }\n        }\n      })\n    ];\n  }\n});\nfunction wt(e) {\n  return e.type === \"link\";\n}\nfunction it(e) {\n  return typeof e != \"string\" && e.type === \"link\";\n}\nfunction J(e) {\n  return typeof e != \"string\" && e.type === \"text\";\n}\nfunction Je(e) {\n  var o, t, n, r, s;\n  return at(e) ? { ...e } : me(e) ? {\n    type: \"tableCell\",\n    content: [].concat(e.content),\n    props: {\n      backgroundColor: ((o = e.props) == null ? void 0 : o.backgroundColor) ?? \"default\",\n      textColor: ((t = e.props) == null ? void 0 : t.textColor) ?? \"default\",\n      textAlignment: ((n = e.props) == null ? void 0 : n.textAlignment) ?? \"left\",\n      colspan: ((r = e.props) == null ? void 0 : r.colspan) ?? 1,\n      rowspan: ((s = e.props) == null ? void 0 : s.rowspan) ?? 1\n    }\n  } : {\n    type: \"tableCell\",\n    content: [].concat(e),\n    props: {\n      backgroundColor: \"default\",\n      textColor: \"default\",\n      textAlignment: \"left\",\n      colspan: 1,\n      rowspan: 1\n    }\n  };\n}\nfunction me(e) {\n  return e != null && typeof e != \"string\" && !Array.isArray(e) && e.type === \"tableCell\";\n}\nfunction at(e) {\n  return me(e) && e.props !== void 0 && e.content !== void 0;\n}\nfunction ge(e) {\n  return at(e) ? e.props.colspan ?? 1 : 1;\n}\nfunction Ye(e) {\n  return at(e) ? e.props.rowspan ?? 1 : 1;\n}\nconst _n = () => typeof navigator < \"u\" && (/Mac/.test(navigator.platform) || /AppleWebKit/.test(navigator.userAgent) && /Mobile\\/\\w+/.test(navigator.userAgent));\nfunction K(e, o = \"Ctrl\") {\n  return _n() ? e.replace(\"Mod\", \"⌘\") : e.replace(\"Mod\", o);\n}\nfunction Y(...e) {\n  return e.filter((o) => o).join(\" \");\n}\nconst oc = () => /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\nfunction z(e, o, t, n) {\n  const r = document.createElement(\"div\");\n  r.className = Y(\n    \"bn-block-content\",\n    t.class\n  ), r.setAttribute(\"data-content-type\", e);\n  for (const [i, a] of Object.entries(t))\n    i !== \"class\" && r.setAttribute(i, a);\n  const s = document.createElement(o);\n  s.className = Y(\n    \"bn-inline-content\",\n    n.class\n  );\n  for (const [i, a] of Object.entries(\n    n\n  ))\n    i !== \"class\" && s.setAttribute(i, a);\n  return r.appendChild(s), {\n    dom: r,\n    contentDOM: s\n  };\n}\nconst yt = (e, o) => {\n  let t = ie(e, o.pmSchema, o.schema.styleSchema);\n  t.type.name === \"blockContainer\" && (t = t.firstChild);\n  const n = o.pmSchema.nodes[t.type.name].spec.toDOM;\n  if (n === void 0)\n    throw new Error(\n      \"This block has no default HTML serialization as its corresponding TipTap node doesn't implement `renderHTML`.\"\n    );\n  const r = n(t);\n  if (typeof r != \"object\" || !(\"dom\" in r))\n    throw new Error(\n      \"Cannot use this block's default HTML serialization as its corresponding TipTap node's `renderHTML` function does not return an object with the `dom` property.\"\n    );\n  return r;\n}, S = {\n  backgroundColor: {\n    default: \"default\"\n  },\n  textColor: {\n    default: \"default\"\n  },\n  textAlignment: {\n    default: \"left\",\n    values: [\"left\", \"center\", \"right\", \"justify\"]\n  }\n}, qt = [\"backgroundColor\", \"textColor\"];\nfunction He(e) {\n  return \"data-\" + e.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\nfunction nc(e) {\n  const o = e.split(\"/\");\n  return !o.length || // invalid?\n  o[o.length - 1] === \"\" ? e : o[o.length - 1];\n}\nfunction Ee(e) {\n  const o = {};\n  return Object.entries(e).filter(([t, n]) => !qt.includes(t)).forEach(([t, n]) => {\n    o[t] = {\n      default: n.default,\n      keepOnSplit: !0,\n      // Props are displayed in kebab-case as HTML attributes. If a prop's\n      // value is the same as its default, we don't display an HTML\n      // attribute for it.\n      parseHTML: (r) => {\n        const s = r.getAttribute(He(t));\n        if (s === null)\n          return null;\n        if (n.default === void 0 && n.type === \"boolean\" || n.default !== void 0 && typeof n.default == \"boolean\")\n          return s === \"true\" ? !0 : s === \"false\" ? !1 : null;\n        if (n.default === void 0 && n.type === \"number\" || n.default !== void 0 && typeof n.default == \"number\") {\n          const i = parseFloat(s);\n          return !Number.isNaN(i) && Number.isFinite(i) ? i : null;\n        }\n        return s;\n      },\n      renderHTML: (r) => r[t] !== n.default ? {\n        [He(t)]: r[t]\n      } : {}\n    };\n  }), o;\n}\nfunction Rn(e, o, t, n) {\n  if (typeof e == \"boolean\")\n    throw new Error(\n      \"Cannot find node position as getPos is a boolean, not a function.\"\n    );\n  const r = e(), i = t.state.doc.resolve(r).node().attrs.id;\n  if (!i)\n    throw new Error(\"Block doesn't have id\");\n  const a = o.getBlock(i);\n  if (a.type !== n)\n    throw new Error(\"Block type does not match\");\n  return a;\n}\nfunction Te(e, o, t, n, r = !1, s) {\n  const i = document.createElement(\"div\");\n  if (s !== void 0)\n    for (const [a, c] of Object.entries(s))\n      a !== \"class\" && i.setAttribute(a, c);\n  i.className = Y(\n    \"bn-block-content\",\n    (s == null ? void 0 : s.class) || \"\"\n  ), i.setAttribute(\"data-content-type\", o);\n  for (const [a, c] of Object.entries(t)) {\n    const d = n[a].default;\n    !qt.includes(a) && c !== d && i.setAttribute(He(a), c);\n  }\n  return r && i.setAttribute(\"data-file-block\", \"\"), i.appendChild(e.dom), e.contentDOM !== void 0 && (e.contentDOM.className = Y(\n    \"bn-inline-content\",\n    e.contentDOM.className\n  ), e.contentDOM.setAttribute(\"data-editable\", \"\")), {\n    ...e,\n    dom: i\n  };\n}\nfunction W(e) {\n  return _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.Node.create(e);\n}\nfunction Kt(e, o) {\n  return {\n    config: e,\n    implementation: o\n  };\n}\nfunction Z(e, o, t) {\n  return Kt(\n    {\n      type: e.name,\n      content: e.config.content === \"inline*\" ? \"inline\" : e.config.content === \"tableRow+\" ? \"table\" : \"none\",\n      propSchema: o\n    },\n    {\n      node: e,\n      requiredExtensions: t,\n      toInternalHTML: yt,\n      toExternalHTML: yt\n      // parse: () => undefined, // parse rules are in node already\n    }\n  );\n}\nfunction Xt(e) {\n  return Object.fromEntries(\n    Object.entries(e).map(([o, t]) => [o, t.config])\n  );\n}\nfunction Vn(e, o) {\n  e.stopEvent = (t) => (t.type === \"mousedown\" && setTimeout(() => {\n    o.view.dom.blur();\n  }, 10), !0);\n}\nfunction Un(e, o) {\n  const t = [\n    {\n      tag: \"[data-content-type=\" + e.type + \"]\",\n      contentElement: \"[data-editable]\"\n    }\n  ];\n  return o && t.push({\n    tag: \"*\",\n    getAttrs(n) {\n      if (typeof n == \"string\")\n        return !1;\n      const r = o == null ? void 0 : o(n);\n      return r === void 0 ? !1 : r;\n    }\n  }), t;\n}\nfunction Se(e, o) {\n  const t = W({\n    name: e.type,\n    content: e.content === \"inline\" ? \"inline*\" : \"\",\n    group: \"blockContent\",\n    selectable: e.isSelectable ?? !0,\n    isolating: !0,\n    addAttributes() {\n      return Ee(e.propSchema);\n    },\n    parseHTML() {\n      return Un(e, o.parse);\n    },\n    renderHTML({ HTMLAttributes: n }) {\n      const r = document.createElement(\"div\");\n      return Te(\n        {\n          dom: r,\n          contentDOM: e.content === \"inline\" ? r : void 0\n        },\n        e.type,\n        {},\n        e.propSchema,\n        e.isFileBlock,\n        n\n      );\n    },\n    addNodeView() {\n      return ({ getPos: n }) => {\n        var l;\n        const r = this.options.editor, s = Rn(\n          n,\n          r,\n          this.editor,\n          e.type\n        ), i = ((l = this.options.domAttributes) == null ? void 0 : l.blockContent) || {}, a = o.render(s, r), c = Te(\n          a,\n          s.type,\n          s.props,\n          e.propSchema,\n          i\n        );\n        return e.isSelectable === !1 && Vn(c, this.editor), c;\n      };\n    }\n  });\n  if (t.name !== e.type)\n    throw new Error(\n      \"Node name does not match block type. This is a bug in BlockNote.\"\n    );\n  return Kt(e, {\n    node: t,\n    toInternalHTML: (n, r) => {\n      var a;\n      const s = ((a = t.options.domAttributes) == null ? void 0 : a.blockContent) || {}, i = o.render(n, r);\n      return Te(\n        i,\n        n.type,\n        n.props,\n        e.propSchema,\n        e.isFileBlock,\n        s\n      );\n    },\n    // TODO: this should not have wrapInBlockStructure and generally be a lot simpler\n    // post-processing in externalHTMLExporter should not be necessary\n    toExternalHTML: (n, r) => {\n      var a, c;\n      const s = ((a = t.options.domAttributes) == null ? void 0 : a.blockContent) || {};\n      let i = (c = o.toExternalHTML) == null ? void 0 : c.call(\n        o,\n        n,\n        r\n      );\n      return i === void 0 && (i = o.render(n, r)), Te(\n        i,\n        n.type,\n        n.props,\n        e.propSchema,\n        s\n      );\n    }\n  });\n}\nfunction Jt(e, o, t) {\n  var s, i;\n  const n = {\n    type: \"tableContent\",\n    columnWidths: [],\n    headerRows: void 0,\n    headerCols: void 0,\n    rows: []\n  }, r = [];\n  e.content.forEach((a, c, l) => {\n    const d = {\n      cells: []\n    };\n    l === 0 && a.content.forEach((p) => {\n      let h = p.attrs.colwidth;\n      h == null && (h = new Array(p.attrs.colspan ?? 1).fill(void 0)), n.columnWidths.push(...h);\n    }), d.cells = a.content.content.map((p, h) => (r[l] || (r[l] = []), r[l][h] = p.type.name === \"tableHeader\", {\n      type: \"tableCell\",\n      content: p.content.content.map(\n        (m) => _e(m, o, t)\n      ).reduce((m, g) => {\n        if (!m.length)\n          return g;\n        const b = m[m.length - 1], k = g[0];\n        return k && J(b) && J(k) && JSON.stringify(b.styles) === JSON.stringify(k.styles) ? (b.text += `\n` + k.text, m.push(...g.slice(1)), m) : (m.push(...g), m);\n      }, []),\n      props: {\n        colspan: p.attrs.colspan,\n        rowspan: p.attrs.rowspan,\n        backgroundColor: p.attrs.backgroundColor,\n        textColor: p.attrs.textColor,\n        textAlignment: p.attrs.textAlignment\n      }\n    })), n.rows.push(d);\n  });\n  for (let a = 0; a < r.length; a++)\n    (s = r[a]) != null && s.every((c) => c) && (n.headerRows = (n.headerRows ?? 0) + 1);\n  for (let a = 0; a < ((i = r[0]) == null ? void 0 : i.length); a++)\n    r != null && r.every((c) => c[a]) && (n.headerCols = (n.headerCols ?? 0) + 1);\n  return n;\n}\nfunction _e(e, o, t) {\n  const n = [];\n  let r;\n  return e.content.forEach((s) => {\n    if (s.type.name === \"hardBreak\") {\n      if (r)\n        if (J(r))\n          r.text += `\n`;\n        else if (wt(r))\n          r.content[r.content.length - 1].text += `\n`;\n        else\n          throw new Error(\"unexpected\");\n      else\n        r = {\n          type: \"text\",\n          text: `\n`,\n          styles: {}\n        };\n      return;\n    }\n    if (s.type.name !== \"link\" && s.type.name !== \"text\") {\n      if (!o[s.type.name]) {\n        console.warn(\"unrecognized inline content type\", s.type.name);\n        return;\n      }\n      r && (n.push(r), r = void 0), n.push(\n        Ze(s, o, t)\n      );\n      return;\n    }\n    const i = {};\n    let a;\n    for (const c of s.marks)\n      if (c.type.name === \"link\")\n        a = c;\n      else {\n        const l = t[c.type.name];\n        if (!l) {\n          if (c.type.spec.blocknoteIgnore)\n            continue;\n          throw new Error(`style ${c.type.name} not found in styleSchema`);\n        }\n        if (l.propSchema === \"boolean\")\n          i[l.type] = !0;\n        else if (l.propSchema === \"string\")\n          i[l.type] = c.attrs.stringValue;\n        else\n          throw new $(l.propSchema);\n      }\n    r ? J(r) ? a ? (n.push(r), r = {\n      type: \"link\",\n      href: a.attrs.href,\n      content: [\n        {\n          type: \"text\",\n          text: s.textContent,\n          styles: i\n        }\n      ]\n    }) : JSON.stringify(r.styles) === JSON.stringify(i) ? r.text += s.textContent : (n.push(r), r = {\n      type: \"text\",\n      text: s.textContent,\n      styles: i\n    }) : wt(r) && (a ? r.href === a.attrs.href ? JSON.stringify(\n      r.content[r.content.length - 1].styles\n    ) === JSON.stringify(i) ? r.content[r.content.length - 1].text += s.textContent : r.content.push({\n      type: \"text\",\n      text: s.textContent,\n      styles: i\n    }) : (n.push(r), r = {\n      type: \"link\",\n      href: a.attrs.href,\n      content: [\n        {\n          type: \"text\",\n          text: s.textContent,\n          styles: i\n        }\n      ]\n    }) : (n.push(r), r = {\n      type: \"text\",\n      text: s.textContent,\n      styles: i\n    })) : a ? r = {\n      type: \"link\",\n      href: a.attrs.href,\n      content: [\n        {\n          type: \"text\",\n          text: s.textContent,\n          styles: i\n        }\n      ]\n    } : r = {\n      type: \"text\",\n      text: s.textContent,\n      styles: i\n    };\n  }), r && n.push(r), n;\n}\nfunction Ze(e, o, t) {\n  if (e.type.name === \"text\" || e.type.name === \"link\")\n    throw new Error(\"unexpected\");\n  const n = {}, r = o[e.type.name];\n  for (const [a, c] of Object.entries(e.attrs)) {\n    if (!r)\n      throw Error(\"ic node is of an unrecognized type: \" + e.type.name);\n    const l = r.propSchema;\n    a in l && (n[a] = c);\n  }\n  let s;\n  return r.content === \"styled\" ? s = _e(\n    e,\n    o,\n    t\n  ) : s = void 0, {\n    type: e.type.name,\n    props: n,\n    content: s\n  };\n}\nfunction E(e, o, t, n, r) {\n  var m;\n  if (!e.type.isInGroup(\"bnBlock\"))\n    throw Error(\n      \"Node must be in bnBlock group, but is of type\" + e.type.name\n    );\n  const s = r == null ? void 0 : r.get(e);\n  if (s)\n    return s;\n  const i = st(e, 0);\n  let a = i.bnBlock.node.attrs.id;\n  a === null && (a = ve.options.generateID());\n  const c = o[i.blockNoteType];\n  if (!c)\n    throw Error(\"Block is of an unrecognized type: \" + i.blockNoteType);\n  const l = {};\n  for (const [g, b] of Object.entries({\n    ...e.attrs,\n    ...i.isBlockContainer ? i.blockContent.node.attrs : {}\n  })) {\n    const k = c.propSchema;\n    g in k && !(k[g].default === void 0 && b === void 0) && (l[g] = b);\n  }\n  const d = o[i.blockNoteType], p = [];\n  (m = i.childContainer) == null || m.node.forEach((g) => {\n    p.push(\n      E(\n        g,\n        o,\n        t,\n        n,\n        r\n      )\n    );\n  });\n  let h;\n  if (d.content === \"inline\") {\n    if (!i.isBlockContainer)\n      throw new Error(\"impossible\");\n    h = _e(\n      i.blockContent.node,\n      t,\n      n\n    );\n  } else if (d.content === \"table\") {\n    if (!i.isBlockContainer)\n      throw new Error(\"impossible\");\n    h = Jt(\n      i.blockContent.node,\n      t,\n      n\n    );\n  } else if (d.content === \"none\")\n    h = void 0;\n  else\n    throw new $(d.content);\n  const f = {\n    id: a,\n    type: d.type,\n    props: l,\n    content: h,\n    children: p\n  };\n  return r == null || r.set(e, f), f;\n}\nfunction Ct(e, o, t, n) {\n  return e.dom.setAttribute(\"data-inline-content-type\", o), Object.entries(t).filter(([r, s]) => {\n    const i = n[r];\n    return s !== i.default;\n  }).map(([r, s]) => [He(r), s]).forEach(([r, s]) => e.dom.setAttribute(r, s)), e.contentDOM !== void 0 && e.contentDOM.setAttribute(\"data-editable\", \"\"), e;\n}\nfunction $n(e) {\n  return {\n    Backspace: ({ editor: o }) => {\n      const t = o.state.selection.$from;\n      return o.state.selection.empty && t.node().type.name === e.type && t.parentOffset === 0;\n    }\n  };\n}\nfunction Fn(e, o) {\n  return {\n    config: e,\n    implementation: o\n  };\n}\nfunction zn(e, o) {\n  return Fn(\n    {\n      type: e.name,\n      propSchema: o,\n      content: e.config.content === \"inline*\" ? \"styled\" : \"none\"\n    },\n    {\n      node: e\n    }\n  );\n}\nfunction Yt(e) {\n  return Object.fromEntries(\n    Object.entries(e).map(([o, t]) => [o, t.config])\n  );\n}\nfunction Wn(e) {\n  return [\n    {\n      tag: `[data-inline-content-type=\"${e.type}\"]`,\n      contentElement: (o) => {\n        const t = o;\n        return t.matches(\"[data-editable]\") ? t : t.querySelector(\"[data-editable]\") || t;\n      }\n    }\n  ];\n}\nfunction rc(e, o) {\n  const t = _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.Node.create({\n    name: e.type,\n    inline: !0,\n    group: \"inline\",\n    selectable: e.content === \"styled\",\n    atom: e.content === \"none\",\n    content: e.content === \"styled\" ? \"inline*\" : \"\",\n    addAttributes() {\n      return Ee(e.propSchema);\n    },\n    addKeyboardShortcuts() {\n      return $n(e);\n    },\n    parseHTML() {\n      return Wn(e);\n    },\n    renderHTML({ node: n }) {\n      const r = this.options.editor, s = o.render(\n        Ze(\n          n,\n          r.schema.inlineContentSchema,\n          r.schema.styleSchema\n        ),\n        // TODO: fix cast\n        () => {\n        },\n        r\n      );\n      return Ct(\n        s,\n        e.type,\n        n.attrs,\n        e.propSchema\n      );\n    },\n    addNodeView() {\n      return ({ node: n, getPos: r }) => {\n        const s = this.options.editor, i = o.render(\n          Ze(\n            n,\n            s.schema.inlineContentSchema,\n            s.schema.styleSchema\n          ),\n          // TODO: fix cast\n          (a) => {\n            if (typeof r == \"boolean\")\n              return;\n            const c = O(\n              [a],\n              s._tiptapEditor.schema,\n              s.schema.styleSchema\n            );\n            s.dispatch(\n              s.prosemirrorView.state.tr.replaceWith(\n                r(),\n                r() + n.nodeSize,\n                c\n              )\n            );\n          },\n          s\n        );\n        return Ct(\n          i,\n          e.type,\n          n.attrs,\n          e.propSchema\n        );\n      };\n    }\n  });\n  return zn(\n    t,\n    e.propSchema\n  );\n}\nfunction jn(e) {\n  return e === \"boolean\" ? {} : {\n    stringValue: {\n      default: void 0,\n      keepOnSplit: !0,\n      parseHTML: (o) => o.getAttribute(\"data-value\"),\n      renderHTML: (o) => o.stringValue !== void 0 ? {\n        \"data-value\": o.stringValue\n      } : {}\n    }\n  };\n}\nfunction Gn(e, o, t, n) {\n  return e.dom.setAttribute(\"data-style-type\", o), n === \"string\" && e.dom.setAttribute(\"data-value\", t), e.contentDOM !== void 0 && e.contentDOM.setAttribute(\"data-editable\", \"\"), e;\n}\nfunction Zt(e, o) {\n  return {\n    config: e,\n    implementation: o\n  };\n}\nfunction ee(e, o) {\n  return Zt(\n    {\n      type: e.name,\n      propSchema: o\n    },\n    {\n      mark: e\n    }\n  );\n}\nfunction Qt(e) {\n  return Object.fromEntries(\n    Object.entries(e).map(([o, t]) => [o, t.config])\n  );\n}\nfunction qn(e) {\n  return [\n    {\n      tag: `[data-style-type=\"${e.type}\"]`,\n      contentElement: (o) => {\n        const t = o;\n        return t.matches(\"[data-editable]\") ? t : t.querySelector(\"[data-editable]\") || t;\n      }\n    }\n  ];\n}\nfunction sc(e, o) {\n  const t = _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.Mark.create({\n    name: e.type,\n    addAttributes() {\n      return jn(e.propSchema);\n    },\n    parseHTML() {\n      return qn(e);\n    },\n    renderHTML({ mark: n }) {\n      let r;\n      if (e.propSchema === \"boolean\")\n        r = o.render();\n      else if (e.propSchema === \"string\")\n        r = o.render(n.attrs.stringValue);\n      else\n        throw new $(e.propSchema);\n      return Gn(\n        r,\n        e.type,\n        n.attrs.stringValue,\n        e.propSchema\n      );\n    }\n  });\n  return Zt(e, {\n    mark: t\n  });\n}\nfunction Q(e) {\n  const { height: o, width: t } = ct(e), n = new Array(o).fill(!1).map(() => new Array(t).fill(null)), r = (s, i) => {\n    for (let a = s; a < o; a++)\n      for (let c = i; c < t; c++)\n        if (!n[a][c])\n          return { row: a, col: c };\n    throw new Error(\n      \"Unable to create occupancy grid for table, no more available cells\"\n    );\n  };\n  for (let s = 0; s < e.content.rows.length; s++)\n    for (let i = 0; i < e.content.rows[s].cells.length; i++) {\n      const a = Je(e.content.rows[s].cells[i]), c = Ye(a), l = ge(a), { row: d, col: p } = r(s, i);\n      for (let h = d; h < d + c; h++)\n        for (let f = p; f < p + l; f++) {\n          if (n[h][f])\n            throw new Error(\n              `Unable to create occupancy grid for table, cell at ${h},${f} is already occupied`\n            );\n          n[h][f] = {\n            row: s,\n            col: i,\n            rowspan: c,\n            colspan: l,\n            cell: a\n          };\n        }\n    }\n  return n;\n}\nfunction be(e) {\n  const o = /* @__PURE__ */ new Set();\n  return e.map((t) => ({\n    cells: t.map((n) => o.has(n.row + \":\" + n.col) ? !1 : (o.add(n.row + \":\" + n.col), n.cell)).filter((n) => n !== !1)\n  }));\n}\nfunction re(e, o, t = Q(o)) {\n  for (let n = 0; n < t.length; n++)\n    for (let r = 0; r < t[n].length; r++) {\n      const s = t[n][r];\n      if (s.row === e.row && s.col === e.col)\n        return { row: n, col: r, cell: s.cell };\n    }\n  throw new Error(\n    `Unable to resolve relative table cell indices for table, cell at ${e.row},${e.col} is not occupied`\n  );\n}\nfunction ct(e) {\n  const o = e.content.rows.length;\n  let t = 0;\n  return e.content.rows.forEach((n) => {\n    let r = 0;\n    n.cells.forEach((s) => {\n      r += ge(s);\n    }), t = Math.max(t, r);\n  }), { height: o, width: t };\n}\nfunction eo(e, o, t = Q(o)) {\n  var r;\n  const n = (r = t[e.row]) == null ? void 0 : r[e.col];\n  if (n)\n    return {\n      row: n.row,\n      col: n.col,\n      cell: n.cell\n    };\n}\nfunction Qe(e, o) {\n  var s;\n  const t = Q(e);\n  if (o < 0 || o >= t.length)\n    return [];\n  let n = 0;\n  for (let i = 0; i < o; i++) {\n    const a = (s = t[n]) == null ? void 0 : s[0];\n    if (!a)\n      return [];\n    n += a.rowspan;\n  }\n  const r = new Array(t[0].length).fill(!1).map((i, a) => eo(\n    { row: n, col: a },\n    e,\n    t\n  )).filter(\n    (i) => i !== void 0\n  );\n  return r.filter((i, a) => r.findIndex((c) => c.row === i.row && c.col === i.col) === a);\n}\nfunction et(e, o) {\n  var s;\n  const t = Q(e);\n  if (o < 0 || o >= t[0].length)\n    return [];\n  let n = 0;\n  for (let i = 0; i < o; i++) {\n    const a = (s = t[0]) == null ? void 0 : s[n];\n    if (!a)\n      return [];\n    n += a.colspan;\n  }\n  const r = new Array(t.length).fill(!1).map((i, a) => eo(\n    { row: a, col: n },\n    e,\n    t\n  )).filter(\n    (i) => i !== void 0\n  );\n  return r.filter((i, a) => r.findIndex((c) => c.row === i.row && c.col === i.col) === a);\n}\nfunction Kn(e, o, t, n = Q(e)) {\n  const { col: r } = re(\n    {\n      row: 0,\n      col: o\n    },\n    e,\n    n\n  ), { col: s } = re(\n    {\n      row: 0,\n      col: t\n    },\n    e,\n    n\n  );\n  return n.forEach((i) => {\n    const [a] = i.splice(r, 1);\n    i.splice(s, 0, a);\n  }), be(n);\n}\nfunction Xn(e, o, t, n = Q(e)) {\n  const { row: r } = re(\n    {\n      row: o,\n      col: 0\n    },\n    e,\n    n\n  ), { row: s } = re(\n    {\n      row: t,\n      col: 0\n    },\n    e,\n    n\n  ), [i] = n.splice(r, 1);\n  return n.splice(s, 0, i), be(n);\n}\nfunction tt(e) {\n  return e ? me(e) ? tt(e.content) : typeof e == \"string\" ? e.length === 0 : Array.isArray(e) ? e.every(\n    (o) => typeof o == \"string\" ? o.length === 0 : J(o) ? o.text.length === 0 : it(o) ? typeof o.content == \"string\" ? o.content.length === 0 : o.content.every((t) => t.text.length === 0) : !1\n  ) : !1 : !0;\n}\nfunction Jn(e, o, t = Q(e)) {\n  if (o === \"columns\") {\n    let s = 0;\n    for (let i = t[0].length - 1; i >= 0 && t.every(\n      (c) => tt(c[i].cell) && c[i].colspan === 1\n    ); i--)\n      s++;\n    for (let i = t.length - 1; i >= 0; i--) {\n      const a = Math.max(\n        t[i].length - s,\n        1\n      );\n      t[i] = t[i].slice(0, a);\n    }\n    return be(t);\n  }\n  let n = 0;\n  for (let s = t.length - 1; s >= 0 && t[s].every(\n    (a) => tt(a.cell) && a.rowspan === 1\n  ); s--)\n    n++;\n  const r = Math.min(n, t.length - 1);\n  return t.splice(t.length - r, r), be(t);\n}\nfunction Yn(e, o, t, n = Q(e)) {\n  const { width: r, height: s } = ct(e);\n  if (o === \"columns\")\n    n.forEach((i, a) => {\n      if (t >= 0)\n        for (let c = 0; c < t; c++)\n          i.push({\n            row: a,\n            col: Math.max(...i.map((l) => l.col)) + 1,\n            rowspan: 1,\n            colspan: 1,\n            cell: Je(\"\")\n          });\n      else\n        i.splice(r + t, -1 * t);\n    });\n  else if (t > 0)\n    for (let i = 0; i < t; i++) {\n      const a = new Array(r).fill(null).map((c, l) => ({\n        row: s + i,\n        col: l,\n        rowspan: 1,\n        colspan: 1,\n        cell: Je(\"\")\n      }));\n      n.push(a);\n    }\n  else t < 0 && n.splice(s + t, -1 * t);\n  return be(n);\n}\nfunction to(e, o, t) {\n  const n = Qe(e, t);\n  if (!n.some((c) => Ye(c.cell) > 1))\n    return !0;\n  let s = t, i = t;\n  return n.forEach((c) => {\n    const l = Ye(c.cell);\n    s = Math.max(s, c.row + l - 1), i = Math.min(i, c.row);\n  }), o < t ? t === s : t === i;\n}\nfunction oo(e, o, t) {\n  const n = et(e, t);\n  if (!n.some((c) => ge(c.cell) > 1))\n    return !0;\n  let s = t, i = t;\n  return n.forEach((c) => {\n    const l = ge(c.cell);\n    s = Math.max(s, c.col + l - 1), i = Math.min(i, c.col);\n  }), o < t ? t === s : t === i;\n}\nfunction Zn(e, o, t) {\n  const n = re(e, t), r = re(o, t);\n  return n.col === r.col;\n}\nfunction vt(e, o, t, n) {\n  const r = [];\n  for (const [i, a] of Object.entries(e.styles)) {\n    const c = t[i];\n    if (!c)\n      throw new Error(`style ${i} not found in styleSchema`);\n    if (c.propSchema === \"boolean\")\n      r.push(o.mark(i));\n    else if (c.propSchema === \"string\")\n      r.push(o.mark(i, { stringValue: a }));\n    else\n      throw new $(c.propSchema);\n  }\n  return !n || !o.nodes[n].spec.code ? e.text.split(/(\\n)/g).filter((i) => i.length > 0).map((i) => i === `\n` ? o.nodes.hardBreak.createChecked() : o.text(i, r)) : [o.text(e.text, r)];\n}\nfunction Qn(e, o, t) {\n  const n = o.marks.link.create({\n    href: e.href\n  });\n  return ot(e.content, o, t).map(\n    (r) => {\n      if (r.type.name === \"text\")\n        return r.mark([...r.marks, n]);\n      if (r.type.name === \"hardBreak\")\n        return r;\n      throw new Error(\"unexpected node type\");\n    }\n  );\n}\nfunction ot(e, o, t, n) {\n  const r = [];\n  if (typeof e == \"string\")\n    return r.push(\n      ...vt(\n        { text: e, styles: {} },\n        o,\n        t,\n        n\n      )\n    ), r;\n  for (const s of e)\n    r.push(\n      ...vt(s, o, t, n)\n    );\n  return r;\n}\nfunction O(e, o, t, n) {\n  const r = [];\n  for (const s of e)\n    typeof s == \"string\" ? r.push(\n      ...ot(s, o, t, n)\n    ) : it(s) ? r.push(...Qn(s, o, t)) : J(s) ? r.push(\n      ...ot([s], o, t, n)\n    ) : r.push(\n      no(s, o, t)\n    );\n  return r;\n}\nfunction Re(e, o, t) {\n  const n = [], r = new Array(e.headerRows ?? 0).fill(!0), s = new Array(e.headerCols ?? 0).fill(!0), i = e.columnWidths ?? [];\n  for (let a = 0; a < e.rows.length; a++) {\n    const c = e.rows[a], l = [], d = r[a];\n    for (let h = 0; h < c.cells.length; h++) {\n      const f = c.cells[h], m = s[h], g = void 0;\n      let b = null;\n      const k = re(\n        {\n          row: a,\n          col: h\n        },\n        { content: e }\n      );\n      let w = i[k.col] ? [i[k.col]] : null;\n      if (f) if (typeof f == \"string\")\n        b = o.text(f);\n      else if (me(f)) {\n        f.content && (b = O(f.content, o, t));\n        const T = ge(f);\n        T > 1 && (w = new Array(T).fill(!1).map((F, j) => i[k.col + j] ?? void 0));\n      } else\n        b = O(f, o, t);\n      const y = o.nodes[m || d ? \"tableHeader\" : \"tableCell\"].createChecked(\n        {\n          ...me(f) ? f.props : {},\n          colwidth: w\n        },\n        o.nodes.tableParagraph.createChecked(g, b)\n      );\n      l.push(y);\n    }\n    const p = o.nodes.tableRow.createChecked({}, l);\n    n.push(p);\n  }\n  return n;\n}\nfunction no(e, o, t) {\n  let n, r = e.type;\n  if (r === void 0 && (r = \"paragraph\"), !o.nodes[r])\n    throw new Error(`node type ${r} not found in schema`);\n  if (!e.content)\n    n = o.nodes[r].createChecked(e.props);\n  else if (typeof e.content == \"string\") {\n    const s = O(\n      [e.content],\n      o,\n      t,\n      r\n    );\n    n = o.nodes[r].createChecked(e.props, s);\n  } else if (Array.isArray(e.content)) {\n    const s = O(\n      e.content,\n      o,\n      t,\n      r\n    );\n    n = o.nodes[r].createChecked(e.props, s);\n  } else if (e.content.type === \"tableContent\") {\n    const s = Re(e.content, o, t);\n    n = o.nodes[r].createChecked(e.props, s);\n  } else\n    throw new $(e.content.type);\n  return n;\n}\nfunction ie(e, o, t) {\n  let n = e.id;\n  n === void 0 && (n = ve.options.generateID());\n  const r = [];\n  if (e.children)\n    for (const i of e.children)\n      r.push(ie(i, o, t));\n  if (!e.type || // can happen if block.type is not defined (this should create the default node)\n  o.nodes[e.type].isInGroup(\"blockContent\")) {\n    const i = no(\n      e,\n      o,\n      t\n    ), a = r.length > 0 ? o.nodes.blockGroup.createChecked({}, r) : void 0;\n    return o.nodes.blockContainer.createChecked(\n      {\n        id: n,\n        ...e.props\n      },\n      a ? [i, a] : i\n    );\n  } else {\n    if (o.nodes[e.type].isInGroup(\"bnBlock\"))\n      return o.nodes[e.type].createChecked(\n        {\n          id: n,\n          ...e.props\n        },\n        r\n      );\n    throw new Error(\n      `block type ${e.type} doesn't match blockContent or bnBlock group`\n    );\n  }\n}\nfunction D(e, o) {\n  let t, n;\n  if (o.firstChild.descendants((r, s) => t ? !1 : !r.type.isInGroup(\"bnBlock\") || r.attrs.id !== e ? !0 : (t = r, n = s + 1, !1)), !(t === void 0 || n === void 0))\n    return {\n      node: t,\n      posBeforeNode: n\n    };\n}\nconst x = (e, o, t) => ({\n  state: n,\n  dispatch: r\n}) => {\n  const s = Ce(\n    n.doc.resolve(o)\n  );\n  if (r) {\n    const i = n.schema.nodes[s.blockNoteType], a = n.schema.nodes[t.type || s.blockNoteType], c = a.isInGroup(\"bnBlock\") ? a : n.schema.nodes.blockContainer;\n    if (s.isBlockContainer && a.isInGroup(\"blockContent\"))\n      Et(t, n, e, s), er(\n        t,\n        n,\n        e,\n        i,\n        a,\n        s\n      );\n    else if (!s.isBlockContainer && a.isInGroup(\"bnBlock\"))\n      Et(t, n, e, s);\n    else {\n      const l = E(\n        s.bnBlock.node,\n        e.schema.blockSchema,\n        e.schema.inlineContentSchema,\n        e.schema.styleSchema,\n        e.blockCache\n      );\n      return n.tr.replaceWith(\n        s.bnBlock.beforePos,\n        s.bnBlock.afterPos,\n        ie(\n          {\n            children: l.children,\n            // if no children are passed in, use existing children\n            ...t\n          },\n          n.schema,\n          e.schema.styleSchema\n        )\n      ), !0;\n    }\n    n.tr.setNodeMarkup(s.bnBlock.beforePos, c, {\n      ...s.bnBlock.node.attrs,\n      ...t.props\n    });\n  }\n  return !0;\n};\nfunction er(e, o, t, n, r, s) {\n  let i = \"keep\";\n  if (e.content)\n    if (typeof e.content == \"string\")\n      i = O(\n        [e.content],\n        o.schema,\n        t.schema.styleSchema,\n        r.name\n      );\n    else if (Array.isArray(e.content))\n      i = O(\n        e.content,\n        o.schema,\n        t.schema.styleSchema,\n        r.name\n      );\n    else if (e.content.type === \"tableContent\")\n      i = Re(\n        e.content,\n        o.schema,\n        t.schema.styleSchema\n      );\n    else\n      throw new $(e.content.type);\n  else\n    n.spec.content === \"\" || r.spec.content !== n.spec.content && (i = []);\n  i === \"keep\" ? o.tr.setNodeMarkup(\n    s.blockContent.beforePos,\n    e.type === void 0 ? void 0 : o.schema.nodes[e.type],\n    {\n      ...s.blockContent.node.attrs,\n      ...e.props\n    }\n  ) : o.tr.replaceWith(\n    s.blockContent.beforePos,\n    s.blockContent.afterPos,\n    r.createChecked(\n      {\n        ...s.blockContent.node.attrs,\n        ...e.props\n      },\n      i\n    )\n  );\n}\nfunction Et(e, o, t, n) {\n  if (e.children !== void 0 && e.children.length > 0) {\n    const r = e.children.map((s) => ie(s, o.schema, t.schema.styleSchema));\n    if (n.childContainer)\n      o.tr.step(\n        new prosemirror_transform__WEBPACK_IMPORTED_MODULE_19__.ReplaceStep(\n          n.childContainer.beforePos + 1,\n          n.childContainer.afterPos - 1,\n          new prosemirror_model__WEBPACK_IMPORTED_MODULE_18__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_18__.Fragment.from(r), 0, 0)\n        )\n      );\n    else {\n      if (!n.isBlockContainer)\n        throw new Error(\"impossible\");\n      o.tr.insert(\n        n.blockContent.afterPos,\n        o.schema.nodes.blockGroup.createChecked({}, r)\n      );\n    }\n  }\n}\nfunction tr(e, o, t) {\n  const n = e._tiptapEditor, r = typeof o == \"string\" ? o : o.id, s = D(r, n.state.doc);\n  if (!s)\n    throw new Error(`Block with ID ${r} not found`);\n  n.commands.command(({ state: a, dispatch: c }) => (x(\n    e,\n    s.posBeforeNode,\n    t\n  )({ state: a, dispatch: c }), !0));\n  const i = n.state.doc.resolve(s.posBeforeNode + 1).node();\n  return E(\n    i,\n    e.schema.blockSchema,\n    e.schema.inlineContentSchema,\n    e.schema.styleSchema,\n    e.blockCache\n  );\n}\nfunction ro(e) {\n  const o = Array.from(e.classList).filter(\n    (t) => !t.startsWith(\"bn-\")\n  ) || [];\n  o.length > 0 ? e.className = o.join(\" \") : e.removeAttribute(\"class\");\n}\nfunction so(e, o, t, n) {\n  let r;\n  if (o)\n    if (typeof o == \"string\")\n      r = O(\n        [o],\n        e.pmSchema,\n        e.schema.styleSchema\n      );\n    else if (Array.isArray(o))\n      r = O(\n        o,\n        e.pmSchema,\n        e.schema.styleSchema\n      );\n    else if (o.type === \"tableContent\")\n      r = Re(\n        o,\n        e.pmSchema,\n        e.schema.styleSchema\n      );\n    else\n      throw new $(o.type);\n  else throw new Error(\"blockContent is required\");\n  const s = t.serializeFragment(prosemirror_model__WEBPACK_IMPORTED_MODULE_18__.Fragment.from(r), n);\n  return s.nodeType === 1 && ro(s), s;\n}\nfunction or(e, o, t, n, r, s, i) {\n  var g, b, k, w, y, T, F, j;\n  const a = (i == null ? void 0 : i.document) ?? document, c = o.pmSchema.nodes.blockContainer;\n  let l = t.props;\n  if (!t.props) {\n    l = {};\n    for (const [B, v] of Object.entries(\n      o.schema.blockSchema[t.type].propSchema\n    ))\n      v.default !== void 0 && (l[B] = v.default);\n  }\n  const d = (b = (g = c.spec) == null ? void 0 : g.toDOM) == null ? void 0 : b.call(\n    g,\n    c.create({\n      id: t.id,\n      ...l\n    })\n  ), p = Array.from(d.dom.attributes), h = o.blockImplementations[t.type].implementation.toExternalHTML({ ...t, props: l }, o), f = a.createDocumentFragment();\n  if (h.dom.classList.contains(\"bn-block-content\")) {\n    const B = [...p, ...Array.from(h.dom.attributes)].filter(\n      (v) => v.name.startsWith(\"data\") && v.name !== \"data-content-type\" && v.name !== \"data-file-block\" && v.name !== \"data-node-view-wrapper\" && v.name !== \"data-node-type\" && v.name !== \"data-id\" && v.name !== \"data-index\" && v.name !== \"data-editable\"\n    );\n    for (const v of B)\n      h.dom.firstChild.setAttribute(v.name, v.value);\n    ro(h.dom.firstChild), f.append(...Array.from(h.dom.childNodes));\n  } else\n    f.append(h.dom);\n  if (h.contentDOM && t.content) {\n    const B = so(\n      o,\n      t.content,\n      // TODO\n      n,\n      i\n    );\n    h.contentDOM.appendChild(B);\n  }\n  let m;\n  if (r.has(t.type) ? m = \"OL\" : s.has(t.type) && (m = \"UL\"), m) {\n    if (((k = e.lastChild) == null ? void 0 : k.nodeName) !== m) {\n      const v = a.createElement(m);\n      m === \"OL\" && (l != null && l.start) && (l == null ? void 0 : l.start) !== 1 && v.setAttribute(\"start\", l.start + \"\"), e.append(v);\n    }\n    const B = a.createElement(\"li\");\n    B.append(f), e.lastChild.appendChild(B);\n  } else\n    e.append(f);\n  if (t.children && t.children.length > 0) {\n    const B = a.createDocumentFragment();\n    if (io(\n      B,\n      o,\n      t.children,\n      n,\n      r,\n      s,\n      i\n    ), ((w = e.lastChild) == null ? void 0 : w.nodeName) === \"UL\" || ((y = e.lastChild) == null ? void 0 : y.nodeName) === \"OL\")\n      for (; ((T = B.firstChild) == null ? void 0 : T.nodeName) === \"UL\" || ((F = B.firstChild) == null ? void 0 : F.nodeName) === \"OL\"; )\n        e.lastChild.lastChild.appendChild(B.firstChild);\n    o.pmSchema.nodes[t.type].isInGroup(\"blockContent\") ? e.append(B) : (j = h.contentDOM) == null || j.append(B);\n  }\n}\nconst io = (e, o, t, n, r, s, i) => {\n  for (const a of t)\n    or(\n      e,\n      o,\n      a,\n      n,\n      r,\n      s,\n      i\n    );\n}, nr = (e, o, t, n, r, s) => {\n  const a = ((s == null ? void 0 : s.document) ?? document).createDocumentFragment();\n  return io(\n    a,\n    e,\n    o,\n    t,\n    n,\n    r,\n    s\n  ), a;\n}, Ve = (e, o) => {\n  const t = prosemirror_model__WEBPACK_IMPORTED_MODULE_18__.DOMSerializer.fromSchema(e);\n  return {\n    exportBlocks: (n, r) => {\n      const s = nr(\n        o,\n        n,\n        t,\n        /* @__PURE__ */ new Set([\"numberedListItem\"]),\n        /* @__PURE__ */ new Set([\"bulletListItem\", \"checkListItem\"]),\n        r\n      ), i = document.createElement(\"div\");\n      return i.append(s), i.innerHTML;\n    },\n    exportInlineContent: (n, r) => {\n      const s = so(\n        o,\n        n,\n        t,\n        r\n      ), i = document.createElement(\"div\");\n      return i.append(s.cloneNode(!0)), i.innerHTML;\n    }\n  };\n};\nfunction rr(e, o, t, n, r) {\n  let s;\n  if (o)\n    if (typeof o == \"string\")\n      s = O(\n        [o],\n        e.pmSchema,\n        e.schema.styleSchema,\n        n\n      );\n    else if (Array.isArray(o))\n      s = O(\n        o,\n        e.pmSchema,\n        e.schema.styleSchema,\n        n\n      );\n    else if (o.type === \"tableContent\")\n      s = Re(\n        o,\n        e.pmSchema,\n        e.schema.styleSchema\n      );\n    else\n      throw new $(o.type);\n  else throw new Error(\"blockContent is required\");\n  return t.serializeFragment(prosemirror_model__WEBPACK_IMPORTED_MODULE_18__.Fragment.from(s), r);\n}\nfunction sr(e, o, t, n, r) {\n  var p, h, f, m, g;\n  const s = e.pmSchema.nodes.blockContainer;\n  let i = o.props;\n  if (!o.props) {\n    i = {};\n    for (const [b, k] of Object.entries(\n      e.schema.blockSchema[o.type].propSchema\n    ))\n      k.default !== void 0 && (i[b] = k.default);\n  }\n  const c = e.blockImplementations[o.type].implementation.toInternalHTML({ ...o, props: i }, e);\n  if (o.type === \"numberedListItem\" && c.dom.setAttribute(\"data-index\", n.toString()), c.contentDOM && o.content) {\n    const b = rr(\n      e,\n      o.content,\n      // TODO\n      t,\n      o.type,\n      r\n    );\n    c.contentDOM.appendChild(b);\n  }\n  if (e.pmSchema.nodes[o.type].isInGroup(\"bnBlock\")) {\n    if (o.children && o.children.length > 0) {\n      const b = ao(\n        e,\n        o.children,\n        t,\n        r\n      );\n      (p = c.contentDOM) == null || p.append(b);\n    }\n    return c.dom;\n  }\n  const d = (f = (h = s.spec) == null ? void 0 : h.toDOM) == null ? void 0 : f.call(\n    h,\n    s.create({\n      id: o.id,\n      ...i\n    })\n  );\n  return (m = d.contentDOM) == null || m.appendChild(c.dom), o.children && o.children.length > 0 && ((g = d.contentDOM) == null || g.appendChild(\n    co(e, o.children, t, r)\n  )), d.dom;\n}\nfunction ao(e, o, t, n) {\n  const s = ((n == null ? void 0 : n.document) ?? document).createDocumentFragment();\n  let i = 0;\n  for (const a of o) {\n    a.type === \"numberedListItem\" ? i++ : i = 0;\n    const c = sr(\n      e,\n      a,\n      t,\n      i,\n      n\n    );\n    s.appendChild(c);\n  }\n  return s;\n}\nconst co = (e, o, t, n) => {\n  var a;\n  const r = e.pmSchema.nodes.blockGroup, s = r.spec.toDOM(r.create({})), i = ao(e, o, t, n);\n  return (a = s.contentDOM) == null || a.appendChild(i), s.dom;\n}, ir = (e, o) => {\n  const t = prosemirror_model__WEBPACK_IMPORTED_MODULE_18__.DOMSerializer.fromSchema(e);\n  return {\n    serializeBlocks: (n, r) => co(o, n, t, r).outerHTML\n  };\n}, Ue = (e, o) => {\n  const t = e.querySelector(\n    o\n  );\n  if (!t)\n    return;\n  const n = e.querySelector(\"figcaption\"), r = (n == null ? void 0 : n.textContent) ?? void 0;\n  return { targetElement: t, caption: r };\n}, ar = (e, o, t, n) => {\n  const r = document.createElement(\"div\");\n  r.className = \"bn-add-file-button\";\n  const s = document.createElement(\"div\");\n  s.className = \"bn-add-file-button-icon\", n ? s.appendChild(n) : s.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\"><path d=\"M3 8L9.00319 2H19.9978C20.5513 2 21 2.45531 21 2.9918V21.0082C21 21.556 20.5551 22 20.0066 22H3.9934C3.44476 22 3 21.5501 3 20.9932V8ZM10 4V9H5V20H19V4H10Z\"></path></svg>', r.appendChild(s);\n  const i = document.createElement(\"p\");\n  i.className = \"bn-add-file-button-text\", i.innerHTML = t || o.dictionary.file_blocks.file.add_button_text, r.appendChild(i);\n  const a = (l) => {\n    l.preventDefault();\n  }, c = () => {\n    o.dispatch(\n      o._tiptapEditor.state.tr.setMeta(o.filePanel.plugin, {\n        block: e\n      })\n    );\n  };\n  return r.addEventListener(\n    \"mousedown\",\n    a,\n    !0\n  ), r.addEventListener(\"click\", c, !0), {\n    dom: r,\n    destroy: () => {\n      r.removeEventListener(\n        \"mousedown\",\n        a,\n        !0\n      ), r.removeEventListener(\n        \"click\",\n        c,\n        !0\n      );\n    }\n  };\n}, cr = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\"><path d=\"M3 8L9.00319 2H19.9978C20.5513 2 21 2.45531 21 2.9918V21.0082C21 21.556 20.5551 22 20.0066 22H3.9934C3.44476 22 3 21.5501 3 20.9932V8ZM10 4V9H5V20H19V4H10Z\"></path></svg>', lr = (e) => {\n  const o = document.createElement(\"div\");\n  o.className = \"bn-file-name-with-icon\";\n  const t = document.createElement(\"div\");\n  t.className = \"bn-file-icon\", t.innerHTML = cr, o.appendChild(t);\n  const n = document.createElement(\"p\");\n  return n.className = \"bn-file-name\", n.textContent = e.props.name, o.appendChild(n), {\n    dom: o\n  };\n}, lt = (e, o, t, n, r) => {\n  const s = document.createElement(\"div\");\n  if (s.className = \"bn-file-block-content-wrapper\", e.props.url === \"\") {\n    const a = ar(\n      e,\n      o,\n      n,\n      r\n    );\n    s.appendChild(a.dom);\n    const c = o.onUploadStart((l) => {\n      if (l === e.id) {\n        s.removeChild(a.dom);\n        const d = document.createElement(\"div\");\n        d.className = \"bn-file-loading-preview\", d.textContent = \"Loading...\", s.appendChild(d);\n      }\n    });\n    return {\n      dom: s,\n      destroy: () => {\n        c(), a.destroy();\n      }\n    };\n  }\n  const i = { dom: s };\n  if (e.props.showPreview === !1 || !t) {\n    const a = lr(e);\n    s.appendChild(a.dom), i.destroy = () => {\n      var c;\n      (c = a.destroy) == null || c.call(a);\n    };\n  } else\n    s.appendChild(t.dom);\n  if (e.props.caption) {\n    const a = document.createElement(\"p\");\n    a.className = \"bn-file-caption\", a.textContent = e.props.caption, s.appendChild(a);\n  }\n  return i;\n}, dt = (e, o) => {\n  const t = document.createElement(\"figure\"), n = document.createElement(\"figcaption\");\n  return n.textContent = o, t.appendChild(e), t.appendChild(n), { dom: t };\n}, $e = (e, o) => {\n  const t = document.createElement(\"div\"), n = document.createElement(\"p\");\n  return n.textContent = o, t.appendChild(e), t.appendChild(n), {\n    dom: t\n  };\n}, St = (e) => ({ url: e.src || void 0 }), dr = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\"><path d=\"M2 16.0001H5.88889L11.1834 20.3319C11.2727 20.405 11.3846 20.4449 11.5 20.4449C11.7761 20.4449 12 20.2211 12 19.9449V4.05519C12 3.93977 11.9601 3.8279 11.887 3.73857C11.7121 3.52485 11.3971 3.49335 11.1834 3.66821L5.88889 8.00007H2C1.44772 8.00007 1 8.44778 1 9.00007V15.0001C1 15.5524 1.44772 16.0001 2 16.0001ZM23 12C23 15.292 21.5539 18.2463 19.2622 20.2622L17.8445 18.8444C19.7758 17.1937 21 14.7398 21 12C21 9.26016 19.7758 6.80629 17.8445 5.15557L19.2622 3.73779C21.5539 5.75368 23 8.70795 23 12ZM18 12C18 10.0883 17.106 8.38548 15.7133 7.28673L14.2842 8.71584C15.3213 9.43855 16 10.64 16 12C16 13.36 15.3213 14.5614 14.2842 15.2841L15.7133 16.7132C17.106 15.6145 18 13.9116 18 12Z\"></path></svg>', pr = {\n  backgroundColor: S.backgroundColor,\n  // File name.\n  name: {\n    default: \"\"\n  },\n  // File url.\n  url: {\n    default: \"\"\n  },\n  // File caption.\n  caption: {\n    default: \"\"\n  },\n  showPreview: {\n    default: !0\n  }\n}, ur = {\n  type: \"audio\",\n  propSchema: pr,\n  content: \"none\",\n  isFileBlock: !0,\n  fileBlockAccept: [\"audio/*\"]\n}, hr = (e, o) => {\n  const t = document.createElement(\"div\");\n  t.innerHTML = dr;\n  const n = document.createElement(\"audio\");\n  return n.className = \"bn-audio\", o.resolveFileUrl ? o.resolveFileUrl(e.props.url).then((r) => {\n    n.src = r;\n  }) : n.src = e.props.url, n.controls = !0, n.contentEditable = \"false\", n.draggable = !1, lt(\n    e,\n    o,\n    { dom: n },\n    o.dictionary.file_blocks.audio.add_button_text,\n    t.firstElementChild\n  );\n}, fr = (e) => {\n  if (e.tagName === \"AUDIO\")\n    return St(e);\n  if (e.tagName === \"FIGURE\") {\n    const o = Ue(e, \"audio\");\n    if (!o)\n      return;\n    const { targetElement: t, caption: n } = o;\n    return {\n      ...St(t),\n      caption: n\n    };\n  }\n}, mr = (e) => {\n  if (!e.props.url) {\n    const t = document.createElement(\"p\");\n    return t.textContent = \"Add audio\", {\n      dom: t\n    };\n  }\n  let o;\n  return e.props.showPreview ? (o = document.createElement(\"audio\"), o.src = e.props.url) : (o = document.createElement(\"a\"), o.href = e.props.url, o.textContent = e.props.name || e.props.url), e.props.caption ? e.props.showPreview ? dt(o, e.props.caption) : $e(o, e.props.caption) : {\n    dom: o\n  };\n}, gr = Se(ur, {\n  render: hr,\n  parse: fr,\n  toExternalHTML: mr\n}), Bt = Symbol.for(\"blocknote.shikiParser\"), We = Symbol.for(\n  \"blocknote.shikiHighlighterPromise\"\n), br = {\n  language: {\n    default: \"text\"\n  }\n}, kr = W({\n  name: \"codeBlock\",\n  content: \"inline*\",\n  group: \"blockContent\",\n  marks: \"\",\n  code: !0,\n  defining: !0,\n  addOptions() {\n    return {\n      defaultLanguage: \"text\",\n      indentLineWithTab: !0,\n      supportedLanguages: {}\n    };\n  },\n  addAttributes() {\n    const e = this.options;\n    return {\n      language: {\n        default: e.editor.settings.codeBlock.defaultLanguage,\n        parseHTML: (o) => {\n          let t = o, n = null;\n          (t == null ? void 0 : t.tagName) === \"DIV\" && (t == null ? void 0 : t.dataset.contentType) === \"codeBlock\" && (t = t.children[0]), (t == null ? void 0 : t.tagName) === \"PRE\" && (t = t == null ? void 0 : t.children[0]);\n          const r = t == null ? void 0 : t.getAttribute(\"data-language\");\n          if (r)\n            n = r.toLowerCase();\n          else {\n            const i = [...(t == null ? void 0 : t.className.split(\" \")) || []].filter((a) => a.startsWith(\"language-\")).map((a) => a.replace(\"language-\", \"\"));\n            i.length > 0 && (n = i[0].toLowerCase());\n          }\n          return n ? Tt(e.editor.settings.codeBlock, n) : null;\n        },\n        renderHTML: (o) => o.language ? {\n          class: `language-${o.language}`,\n          \"data-language\": o.language\n        } : {}\n      }\n    };\n  },\n  parseHTML() {\n    return [\n      {\n        tag: \"div[data-content-type=\" + this.name + \"]\",\n        contentElement: \"code\"\n      },\n      {\n        tag: \"pre\",\n        contentElement: \"code\",\n        preserveWhitespace: \"full\"\n      }\n    ];\n  },\n  renderHTML({ HTMLAttributes: e }) {\n    var r, s;\n    const o = document.createElement(\"pre\"), { dom: t, contentDOM: n } = z(\n      this.name,\n      \"code\",\n      ((r = this.options.domAttributes) == null ? void 0 : r.blockContent) || {},\n      {\n        ...((s = this.options.domAttributes) == null ? void 0 : s.inlineContent) || {},\n        ...e\n      }\n    );\n    return t.removeChild(n), t.appendChild(o), o.appendChild(n), {\n      dom: t,\n      contentDOM: n\n    };\n  },\n  addNodeView() {\n    const e = this.options;\n    return ({ editor: o, node: t, getPos: n, HTMLAttributes: r }) => {\n      var p, h;\n      const s = document.createElement(\"pre\"), i = document.createElement(\"select\"), a = document.createElement(\"div\"), { dom: c, contentDOM: l } = z(\n        this.name,\n        \"code\",\n        {\n          ...((p = this.options.domAttributes) == null ? void 0 : p.blockContent) || {},\n          ...r\n        },\n        ((h = this.options.domAttributes) == null ? void 0 : h.inlineContent) || {}\n      ), d = (f) => {\n        const m = f.target.value;\n        o.commands.command(({ tr: g }) => (g.setNodeAttribute(n(), \"language\", m), !0));\n      };\n      return Object.entries(\n        e.editor.settings.codeBlock.supportedLanguages\n      ).forEach(([f, { name: m }]) => {\n        const g = document.createElement(\"option\");\n        g.value = f, g.text = m, i.appendChild(g);\n      }), a.contentEditable = \"false\", i.value = t.attrs.language || e.editor.settings.codeBlock.defaultLanguage, c.removeChild(l), c.appendChild(a), c.appendChild(s), s.appendChild(l), a.appendChild(i), i.addEventListener(\"change\", d), {\n        dom: c,\n        contentDOM: l,\n        update: (f) => f.type === this.type,\n        destroy: () => {\n          i.removeEventListener(\"change\", d);\n        }\n      };\n    };\n  },\n  addProseMirrorPlugins() {\n    const e = this.options, o = globalThis;\n    let t, n, r = !1;\n    return [(0,prosemirror_highlight__WEBPACK_IMPORTED_MODULE_20__.createHighlightPlugin)({\n      parser: (a) => {\n        if (!e.editor.settings.codeBlock.createHighlighter)\n          return  true && !r && (console.log(\n            \"For syntax highlighting of code blocks, you must provide a highlighter function\"\n          ), r = !0), [];\n        if (!t)\n          return o[We] = o[We] || e.editor.settings.codeBlock.createHighlighter(), o[We].then(\n            (l) => {\n              t = l;\n            }\n          );\n        const c = a.language;\n        return c && c !== \"text\" && !t.getLoadedLanguages().includes(c) && c in e.editor.settings.codeBlock.supportedLanguages ? t.loadLanguage(c) : (n || (n = o[Bt] || (0,prosemirror_highlight_shiki__WEBPACK_IMPORTED_MODULE_21__.createParser)(t), o[Bt] = n), n(a));\n      },\n      languageExtractor: (a) => a.attrs.language,\n      nodeTypes: [this.name]\n    })];\n  },\n  addInputRules() {\n    const e = this.options;\n    return [\n      new _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.InputRule({\n        find: /^```(.*?)\\s$/,\n        handler: ({ state: o, range: t, match: n }) => {\n          const r = o.doc.resolve(t.from), s = n[1].trim(), i = {\n            language: Tt(\n              e.editor.settings.codeBlock,\n              s\n            )\n          };\n          if (!r.node(-1).canReplaceWith(\n            r.index(-1),\n            r.indexAfter(-1),\n            this.type\n          ))\n            return null;\n          o.tr.delete(t.from, t.to).setBlockType(t.from, t.from, this.type, i).setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.TextSelection.create(o.tr.doc, t.from));\n        }\n      })\n    ];\n  },\n  addKeyboardShortcuts() {\n    return {\n      Delete: ({ editor: e }) => {\n        const { selection: o } = e.state, { $from: t } = o;\n        if (e.isActive(this.name) && !t.parent.textContent && (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_15__.isTextSelection)(o)) {\n          const n = t.pos - t.parentOffset - 2;\n          return e.chain().setNodeSelection(n).deleteSelection().run(), !0;\n        }\n        return !1;\n      },\n      Tab: ({ editor: e }) => this.options.indentLineWithTab && e.isActive(this.name) ? (e.commands.insertContent(\"  \"), !0) : !1,\n      Enter: ({ editor: e }) => {\n        const { $from: o } = e.state.selection;\n        if (!e.isActive(this.name))\n          return !1;\n        const t = o.parentOffset === o.parent.nodeSize - 2, n = o.parent.textContent.endsWith(`\n\n`);\n        return !t || !n ? (e.commands.insertContent(`\n`), !0) : e.chain().command(({ tr: r }) => (r.delete(o.pos - 2, o.pos), !0)).exitCode().run();\n      },\n      \"Shift-Enter\": ({ editor: e }) => {\n        const { $from: o } = e.state.selection;\n        return e.isActive(this.name) ? (e.chain().insertContentAt(\n          o.pos - o.parentOffset + o.parent.nodeSize,\n          {\n            type: \"paragraph\"\n          }\n        ).run(), !0) : !1;\n      }\n    };\n  }\n}), wr = Z(\n  kr,\n  br\n);\nfunction Tt(e, o) {\n  var t;\n  return ((t = Object.entries(e.supportedLanguages).find(([n, { aliases: r }]) => (r == null ? void 0 : r.includes(o)) || n === o)) == null ? void 0 : t[0]) || o;\n}\nconst xt = (e) => ({ url: e.src || void 0 }), yr = {\n  backgroundColor: S.backgroundColor,\n  // File name.\n  name: {\n    default: \"\"\n  },\n  // File url.\n  url: {\n    default: \"\"\n  },\n  // File caption.\n  caption: {\n    default: \"\"\n  }\n}, Cr = {\n  type: \"file\",\n  propSchema: yr,\n  content: \"none\",\n  isFileBlock: !0\n}, vr = (e, o) => lt(e, o), Er = (e) => {\n  if (e.tagName === \"EMBED\")\n    return xt(e);\n  if (e.tagName === \"FIGURE\") {\n    const o = Ue(e, \"embed\");\n    if (!o)\n      return;\n    const { targetElement: t, caption: n } = o;\n    return {\n      ...xt(t),\n      caption: n\n    };\n  }\n}, Sr = (e) => {\n  if (!e.props.url) {\n    const t = document.createElement(\"p\");\n    return t.textContent = \"Add file\", {\n      dom: t\n    };\n  }\n  const o = document.createElement(\"a\");\n  return o.href = e.props.url, o.textContent = e.props.name || e.props.url, e.props.caption ? $e(o, e.props.caption) : {\n    dom: o\n  };\n}, Br = Se(Cr, {\n  render: vr,\n  parse: Er,\n  toExternalHTML: Sr\n}), lo = (e, o, t, n, r, s) => {\n  const { dom: i, destroy: a } = lt(\n    e,\n    o,\n    t,\n    r,\n    s\n  ), c = i;\n  e.props.url && e.props.showPreview && (c.style.width = `${e.props.previewWidth}px`);\n  const l = document.createElement(\"div\");\n  l.className = \"bn-resize-handle\", l.style.left = \"4px\";\n  const d = document.createElement(\"div\");\n  d.className = \"bn-resize-handle\", d.style.right = \"4px\";\n  let p, h = e.props.previewWidth;\n  const f = (y) => {\n    if (!p) {\n      !o.isEditable && n.contains(l) && n.contains(d) && (n.removeChild(l), n.removeChild(d));\n      return;\n    }\n    let T;\n    e.props.textAlignment === \"center\" ? p.handleUsed === \"left\" ? T = p.initialWidth + (p.initialClientX - y.clientX) * 2 : T = p.initialWidth + (y.clientX - p.initialClientX) * 2 : p.handleUsed === \"left\" ? T = p.initialWidth + p.initialClientX - y.clientX : T = p.initialWidth + y.clientX - p.initialClientX, h = Math.max(T, 64), c.style.width = `${h}px`;\n  }, m = (y) => {\n    (!y.target || !c.contains(y.target) || !o.isEditable) && n.contains(l) && n.contains(d) && (n.removeChild(l), n.removeChild(d)), p && (p = void 0, o.updateBlock(e, {\n      props: {\n        previewWidth: h\n      }\n    }));\n  }, g = () => {\n    o.isEditable && (n.appendChild(l), n.appendChild(d));\n  }, b = (y) => {\n    y.relatedTarget === l || y.relatedTarget === d || p || o.isEditable && n.contains(l) && n.contains(d) && (n.removeChild(l), n.removeChild(d));\n  }, k = (y) => {\n    y.preventDefault(), p = {\n      handleUsed: \"left\",\n      initialWidth: c.clientWidth,\n      initialClientX: y.clientX\n    };\n  }, w = (y) => {\n    y.preventDefault(), p = {\n      handleUsed: \"right\",\n      initialWidth: c.clientWidth,\n      initialClientX: y.clientX\n    };\n  };\n  return window.addEventListener(\"mousemove\", f), window.addEventListener(\"mouseup\", m), c.addEventListener(\"mouseenter\", g), c.addEventListener(\"mouseleave\", b), l.addEventListener(\n    \"mousedown\",\n    k\n  ), d.addEventListener(\n    \"mousedown\",\n    w\n  ), {\n    dom: c,\n    destroy: () => {\n      a == null || a(), window.removeEventListener(\"mousemove\", f), window.removeEventListener(\"mouseup\", m), c.removeEventListener(\"mouseenter\", g), c.removeEventListener(\"mouseleave\", b), l.removeEventListener(\n        \"mousedown\",\n        k\n      ), d.removeEventListener(\n        \"mousedown\",\n        w\n      );\n    }\n  };\n}, ic = async (e) => {\n  const o = new FormData();\n  return o.append(\"file\", e), (await (await fetch(\"https://tmpfiles.org/api/v1/upload\", {\n    method: \"POST\",\n    body: o\n  })).json()).data.url.replace(\n    \"tmpfiles.org/\",\n    \"tmpfiles.org/dl/\"\n  );\n}, Mt = (e) => {\n  const o = e.src || void 0, t = e.width || void 0;\n  return { url: o, previewWidth: t };\n}, Tr = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\"><path d=\"M5 11.1005L7 9.1005L12.5 14.6005L16 11.1005L19 14.1005V5H5V11.1005ZM4 3H20C20.5523 3 21 3.44772 21 4V20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3ZM15.5 10C14.6716 10 14 9.32843 14 8.5C14 7.67157 14.6716 7 15.5 7C16.3284 7 17 7.67157 17 8.5C17 9.32843 16.3284 10 15.5 10Z\"></path></svg>', xr = {\n  textAlignment: S.textAlignment,\n  backgroundColor: S.backgroundColor,\n  // File name.\n  name: {\n    default: \"\"\n  },\n  // File url.\n  url: {\n    default: \"\"\n  },\n  // File caption.\n  caption: {\n    default: \"\"\n  },\n  showPreview: {\n    default: !0\n  },\n  // File preview width in px.\n  previewWidth: {\n    default: 512\n  }\n}, Mr = {\n  type: \"image\",\n  propSchema: xr,\n  content: \"none\",\n  isFileBlock: !0,\n  fileBlockAccept: [\"image/*\"]\n}, Pr = (e, o) => {\n  const t = document.createElement(\"div\");\n  t.innerHTML = Tr;\n  const n = document.createElement(\"div\");\n  n.className = \"bn-visual-media-wrapper\";\n  const r = document.createElement(\"img\");\n  return r.className = \"bn-visual-media\", o.resolveFileUrl ? o.resolveFileUrl(e.props.url).then((s) => {\n    r.src = s;\n  }) : r.src = e.props.url, r.alt = e.props.name || e.props.caption || \"BlockNote image\", r.contentEditable = \"false\", r.draggable = !1, n.appendChild(r), lo(\n    e,\n    o,\n    { dom: n },\n    n,\n    o.dictionary.file_blocks.image.add_button_text,\n    t.firstElementChild\n  );\n}, Ir = (e) => {\n  if (e.tagName === \"IMG\")\n    return Mt(e);\n  if (e.tagName === \"FIGURE\") {\n    const o = Ue(e, \"img\");\n    if (!o)\n      return;\n    const { targetElement: t, caption: n } = o;\n    return {\n      ...Mt(t),\n      caption: n\n    };\n  }\n}, Lr = (e) => {\n  if (!e.props.url) {\n    const t = document.createElement(\"p\");\n    return t.textContent = \"Add image\", {\n      dom: t\n    };\n  }\n  let o;\n  return e.props.showPreview ? (o = document.createElement(\"img\"), o.src = e.props.url, o.alt = e.props.name || e.props.caption || \"BlockNote image\", o.width = e.props.previewWidth) : (o = document.createElement(\"a\"), o.href = e.props.url, o.textContent = e.props.name || e.props.url), e.props.caption ? e.props.showPreview ? dt(o, e.props.caption) : $e(o, e.props.caption) : {\n    dom: o\n  };\n}, Ar = Se(Mr, {\n  render: Pr,\n  parse: Ir,\n  toExternalHTML: Lr\n}), Nr = {\n  type: \"pageBreak\",\n  propSchema: {},\n  content: \"none\",\n  isFileBlock: !1,\n  isSelectable: !1\n}, Hr = () => {\n  const e = document.createElement(\"div\");\n  return e.className = \"bn-page-break\", e.setAttribute(\"data-page-break\", \"\"), {\n    dom: e\n  };\n}, Dr = (e) => {\n  if (e.tagName === \"DIV\" && e.hasAttribute(\"data-page-break\"))\n    return {\n      type: \"pageBreak\"\n    };\n}, Or = () => {\n  const e = document.createElement(\"div\");\n  return e.setAttribute(\"data-page-break\", \"\"), {\n    dom: e\n  };\n}, _r = Se(Nr, {\n  render: Hr,\n  parse: Dr,\n  toExternalHTML: Or\n}), Rr = _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.Mark.create({\n  name: \"backgroundColor\",\n  addAttributes() {\n    return {\n      stringValue: {\n        default: void 0,\n        parseHTML: (e) => e.getAttribute(\"data-background-color\"),\n        renderHTML: (e) => ({\n          \"data-background-color\": e.stringValue\n        })\n      }\n    };\n  },\n  parseHTML() {\n    return [\n      {\n        tag: \"span\",\n        getAttrs: (e) => typeof e == \"string\" ? !1 : e.hasAttribute(\"data-background-color\") ? {\n          stringValue: e.getAttribute(\"data-background-color\")\n        } : !1\n      }\n    ];\n  },\n  renderHTML({ HTMLAttributes: e }) {\n    return [\"span\", e, 0];\n  }\n}), Vr = ee(\n  Rr,\n  \"string\"\n), Ur = _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.Mark.create({\n  name: \"textColor\",\n  addAttributes() {\n    return {\n      stringValue: {\n        default: void 0,\n        parseHTML: (e) => e.getAttribute(\"data-text-color\"),\n        renderHTML: (e) => ({\n          \"data-text-color\": e.stringValue\n        })\n      }\n    };\n  },\n  parseHTML() {\n    return [\n      {\n        tag: \"span\",\n        getAttrs: (e) => typeof e == \"string\" ? !1 : e.hasAttribute(\"data-text-color\") ? { stringValue: e.getAttribute(\"data-text-color\") } : !1\n      }\n    ];\n  },\n  renderHTML({ HTMLAttributes: e }) {\n    return [\"span\", e, 0];\n  }\n}), $r = ee(Ur, \"string\"), po = {\n  ...S,\n  level: { default: 1, values: [1, 2, 3] }\n}, Fr = W({\n  name: \"heading\",\n  content: \"inline*\",\n  group: \"blockContent\",\n  addAttributes() {\n    return Ee(po);\n  },\n  addInputRules() {\n    return [\n      ...[1, 2, 3].map((e) => new _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.InputRule({\n        find: new RegExp(`^(#{${e}})\\\\s$`),\n        handler: ({ state: o, chain: t, range: n }) => {\n          const r = C(o);\n          !r.isBlockContainer || r.blockContent.node.type.spec.content !== \"inline*\" || t().command(\n            x(\n              this.options.editor,\n              r.bnBlock.beforePos,\n              {\n                type: \"heading\",\n                props: {\n                  level: e\n                }\n              }\n            )\n          ).deleteRange({ from: n.from, to: n.to }).run();\n        }\n      }))\n    ];\n  },\n  addKeyboardShortcuts() {\n    return {\n      \"Mod-Alt-1\": () => {\n        const e = C(this.editor.state);\n        return !e.isBlockContainer || e.blockContent.node.type.spec.content !== \"inline*\" ? !0 : this.editor.commands.command(\n          x(this.options.editor, e.bnBlock.beforePos, {\n            type: \"heading\",\n            props: {\n              level: 1\n            }\n          })\n        );\n      },\n      \"Mod-Alt-2\": () => {\n        const e = C(this.editor.state);\n        return !e.isBlockContainer || e.blockContent.node.type.spec.content !== \"inline*\" ? !0 : this.editor.commands.command(\n          x(this.options.editor, e.bnBlock.beforePos, {\n            type: \"heading\",\n            props: {\n              level: 2\n            }\n          })\n        );\n      },\n      \"Mod-Alt-3\": () => {\n        const e = C(this.editor.state);\n        return !e.isBlockContainer || e.blockContent.node.type.spec.content !== \"inline*\" ? !0 : this.editor.commands.command(\n          x(this.options.editor, e.bnBlock.beforePos, {\n            type: \"heading\",\n            props: {\n              level: 3\n            }\n          })\n        );\n      }\n    };\n  },\n  parseHTML() {\n    return [\n      {\n        tag: \"div[data-content-type=\" + this.name + \"]\"\n      },\n      {\n        tag: \"h1\",\n        attrs: { level: 1 },\n        node: \"heading\"\n      },\n      {\n        tag: \"h2\",\n        attrs: { level: 2 },\n        node: \"heading\"\n      },\n      {\n        tag: \"h3\",\n        attrs: { level: 3 },\n        node: \"heading\"\n      }\n    ];\n  },\n  renderHTML({ node: e, HTMLAttributes: o }) {\n    var t, n;\n    return z(\n      this.name,\n      `h${e.attrs.level}`,\n      {\n        ...((t = this.options.domAttributes) == null ? void 0 : t.blockContent) || {},\n        ...o\n      },\n      ((n = this.options.domAttributes) == null ? void 0 : n.inlineContent) || {}\n    );\n  }\n}), zr = Z(\n  Fr,\n  po\n), uo = (e, o, t) => ({\n  state: n,\n  dispatch: r\n}) => {\n  const s = X(n.doc, e), i = ne(s);\n  if (!i.isBlockContainer)\n    throw new Error(\n      `BlockContainer expected when calling splitBlock, position ${e}`\n    );\n  const a = [\n    {\n      type: i.bnBlock.node.type,\n      // always keep blockcontainer type\n      attrs: t ? { ...i.bnBlock.node.attrs, id: void 0 } : {}\n    },\n    {\n      type: o ? i.blockContent.node.type : n.schema.nodes.paragraph,\n      attrs: t ? { ...i.blockContent.node.attrs } : {}\n    }\n  ];\n  return r && n.tr.split(e, 2, a), !0;\n}, pt = (e) => {\n  const o = e._tiptapEditor, t = C(o.state);\n  if (!t.isBlockContainer)\n    return !1;\n  const { bnBlock: n, blockContent: r } = t, s = o.state.selection.anchor === o.state.selection.head;\n  return !(r.node.type.name === \"bulletListItem\" || r.node.type.name === \"numberedListItem\" || r.node.type.name === \"checkListItem\") || !s ? !1 : o.commands.first(({ state: i, chain: a, commands: c }) => [\n    () => (\n      // Changes list item block to a paragraph block if the content is empty.\n      c.command(() => r.node.childCount === 0 ? c.command(\n        x(e, n.beforePos, {\n          type: \"paragraph\",\n          props: {}\n        })\n      ) : !1)\n    ),\n    () => (\n      // Splits the current block, moving content inside that's after the cursor\n      // to a new block of the same type below.\n      c.command(() => r.node.childCount > 0 ? (a().deleteSelection().command(uo(i.selection.from, !0)).run(), !0) : !1)\n    )\n  ]);\n}, Wr = {\n  ...S\n}, jr = W({\n  name: \"bulletListItem\",\n  content: \"inline*\",\n  group: \"blockContent\",\n  // This is to make sure that check list parse rules run before, since they\n  // both parse `li` elements but check lists are more specific.\n  priority: 90,\n  addInputRules() {\n    return [\n      // Creates an unordered list when starting with \"-\", \"+\", or \"*\".\n      new _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.InputRule({\n        find: new RegExp(\"^[-+*]\\\\s$\"),\n        handler: ({ state: e, chain: o, range: t }) => {\n          const n = C(e);\n          !n.isBlockContainer || n.blockContent.node.type.spec.content !== \"inline*\" || o().command(\n            x(\n              this.options.editor,\n              n.bnBlock.beforePos,\n              {\n                type: \"bulletListItem\",\n                props: {}\n              }\n            )\n          ).deleteRange({ from: t.from, to: t.to });\n        }\n      })\n    ];\n  },\n  addKeyboardShortcuts() {\n    return {\n      Enter: () => pt(this.options.editor),\n      \"Mod-Shift-8\": () => {\n        const e = C(this.editor.state);\n        return !e.isBlockContainer || e.blockContent.node.type.spec.content !== \"inline*\" ? !0 : this.editor.commands.command(\n          x(this.options.editor, e.bnBlock.beforePos, {\n            type: \"bulletListItem\",\n            props: {}\n          })\n        );\n      }\n    };\n  },\n  parseHTML() {\n    return [\n      // Case for regular HTML list structure.\n      {\n        tag: \"div[data-content-type=\" + this.name + \"]\"\n      },\n      {\n        tag: \"li\",\n        getAttrs: (e) => {\n          if (typeof e == \"string\")\n            return !1;\n          const o = e.parentElement;\n          return o === null ? !1 : o.tagName === \"UL\" || o.tagName === \"DIV\" && o.parentElement.tagName === \"UL\" ? {} : !1;\n        },\n        node: \"bulletListItem\"\n      },\n      // Case for BlockNote list structure.\n      {\n        tag: \"p\",\n        getAttrs: (e) => {\n          if (typeof e == \"string\")\n            return !1;\n          const o = e.parentElement;\n          return o === null ? !1 : o.getAttribute(\"data-content-type\") === \"bulletListItem\" ? {} : !1;\n        },\n        priority: 300,\n        node: \"bulletListItem\"\n      }\n    ];\n  },\n  renderHTML({ HTMLAttributes: e }) {\n    var o, t;\n    return z(\n      this.name,\n      // We use a <p> tag, because for <li> tags we'd need a <ul> element to put\n      // them in to be semantically correct, which we can't have due to the\n      // schema.\n      \"p\",\n      {\n        ...((o = this.options.domAttributes) == null ? void 0 : o.blockContent) || {},\n        ...e\n      },\n      ((t = this.options.domAttributes) == null ? void 0 : t.inlineContent) || {}\n    );\n  }\n}), Gr = Z(\n  jr,\n  Wr\n), ho = {\n  ...S,\n  checked: {\n    default: !1\n  }\n}, qr = W({\n  name: \"checkListItem\",\n  content: \"inline*\",\n  group: \"blockContent\",\n  addAttributes() {\n    return Ee(ho);\n  },\n  addInputRules() {\n    return [\n      // Creates a checklist when starting with \"[]\" or \"[X]\".\n      new _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.InputRule({\n        find: new RegExp(\"\\\\[\\\\s*\\\\]\\\\s$\"),\n        handler: ({ state: e, chain: o, range: t }) => {\n          const n = C(e);\n          !n.isBlockContainer || n.blockContent.node.type.spec.content !== \"inline*\" || o().command(\n            x(\n              this.options.editor,\n              n.bnBlock.beforePos,\n              {\n                type: \"checkListItem\",\n                props: {\n                  checked: !1\n                }\n              }\n            )\n          ).deleteRange({ from: t.from, to: t.to });\n        }\n      }),\n      new _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.InputRule({\n        find: new RegExp(\"\\\\[[Xx]\\\\]\\\\s$\"),\n        handler: ({ state: e, chain: o, range: t }) => {\n          const n = C(e);\n          !n.isBlockContainer || n.blockContent.node.type.spec.content !== \"inline*\" || o().command(\n            x(\n              this.options.editor,\n              n.bnBlock.beforePos,\n              {\n                type: \"checkListItem\",\n                props: {\n                  checked: !0\n                }\n              }\n            )\n          ).deleteRange({ from: t.from, to: t.to });\n        }\n      })\n    ];\n  },\n  addKeyboardShortcuts() {\n    return {\n      Enter: () => pt(this.options.editor),\n      \"Mod-Shift-9\": () => {\n        const e = C(this.editor.state);\n        return !e.isBlockContainer || e.blockContent.node.type.spec.content !== \"inline*\" ? !0 : this.editor.commands.command(\n          x(this.options.editor, e.bnBlock.beforePos, {\n            type: \"checkListItem\",\n            props: {}\n          })\n        );\n      }\n    };\n  },\n  parseHTML() {\n    return [\n      {\n        tag: \"div[data-content-type=\" + this.name + \"]\"\n      },\n      // Checkbox only.\n      {\n        tag: \"input\",\n        getAttrs: (e) => typeof e == \"string\" ? !1 : e.type === \"checkbox\" ? { checked: e.checked } : !1,\n        node: \"checkListItem\"\n      },\n      // Container element for checkbox + label.\n      {\n        tag: \"li\",\n        getAttrs: (e) => {\n          if (typeof e == \"string\")\n            return !1;\n          const o = e.parentElement;\n          if (o === null)\n            return !1;\n          if (o.tagName === \"UL\" || o.tagName === \"DIV\" && o.parentElement.tagName === \"UL\") {\n            const t = e.querySelector(\n              \"input[type=checkbox]\"\n            ) || null;\n            return t === null ? !1 : { checked: t.checked };\n          }\n          return !1;\n        },\n        node: \"checkListItem\"\n      }\n    ];\n  },\n  // Since there is no HTML checklist element, there isn't really any\n  // standardization for what checklists should look like in the DOM. GDocs'\n  // and Notion's aren't cross compatible, for example. This implementation\n  // has a semantically correct DOM structure (though missing a label for the\n  // checkbox) which is also converted correctly to Markdown by remark.\n  renderHTML({ node: e, HTMLAttributes: o }) {\n    var s, i;\n    const t = document.createElement(\"input\");\n    t.type = \"checkbox\", t.checked = e.attrs.checked, e.attrs.checked && t.setAttribute(\"checked\", \"\");\n    const { dom: n, contentDOM: r } = z(\n      this.name,\n      \"p\",\n      {\n        ...((s = this.options.domAttributes) == null ? void 0 : s.blockContent) || {},\n        ...o\n      },\n      ((i = this.options.domAttributes) == null ? void 0 : i.inlineContent) || {}\n    );\n    return n.insertBefore(t, r), { dom: n, contentDOM: r };\n  },\n  // Need to render node view since the checkbox needs to be able to update the\n  // node. This is only possible with a node view as it exposes `getPos`.\n  addNodeView() {\n    return ({ node: e, getPos: o, editor: t, HTMLAttributes: n }) => {\n      var d, p;\n      const r = document.createElement(\"div\"), s = document.createElement(\"div\");\n      s.contentEditable = \"false\";\n      const i = document.createElement(\"input\");\n      i.type = \"checkbox\", i.checked = e.attrs.checked, e.attrs.checked && i.setAttribute(\"checked\", \"\");\n      const a = () => {\n        if (!t.isEditable) {\n          i.checked = !i.checked;\n          return;\n        }\n        if (typeof o != \"boolean\") {\n          const h = X(\n            t.state.doc,\n            o()\n          );\n          if (h.node.type.name !== \"blockContainer\")\n            throw new Error(\n              `Expected blockContainer node, got ${h.node.type.name}`\n            );\n          this.editor.commands.command(\n            x(\n              this.options.editor,\n              h.posBeforeNode,\n              {\n                type: \"checkListItem\",\n                props: {\n                  checked: i.checked\n                }\n              }\n            )\n          );\n        }\n      };\n      i.addEventListener(\"change\", a);\n      const { dom: c, contentDOM: l } = z(\n        this.name,\n        \"p\",\n        {\n          ...((d = this.options.domAttributes) == null ? void 0 : d.blockContent) || {},\n          ...n\n        },\n        ((p = this.options.domAttributes) == null ? void 0 : p.inlineContent) || {}\n      );\n      if (typeof o != \"boolean\") {\n        const f = \"label-\" + this.editor.state.doc.resolve(o()).node().attrs.id;\n        i.setAttribute(\"aria-labelledby\", f), l.id = f;\n      }\n      return c.removeChild(l), c.appendChild(r), r.appendChild(s), r.appendChild(l), s.appendChild(i), {\n        dom: c,\n        contentDOM: l,\n        destroy: () => {\n          i.removeEventListener(\"change\", a);\n        }\n      };\n    };\n  }\n}), Kr = Z(\n  qr,\n  ho\n), Xr = new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.PluginKey(\"numbered-list-indexing\"), Jr = () => new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.Plugin({\n  key: Xr,\n  appendTransaction: (e, o, t) => {\n    const n = t.tr;\n    n.setMeta(\"numberedListIndexing\", !0);\n    let r = !1;\n    return t.doc.descendants((s, i) => {\n      var a;\n      if (s.type.name === \"blockContainer\" && s.firstChild.type.name === \"numberedListItem\") {\n        let c = `${s.firstChild.attrs.start || 1}`;\n        const l = ne({\n          posBeforeNode: i,\n          node: s\n        });\n        if (!l.isBlockContainer)\n          throw new Error(\"impossible\");\n        const d = n.doc.resolve(\n          l.bnBlock.beforePos\n        ).nodeBefore;\n        if (d) {\n          const m = ne({\n            posBeforeNode: l.bnBlock.beforePos - d.nodeSize,\n            node: d\n          });\n          if (m.blockNoteType === \"numberedListItem\") {\n            if (!m.isBlockContainer)\n              throw new Error(\"impossible\");\n            const b = m.blockContent.node.attrs.index;\n            c = (parseInt(b) + 1).toString();\n          }\n        }\n        const p = l.blockContent.node, h = p.attrs.index, f = ((a = d == null ? void 0 : d.firstChild) == null ? void 0 : a.type.name) !== \"numberedListItem\";\n        if (h !== c || p.attrs.start && !f) {\n          r = !0;\n          const { start: m, ...g } = p.attrs;\n          n.setNodeMarkup(l.blockContent.beforePos, void 0, {\n            ...g,\n            index: c,\n            ...typeof m == \"number\" && f && {\n              start: m\n            }\n          });\n        }\n      }\n    }), r ? n : null;\n  }\n}), fo = {\n  ...S,\n  start: { default: void 0, type: \"number\" }\n}, Yr = W({\n  name: \"numberedListItem\",\n  content: \"inline*\",\n  group: \"blockContent\",\n  priority: 90,\n  addAttributes() {\n    return {\n      ...Ee(fo),\n      // the index attribute is only used internally (it's not part of the blocknote schema)\n      // that's why it's defined explicitly here, and not part of the prop schema\n      index: {\n        default: null,\n        parseHTML: (e) => e.getAttribute(\"data-index\"),\n        renderHTML: (e) => ({\n          \"data-index\": e.index\n        })\n      }\n    };\n  },\n  addInputRules() {\n    return [\n      // Creates an ordered list when starting with \"1.\".\n      new _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.InputRule({\n        find: new RegExp(\"^(\\\\d+)\\\\.\\\\s$\"),\n        handler: ({ state: e, chain: o, range: t, match: n }) => {\n          const r = C(e);\n          if (!r.isBlockContainer || r.blockContent.node.type.spec.content !== \"inline*\" || r.blockNoteType === \"numberedListItem\")\n            return;\n          const s = parseInt(n[1]);\n          o().command(\n            x(\n              this.options.editor,\n              r.bnBlock.beforePos,\n              {\n                type: \"numberedListItem\",\n                props: s === 1 && {} || {\n                  start: s\n                }\n              }\n            )\n          ).deleteRange({ from: t.from, to: t.to });\n        }\n      })\n    ];\n  },\n  addKeyboardShortcuts() {\n    return {\n      Enter: () => pt(this.options.editor),\n      \"Mod-Shift-7\": () => {\n        const e = C(this.editor.state);\n        return !e.isBlockContainer || e.blockContent.node.type.spec.content !== \"inline*\" ? !0 : this.editor.commands.command(\n          x(this.options.editor, e.bnBlock.beforePos, {\n            type: \"numberedListItem\",\n            props: {}\n          })\n        );\n      }\n    };\n  },\n  addProseMirrorPlugins() {\n    return [Jr()];\n  },\n  parseHTML() {\n    return [\n      {\n        tag: \"div[data-content-type=\" + this.name + \"]\"\n      },\n      // Case for regular HTML list structure.\n      // (e.g.: when pasting from other apps)\n      {\n        tag: \"li\",\n        getAttrs: (e) => {\n          if (typeof e == \"string\")\n            return !1;\n          const o = e.parentElement;\n          if (o === null)\n            return !1;\n          if (o.tagName === \"OL\" || o.tagName === \"DIV\" && o.parentElement.tagName === \"OL\") {\n            const t = parseInt(o.getAttribute(\"start\") || \"1\") || 1;\n            return e.previousSibling || t === 1 ? {} : {\n              start: t\n            };\n          }\n          return !1;\n        },\n        node: \"numberedListItem\"\n      },\n      // Case for BlockNote list structure.\n      // (e.g.: when pasting from blocknote)\n      {\n        tag: \"p\",\n        getAttrs: (e) => {\n          if (typeof e == \"string\")\n            return !1;\n          const o = e.parentElement;\n          return o === null ? !1 : o.getAttribute(\"data-content-type\") === \"numberedListItem\" ? {} : !1;\n        },\n        priority: 300,\n        node: \"numberedListItem\"\n      }\n    ];\n  },\n  renderHTML({ HTMLAttributes: e }) {\n    var o, t;\n    return z(\n      this.name,\n      // We use a <p> tag, because for <li> tags we'd need an <ol> element to\n      // put them in to be semantically correct, which we can't have due to the\n      // schema.\n      \"p\",\n      {\n        ...((o = this.options.domAttributes) == null ? void 0 : o.blockContent) || {},\n        ...e\n      },\n      ((t = this.options.domAttributes) == null ? void 0 : t.inlineContent) || {}\n    );\n  }\n}), Zr = Z(\n  Yr,\n  fo\n), Qr = {\n  ...S\n}, es = W({\n  name: \"paragraph\",\n  content: \"inline*\",\n  group: \"blockContent\",\n  addKeyboardShortcuts() {\n    return {\n      \"Mod-Alt-0\": () => {\n        const e = C(this.editor.state);\n        return !e.isBlockContainer || e.blockContent.node.type.spec.content !== \"inline*\" ? !0 : this.editor.commands.command(\n          x(this.options.editor, e.bnBlock.beforePos, {\n            type: \"paragraph\",\n            props: {}\n          })\n        );\n      }\n    };\n  },\n  parseHTML() {\n    return [\n      { tag: \"div[data-content-type=\" + this.name + \"]\" },\n      {\n        tag: \"p\",\n        priority: 200,\n        getAttrs: (e) => {\n          var o;\n          return typeof e == \"string\" || !((o = e.textContent) != null && o.trim()) ? !1 : {};\n        },\n        node: \"paragraph\"\n      }\n    ];\n  },\n  renderHTML({ HTMLAttributes: e }) {\n    var o, t;\n    return z(\n      this.name,\n      \"p\",\n      {\n        ...((o = this.options.domAttributes) == null ? void 0 : o.blockContent) || {},\n        ...e\n      },\n      ((t = this.options.domAttributes) == null ? void 0 : t.inlineContent) || {}\n    );\n  }\n}), ts = Z(\n  es,\n  Qr\n), os = {\n  ...S\n}, ns = W({\n  name: \"quote\",\n  content: \"inline*\",\n  group: \"blockContent\",\n  addInputRules() {\n    return [\n      // Creates a block quote when starting with \">\".\n      new _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.InputRule({\n        find: new RegExp(\"^>\\\\s$\"),\n        handler: ({ state: e, chain: o, range: t }) => {\n          const n = C(e);\n          !n.isBlockContainer || n.blockContent.node.type.spec.content !== \"inline*\" || o().command(\n            x(\n              this.options.editor,\n              n.bnBlock.beforePos,\n              {\n                type: \"quote\",\n                props: {}\n              }\n            )\n          ).deleteRange({ from: t.from, to: t.to });\n        }\n      })\n    ];\n  },\n  addKeyboardShortcuts() {\n    return {\n      \"Mod-Alt-q\": () => {\n        const e = C(this.editor.state);\n        return !e.isBlockContainer || e.blockContent.node.type.spec.content !== \"inline*\" ? !0 : this.editor.commands.command(\n          x(this.options.editor, e.bnBlock.beforePos, {\n            type: \"quote\"\n          })\n        );\n      }\n    };\n  },\n  parseHTML() {\n    return [\n      { tag: \"div[data-content-type=\" + this.name + \"]\" },\n      {\n        tag: \"blockquote\",\n        node: \"quote\"\n      }\n    ];\n  },\n  renderHTML({ HTMLAttributes: e }) {\n    var o, t;\n    return z(\n      this.name,\n      \"blockquote\",\n      {\n        ...((o = this.options.domAttributes) == null ? void 0 : o.blockContent) || {},\n        ...e\n      },\n      ((t = this.options.domAttributes) == null ? void 0 : t.inlineContent) || {}\n    );\n  }\n}), rs = Z(\n  ns,\n  os\n), ss = 35, mo = 120, ac = 31, is = _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.Extension.create({\n  name: \"BlockNoteTableExtension\",\n  addProseMirrorPlugins: () => [\n    (0,prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.columnResizing)({\n      cellMinWidth: ss,\n      defaultCellMinWidth: mo,\n      // We set this to null as we implement our own node view in the table\n      // block content. This node view is the same as what's used by default,\n      // but is wrapped in a `blockContent` HTML element.\n      View: null\n    }),\n    (0,prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.tableEditing)()\n  ],\n  addKeyboardShortcuts() {\n    return {\n      // Makes enter create a new line within the cell.\n      Enter: () => this.editor.state.selection.empty && this.editor.state.selection.$head.parent.type.name === \"tableParagraph\" ? (this.editor.commands.insertContent({ type: \"hardBreak\" }), !0) : !1,\n      // Ensures that backspace won't delete the table if the text cursor is at\n      // the start of a cell and the selection is empty.\n      Backspace: () => {\n        const e = this.editor.state.selection, o = e.empty, t = e.$head.parentOffset === 0, n = e.$head.node().type.name === \"tableParagraph\";\n        return o && t && n;\n      },\n      // Enables navigating cells using the tab key.\n      Tab: () => this.editor.commands.command(\n        ({ state: e, dispatch: o, view: t }) => (0,prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.goToNextCell)(1)(e, o, t)\n      ),\n      \"Shift-Tab\": () => this.editor.commands.command(\n        ({ state: e, dispatch: o, view: t }) => (0,prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.goToNextCell)(-1)(e, o, t)\n      )\n    };\n  },\n  extendNodeSchema(e) {\n    const o = {\n      name: e.name,\n      options: e.options,\n      storage: e.storage\n    };\n    return {\n      tableRole: (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_15__.callOrReturn)(\n        (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_15__.getExtensionField)(e, \"tableRole\", o)\n      )\n    };\n  }\n}), as = {\n  textColor: S.textColor\n}, cs = W({\n  name: \"table\",\n  content: \"tableRow+\",\n  group: \"blockContent\",\n  tableRole: \"table\",\n  isolating: !0,\n  parseHTML() {\n    return [{ tag: \"table\" }];\n  },\n  renderHTML({ HTMLAttributes: e }) {\n    var o, t;\n    return z(\n      this.name,\n      \"table\",\n      {\n        ...((o = this.options.domAttributes) == null ? void 0 : o.blockContent) || {},\n        ...e\n      },\n      ((t = this.options.domAttributes) == null ? void 0 : t.inlineContent) || {}\n    );\n  },\n  // This node view is needed for the `columnResizing` plugin. By default, the\n  // plugin adds its own node view, which overrides how the node is rendered vs\n  // `renderHTML`. This means that the wrapping `blockContent` HTML element is\n  // no longer rendered. The `columnResizing` plugin uses the `TableView` as its\n  // default node view. `BlockNoteTableView` extends it by wrapping it in a\n  // `blockContent` element, so the DOM structure is consistent with other block\n  // types.\n  addNodeView() {\n    return ({ node: e, HTMLAttributes: o }) => {\n      var n;\n      class t extends prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.TableView {\n        constructor(s, i, a) {\n          super(s, i), this.node = s, this.cellMinWidth = i, this.blockContentHTMLAttributes = a;\n          const c = document.createElement(\"div\");\n          c.className = Y(\n            \"bn-block-content\",\n            a.class\n          ), c.setAttribute(\"data-content-type\", \"table\");\n          for (const [h, f] of Object.entries(\n            a\n          ))\n            h !== \"class\" && c.setAttribute(h, f);\n          const l = this.dom, d = document.createElement(\"div\");\n          d.className = \"tableWrapper-inner\", d.appendChild(l.firstChild), l.appendChild(d), c.appendChild(l);\n          const p = document.createElement(\"div\");\n          p.className = \"table-widgets-container\", p.style.position = \"relative\", l.appendChild(p), this.dom = c;\n        }\n        ignoreMutation(s) {\n          return !s.target.closest(\".tableWrapper-inner\") || super.ignoreMutation(s);\n        }\n      }\n      return new t(e, mo, {\n        ...((n = this.options.domAttributes) == null ? void 0 : n.blockContent) || {},\n        ...o\n      });\n    };\n  }\n}), ls = W({\n  name: \"tableParagraph\",\n  group: \"tableContent\",\n  content: \"inline*\",\n  parseHTML() {\n    return [\n      {\n        preserveWhitespace: \"full\",\n        // set this rule as high priority so it takes precedence over the default paragraph rule,\n        // but only if we're in the tableContent context\n        priority: 210,\n        context: \"tableContent\",\n        tag: \"p\",\n        getAttrs: (e) => ({})\n      },\n      {\n        tag: \"p\",\n        getAttrs: (e) => {\n          if (typeof e == \"string\" || !e.textContent)\n            return !1;\n          const o = e.parentElement;\n          return o === null ? !1 : o.tagName === \"TD\" ? {} : !1;\n        }\n      }\n    ];\n  },\n  renderHTML({ HTMLAttributes: e }) {\n    return [\"p\", e, 0];\n  }\n}), ds = Z(\n  cs,\n  as,\n  [\n    is,\n    ls,\n    _tiptap_extension_table_header__WEBPACK_IMPORTED_MODULE_7__.TableHeader.extend({\n      /**\n       * We allow table headers and cells to have multiple tableContent nodes because\n       * when merging cells, prosemirror-tables will concat the contents of the cells naively.\n       * This would cause that content to overflow into other cells when prosemirror tries to enforce the cell structure.\n       *\n       * So, we manually fix this up when reading back in the `nodeToBlock` and only ever place a single tableContent back into the cell.\n       */\n      content: \"tableContent+\"\n    }),\n    _tiptap_extension_table_cell__WEBPACK_IMPORTED_MODULE_6__.TableCell.extend({\n      content: \"tableContent+\"\n    }),\n    _tiptap_extension_table_row__WEBPACK_IMPORTED_MODULE_8__.TableRow\n  ]\n), Pt = (e) => {\n  const o = e.src || void 0, t = e.width || void 0;\n  return { url: o, previewWidth: t };\n}, ps = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\"><path d=\"M2 3.9934C2 3.44476 2.45531 3 2.9918 3H21.0082C21.556 3 22 3.44495 22 3.9934V20.0066C22 20.5552 21.5447 21 21.0082 21H2.9918C2.44405 21 2 20.5551 2 20.0066V3.9934ZM8 5V19H16V5H8ZM4 5V7H6V5H4ZM18 5V7H20V5H18ZM4 9V11H6V9H4ZM18 9V11H20V9H18ZM4 13V15H6V13H4ZM18 13V15H20V13H18ZM4 17V19H6V17H4ZM18 17V19H20V17H18Z\"></path></svg>', us = {\n  textAlignment: S.textAlignment,\n  backgroundColor: S.backgroundColor,\n  // File name.\n  name: {\n    default: \"\"\n  },\n  // File url.\n  url: {\n    default: \"\"\n  },\n  // File caption.\n  caption: {\n    default: \"\"\n  },\n  showPreview: {\n    default: !0\n  },\n  // File preview width in px.\n  previewWidth: {\n    default: 512\n  }\n}, hs = {\n  type: \"video\",\n  propSchema: us,\n  content: \"none\",\n  isFileBlock: !0,\n  fileBlockAccept: [\"video/*\"]\n}, fs = (e, o) => {\n  const t = document.createElement(\"div\");\n  t.innerHTML = ps;\n  const n = document.createElement(\"div\");\n  n.className = \"bn-visual-media-wrapper\";\n  const r = document.createElement(\"video\");\n  return r.className = \"bn-visual-media\", o.resolveFileUrl ? o.resolveFileUrl(e.props.url).then((s) => {\n    r.src = s;\n  }) : r.src = e.props.url, r.controls = !0, r.contentEditable = \"false\", r.draggable = !1, r.width = e.props.previewWidth, n.appendChild(r), lo(\n    e,\n    o,\n    { dom: n },\n    n,\n    o.dictionary.file_blocks.video.add_button_text,\n    t.firstElementChild\n  );\n}, ms = (e) => {\n  if (e.tagName === \"VIDEO\")\n    return Pt(e);\n  if (e.tagName === \"FIGURE\") {\n    const o = Ue(e, \"video\");\n    if (!o)\n      return;\n    const { targetElement: t, caption: n } = o;\n    return {\n      ...Pt(t),\n      caption: n\n    };\n  }\n}, gs = (e) => {\n  if (!e.props.url) {\n    const t = document.createElement(\"p\");\n    return t.textContent = \"Add video\", {\n      dom: t\n    };\n  }\n  let o;\n  return e.props.showPreview ? (o = document.createElement(\"video\"), o.src = e.props.url, o.width = e.props.previewWidth) : (o = document.createElement(\"a\"), o.href = e.props.url, o.textContent = e.props.name || e.props.url), e.props.caption ? e.props.showPreview ? dt(o, e.props.caption) : $e(o, e.props.caption) : {\n    dom: o\n  };\n}, bs = Se(hs, {\n  render: fs,\n  parse: ms,\n  toExternalHTML: gs\n}), go = {\n  paragraph: ts,\n  heading: zr,\n  quote: rs,\n  codeBlock: wr,\n  bulletListItem: Gr,\n  numberedListItem: Zr,\n  checkListItem: Kr,\n  table: ds,\n  file: Br,\n  image: Ar,\n  video: bs,\n  audio: gr\n}, ks = Xt(go), bo = {\n  bold: ee(_tiptap_extension_bold__WEBPACK_IMPORTED_MODULE_1__[\"default\"], \"boolean\"),\n  italic: ee(_tiptap_extension_italic__WEBPACK_IMPORTED_MODULE_3__[\"default\"], \"boolean\"),\n  underline: ee(_tiptap_extension_underline__WEBPACK_IMPORTED_MODULE_5__[\"default\"], \"boolean\"),\n  strike: ee(_tiptap_extension_strike__WEBPACK_IMPORTED_MODULE_4__[\"default\"], \"boolean\"),\n  code: ee(_tiptap_extension_code__WEBPACK_IMPORTED_MODULE_2__[\"default\"], \"boolean\"),\n  textColor: $r,\n  backgroundColor: Vr\n}, cc = Qt(bo), ko = {\n  text: { config: \"text\", implementation: {} },\n  link: { config: \"link\", implementation: {} }\n}, ws = Yt(\n  ko\n);\nfunction L(e, o) {\n  return e in o.schema.blockSchema && o.schema.blockSchema[e] === ks[e];\n}\nfunction ys(e, o) {\n  return e in o.schema.inlineContentSchema && o.schema.inlineContentSchema[e] === ws[e];\n}\nfunction Cs(e, o, t) {\n  return o.type === e && o.type in t.schema.blockSchema && L(o.type, t);\n}\nfunction lc(e, o) {\n  return e.type in o.schema.blockSchema && o.schema.blockSchema[e.type].isFileBlock || !1;\n}\nfunction dc(e, o) {\n  return e.type in o.schema.blockSchema && o.schema.blockSchema[e.type].isFileBlock && \"showPreview\" in o.schema.blockSchema[e.type].propSchema || !1;\n}\nfunction pc(e, o) {\n  return o.schema.blockSchema[e.type].isFileBlock && !e.props.url;\n}\nfunction vs(e, o, t) {\n  return o in t.schema.blockSchema && e in t.schema.blockSchema[o].propSchema && t.schema.blockSchema[o].propSchema[e] === S[e];\n}\nfunction uc(e, o, t) {\n  return vs(e, o.type, t);\n}\nfunction It(e) {\n  return e instanceof prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.CellSelection;\n}\nfunction Es(e) {\n  let o = e.getTextCursorPosition().block, t = e.schema.blockSchema[o.type].content;\n  for (; t === \"none\"; ) {\n    if (o = e.getTextCursorPosition().nextBlock, o === void 0)\n      return;\n    t = e.schema.blockSchema[o.type].content, e.setTextCursorPosition(o, \"end\");\n  }\n}\nfunction P(e, o) {\n  const t = e.getTextCursorPosition().block;\n  if (t.content === void 0)\n    throw new Error(\"Slash Menu open in a block that doesn't contain content.\");\n  let n;\n  return Array.isArray(t.content) && (t.content.length === 1 && J(t.content[0]) && t.content[0].type === \"text\" && t.content[0].text === \"/\" || t.content.length === 0) ? (n = e.updateBlock(t, o), e.setTextCursorPosition(n)) : (n = e.insertBlocks([o], t, \"after\")[0], e.setTextCursorPosition(e.getTextCursorPosition().nextBlock)), Es(e), n;\n}\nfunction hc(e) {\n  const o = [];\n  return L(\"heading\", e) && o.push(\n    {\n      onItemClick: () => {\n        P(e, {\n          type: \"heading\",\n          props: { level: 1 }\n        });\n      },\n      badge: K(\"Mod-Alt-1\"),\n      key: \"heading\",\n      ...e.dictionary.slash_menu.heading\n    },\n    {\n      onItemClick: () => {\n        P(e, {\n          type: \"heading\",\n          props: { level: 2 }\n        });\n      },\n      badge: K(\"Mod-Alt-2\"),\n      key: \"heading_2\",\n      ...e.dictionary.slash_menu.heading_2\n    },\n    {\n      onItemClick: () => {\n        P(e, {\n          type: \"heading\",\n          props: { level: 3 }\n        });\n      },\n      badge: K(\"Mod-Alt-3\"),\n      key: \"heading_3\",\n      ...e.dictionary.slash_menu.heading_3\n    }\n  ), L(\"quote\", e) && o.push({\n    onItemClick: () => {\n      P(e, {\n        type: \"quote\"\n      });\n    },\n    key: \"quote\",\n    ...e.dictionary.slash_menu.quote\n  }), L(\"numberedListItem\", e) && o.push({\n    onItemClick: () => {\n      P(e, {\n        type: \"numberedListItem\"\n      });\n    },\n    badge: K(\"Mod-Shift-7\"),\n    key: \"numbered_list\",\n    ...e.dictionary.slash_menu.numbered_list\n  }), L(\"bulletListItem\", e) && o.push({\n    onItemClick: () => {\n      P(e, {\n        type: \"bulletListItem\"\n      });\n    },\n    badge: K(\"Mod-Shift-8\"),\n    key: \"bullet_list\",\n    ...e.dictionary.slash_menu.bullet_list\n  }), L(\"checkListItem\", e) && o.push({\n    onItemClick: () => {\n      P(e, {\n        type: \"checkListItem\"\n      });\n    },\n    badge: K(\"Mod-Shift-9\"),\n    key: \"check_list\",\n    ...e.dictionary.slash_menu.check_list\n  }), L(\"paragraph\", e) && o.push({\n    onItemClick: () => {\n      P(e, {\n        type: \"paragraph\"\n      });\n    },\n    badge: K(\"Mod-Alt-0\"),\n    key: \"paragraph\",\n    ...e.dictionary.slash_menu.paragraph\n  }), L(\"codeBlock\", e) && o.push({\n    onItemClick: () => {\n      P(e, {\n        type: \"codeBlock\"\n      });\n    },\n    badge: K(\"Mod-Alt-c\"),\n    key: \"code_block\",\n    ...e.dictionary.slash_menu.code_block\n  }), L(\"table\", e) && o.push({\n    onItemClick: () => {\n      P(e, {\n        type: \"table\",\n        content: {\n          type: \"tableContent\",\n          rows: [\n            {\n              cells: [\"\", \"\", \"\"]\n            },\n            {\n              cells: [\"\", \"\", \"\"]\n            }\n          ]\n        }\n      });\n    },\n    badge: void 0,\n    key: \"table\",\n    ...e.dictionary.slash_menu.table\n  }), L(\"image\", e) && o.push({\n    onItemClick: () => {\n      const t = P(e, {\n        type: \"image\"\n      });\n      e.dispatch(\n        e._tiptapEditor.state.tr.setMeta(e.filePanel.plugin, {\n          block: t\n        })\n      );\n    },\n    key: \"image\",\n    ...e.dictionary.slash_menu.image\n  }), L(\"video\", e) && o.push({\n    onItemClick: () => {\n      const t = P(e, {\n        type: \"video\"\n      });\n      e.dispatch(\n        e._tiptapEditor.state.tr.setMeta(e.filePanel.plugin, {\n          block: t\n        })\n      );\n    },\n    key: \"video\",\n    ...e.dictionary.slash_menu.video\n  }), L(\"audio\", e) && o.push({\n    onItemClick: () => {\n      const t = P(e, {\n        type: \"audio\"\n      });\n      e.dispatch(\n        e._tiptapEditor.state.tr.setMeta(e.filePanel.plugin, {\n          block: t\n        })\n      );\n    },\n    key: \"audio\",\n    ...e.dictionary.slash_menu.audio\n  }), L(\"file\", e) && o.push({\n    onItemClick: () => {\n      const t = P(e, {\n        type: \"file\"\n      });\n      e.dispatch(\n        e._tiptapEditor.state.tr.setMeta(e.filePanel.plugin, {\n          block: t\n        })\n      );\n    },\n    key: \"file\",\n    ...e.dictionary.slash_menu.file\n  }), o.push({\n    onItemClick: () => {\n      e.openSuggestionMenu(\":\", {\n        deleteTriggerCharacter: !0,\n        ignoreQueryLength: !0\n      });\n    },\n    key: \"emoji\",\n    ...e.dictionary.slash_menu.emoji\n  }), o;\n}\nfunction fc(e, o) {\n  return e.filter(\n    ({ title: t, aliases: n }) => t.toLowerCase().includes(o.toLowerCase()) || n && n.filter(\n      (r) => r.toLowerCase().includes(o.toLowerCase())\n    ).length !== 0\n  );\n}\nfunction je(e) {\n  return e && Object.fromEntries(\n    Object.entries(e).filter(([, o]) => o !== void 0)\n  );\n}\nclass Be {\n  constructor(o) {\n    u(this, \"blockSpecs\");\n    u(this, \"inlineContentSpecs\");\n    u(this, \"styleSpecs\");\n    u(this, \"blockSchema\");\n    u(this, \"inlineContentSchema\");\n    u(this, \"styleSchema\");\n    // Helper so that you can use typeof schema.BlockNoteEditor\n    u(this, \"BlockNoteEditor\", \"only for types\");\n    u(this, \"Block\", \"only for types\");\n    u(this, \"PartialBlock\", \"only for types\");\n    this.blockSpecs = je(o == null ? void 0 : o.blockSpecs) || go, this.inlineContentSpecs = je(o == null ? void 0 : o.inlineContentSpecs) || ko, this.styleSpecs = je(o == null ? void 0 : o.styleSpecs) || bo, this.blockSchema = Xt(this.blockSpecs), this.inlineContentSchema = Yt(\n      this.inlineContentSpecs\n    ), this.styleSchema = Qt(this.styleSpecs);\n  }\n  static create(o) {\n    return new Be(o);\n  }\n}\nconst wo = Be.create({\n  blockSpecs: {\n    pageBreak: _r\n  }\n}), mc = (e) => Be.create({\n  blockSpecs: {\n    ...e.blockSpecs,\n    ...wo.blockSpecs\n  },\n  inlineContentSpecs: e.inlineContentSpecs,\n  styleSpecs: e.styleSpecs\n});\nfunction Ss(e) {\n  return \"pageBreak\" in e.schema.blockSchema && e.schema.blockSchema.pageBreak === wo.blockSchema.pageBreak;\n}\nfunction gc(e) {\n  const o = [];\n  return Ss(e) && o.push({\n    ...e.dictionary.slash_menu.page_break,\n    onItemClick: () => {\n      P(e, {\n        type: \"pageBreak\"\n      });\n    },\n    key: \"page_break\"\n  }), o;\n}\nfunction Bs(e, o, t, n = \"before\") {\n  const r = typeof t == \"string\" ? t : t.id, s = [];\n  for (const c of o)\n    s.push(\n      ie(c, e.pmSchema, e.schema.styleSchema)\n    );\n  const i = D(r, e._tiptapEditor.state.doc);\n  if (!i)\n    throw new Error(`Block with ID ${r} not found`);\n  n === \"before\" && e.dispatch(\n    e._tiptapEditor.state.tr.insert(i.posBeforeNode, s)\n  ), n === \"after\" && e.dispatch(\n    e._tiptapEditor.state.tr.insert(\n      i.posBeforeNode + i.node.nodeSize,\n      s\n    )\n  );\n  const a = [];\n  for (const c of s)\n    a.push(\n      E(\n        c,\n        e.schema.blockSchema,\n        e.schema.inlineContentSchema,\n        e.schema.styleSchema,\n        e.blockCache\n      )\n    );\n  return a;\n}\nfunction Ts(e) {\n  const o = e._tiptapEditor.state, t = o.selection, n = X(o.doc, t.anchor);\n  if (t instanceof prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.CellSelection)\n    return {\n      type: \"cell\",\n      anchorBlockId: n.node.attrs.id,\n      anchorCellOffset: t.$anchorCell.pos - n.posBeforeNode,\n      headCellOffset: t.$headCell.pos - n.posBeforeNode\n    };\n  if (e._tiptapEditor.state.selection instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.NodeSelection)\n    return {\n      type: \"node\",\n      anchorBlockId: n.node.attrs.id\n    };\n  {\n    const r = X(o.doc, t.head);\n    return {\n      type: \"text\",\n      anchorBlockId: n.node.attrs.id,\n      headBlockId: r.node.attrs.id,\n      anchorOffset: t.anchor - n.posBeforeNode,\n      headOffset: t.head - r.posBeforeNode\n    };\n  }\n}\nfunction xs(e, o) {\n  var r, s;\n  const t = (r = D(\n    o.anchorBlockId,\n    e._tiptapEditor.state.doc\n  )) == null ? void 0 : r.posBeforeNode;\n  if (t === void 0)\n    throw new Error(\n      `Could not find block with ID ${o.anchorBlockId} to update selection`\n    );\n  let n;\n  if (o.type === \"cell\")\n    n = prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.CellSelection.create(\n      e._tiptapEditor.state.doc,\n      t + o.anchorCellOffset,\n      t + o.headCellOffset\n    );\n  else if (o.type === \"node\")\n    n = prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.NodeSelection.create(\n      e._tiptapEditor.state.doc,\n      t + 1\n    );\n  else {\n    const i = (s = D(\n      o.headBlockId,\n      e._tiptapEditor.state.doc\n    )) == null ? void 0 : s.posBeforeNode;\n    if (i === void 0)\n      throw new Error(\n        `Could not find block with ID ${o.headBlockId} to update selection`\n      );\n    n = prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.TextSelection.create(\n      e._tiptapEditor.state.doc,\n      t + o.anchorOffset,\n      i + o.headOffset\n    );\n  }\n  e.dispatch(e._tiptapEditor.state.tr.setSelection(n));\n}\nfunction nt(e) {\n  return e.map((o) => o.type === \"columnList\" ? o.children.map((t) => nt(t.children)).flat() : {\n    ...o,\n    children: nt(o.children)\n  }).flat();\n}\nfunction yo(e, o, t) {\n  var s;\n  const n = ((s = e.getSelection()) == null ? void 0 : s.blocks) || [\n    e.getTextCursorPosition().block\n  ], r = Ts(e);\n  e.removeBlocks(n), e.insertBlocks(nt(n), o, t), xs(e, r);\n}\nfunction Co(e) {\n  return !e || e.type !== \"columnList\";\n}\nfunction vo(e, o, t) {\n  let n, r;\n  if (o ? o.children.length > 0 ? (n = o.children[o.children.length - 1], r = \"after\") : (n = o, r = \"before\") : t && (n = t, r = \"before\"), !n || !r)\n    return;\n  const s = e.getParentBlock(n);\n  return Co(s) ? { referenceBlock: n, placement: r } : vo(\n    e,\n    r === \"after\" ? n : e.getPrevBlock(n),\n    s\n  );\n}\nfunction Eo(e, o, t) {\n  let n, r;\n  if (o ? o.children.length > 0 ? (n = o.children[0], r = \"before\") : (n = o, r = \"after\") : t && (n = t, r = \"after\"), !n || !r)\n    return;\n  const s = e.getParentBlock(n);\n  return Co(s) ? { referenceBlock: n, placement: r } : Eo(\n    e,\n    r === \"before\" ? n : e.getNextBlock(n),\n    s\n  );\n}\nfunction Ms(e) {\n  const o = e.getSelection(), t = (o == null ? void 0 : o.blocks[0]) || e.getTextCursorPosition().block, n = vo(\n    e,\n    e.getPrevBlock(t),\n    e.getParentBlock(t)\n  );\n  n && yo(\n    e,\n    n.referenceBlock,\n    n.placement\n  );\n}\nfunction Ps(e) {\n  const o = e.getSelection(), t = (o == null ? void 0 : o.blocks[(o == null ? void 0 : o.blocks.length) - 1]) || e.getTextCursorPosition().block, n = Eo(\n    e,\n    e.getNextBlock(t),\n    e.getParentBlock(t)\n  );\n  n && yo(\n    e,\n    n.referenceBlock,\n    n.placement\n  );\n}\nfunction Is(e, o) {\n  return function({ state: t, dispatch: n }) {\n    const { $from: r, $to: s } = t.selection, i = r.blockRange(\n      s,\n      (d) => d.childCount > 0 && (d.type.name === \"blockGroup\" || d.type.name === \"column\")\n      // change necessary to not look at first item child type\n    );\n    if (!i)\n      return !1;\n    const a = i.startIndex;\n    if (a === 0)\n      return !1;\n    const l = i.parent.child(a - 1);\n    if (l.type !== e)\n      return !1;\n    if (n) {\n      const d = l.lastChild && l.lastChild.type === o, p = prosemirror_model__WEBPACK_IMPORTED_MODULE_18__.Fragment.from(d ? e.create() : null), h = new prosemirror_model__WEBPACK_IMPORTED_MODULE_18__.Slice(\n        prosemirror_model__WEBPACK_IMPORTED_MODULE_18__.Fragment.from(\n          e.create(null, prosemirror_model__WEBPACK_IMPORTED_MODULE_18__.Fragment.from(o.create(null, p)))\n          // change necessary to create \"groupType\" instead of parent.type\n        ),\n        d ? 3 : 1,\n        0\n      ), f = i.start, m = i.end;\n      n(\n        t.tr.step(\n          new prosemirror_transform__WEBPACK_IMPORTED_MODULE_19__.ReplaceAroundStep(\n            f - (d ? 3 : 1),\n            m,\n            f,\n            m,\n            h,\n            1,\n            !0\n          )\n        ).scrollIntoView()\n      );\n    }\n    return !0;\n  };\n}\nfunction So(e) {\n  return e._tiptapEditor.commands.command(\n    Is(\n      e._tiptapEditor.schema.nodes.blockContainer,\n      e._tiptapEditor.schema.nodes.blockGroup\n    )\n  );\n}\nfunction Ls(e) {\n  e._tiptapEditor.commands.liftListItem(\"blockContainer\");\n}\nfunction As(e) {\n  const { bnBlock: o } = C(\n    e._tiptapEditor.state\n  );\n  return e._tiptapEditor.state.doc.resolve(o.beforePos).nodeBefore !== null;\n}\nfunction Ns(e) {\n  const { bnBlock: o } = C(\n    e._tiptapEditor.state\n  );\n  return e._tiptapEditor.state.doc.resolve(o.beforePos).depth > 1;\n}\nfunction Bo(e, o, t) {\n  const n = e._tiptapEditor;\n  let r = n.state.tr;\n  const s = [];\n  for (const p of t)\n    s.push(\n      ie(p, e.pmSchema, e.schema.styleSchema)\n    );\n  const i = new Set(\n    o.map(\n      (p) => typeof p == \"string\" ? p : p.id\n    )\n  ), a = [], c = typeof o[0] == \"string\" ? o[0] : o[0].id;\n  let l = 0;\n  if (n.state.doc.descendants((p, h) => {\n    if (i.size === 0)\n      return !1;\n    if (!p.type.isInGroup(\"bnBlock\") || !i.has(p.attrs.id))\n      return !0;\n    if (a.push(\n      E(\n        p,\n        e.schema.blockSchema,\n        e.schema.inlineContentSchema,\n        e.schema.styleSchema,\n        e.blockCache\n      )\n    ), i.delete(p.attrs.id), t.length > 0 && p.attrs.id === c) {\n      const b = r.doc.nodeSize;\n      r = r.insert(h, s);\n      const k = r.doc.nodeSize;\n      l += b - k;\n    }\n    const f = r.doc.nodeSize, m = r.doc.resolve(h - l);\n    m.node().type.name === \"blockGroup\" && m.node(m.depth - 1).type.name !== \"doc\" && m.node().childCount === 1 ? r = r.delete(m.before(), m.after()) : r = r.delete(h - l, h - l + p.nodeSize);\n    const g = r.doc.nodeSize;\n    return l += f - g, !1;\n  }), i.size > 0) {\n    const p = [...i].join(`\n`);\n    throw Error(\n      \"Blocks with the following IDs could not be found in the editor: \" + p\n    );\n  }\n  e.dispatch(r);\n  const d = [];\n  for (const p of s)\n    d.push(\n      E(\n        p,\n        e.schema.blockSchema,\n        e.schema.inlineContentSchema,\n        e.schema.styleSchema,\n        e.blockCache\n      )\n    );\n  return { insertedBlocks: d, removedBlocks: a };\n}\nfunction Hs(e, o, t) {\n  return Bo(e, o, t);\n}\nfunction Ds(e, o) {\n  return Bo(e, o, []).removedBlocks;\n}\nfunction Os(e, o) {\n  const t = typeof o == \"string\" ? o : o.id, n = D(t, e._tiptapEditor.state.doc);\n  if (n)\n    return E(\n      n.node,\n      e.schema.blockSchema,\n      e.schema.inlineContentSchema,\n      e.schema.styleSchema,\n      e.blockCache\n    );\n}\nfunction _s(e, o) {\n  const t = typeof o == \"string\" ? o : o.id, n = D(t, e._tiptapEditor.state.doc);\n  if (!n)\n    return;\n  const s = e._tiptapEditor.state.doc.resolve(\n    n.posBeforeNode\n  ).nodeBefore;\n  if (s)\n    return E(\n      s,\n      e.schema.blockSchema,\n      e.schema.inlineContentSchema,\n      e.schema.styleSchema,\n      e.blockCache\n    );\n}\nfunction Rs(e, o) {\n  const t = typeof o == \"string\" ? o : o.id, n = D(t, e._tiptapEditor.state.doc);\n  if (!n)\n    return;\n  const s = e._tiptapEditor.state.doc.resolve(\n    n.posBeforeNode + n.node.nodeSize\n  ).nodeAfter;\n  if (s)\n    return E(\n      s,\n      e.schema.blockSchema,\n      e.schema.inlineContentSchema,\n      e.schema.styleSchema,\n      e.blockCache\n    );\n}\nfunction Vs(e, o) {\n  const t = typeof o == \"string\" ? o : o.id, n = D(t, e._tiptapEditor.state.doc);\n  if (!n)\n    return;\n  const r = e._tiptapEditor.state.doc.resolve(\n    n.posBeforeNode\n  ), s = r.node(), i = r.node(-1), a = i.type.name !== \"doc\" ? s.type.name === \"blockGroup\" ? i : s : void 0;\n  if (a)\n    return E(\n      a,\n      e.schema.blockSchema,\n      e.schema.inlineContentSchema,\n      e.schema.styleSchema,\n      e.blockCache\n    );\n}\nfunction Us(e, o, t, n = { updateSelection: !0 }) {\n  const r = t._tiptapEditor.state.tr;\n  let { from: s, to: i } = typeof e == \"number\" ? { from: e, to: e } : { from: e.from, to: e.to }, a = !0, c = !0, l = \"\";\n  if (o.forEach((d) => {\n    d.check(), a && d.isText && d.marks.length === 0 ? l += d.text : a = !1, c = c ? d.isBlock : !1;\n  }), s === i && c) {\n    const { parent: d } = r.doc.resolve(s);\n    d.isTextblock && !d.type.spec.code && !d.childCount && (s -= 1, i += 1);\n  }\n  return a ? r.insertText(l, s, i) : r.replaceWith(s, i, o), n.updateSelection && (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_15__.selectionToInsertionEnd)(r, r.steps.length - 1, -1), t.dispatch(r), !0;\n}\nfunction $s(e) {\n  const o = e._tiptapEditor.state;\n  if (o.selection.empty || \"node\" in o.selection)\n    return;\n  const t = o.doc.resolve(\n    X(o.doc, o.selection.from).posBeforeNode\n  ), n = o.doc.resolve(\n    X(o.doc, o.selection.to).posBeforeNode\n  ), r = (l, d) => {\n    const p = t.posAtIndex(l, d), h = o.doc.resolve(p).nodeAfter;\n    if (!h)\n      throw new Error(\n        `Error getting selection - node not found at position ${p}`\n      );\n    return E(\n      h,\n      e.schema.blockSchema,\n      e.schema.inlineContentSchema,\n      e.schema.styleSchema,\n      e.blockCache\n    );\n  }, s = [], i = t.sharedDepth(n.pos), a = t.index(i), c = n.index(i);\n  if (t.depth > i) {\n    s.push(\n      E(\n        t.nodeAfter,\n        e.schema.blockSchema,\n        e.schema.inlineContentSchema,\n        e.schema.styleSchema,\n        e.blockCache\n      )\n    );\n    for (let l = t.depth; l > i; l--)\n      if (t.node(l).type.isInGroup(\"childContainer\")) {\n        const p = t.index(l) + 1, h = t.node(l).childCount;\n        for (let f = p; f < h; f++)\n          s.push(r(f, l));\n      }\n  } else\n    s.push(r(a, i));\n  for (let l = a + 1; l <= c; l++)\n    s.push(r(l, i));\n  if (s.length === 0)\n    throw new Error(\n      `Error getting selection - selection doesn't span any blocks (${o.selection})`\n    );\n  return {\n    blocks: s\n  };\n}\nfunction Fs(e, o, t) {\n  const n = typeof o == \"string\" ? o : o.id, r = typeof t == \"string\" ? t : t.id;\n  if (n === r)\n    throw new Error(\n      `Attempting to set selection with the same anchor and head blocks (id ${n})`\n    );\n  const s = e._tiptapEditor.state.doc, i = D(n, s);\n  if (!i)\n    throw new Error(`Block with ID ${n} not found`);\n  const a = D(r, s);\n  if (!a)\n    throw new Error(`Block with ID ${r} not found`);\n  const c = ne(i), l = ne(a), d = e.schema.blockSchema[c.blockNoteType], p = e.schema.blockSchema[l.blockNoteType];\n  if (!c.isBlockContainer || d.content === \"none\")\n    throw new Error(\n      `Attempting to set selection anchor in block without content (id ${n})`\n    );\n  if (!l.isBlockContainer || p.content === \"none\")\n    throw new Error(\n      `Attempting to set selection anchor in block without content (id ${r})`\n    );\n  let h, f;\n  if (d.content === \"table\") {\n    const m = prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.TableMap.get(c.blockContent.node);\n    h = c.blockContent.beforePos + m.positionAt(0, 0, c.blockContent.node) + 1 + 2;\n  } else\n    h = c.blockContent.beforePos + 1;\n  if (p.content === \"table\") {\n    const m = prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.TableMap.get(l.blockContent.node), g = l.blockContent.beforePos + m.positionAt(\n      m.height - 1,\n      m.width - 1,\n      l.blockContent.node\n    ) + 1, b = s.resolve(g).nodeAfter.nodeSize;\n    f = g + b - 2;\n  } else\n    f = l.blockContent.afterPos - 1;\n  e._tiptapEditor.dispatch(\n    e._tiptapEditor.state.tr.setSelection(\n      prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.TextSelection.create(e._tiptapEditor.state.doc, h, f)\n    )\n  );\n}\nfunction zs(e) {\n  const { bnBlock: o } = C(e._tiptapEditor.state), t = e._tiptapEditor.state.doc.resolve(o.beforePos), n = t.nodeBefore, r = e._tiptapEditor.state.doc.resolve(\n    o.afterPos\n  ).nodeAfter;\n  let s;\n  return t.depth > 1 && (s = t.node(), s.type.isInGroup(\"bnBlock\") || (s = t.node(t.depth - 1))), {\n    block: E(\n      o.node,\n      e.schema.blockSchema,\n      e.schema.inlineContentSchema,\n      e.schema.styleSchema,\n      e.blockCache\n    ),\n    prevBlock: n === null ? void 0 : E(\n      n,\n      e.schema.blockSchema,\n      e.schema.inlineContentSchema,\n      e.schema.styleSchema,\n      e.blockCache\n    ),\n    nextBlock: r === null ? void 0 : E(\n      r,\n      e.schema.blockSchema,\n      e.schema.inlineContentSchema,\n      e.schema.styleSchema,\n      e.blockCache\n    ),\n    parentBlock: s === void 0 ? void 0 : E(\n      s,\n      e.schema.blockSchema,\n      e.schema.inlineContentSchema,\n      e.schema.styleSchema,\n      e.blockCache\n    )\n  };\n}\nfunction To(e, o, t = \"start\") {\n  const n = typeof o == \"string\" ? o : o.id, r = D(n, e._tiptapEditor.state.doc);\n  if (!r)\n    throw new Error(`Block with ID ${n} not found`);\n  const s = ne(r), i = e.schema.blockSchema[s.blockNoteType].content;\n  if (s.isBlockContainer) {\n    const a = s.blockContent;\n    if (i === \"none\") {\n      e._tiptapEditor.commands.setNodeSelection(a.beforePos);\n      return;\n    }\n    if (i === \"inline\")\n      t === \"start\" ? e._tiptapEditor.commands.setTextSelection(\n        a.beforePos + 1\n      ) : e._tiptapEditor.commands.setTextSelection(\n        a.afterPos - 1\n      );\n    else if (i === \"table\")\n      t === \"start\" ? e._tiptapEditor.commands.setTextSelection(\n        a.beforePos + 4\n      ) : e._tiptapEditor.commands.setTextSelection(\n        a.afterPos - 4\n      );\n    else\n      throw new $(i);\n  } else {\n    const a = t === \"start\" ? s.childContainer.node.firstChild : s.childContainer.node.lastChild;\n    To(e, a.attrs.id, t);\n  }\n}\nlet ce;\nasync function ut() {\n  if (ce)\n    return ce;\n  const e = await Promise.all([\n    __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_rehype-parse_index_js\").then(__webpack_require__.bind(__webpack_require__, /*! rehype-parse */ \"(app-pages-browser)/./node_modules/rehype-parse/index.js\")),\n    __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_rehype-stringify_index_js\").then(__webpack_require__.bind(__webpack_require__, /*! rehype-stringify */ \"(app-pages-browser)/./node_modules/rehype-stringify/index.js\")),\n    __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_unified_index_js\").then(__webpack_require__.bind(__webpack_require__, /*! unified */ \"(app-pages-browser)/./node_modules/unified/index.js\")),\n    __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_hast-util-from-dom_index_js\").then(__webpack_require__.bind(__webpack_require__, /*! hast-util-from-dom */ \"(app-pages-browser)/./node_modules/hast-util-from-dom/index.js\")),\n    __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_rehype-remark_index_js\").then(__webpack_require__.bind(__webpack_require__, /*! rehype-remark */ \"(app-pages-browser)/./node_modules/rehype-remark/index.js\")),\n    __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_remark-gfm_index_js\").then(__webpack_require__.bind(__webpack_require__, /*! remark-gfm */ \"(app-pages-browser)/./node_modules/remark-gfm/index.js\")),\n    __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_remark-stringify_index_js\").then(__webpack_require__.bind(__webpack_require__, /*! remark-stringify */ \"(app-pages-browser)/./node_modules/remark-stringify/index.js\")),\n    __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_remark-parse_index_js\").then(__webpack_require__.bind(__webpack_require__, /*! remark-parse */ \"(app-pages-browser)/./node_modules/remark-parse/index.js\")),\n    __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_remark-rehype_index_js\").then(__webpack_require__.bind(__webpack_require__, /*! remark-rehype */ \"(app-pages-browser)/./node_modules/remark-rehype/index.js\")),\n    __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_rehype-format_index_js\").then(__webpack_require__.bind(__webpack_require__, /*! rehype-format */ \"(app-pages-browser)/./node_modules/rehype-format/index.js\"))\n  ]);\n  return ce = {\n    rehypeParse: e[0],\n    rehypeStringify: e[1],\n    unified: e[2],\n    hastUtilFromDom: e[3],\n    rehypeRemark: e[4],\n    remarkGfm: e[5],\n    remarkStringify: e[6],\n    remarkParse: e[7],\n    remarkRehype: e[8],\n    rehypeFormat: e[9]\n  }, ce;\n}\nfunction Ws() {\n  const e = (o) => {\n    let t = o.children.length;\n    for (let n = 0; n < t; n++) {\n      const r = o.children[n];\n      if (r.type === \"element\" && (e(r), r.tagName === \"u\"))\n        if (r.children.length > 0) {\n          o.children.splice(n, 1, ...r.children);\n          const s = r.children.length - 1;\n          t += s, n += s;\n        } else\n          o.children.splice(n, 1), t--, n--;\n    }\n  };\n  return e;\n}\nfunction js() {\n  const e = ce;\n  if (!e)\n    throw new Error(\n      \"addSpacesToCheckboxes requires ESM dependencies to be initialized\"\n    );\n  const o = (t) => {\n    var n;\n    if (t.children && \"length\" in t.children && t.children.length)\n      for (let r = t.children.length - 1; r >= 0; r--) {\n        const s = t.children[r], i = r + 1 < t.children.length ? t.children[r + 1] : void 0;\n        s.type === \"element\" && s.tagName === \"input\" && ((n = s.properties) == null ? void 0 : n.type) === \"checkbox\" && (i == null ? void 0 : i.type) === \"element\" && i.tagName === \"p\" ? (i.tagName = \"span\", i.children.splice(\n          0,\n          0,\n          e.hastUtilFromDom.fromDom(\n            document.createTextNode(\" \")\n          )\n        )) : o(s);\n      }\n  };\n  return o;\n}\nfunction ht(e) {\n  const o = ce;\n  if (!o)\n    throw new Error(\n      \"cleanHTMLToMarkdown requires ESM dependencies to be initialized\"\n    );\n  return o.unified.unified().use(o.rehypeParse.default, { fragment: !0 }).use(Ws).use(js).use(o.rehypeRemark.default).use(o.remarkGfm.default).use(o.remarkStringify.default, {\n    handlers: { text: (n) => n.value }\n  }).processSync(e).value;\n}\nasync function Gs(e, o, t, n) {\n  await ut();\n  const s = Ve(o, t).exportBlocks(e, n);\n  return ht(s);\n}\nfunction qs(e) {\n  return Array.prototype.indexOf.call(e.parentElement.childNodes, e);\n}\nfunction Ks(e) {\n  return e.nodeType === 3 && !/\\S/.test(e.nodeValue || \"\");\n}\nfunction Xs(e) {\n  e.querySelectorAll(\"li > ul, li > ol\").forEach((o) => {\n    const t = qs(o), n = o.parentElement, r = Array.from(n.childNodes).slice(\n      t + 1\n    );\n    o.remove(), r.forEach((s) => {\n      s.remove();\n    }), n.insertAdjacentElement(\"afterend\", o), r.reverse().forEach((s) => {\n      if (Ks(s))\n        return;\n      const i = document.createElement(\"li\");\n      i.append(s), o.insertAdjacentElement(\"afterend\", i);\n    }), n.childNodes.length === 0 && n.remove();\n  });\n}\nfunction Js(e) {\n  e.querySelectorAll(\"li + ul, li + ol\").forEach((o) => {\n    var s, i;\n    const t = o.previousElementSibling, n = document.createElement(\"div\");\n    t.insertAdjacentElement(\"afterend\", n), n.append(t);\n    const r = document.createElement(\"div\");\n    for (r.setAttribute(\"data-node-type\", \"blockGroup\"), n.append(r); ((s = n.nextElementSibling) == null ? void 0 : s.nodeName) === \"UL\" || ((i = n.nextElementSibling) == null ? void 0 : i.nodeName) === \"OL\"; )\n      r.append(n.nextElementSibling);\n  });\n}\nlet Lt = null;\nfunction Ys() {\n  return Lt || (Lt = document.implementation.createHTMLDocument(\"title\"));\n}\nfunction xo(e) {\n  if (typeof e == \"string\") {\n    const o = Ys().createElement(\"div\");\n    o.innerHTML = e, e = o;\n  }\n  return Xs(e), Js(e), e;\n}\nasync function Mo(e, o, t, n, r) {\n  const s = xo(e), a = prosemirror_model__WEBPACK_IMPORTED_MODULE_18__.DOMParser.fromSchema(r).parse(s, {\n    topNode: r.nodes.blockGroup.create()\n  }), c = [];\n  for (let l = 0; l < a.childCount; l++)\n    c.push(\n      E(a.child(l), o, t, n)\n    );\n  return c;\n}\nfunction Zs(e, o) {\n  const t = o.value ? o.value : \"\", n = {};\n  o.lang && (n[\"data-language\"] = o.lang);\n  let r = {\n    type: \"element\",\n    tagName: \"code\",\n    properties: n,\n    children: [{ type: \"text\", value: t }]\n  };\n  return o.meta && (r.data = { meta: o.meta }), e.patch(o, r), r = e.applyData(o, r), r = {\n    type: \"element\",\n    tagName: \"pre\",\n    properties: {},\n    children: [r]\n  }, e.patch(o, r), r;\n}\nasync function Po(e) {\n  const o = await ut();\n  return o.unified.unified().use(o.remarkParse.default).use(o.remarkGfm.default).use(o.remarkRehype.default, {\n    handlers: {\n      ...o.remarkRehype.defaultHandlers,\n      code: Zs\n    }\n  }).use(o.rehypeStringify.default).processSync(e).value;\n}\nasync function Qs(e, o, t, n, r) {\n  const s = await Po(e);\n  return Mo(s, o, t, n, r);\n}\nconst ft = [\n  \"vscode-editor-data\",\n  \"blocknote/html\",\n  \"text/markdown\",\n  \"text/html\",\n  \"text/plain\",\n  \"Files\"\n];\nfunction ei(e, o) {\n  if (!e.startsWith(\".\") || !o.startsWith(\".\"))\n    throw new Error(\"The strings provided are not valid file extensions.\");\n  return e === o;\n}\nfunction ti(e, o) {\n  const t = e.split(\"/\"), n = o.split(\"/\");\n  if (t.length !== 2)\n    throw new Error(`The string ${e} is not a valid MIME type.`);\n  if (n.length !== 2)\n    throw new Error(`The string ${o} is not a valid MIME type.`);\n  return t[1] === \"*\" || n[1] === \"*\" ? t[0] === n[0] : (t[0] === \"*\" || n[0] === \"*\" || t[0] === n[0]) && t[1] === n[1];\n}\nfunction At(e, o, t) {\n  let n;\n  return Array.isArray(o.content) && o.content.length === 0 ? n = e.updateBlock(o, t).id : n = e.insertBlocks(\n    [t],\n    o,\n    \"after\"\n  )[0].id, n;\n}\nasync function Io(e, o) {\n  var i;\n  if (!o.uploadFile) {\n    console.warn(\n      \"Attempted ot insert file, but uploadFile is not set in the BlockNote editor options\"\n    );\n    return;\n  }\n  const t = \"dataTransfer\" in e ? e.dataTransfer : e.clipboardData;\n  if (t === null)\n    return;\n  let n = null;\n  for (const a of ft)\n    if (t.types.includes(a)) {\n      n = a;\n      break;\n    }\n  if (n !== \"Files\")\n    return;\n  const r = t.items;\n  if (!r)\n    return;\n  e.preventDefault();\n  const s = Object.values(o.schema.blockSchema).filter(\n    (a) => a.isFileBlock\n  );\n  for (let a = 0; a < r.length; a++) {\n    let c = \"file\";\n    for (const d of s)\n      for (const p of d.fileBlockAccept || []) {\n        const h = p.startsWith(\".\"), f = r[a].getAsFile();\n        if (f && (!h && f.type && ti(r[a].type, p) || h && ei(\n          \".\" + f.name.split(\".\").pop(),\n          p\n        ))) {\n          c = d.type;\n          break;\n        }\n      }\n    const l = r[a].getAsFile();\n    if (l) {\n      const d = {\n        type: c,\n        props: {\n          name: l.name\n        }\n      };\n      let p;\n      if (e.type === \"paste\") {\n        const m = o.getTextCursorPosition().block;\n        p = At(o, m, d);\n      } else if (e.type === \"drop\") {\n        const m = {\n          left: e.clientX,\n          top: e.clientY\n        }, g = (i = o.prosemirrorView) == null ? void 0 : i.posAtCoords(m);\n        if (!g)\n          return;\n        const b = X(\n          o._tiptapEditor.state.doc,\n          g.pos\n        );\n        p = At(\n          o,\n          o.getBlock(b.node.attrs.id),\n          d\n        );\n      } else\n        return;\n      const h = await o.uploadFile(l, p), f = typeof h == \"string\" ? {\n        props: {\n          url: h\n        }\n      } : { ...h };\n      o.updateBlock(p, f);\n    }\n  }\n}\nconst oi = (e) => _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.Extension.create({\n  name: \"dropFile\",\n  addProseMirrorPlugins() {\n    return [\n      new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.Plugin({\n        props: {\n          handleDOMEvents: {\n            drop(o, t) {\n              if (!e.isEditable)\n                return;\n              let n = null;\n              for (const r of ft)\n                if (t.dataTransfer.types.includes(r)) {\n                  n = r;\n                  break;\n                }\n              return n === null ? !0 : n === \"Files\" ? (Io(t, e), !0) : !1;\n            }\n          }\n        }\n      })\n    ];\n  }\n});\nasync function ni(e, o) {\n  const { schema: t } = o.state;\n  if (!e.clipboardData)\n    return !1;\n  const n = e.clipboardData.getData(\"text/plain\");\n  if (!n)\n    return !1;\n  if (!t.nodes.codeBlock)\n    return o.pasteText(n), !0;\n  const r = e.clipboardData.getData(\"vscode-editor-data\"), s = r ? JSON.parse(r) : void 0, i = s == null ? void 0 : s.mode;\n  return i ? (o.pasteHTML(\n    `<pre><code class=\"language-${i}\">${n.replace(\n      /\\r\\n?/g,\n      `\n`\n    )}</code></pre>`\n  ), !0) : !1;\n}\nconst ri = /(^|\\n) {0,3}#{1,6} {1,8}[^\\n]{1,64}\\r?\\n\\r?\\n\\s{0,32}\\S/, si = new RegExp(\"(?:\\\\s|^)(_|__|\\\\*|\\\\*\\\\*|~~|==|\\\\+\\\\+)(?!\\\\s).{1,64}(?<!\\\\s)(?=\\\\1)\"), ii = /\\[[^\\]]{1,128}\\]\\(https?:\\/\\/\\S{1,999}\\)/, ai = new RegExp(\"(?:\\\\s|^)`(?!\\\\s)[^`]{1,48}(?<!\\\\s)`([^\\\\w]|$)\"), ci = /(?:^|\\n)\\s{0,5}-\\s{1}[^\\n]+\\n\\s{0,15}-\\s/, li = /(?:^|\\n)\\s{0,5}\\d+\\.\\s{1}[^\\n]+\\n\\s{0,15}\\d+\\.\\s/, di = /\\n{2} {0,3}-{2,48}\\n{2}/, pi = /(?:\\n|^)(```|~~~|\\$\\$)(?!`|~)[^\\s]{0,64} {0,64}[^\\n]{0,64}\\n[\\s\\S]{0,9999}?\\s*\\1 {0,64}(?:\\n+|$)/, ui = /(?:\\n|^)(?!\\s)\\w[^\\n]{0,64}\\r?\\n(-|=)\\1{0,64}\\n\\n\\s{0,64}(\\w|$)/, hi = /(?:^|(\\r?\\n\\r?\\n))( {0,3}>[^\\n]{1,333}\\n){1,999}($|(\\r?\\n))/, fi = /^\\s*\\|(.+\\|)+\\s*$/m, mi = /^\\s*\\|(\\s*[-:]+[-:]\\s*\\|)+\\s*$/m, gi = /^\\s*\\|(.+\\|)+\\s*$/m, bi = (e) => ri.test(e) || si.test(e) || ii.test(e) || ai.test(e) || ci.test(e) || li.test(e) || di.test(e) || pi.test(e) || ui.test(e) || hi.test(e) || fi.test(e) || mi.test(e) || gi.test(e);\nfunction ki({\n  event: e,\n  editor: o,\n  prioritizeMarkdownOverHTML: t,\n  plainTextAsMarkdown: n\n}) {\n  let r;\n  for (const i of ft)\n    if (e.clipboardData.types.includes(i)) {\n      r = i;\n      break;\n    }\n  if (!r)\n    return !0;\n  if (r === \"vscode-editor-data\")\n    return ni(e, o.prosemirrorView), !0;\n  if (r === \"Files\")\n    return Io(e, o), !0;\n  const s = e.clipboardData.getData(r);\n  if (r === \"blocknote/html\")\n    return o.pasteHTML(s, !0), !0;\n  if (r === \"text/markdown\")\n    return o.pasteMarkdown(s), !0;\n  if (t) {\n    const i = e.clipboardData.getData(\"text/plain\");\n    if (bi(i))\n      return o.pasteMarkdown(i), !0;\n  }\n  return r === \"text/html\" ? (o.pasteHTML(s), !0) : n ? (o.pasteMarkdown(s), !0) : (o.pasteText(s), !0);\n}\nconst wi = (e, o) => _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.Extension.create({\n  name: \"pasteFromClipboard\",\n  addProseMirrorPlugins() {\n    return [\n      new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.Plugin({\n        props: {\n          handleDOMEvents: {\n            paste(t, n) {\n              if (n.preventDefault(), !!e.isEditable)\n                return o({\n                  event: n,\n                  editor: e,\n                  defaultPasteHandler: ({\n                    prioritizeMarkdownOverHTML: r = !0,\n                    plainTextAsMarkdown: s = !0\n                  } = {}) => ki({\n                    event: n,\n                    editor: e,\n                    prioritizeMarkdownOverHTML: r,\n                    plainTextAsMarkdown: s\n                  })\n                });\n            }\n          }\n        }\n      })\n    ];\n  }\n});\nfunction Lo(e, o) {\n  const t = [];\n  return e.descendants((n) => {\n    var r, s;\n    return n.type.name === \"blockContainer\" && ((r = n.firstChild) == null ? void 0 : r.type.name) === \"blockGroup\" ? !0 : n.type.name === \"columnList\" && n.childCount === 1 ? ((s = n.firstChild) == null || s.forEach((i) => {\n      t.push(\n        E(\n          i,\n          o.blockSchema,\n          o.inlineContentSchema,\n          o.styleSchema\n        )\n      );\n    }), !1) : n.type.isInGroup(\"bnBlock\") ? (t.push(\n      E(\n        n,\n        o.blockSchema,\n        o.inlineContentSchema,\n        o.styleSchema\n      )\n    ), !1) : !0;\n  }), t;\n}\nfunction yi(e, o, t) {\n  var a;\n  let n = !1;\n  const r = e.state.selection instanceof prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.CellSelection;\n  if (!r) {\n    const c = e.state.doc.slice(\n      e.state.selection.from,\n      e.state.selection.to,\n      !1\n    ).content, l = [];\n    for (let d = 0; d < c.childCount; d++)\n      l.push(c.child(d));\n    n = l.find(\n      (d) => d.type.isInGroup(\"bnBlock\") || d.type.name === \"blockGroup\" || d.type.spec.group === \"blockContent\"\n    ) === void 0, n && (o = c);\n  }\n  let s;\n  const i = Ve(\n    e.state.schema,\n    t\n  );\n  if (r) {\n    ((a = o.firstChild) == null ? void 0 : a.type.name) === \"table\" && (o = o.firstChild.content);\n    const c = Jt(\n      o,\n      t.schema.inlineContentSchema,\n      t.schema.styleSchema\n    );\n    s = `<table>${i.exportInlineContent(\n      c,\n      {}\n    )}</table>`;\n  } else if (n) {\n    const c = _e(\n      o,\n      t.schema.inlineContentSchema,\n      t.schema.styleSchema\n    );\n    s = i.exportInlineContent(c, {});\n  } else {\n    const c = Lo(o, t.schema);\n    s = i.exportBlocks(c, {});\n  }\n  return s;\n}\nfunction Ao(e, o) {\n  \"node\" in e.state.selection && e.state.selection.node.type.spec.group === \"blockContent\" && o.dispatch(\n    o._tiptapEditor.state.tr.setSelection(\n      new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.NodeSelection(e.state.doc.resolve(e.state.selection.from - 1))\n    )\n  );\n  const t = e.serializeForClipboard(\n    e.state.selection.content()\n  ).dom.innerHTML, n = e.state.selection.content().content, r = yi(\n    e,\n    n,\n    o\n  ), s = ht(r);\n  return { clipboardHTML: t, externalHTML: r, markdown: s };\n}\nconst Nt = () => {\n  const e = window.getSelection();\n  if (!e || e.isCollapsed)\n    return !0;\n  let o = e.focusNode;\n  for (; o; ) {\n    if (o instanceof HTMLElement && o.getAttribute(\"contenteditable\") === \"false\")\n      return !0;\n    o = o.parentElement;\n  }\n  return !1;\n}, Ht = (e, o, t) => {\n  t.preventDefault(), t.clipboardData.clearData();\n  const { clipboardHTML: n, externalHTML: r, markdown: s } = Ao(\n    o,\n    e\n  );\n  t.clipboardData.setData(\"blocknote/html\", n), t.clipboardData.setData(\"text/html\", r), t.clipboardData.setData(\"text/plain\", s);\n}, Ci = (e) => _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.Extension.create({\n  name: \"copyToClipboard\",\n  addProseMirrorPlugins() {\n    return [\n      new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.Plugin({\n        props: {\n          handleDOMEvents: {\n            copy(o, t) {\n              return Nt() || Ht(e, o, t), !0;\n            },\n            cut(o, t) {\n              return Nt() || (Ht(e, o, t), o.editable && o.dispatch(o.state.tr.deleteSelection())), !0;\n            },\n            // This is for the use-case in which only a block without content\n            // is selected, e.g. an image block, and dragged (not using the\n            // drag handle).\n            dragstart(o, t) {\n              if (!(\"node\" in o.state.selection) || o.state.selection.node.type.spec.group !== \"blockContent\")\n                return;\n              e.dispatch(\n                e._tiptapEditor.state.tr.setSelection(\n                  new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.NodeSelection(\n                    o.state.doc.resolve(o.state.selection.from - 1)\n                  )\n                )\n              ), t.preventDefault(), t.dataTransfer.clearData();\n              const { clipboardHTML: n, externalHTML: r, markdown: s } = Ao(o, e);\n              return t.dataTransfer.setData(\"blocknote/html\", n), t.dataTransfer.setData(\"text/html\", r), t.dataTransfer.setData(\"text/plain\", s), !0;\n            }\n          }\n        }\n      })\n    ];\n  }\n}), vi = _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.Extension.create({\n  name: \"blockBackgroundColor\",\n  addGlobalAttributes() {\n    return [\n      {\n        types: [\"blockContainer\", \"tableCell\", \"tableHeader\"],\n        attributes: {\n          backgroundColor: {\n            default: S.backgroundColor.default,\n            parseHTML: (e) => e.hasAttribute(\"data-background-color\") ? e.getAttribute(\"data-background-color\") : S.backgroundColor.default,\n            renderHTML: (e) => e.backgroundColor === S.backgroundColor.default ? {} : {\n              \"data-background-color\": e.backgroundColor\n            }\n          }\n        }\n      }\n    ];\n  }\n}), Ei = (e) => {\n  var n;\n  const o = [];\n  o.push(\n    _tiptap_extension_collaboration__WEBPACK_IMPORTED_MODULE_13__[\"default\"].configure({\n      fragment: e.fragment\n    })\n  );\n  const t = (n = e.provider) == null ? void 0 : n.awareness;\n  if (t) {\n    const r = /* @__PURE__ */ new Map();\n    e.showCursorLabels !== \"always\" && t.on(\n      \"change\",\n      ({\n        updated: a\n      }) => {\n        for (const c of a) {\n          const l = r.get(c);\n          l && (l.element.setAttribute(\"data-active\", \"\"), l.hideTimeout && clearTimeout(l.hideTimeout), r.set(c, {\n            element: l.element,\n            hideTimeout: setTimeout(() => {\n              l.element.removeAttribute(\"data-active\");\n            }, 2e3)\n          }));\n        }\n      }\n    );\n    const s = (a) => {\n      const c = document.createElement(\"span\");\n      c.classList.add(\"bn-collaboration-cursor__base\");\n      const l = document.createElement(\"span\");\n      l.setAttribute(\"contentedEditable\", \"false\"), l.classList.add(\"bn-collaboration-cursor__caret\"), l.setAttribute(\"style\", `background-color: ${a.color}`);\n      const d = document.createElement(\"span\");\n      return d.classList.add(\"bn-collaboration-cursor__label\"), d.setAttribute(\"style\", `background-color: ${a.color}`), d.insertBefore(document.createTextNode(a.name), null), l.insertBefore(d, null), c.insertBefore(document.createTextNode(\"⁠\"), null), c.insertBefore(l, null), c.insertBefore(document.createTextNode(\"⁠\"), null), c;\n    }, i = (a, c) => {\n      var d;\n      let l = r.get(c);\n      if (!l) {\n        const p = ((d = e == null ? void 0 : e.renderCursor) == null ? void 0 : d.call(e, a)) || s(a);\n        (e == null ? void 0 : e.showCursorLabels) !== \"always\" && (p.addEventListener(\"mouseenter\", () => {\n          const h = r.get(c);\n          h.element.setAttribute(\"data-active\", \"\"), h.hideTimeout && (clearTimeout(h.hideTimeout), r.set(c, {\n            element: h.element,\n            hideTimeout: void 0\n          }));\n        }), p.addEventListener(\"mouseleave\", () => {\n          const h = r.get(c);\n          r.set(c, {\n            element: h.element,\n            hideTimeout: setTimeout(() => {\n              h.element.removeAttribute(\"data-active\");\n            }, 2e3)\n          });\n        })), l = {\n          element: p,\n          hideTimeout: void 0\n        }, r.set(c, l);\n      }\n      return l.element;\n    };\n    o.push(\n      _tiptap_extension_collaboration_cursor__WEBPACK_IMPORTED_MODULE_14__[\"default\"].configure({\n        user: e.user,\n        render: i,\n        // tiptap type not compatible with latest y-prosemirror\n        provider: e.provider\n      })\n    );\n  }\n  return o;\n}, No = _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.Mark.create({\n  name: \"comment\",\n  excludes: \"\",\n  inclusive: !1,\n  keepOnSplit: !0,\n  addAttributes() {\n    return {\n      // orphans are marks that currently don't have an active thread. It could be\n      // that users have resolved the thread. Resolved threads by default are not shown in the document,\n      // but we need to keep the mark (positioning) data so we can still \"revive\" it when the thread is unresolved\n      // or we enter a \"comments\" view that includes resolved threads.\n      orphan: {\n        parseHTML: (e) => !!e.getAttribute(\"data-orphan\"),\n        renderHTML: (e) => e.orphan ? {\n          \"data-orphan\": \"true\"\n        } : {},\n        default: !1\n      },\n      threadId: {\n        parseHTML: (e) => e.getAttribute(\"data-bn-thread-id\"),\n        renderHTML: (e) => ({\n          \"data-bn-thread-id\": e.threadId\n        }),\n        default: \"\"\n      }\n    };\n  },\n  renderHTML({ HTMLAttributes: e }) {\n    return [\n      \"span\",\n      (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_15__.mergeAttributes)(e, {\n        class: \"bn-thread-mark\"\n      })\n    ];\n  },\n  parseHTML() {\n    return [{ tag: \"span.bn-thread-mark\" }];\n  },\n  extendMarkSchema(e) {\n    return e.name === \"comment\" ? {\n      blocknoteIgnore: !0\n    } : {};\n  }\n});\nclass q {\n  constructor() {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    u(this, \"callbacks\", {});\n  }\n  on(o, t) {\n    return this.callbacks[o] || (this.callbacks[o] = []), this.callbacks[o].push(t), () => this.off(o, t);\n  }\n  emit(o, ...t) {\n    const n = this.callbacks[o];\n    n && n.forEach((r) => r.apply(this, t));\n  }\n  off(o, t) {\n    const n = this.callbacks[o];\n    n && (t ? this.callbacks[o] = n.filter((r) => r !== t) : delete this.callbacks[o]);\n  }\n  removeAllListeners() {\n    this.callbacks = {};\n  }\n}\nclass Si extends q {\n  constructor(t) {\n    super();\n    u(this, \"userCache\", /* @__PURE__ */ new Map());\n    // avoid duplicate loads\n    u(this, \"loadingUsers\", /* @__PURE__ */ new Set());\n    this.resolveUsers = t;\n  }\n  /**\n   * Load information about users based on an array of user ids.\n   */\n  async loadUsers(t) {\n    const n = t.filter(\n      (r) => !this.userCache.has(r) && !this.loadingUsers.has(r)\n    );\n    if (n.length !== 0) {\n      for (const r of n)\n        this.loadingUsers.add(r);\n      try {\n        const r = await this.resolveUsers(n);\n        for (const s of r)\n          this.userCache.set(s.id, s);\n        this.emit(\"update\", this.userCache);\n      } finally {\n        for (const r of n)\n          this.loadingUsers.delete(r);\n      }\n    }\n  }\n  /**\n   * Retrieve information about a user based on their id, if cached.\n   *\n   * The user will have to be loaded via `loadUsers` first\n   */\n  getUser(t) {\n    return this.userCache.get(t);\n  }\n  /**\n   * Subscribe to changes in the user store.\n   *\n   * @param cb - The callback to call when the user store changes.\n   * @returns A function to unsubscribe from the user store.\n   */\n  subscribe(t) {\n    return this.on(\"update\", t);\n  }\n}\nconst xe = new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.PluginKey(\"blocknote-comments\"), Bi = \"SET_SELECTED_THREAD_ID\";\nfunction Ti(e, o) {\n  const t = /* @__PURE__ */ new Map();\n  return e.descendants((n, r) => {\n    n.marks.forEach((s) => {\n      if (s.type.name === o) {\n        const i = s.attrs.threadId;\n        if (!i)\n          return;\n        const a = r, c = a + n.nodeSize, l = t.get(i) ?? {\n          from: 1 / 0,\n          to: 0\n        };\n        t.set(i, {\n          from: Math.min(a, l.from),\n          to: Math.max(c, l.to)\n        });\n      }\n    });\n  }), t;\n}\nclass xi extends q {\n  constructor(t, n, r) {\n    super();\n    u(this, \"plugin\");\n    u(this, \"userStore\");\n    /**\n     * Whether a comment is currently being composed\n     */\n    u(this, \"pendingComment\", !1);\n    /**\n     * The currently selected thread id\n     */\n    u(this, \"selectedThreadId\");\n    /**\n     * Store the positions of all threads in the document.\n     * this can be used later to implement a floating sidebar\n     */\n    u(this, \"threadPositions\", /* @__PURE__ */ new Map());\n    /**\n     * when a thread is resolved or deleted, we need to update the marks to reflect the new state\n     */\n    u(this, \"updateMarksFromThreads\", (t) => {\n      const n = this.editor._tiptapEditor;\n      n.state.doc.descendants((r, s) => {\n        r.marks.forEach((i) => {\n          if (i.type.name === this.markType) {\n            const a = i.type, c = i.attrs.threadId, l = t.get(c), d = !!(!l || l.resolved || l.deletedAt);\n            if (d !== i.attrs.orphan) {\n              const { tr: p } = n.state, h = Math.max(s, 0), f = Math.min(\n                s + r.nodeSize,\n                n.state.doc.content.size - 1\n              );\n              p.removeMark(h, f, i), p.addMark(\n                h,\n                f,\n                a.create({\n                  ...i.attrs,\n                  orphan: d\n                })\n              ), n.dispatch(p), d && this.selectedThreadId === c && (this.selectedThreadId = void 0, this.emitStateUpdate());\n            }\n          }\n        });\n      });\n    });\n    if (this.editor = t, this.threadStore = n, this.markType = r, !t.resolveUsers)\n      throw new Error(\"resolveUsers is required for comments\");\n    this.userStore = new Si(t.resolveUsers), this.threadStore.subscribe(this.updateMarksFromThreads), t.onCreate(() => {\n      this.updateMarksFromThreads(this.threadStore.getThreads()), t.onSelectionChange(() => {\n        this.pendingComment && (this.pendingComment = !1, this.emitStateUpdate());\n      });\n    });\n    const s = this;\n    this.plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.Plugin({\n      key: xe,\n      state: {\n        init() {\n          return {\n            decorations: prosemirror_view__WEBPACK_IMPORTED_MODULE_22__.DecorationSet.empty\n          };\n        },\n        apply(i, a) {\n          const c = i.getMeta(xe);\n          if (!i.docChanged && !c)\n            return a;\n          const l = i.docChanged ? Ti(i.doc, s.markType) : s.threadPositions;\n          (l.size > 0 || s.threadPositions.size > 0) && (s.threadPositions = l, s.emitStateUpdate());\n          const d = [];\n          if (s.selectedThreadId) {\n            const p = l.get(\n              s.selectedThreadId\n            );\n            p && d.push(\n              prosemirror_view__WEBPACK_IMPORTED_MODULE_22__.Decoration.inline(\n                p.from,\n                p.to,\n                {\n                  class: \"bn-thread-mark-selected\"\n                }\n              )\n            );\n          }\n          return {\n            decorations: prosemirror_view__WEBPACK_IMPORTED_MODULE_22__.DecorationSet.create(i.doc, d)\n          };\n        }\n      },\n      props: {\n        decorations(i) {\n          var a;\n          return ((a = xe.getState(i)) == null ? void 0 : a.decorations) ?? prosemirror_view__WEBPACK_IMPORTED_MODULE_22__.DecorationSet.empty;\n        },\n        /**\n         * Handle click on a thread mark and mark it as selected\n         */\n        handleClick: (i, a, c) => {\n          if (c.button !== 0)\n            return;\n          const l = i.state.doc.nodeAt(a);\n          if (!l) {\n            s.selectThread(void 0);\n            return;\n          }\n          const d = l.marks.find(\n            (h) => h.type.name === r && h.attrs.orphan !== !0\n          ), p = d == null ? void 0 : d.attrs.threadId;\n          s.selectThread(p, !1);\n        }\n      }\n    });\n  }\n  emitStateUpdate() {\n    this.emit(\"update\", {\n      selectedThreadId: this.selectedThreadId,\n      pendingComment: this.pendingComment,\n      threadPositions: this.threadPositions\n    });\n  }\n  /**\n   * Subscribe to state updates\n   */\n  onUpdate(t) {\n    return this.on(\"update\", t);\n  }\n  /**\n   * Set the selected thread\n   */\n  selectThread(t, n = !0) {\n    var r, s;\n    if (this.selectedThreadId !== t && (this.selectedThreadId = t, this.emitStateUpdate(), this.editor.dispatch(\n      this.editor.prosemirrorView.state.tr.setMeta(xe, {\n        name: Bi\n      })\n    ), t && n)) {\n      const i = this.threadPositions.get(t);\n      if (!i)\n        return;\n      (s = (r = this.editor.prosemirrorView) == null ? void 0 : r.domAtPos(i.from).node) == null || s.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"center\"\n      });\n    }\n  }\n  /**\n   * Start a pending comment (e.g.: when clicking the \"Add comment\" button)\n   */\n  startPendingComment() {\n    this.pendingComment = !0, this.emitStateUpdate();\n  }\n  /**\n   * Stop a pending comment (e.g.: user closes the comment composer)\n   */\n  stopPendingComment() {\n    this.pendingComment = !1, this.emitStateUpdate();\n  }\n  /**\n   * Create a thread at the current selection\n   */\n  async createThread(t) {\n    const n = await this.threadStore.createThread(t);\n    if (this.threadStore.addThreadToDocument) {\n      const r = this.editor.prosemirrorView, s = r.state.selection, i = y_prosemirror__WEBPACK_IMPORTED_MODULE_23__.ySyncPluginKey.getState(r.state), a = {\n        prosemirror: {\n          head: s.head,\n          anchor: s.anchor\n        },\n        yjs: i ? (0,y_prosemirror__WEBPACK_IMPORTED_MODULE_24__.getRelativeSelection)(i.binding, r.state) : void 0\n        // if we're not using yjs\n      };\n      await this.threadStore.addThreadToDocument({\n        threadId: n.id,\n        selection: a\n      });\n    } else\n      this.editor._tiptapEditor.commands.setMark(this.markType, {\n        orphan: !1,\n        threadId: n.id\n      });\n  }\n}\nclass Mi {\n  constructor(o, t, n, r) {\n    u(this, \"state\");\n    u(this, \"emitUpdate\");\n    u(this, \"mouseDownHandler\", () => {\n      var o;\n      (o = this.state) != null && o.show && (this.state.show = !1, this.emitUpdate());\n    });\n    // For dragging the whole editor.\n    u(this, \"dragstartHandler\", () => {\n      var o;\n      (o = this.state) != null && o.show && (this.state.show = !1, this.emitUpdate());\n    });\n    u(this, \"scrollHandler\", () => {\n      var o;\n      if ((o = this.state) != null && o.show) {\n        const t = this.pmView.root.querySelector(\n          `[data-node-type=\"blockContainer\"][data-id=\"${this.state.block.id}\"]`\n        );\n        if (!t)\n          return;\n        this.state.referencePos = t.getBoundingClientRect(), this.emitUpdate();\n      }\n    });\n    u(this, \"closeMenu\", () => {\n      var o;\n      (o = this.state) != null && o.show && (this.state.show = !1, this.emitUpdate());\n    });\n    this.editor = o, this.pluginKey = t, this.pmView = n, this.emitUpdate = () => {\n      if (!this.state)\n        throw new Error(\"Attempting to update uninitialized file panel\");\n      r(this.state);\n    }, n.dom.addEventListener(\"mousedown\", this.mouseDownHandler), n.dom.addEventListener(\"dragstart\", this.dragstartHandler), n.root.addEventListener(\"scroll\", this.scrollHandler, !0);\n  }\n  update(o, t) {\n    var r, s;\n    const n = this.pluginKey.getState(o.state);\n    if (!((r = this.state) != null && r.show) && n.block && this.editor.isEditable) {\n      const i = this.pmView.root.querySelector(\n        `[data-node-type=\"blockContainer\"][data-id=\"${n.block.id}\"]`\n      );\n      if (!i)\n        return;\n      this.state = {\n        show: !0,\n        referencePos: i.getBoundingClientRect(),\n        block: n.block\n      }, this.emitUpdate();\n      return;\n    }\n    (!o.state.selection.eq(t.selection) || !o.state.doc.eq(t.doc) || !this.editor.isEditable) && (s = this.state) != null && s.show && (this.state.show = !1, this.emitUpdate());\n  }\n  destroy() {\n    this.pmView.dom.removeEventListener(\"mousedown\", this.mouseDownHandler), this.pmView.dom.removeEventListener(\"dragstart\", this.dragstartHandler), this.pmView.root.removeEventListener(\"scroll\", this.scrollHandler, !0);\n  }\n}\nconst Ge = new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.PluginKey(\"FilePanelPlugin\");\nclass Pi extends q {\n  constructor(t) {\n    super();\n    u(this, \"view\");\n    u(this, \"plugin\");\n    u(this, \"closeMenu\", () => {\n      var t;\n      return (t = this.view) == null ? void 0 : t.closeMenu();\n    });\n    this.plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.Plugin({\n      key: Ge,\n      view: (n) => (this.view = new Mi(\n        t,\n        Ge,\n        n,\n        (r) => {\n          this.emit(\"update\", r);\n        }\n      ), this.view),\n      props: {\n        handleKeyDown: (n, r) => {\n          var s;\n          return r.key === \"Escape\" && this.shown ? ((s = this.view) == null || s.closeMenu(), !0) : !1;\n        }\n      },\n      state: {\n        init: () => ({\n          block: void 0\n        }),\n        apply: (n) => {\n          var s;\n          return {\n            block: (s = n.getMeta(Ge)) == null ? void 0 : s.block\n          };\n        }\n      }\n    });\n  }\n  get shown() {\n    var t, n;\n    return ((n = (t = this.view) == null ? void 0 : t.state) == null ? void 0 : n.show) || !1;\n  }\n  onUpdate(t) {\n    return this.on(\"update\", t);\n  }\n}\nclass Ii {\n  constructor(o, t, n) {\n    u(this, \"state\");\n    u(this, \"emitUpdate\");\n    u(this, \"preventHide\", !1);\n    u(this, \"preventShow\", !1);\n    u(this, \"shouldShow\", ({ state: o, from: t, to: n }) => {\n      const { doc: r, selection: s } = o, { empty: i } = s, a = !r.textBetween(t, n).length && (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_15__.isTextSelection)(o.selection);\n      return s.$from.parent.type.spec.code || (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_15__.isNodeSelection)(s) && s.node.type.spec.code ? !1 : !(i || a);\n    });\n    u(this, \"blurHandler\", (o) => {\n      var n;\n      if (this.preventHide) {\n        this.preventHide = !1;\n        return;\n      }\n      const t = this.pmView.dom.parentElement;\n      // An element is clicked.\n      o && o.relatedTarget && // Element is inside the editor.\n      (t === o.relatedTarget || t.contains(o.relatedTarget) || o.relatedTarget.matches(\n        \".bn-ui-container, .bn-ui-container *\"\n      )) || (n = this.state) != null && n.show && (this.state.show = !1, this.emitUpdate());\n    });\n    u(this, \"viewMousedownHandler\", () => {\n      this.preventShow = !0;\n    });\n    u(this, \"mouseupHandler\", () => {\n      this.preventShow && (this.preventShow = !1, setTimeout(() => this.update(this.pmView)));\n    });\n    // For dragging the whole editor.\n    u(this, \"dragHandler\", () => {\n      var o;\n      (o = this.state) != null && o.show && (this.state.show = !1, this.emitUpdate());\n    });\n    u(this, \"scrollHandler\", () => {\n      var o;\n      (o = this.state) != null && o.show && (this.state.referencePos = this.getSelectionBoundingBox(), this.emitUpdate());\n    });\n    u(this, \"closeMenu\", () => {\n      var o;\n      (o = this.state) != null && o.show && (this.state.show = !1, this.emitUpdate());\n    });\n    this.editor = o, this.pmView = t, this.emitUpdate = () => {\n      if (!this.state)\n        throw new Error(\n          \"Attempting to update uninitialized formatting toolbar\"\n        );\n      n(this.state);\n    }, t.dom.addEventListener(\"mousedown\", this.viewMousedownHandler), t.root.addEventListener(\"mouseup\", this.mouseupHandler), t.dom.addEventListener(\"dragstart\", this.dragHandler), t.dom.addEventListener(\"dragover\", this.dragHandler), t.dom.addEventListener(\"blur\", this.blurHandler), t.root.addEventListener(\"scroll\", this.scrollHandler, !0);\n  }\n  update(o, t) {\n    var h;\n    const { state: n, composing: r } = o, { selection: s } = n, i = t && t.selection.from === n.selection.from && t.selection.to === n.selection.to;\n    if (r || i)\n      return;\n    const { ranges: a } = s, c = Math.min(...a.map((f) => f.$from.pos)), l = Math.max(...a.map((f) => f.$to.pos)), d = this.shouldShow({\n      view: o,\n      state: n,\n      from: c,\n      to: l\n    }), p = typeof Range.prototype.getClientRects > \"u\";\n    if (!this.preventShow && (d || this.preventHide) && !p) {\n      this.state = {\n        show: !0,\n        referencePos: this.getSelectionBoundingBox()\n      }, this.emitUpdate();\n      return;\n    }\n    if ((h = this.state) != null && h.show && !this.preventHide && (!d || this.preventShow || !this.editor.isEditable)) {\n      this.state.show = !1, this.emitUpdate();\n      return;\n    }\n  }\n  destroy() {\n    this.pmView.dom.removeEventListener(\"mousedown\", this.viewMousedownHandler), this.pmView.root.removeEventListener(\"mouseup\", this.mouseupHandler), this.pmView.dom.removeEventListener(\"dragstart\", this.dragHandler), this.pmView.dom.removeEventListener(\"dragover\", this.dragHandler), this.pmView.dom.removeEventListener(\"blur\", this.blurHandler), this.pmView.root.removeEventListener(\"scroll\", this.scrollHandler, !0);\n  }\n  getSelectionBoundingBox() {\n    const { state: o } = this.pmView, { selection: t } = o, { ranges: n } = t, r = Math.min(...n.map((i) => i.$from.pos)), s = Math.max(...n.map((i) => i.$to.pos));\n    if ((0,_tiptap_core__WEBPACK_IMPORTED_MODULE_15__.isNodeSelection)(t)) {\n      const i = this.pmView.nodeDOM(r);\n      if (i)\n        return i.getBoundingClientRect();\n    }\n    return (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_15__.posToDOMRect)(this.pmView, r, s);\n  }\n}\nconst Li = new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.PluginKey(\n  \"FormattingToolbarPlugin\"\n);\nclass Ai extends q {\n  constructor(t) {\n    super();\n    u(this, \"view\");\n    u(this, \"plugin\");\n    u(this, \"closeMenu\", () => this.view.closeMenu());\n    this.plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.Plugin({\n      key: Li,\n      view: (n) => (this.view = new Ii(t, n, (r) => {\n        this.emit(\"update\", r);\n      }), this.view),\n      props: {\n        handleKeyDown: (n, r) => r.key === \"Escape\" && this.shown ? (this.view.closeMenu(), !0) : !1\n      }\n    });\n  }\n  get shown() {\n    var t, n;\n    return ((n = (t = this.view) == null ? void 0 : t.state) == null ? void 0 : n.show) || !1;\n  }\n  onUpdate(t) {\n    return this.on(\"update\", t);\n  }\n}\nconst Ni = _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.Node.create({\n  name: \"hardBreak\",\n  inline: !0,\n  group: \"inline\",\n  selectable: !1,\n  linebreakReplacement: !0,\n  priority: 10,\n  parseHTML() {\n    return [{ tag: \"br\" }];\n  },\n  renderHTML({ HTMLAttributes: e }) {\n    return [\"br\", (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_15__.mergeAttributes)(this.options.HTMLAttributes, e)];\n  },\n  renderText() {\n    return `\n`;\n  }\n}), Dt = (e, o) => {\n  const t = e.resolve(o);\n  if (t.depth <= 1)\n    return;\n  const n = t.posAtIndex(\n    t.index(t.depth - 1),\n    t.depth - 1\n  );\n  return Ce(\n    e.resolve(n)\n  );\n}, Le = (e, o) => {\n  const t = e.resolve(o), n = t.index();\n  if (n === 0)\n    return;\n  const r = t.posAtIndex(n - 1);\n  return Ce(\n    e.resolve(r)\n  );\n}, Ho = (e, o) => {\n  for (; o.childContainer; ) {\n    const t = o.childContainer.node, n = e.resolve(o.childContainer.beforePos + 1).posAtIndex(t.childCount - 1);\n    o = Ce(e.resolve(n));\n  }\n  return o;\n}, Hi = (e, o) => e.isBlockContainer && e.blockContent.node.type.spec.content === \"inline*\" && e.blockContent.node.childCount > 0 && o.isBlockContainer && o.blockContent.node.type.spec.content === \"inline*\", Di = (e, o, t, n) => {\n  if (!n.isBlockContainer)\n    throw new Error(\n      `Attempted to merge block at position ${n.bnBlock.beforePos} into previous block at position ${t.bnBlock.beforePos}, but next block is not a block container`\n    );\n  if (n.childContainer) {\n    const r = e.doc.resolve(\n      n.childContainer.beforePos + 1\n    ), s = e.doc.resolve(\n      n.childContainer.afterPos - 1\n    ), i = r.blockRange(s);\n    if (o) {\n      const a = e.doc.resolve(n.bnBlock.beforePos);\n      e.tr.lift(i, a.depth);\n    }\n  }\n  if (o) {\n    if (!t.isBlockContainer)\n      throw new Error(\n        `Attempted to merge block at position ${n.bnBlock.beforePos} into previous block at position ${t.bnBlock.beforePos}, but previous block is not a block container`\n      );\n    o(\n      e.tr.delete(\n        t.blockContent.afterPos - 1,\n        n.blockContent.beforePos + 1\n      )\n    );\n  }\n  return !0;\n}, Ot = (e) => ({\n  state: o,\n  dispatch: t\n}) => {\n  const n = o.doc.resolve(e), r = Ce(n), s = Le(\n    o.doc,\n    r.bnBlock.beforePos\n  );\n  if (!s)\n    return !1;\n  const i = Ho(\n    o.doc,\n    s\n  );\n  return Hi(i, r) ? Di(o, t, i, r) : !1;\n}, Oi = _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.Extension.create({\n  priority: 50,\n  // TODO: The shortcuts need a refactor. Do we want to use a command priority\n  //  design as there is now, or clump the logic into a single function?\n  addKeyboardShortcuts() {\n    const e = () => this.editor.commands.first(({ chain: n, commands: r }) => [\n      // Deletes the selection if it's not empty.\n      () => r.deleteSelection(),\n      // Undoes an input rule if one was triggered in the last editor state change.\n      () => r.undoInputRule(),\n      // Reverts block content type to a paragraph if the selection is at the start of the block.\n      () => r.command(({ state: s }) => {\n        const i = C(s);\n        if (!i.isBlockContainer)\n          return !1;\n        const a = s.selection.from === i.blockContent.beforePos + 1, c = i.blockContent.node.type.name === \"paragraph\";\n        return a && !c ? r.command(\n          x(\n            this.options.editor,\n            i.bnBlock.beforePos,\n            {\n              type: \"paragraph\",\n              props: {}\n            }\n          )\n        ) : !1;\n      }),\n      // Removes a level of nesting if the block is indented if the selection is at the start of the block.\n      () => r.command(({ state: s }) => {\n        const i = C(s);\n        if (!i.isBlockContainer)\n          return !1;\n        const { blockContent: a } = i;\n        return s.selection.from === a.beforePos + 1 ? r.liftListItem(\"blockContainer\") : !1;\n      }),\n      // Merges block with the previous one if it isn't indented, and the selection is at the start of the\n      // block. The target block for merging must contain inline content.\n      () => r.command(({ state: s }) => {\n        const i = C(s);\n        if (!i.isBlockContainer)\n          return !1;\n        const { bnBlock: a, blockContent: c } = i, l = s.selection.from === c.beforePos + 1, d = s.selection.empty, p = a.beforePos;\n        return l && d ? n().command(Ot(p)).scrollIntoView().run() : !1;\n      }),\n      () => r.command(({ state: s, dispatch: i }) => {\n        const a = C(s);\n        if (!a.isBlockContainer || !(s.selection.from === a.blockContent.beforePos + 1) || Le(\n          s.doc,\n          a.bnBlock.beforePos\n        ))\n          return !1;\n        const d = Dt(\n          s.doc,\n          a.bnBlock.beforePos\n        );\n        if ((d == null ? void 0 : d.blockNoteType) !== \"column\")\n          return !1;\n        const p = d, h = Dt(\n          s.doc,\n          p.bnBlock.beforePos\n        );\n        if ((h == null ? void 0 : h.blockNoteType) !== \"columnList\")\n          throw new Error(\"parent of column is not a column list\");\n        const f = p.childContainer.node.childCount === 1, m = f && h.childContainer.node.childCount === 2, g = h.childContainer.node.firstChild === p.bnBlock.node;\n        if (i) {\n          const b = s.doc.slice(\n            a.bnBlock.beforePos,\n            a.bnBlock.afterPos,\n            !1\n          );\n          if (m)\n            if (g) {\n              s.tr.step(\n                new prosemirror_transform__WEBPACK_IMPORTED_MODULE_19__.ReplaceAroundStep(\n                  // replace entire column list\n                  h.bnBlock.beforePos,\n                  h.bnBlock.afterPos,\n                  // select content of remaining column:\n                  p.bnBlock.afterPos + 1,\n                  h.bnBlock.afterPos - 2,\n                  b,\n                  b.size,\n                  // append existing content to blockToMove\n                  !1\n                )\n              );\n              const k = s.tr.doc.resolve(p.bnBlock.beforePos);\n              s.tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.TextSelection.between(k, k));\n            } else {\n              s.tr.step(\n                new prosemirror_transform__WEBPACK_IMPORTED_MODULE_19__.ReplaceAroundStep(\n                  // replace entire column list\n                  h.bnBlock.beforePos,\n                  h.bnBlock.afterPos,\n                  // select content of existing column:\n                  h.bnBlock.beforePos + 2,\n                  p.bnBlock.beforePos - 1,\n                  b,\n                  0,\n                  // prepend existing content to blockToMove\n                  !1\n                )\n              );\n              const k = s.tr.doc.resolve(\n                s.tr.mapping.map(p.bnBlock.beforePos - 1)\n              );\n              s.tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.TextSelection.between(k, k));\n            }\n          else if (f)\n            if (g) {\n              s.tr.delete(\n                p.bnBlock.beforePos,\n                p.bnBlock.afterPos\n              ), s.tr.insert(\n                h.bnBlock.beforePos,\n                b.content\n              );\n              const k = s.tr.doc.resolve(\n                h.bnBlock.beforePos\n              );\n              s.tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.TextSelection.between(k, k));\n            } else\n              s.tr.delete(\n                p.bnBlock.beforePos - 1,\n                p.bnBlock.beforePos + 1\n              );\n          else {\n            s.tr.delete(\n              a.bnBlock.beforePos,\n              a.bnBlock.afterPos\n            ), g ? s.tr.insert(\n              h.bnBlock.beforePos - 1,\n              b.content\n            ) : s.tr.insert(\n              p.bnBlock.beforePos - 1,\n              b.content\n            );\n            const k = s.tr.doc.resolve(p.bnBlock.beforePos - 1);\n            s.tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.TextSelection.between(k, k));\n          }\n        }\n        return !0;\n      }),\n      // Deletes the current block if it's an empty block with inline content,\n      // and moves the selection to the previous block.\n      () => r.command(({ state: s }) => {\n        const i = C(s);\n        if (!i.isBlockContainer)\n          return !1;\n        if (i.blockContent.node.childCount === 0 && i.blockContent.node.type.spec.content === \"inline*\") {\n          const c = Le(\n            s.doc,\n            i.bnBlock.beforePos\n          );\n          if (!c || !c.isBlockContainer)\n            return !1;\n          let l = n();\n          if (c.blockContent.node.type.spec.content === \"tableRow+\") {\n            const m = i.bnBlock.beforePos - 1 - 1 - 1 - 1 - 1;\n            l = l.setTextSelection(\n              m\n            );\n          } else if (c.blockContent.node.type.spec.content === \"\") {\n            const d = c.blockContent.afterPos - c.blockContent.node.nodeSize;\n            l = l.setNodeSelection(\n              d\n            );\n          } else {\n            const d = c.blockContent.afterPos - c.blockContent.node.nodeSize;\n            l = l.setTextSelection(d);\n          }\n          return l.deleteRange({\n            from: i.bnBlock.beforePos,\n            to: i.bnBlock.afterPos\n          }).scrollIntoView().run();\n        }\n        return !1;\n      }),\n      // Deletes previous block if it contains no content and isn't a table,\n      // when the selection is empty and at the start of the block. Moves the\n      // current block into the deleted block's place.\n      () => r.command(({ state: s }) => {\n        const i = C(s);\n        if (!i.isBlockContainer)\n          throw new Error(\"todo\");\n        const a = s.selection.from === i.blockContent.beforePos + 1, c = s.selection.empty, l = Le(\n          s.doc,\n          i.bnBlock.beforePos\n        );\n        if (l && a && c) {\n          const d = Ho(\n            s.doc,\n            l\n          );\n          if (!d.isBlockContainer)\n            throw new Error(\"todo\");\n          if (d.blockContent.node.type.spec.content === \"\" || d.blockContent.node.type.spec.content === \"inline*\" && d.blockContent.node.childCount === 0)\n            return n().cut(\n              {\n                from: i.bnBlock.beforePos,\n                to: i.bnBlock.afterPos\n              },\n              d.bnBlock.afterPos\n            ).deleteRange({\n              from: d.bnBlock.beforePos,\n              to: d.bnBlock.afterPos\n            }).run();\n        }\n        return !1;\n      })\n    ]), o = () => this.editor.commands.first(({ commands: n }) => [\n      // Deletes the selection if it's not empty.\n      () => n.deleteSelection(),\n      // Merges block with the next one (at the same nesting level or lower),\n      // if one exists, the block has no children, and the selection is at the\n      // end of the block.\n      () => n.command(({ state: r }) => {\n        const s = C(r);\n        if (!s.isBlockContainer)\n          return !1;\n        const {\n          bnBlock: i,\n          blockContent: a,\n          childContainer: c\n        } = s, { depth: l } = r.doc.resolve(i.beforePos), d = i.afterPos === r.doc.nodeSize - 3, p = r.selection.from === a.afterPos - 1, h = r.selection.empty;\n        if (!d && p && h && !(c !== void 0)) {\n          let m = l, g = i.afterPos + 1, b = r.doc.resolve(g).depth;\n          for (; b < m; )\n            m = b, g += 2, b = r.doc.resolve(g).depth;\n          return n.command(Ot(g - 1));\n        }\n        return !1;\n      })\n    ]), t = (n = !1) => this.editor.commands.first(({ commands: r }) => [\n      // Removes a level of nesting if the block is empty & indented, while the selection is also empty & at the start\n      // of the block.\n      () => r.command(({ state: s }) => {\n        const i = C(s);\n        if (!i.isBlockContainer)\n          return !1;\n        const { bnBlock: a, blockContent: c } = i, { depth: l } = s.doc.resolve(a.beforePos), d = s.selection.$anchor.parentOffset === 0, p = s.selection.anchor === s.selection.head, h = c.node.childCount === 0, f = l > 1;\n        return d && p && h && f ? r.liftListItem(\"blockContainer\") : !1;\n      }),\n      // Creates a hard break if block is configured to do so.\n      () => r.command(({ state: s }) => {\n        const i = C(s), a = this.options.editor.schema.blockSchema[i.blockNoteType].hardBreakShortcut ?? \"shift+enter\";\n        return a === \"none\" ? !1 : (\n          // If shortcut is not configured, or is configured as \"shift+enter\",\n          // create a hard break for shift+enter, but not for enter.\n          a === \"shift+enter\" && n || // If shortcut is configured as \"enter\", create a hard break for\n          // both enter and shift+enter.\n          a === \"enter\" ? r.insertContent({\n            type: \"hardBreak\"\n          }) : !1\n        );\n      }),\n      // Creates a new block and moves the selection to it if the current one is empty, while the selection is also\n      // empty & at the start of the block.\n      () => r.command(({ state: s, dispatch: i }) => {\n        const a = C(s);\n        if (!a.isBlockContainer)\n          return !1;\n        const { bnBlock: c, blockContent: l } = a, d = s.selection.$anchor.parentOffset === 0, p = s.selection.anchor === s.selection.head, h = l.node.childCount === 0;\n        if (d && p && h) {\n          const f = c.afterPos, m = f + 2;\n          if (i) {\n            const g = s.schema.nodes.blockContainer.createAndFill();\n            s.tr.insert(f, g).scrollIntoView(), s.tr.setSelection(\n              new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.TextSelection(s.doc.resolve(m))\n            );\n          }\n          return !0;\n        }\n        return !1;\n      }),\n      // Splits the current block, moving content inside that's after the cursor to a new text block below. Also\n      // deletes the selection beforehand, if it's not empty.\n      () => r.command(({ state: s, chain: i }) => {\n        const a = C(s);\n        if (!a.isBlockContainer)\n          return !1;\n        const { blockContent: c } = a, l = s.selection.$anchor.parentOffset === 0;\n        return c.node.childCount === 0 ? !1 : (i().deleteSelection().command(\n          uo(\n            s.selection.from,\n            l,\n            l\n          )\n        ).run(), !0);\n      })\n    ]);\n    return {\n      Backspace: e,\n      Delete: o,\n      Enter: () => t(),\n      \"Shift-Enter\": () => t(!0),\n      // Always returning true for tab key presses ensures they're not captured by the browser. Otherwise, they blur the\n      // editor since the browser will try to use tab for keyboard navigation.\n      Tab: () => {\n        var n, r, s;\n        return this.options.tabBehavior !== \"prefer-indent\" && ((n = this.options.editor.formattingToolbar) != null && n.shown || (r = this.options.editor.linkToolbar) != null && r.shown || (s = this.options.editor.filePanel) != null && s.shown) ? !1 : So(this.options.editor);\n      },\n      \"Shift-Tab\": () => {\n        var n, r, s;\n        return this.options.tabBehavior !== \"prefer-indent\" && ((n = this.options.editor.formattingToolbar) != null && n.shown || (r = this.options.editor.linkToolbar) != null && r.shown || (s = this.options.editor.filePanel) != null && s.shown) ? !1 : (this.editor.commands.liftListItem(\"blockContainer\"), !0);\n      },\n      \"Shift-Mod-ArrowUp\": () => (this.options.editor.moveBlocksUp(), !0),\n      \"Shift-Mod-ArrowDown\": () => (this.options.editor.moveBlocksDown(), !0)\n    };\n  }\n});\nclass _i {\n  constructor(o, t, n) {\n    u(this, \"state\");\n    u(this, \"emitUpdate\");\n    u(this, \"menuUpdateTimer\");\n    u(this, \"startMenuUpdateTimer\");\n    u(this, \"stopMenuUpdateTimer\");\n    u(this, \"mouseHoveredLinkMark\");\n    u(this, \"mouseHoveredLinkMarkRange\");\n    u(this, \"keyboardHoveredLinkMark\");\n    u(this, \"keyboardHoveredLinkMarkRange\");\n    u(this, \"linkMark\");\n    u(this, \"linkMarkRange\");\n    u(this, \"mouseOverHandler\", (o) => {\n      if (this.mouseHoveredLinkMark = void 0, this.mouseHoveredLinkMarkRange = void 0, this.stopMenuUpdateTimer(), o.target instanceof HTMLAnchorElement && o.target.nodeName === \"A\") {\n        const t = o.target, n = this.pmView.posAtDOM(t, 0) + 1, r = this.pmView.state.doc.resolve(n), s = r.marks();\n        for (const i of s)\n          if (i.type.name === this.pmView.state.schema.mark(\"link\").type.name) {\n            this.mouseHoveredLinkMark = i, this.mouseHoveredLinkMarkRange = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_15__.getMarkRange)(r, i.type, i.attrs) || void 0;\n            break;\n          }\n      }\n      return this.startMenuUpdateTimer(), !1;\n    });\n    u(this, \"clickHandler\", (o) => {\n      var n;\n      const t = this.pmView.dom.parentElement;\n      // Toolbar is open.\n      this.linkMark && // An element is clicked.\n      o && o.target && // The clicked element is not the editor.\n      !(t === o.target || t.contains(o.target)) && (n = this.state) != null && n.show && (this.state.show = !1, this.emitUpdate());\n    });\n    u(this, \"scrollHandler\", () => {\n      var o;\n      this.linkMark !== void 0 && (o = this.state) != null && o.show && (this.state.referencePos = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_15__.posToDOMRect)(\n        this.pmView,\n        this.linkMarkRange.from,\n        this.linkMarkRange.to\n      ), this.emitUpdate());\n    });\n    u(this, \"closeMenu\", () => {\n      var o;\n      (o = this.state) != null && o.show && (this.state.show = !1, this.emitUpdate());\n    });\n    this.editor = o, this.pmView = t, this.emitUpdate = () => {\n      if (!this.state)\n        throw new Error(\"Attempting to update uninitialized link toolbar\");\n      n(this.state);\n    }, this.startMenuUpdateTimer = () => {\n      this.menuUpdateTimer = setTimeout(() => {\n        this.update(this.pmView, void 0, !0);\n      }, 250);\n    }, this.stopMenuUpdateTimer = () => (this.menuUpdateTimer && (clearTimeout(this.menuUpdateTimer), this.menuUpdateTimer = void 0), !1), this.pmView.dom.addEventListener(\"mouseover\", this.mouseOverHandler), this.pmView.root.addEventListener(\n      \"click\",\n      this.clickHandler,\n      !0\n    ), this.pmView.root.addEventListener(\"scroll\", this.scrollHandler, !0);\n  }\n  editLink(o, t) {\n    var r;\n    const n = this.pmView.state.tr.insertText(\n      t,\n      this.linkMarkRange.from,\n      this.linkMarkRange.to\n    );\n    n.addMark(\n      this.linkMarkRange.from,\n      this.linkMarkRange.from + t.length,\n      this.pmView.state.schema.mark(\"link\", { href: o })\n    ), this.editor.dispatch(n), this.pmView.focus(), (r = this.state) != null && r.show && (this.state.show = !1, this.emitUpdate());\n  }\n  deleteLink() {\n    var o;\n    this.editor.dispatch(\n      this.pmView.state.tr.removeMark(\n        this.linkMarkRange.from,\n        this.linkMarkRange.to,\n        this.linkMark.type\n      ).setMeta(\"preventAutolink\", !0)\n    ), this.pmView.focus(), (o = this.state) != null && o.show && (this.state.show = !1, this.emitUpdate());\n  }\n  update(o, t, n = !1) {\n    var a;\n    const { state: r } = o;\n    if (t && t.selection.from === r.selection.from && t.selection.to === r.selection.to || !this.pmView.hasFocus())\n      return;\n    const i = this.linkMark;\n    if (this.linkMark = void 0, this.linkMarkRange = void 0, this.keyboardHoveredLinkMark = void 0, this.keyboardHoveredLinkMarkRange = void 0, this.pmView.state.selection.empty) {\n      const c = this.pmView.state.selection.$from.marks();\n      for (const l of c)\n        if (l.type.name === this.pmView.state.schema.mark(\"link\").type.name) {\n          this.keyboardHoveredLinkMark = l, this.keyboardHoveredLinkMarkRange = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_15__.getMarkRange)(\n            this.pmView.state.selection.$from,\n            l.type,\n            l.attrs\n          ) || void 0;\n          break;\n        }\n    }\n    if (this.mouseHoveredLinkMark && n && (this.linkMark = this.mouseHoveredLinkMark, this.linkMarkRange = this.mouseHoveredLinkMarkRange), this.keyboardHoveredLinkMark && (this.linkMark = this.keyboardHoveredLinkMark, this.linkMarkRange = this.keyboardHoveredLinkMarkRange), this.linkMark && this.editor.isEditable) {\n      this.state = {\n        show: !0,\n        referencePos: (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_15__.posToDOMRect)(\n          this.pmView,\n          this.linkMarkRange.from,\n          this.linkMarkRange.to\n        ),\n        url: this.linkMark.attrs.href,\n        text: this.pmView.state.doc.textBetween(\n          this.linkMarkRange.from,\n          this.linkMarkRange.to\n        )\n      }, this.emitUpdate();\n      return;\n    }\n    if ((a = this.state) != null && a.show && i && (!this.linkMark || !this.editor.isEditable)) {\n      this.state.show = !1, this.emitUpdate();\n      return;\n    }\n  }\n  destroy() {\n    this.pmView.dom.removeEventListener(\"mouseover\", this.mouseOverHandler), this.pmView.root.removeEventListener(\"scroll\", this.scrollHandler, !0), this.pmView.root.removeEventListener(\n      \"click\",\n      this.clickHandler,\n      !0\n    );\n  }\n}\nconst Ri = new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.PluginKey(\"LinkToolbarPlugin\");\nclass Vi extends q {\n  constructor(t) {\n    super();\n    u(this, \"view\");\n    u(this, \"plugin\");\n    /**\n     * Edit the currently hovered link.\n     */\n    u(this, \"editLink\", (t, n) => {\n      this.view.editLink(t, n);\n    });\n    /**\n     * Delete the currently hovered link.\n     */\n    u(this, \"deleteLink\", () => {\n      this.view.deleteLink();\n    });\n    /**\n     * When hovering on/off links using the mouse cursor, the link toolbar will\n     * open & close with a delay.\n     *\n     * This function starts the delay timer, and should be used for when the mouse\n     * cursor enters the link toolbar.\n     */\n    u(this, \"startHideTimer\", () => {\n      this.view.startMenuUpdateTimer();\n    });\n    /**\n     * When hovering on/off links using the mouse cursor, the link toolbar will\n     * open & close with a delay.\n     *\n     * This function stops the delay timer, and should be used for when the mouse\n     * cursor exits the link toolbar.\n     */\n    u(this, \"stopHideTimer\", () => {\n      this.view.stopMenuUpdateTimer();\n    });\n    u(this, \"closeMenu\", () => this.view.closeMenu());\n    this.plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.Plugin({\n      key: Ri,\n      view: (n) => (this.view = new _i(t, n, (r) => {\n        this.emit(\"update\", r);\n      }), this.view),\n      props: {\n        handleKeyDown: (n, r) => r.key === \"Escape\" && this.shown ? (this.view.closeMenu(), !0) : !1\n      }\n    });\n  }\n  onUpdate(t) {\n    return this.on(\"update\", t);\n  }\n  get shown() {\n    var t, n;\n    return ((n = (t = this.view) == null ? void 0 : t.state) == null ? void 0 : n.show) || !1;\n  }\n}\nconst Ui = [\n  \"http\",\n  \"https\",\n  \"ftp\",\n  \"ftps\",\n  \"mailto\",\n  \"tel\",\n  \"callto\",\n  \"sms\",\n  \"cid\",\n  \"xmpp\"\n], $i = \"https\", Fi = new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.PluginKey(\"node-selection-keyboard\");\nclass zi {\n  constructor() {\n    u(this, \"plugin\");\n    this.plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.Plugin({\n      key: Fi,\n      props: {\n        handleKeyDown: (o, t) => {\n          if (\"node\" in o.state.selection) {\n            if (t.ctrlKey || t.metaKey)\n              return !1;\n            if (t.key.length === 1)\n              return t.preventDefault(), !0;\n            if (t.key === \"Enter\" && !t.shiftKey && !t.altKey && !t.ctrlKey && !t.metaKey) {\n              const n = o.state.tr;\n              return o.dispatch(\n                n.insert(\n                  o.state.tr.selection.$to.after(),\n                  o.state.schema.nodes.paragraph.createChecked()\n                ).setSelection(\n                  new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.TextSelection(\n                    n.doc.resolve(o.state.tr.selection.$to.after() + 1)\n                  )\n                )\n              ), !0;\n            }\n          }\n          return !1;\n        }\n      }\n    });\n  }\n}\nconst Wi = new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.PluginKey(\"blocknote-placeholder\");\nclass ji {\n  constructor(o, t) {\n    u(this, \"plugin\");\n    this.plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.Plugin({\n      key: Wi,\n      view: (n) => {\n        var l, d;\n        const r = `placeholder-selector-${(0,uuid__WEBPACK_IMPORTED_MODULE_16__[\"default\"])()}`;\n        n.dom.classList.add(r);\n        const s = document.createElement(\"style\"), i = o._tiptapEditor.options.injectNonce;\n        i && s.setAttribute(\"nonce\", i), ((l = o.prosemirrorView) == null ? void 0 : l.root) instanceof ShadowRoot ? o.prosemirrorView.root.append(s) : (d = o.prosemirrorView) == null || d.root.head.appendChild(s);\n        const a = s.sheet, c = (p = \"\") => `.${r} .bn-block-content${p} .bn-inline-content:has(> .ProseMirror-trailingBreak:only-child):before`;\n        try {\n          const {\n            default: p,\n            emptyDocument: h,\n            ...f\n          } = t;\n          for (const [b, k] of Object.entries(f)) {\n            const w = `[data-content-type=\"${b}\"]`;\n            a.insertRule(\n              `${c(w)} { content: ${JSON.stringify(\n                k\n              )}; }`\n            );\n          }\n          const m = \"[data-is-only-empty-block]\", g = \"[data-is-empty-and-focused]\";\n          a.insertRule(\n            `${c(m)} { content: ${JSON.stringify(\n              h\n            )}; }`\n          ), a.insertRule(\n            `${c(g)} { content: ${JSON.stringify(\n              p\n            )}; }`\n          );\n        } catch (p) {\n          console.warn(\n            \"Failed to insert placeholder CSS rule - this is likely due to the browser not supporting certain CSS pseudo-element selectors (:has, :only-child:, or :before)\",\n            p\n          );\n        }\n        return {\n          destroy: () => {\n            var p, h;\n            ((p = o.prosemirrorView) == null ? void 0 : p.root) instanceof ShadowRoot ? o.prosemirrorView.root.removeChild(s) : (h = o.prosemirrorView) == null || h.root.head.removeChild(s);\n          }\n        };\n      },\n      props: {\n        decorations: (n) => {\n          const { doc: r, selection: s } = n;\n          if (!o.isEditable || !s.empty || s.$from.parent.type.spec.code)\n            return;\n          const i = [];\n          n.doc.content.size === 6 && i.push(\n            prosemirror_view__WEBPACK_IMPORTED_MODULE_22__.Decoration.node(2, 4, {\n              \"data-is-only-empty-block\": \"true\"\n            })\n          );\n          const a = s.$anchor, c = a.parent;\n          if (c.content.size === 0) {\n            const l = a.before();\n            i.push(\n              prosemirror_view__WEBPACK_IMPORTED_MODULE_22__.Decoration.node(l, l + c.nodeSize, {\n                \"data-is-empty-and-focused\": \"true\"\n              })\n            );\n          }\n          return prosemirror_view__WEBPACK_IMPORTED_MODULE_22__.DecorationSet.create(r, i);\n        }\n      }\n    });\n  }\n}\nconst _t = new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.PluginKey(\"previous-blocks\"), Gi = {\n  // Numbered List Items\n  index: \"index\",\n  // Headings\n  level: \"level\",\n  // All Blocks\n  type: \"type\",\n  depth: \"depth\",\n  \"depth-change\": \"depth-change\"\n};\nclass qi {\n  constructor() {\n    u(this, \"plugin\");\n    let o;\n    this.plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.Plugin({\n      key: _t,\n      view(t) {\n        return {\n          update: async (n, r) => {\n            var s;\n            ((s = this.key) == null ? void 0 : s.getState(n.state).updatedBlocks.size) > 0 && (o = setTimeout(() => {\n              n.dispatch(\n                n.state.tr.setMeta(_t, { clearUpdate: !0 })\n              );\n            }, 0));\n          },\n          destroy: () => {\n            o && clearTimeout(o);\n          }\n        };\n      },\n      state: {\n        init() {\n          return {\n            // Block attributes, by block ID, from just before the previous transaction.\n            prevTransactionOldBlockAttrs: {},\n            // Block attributes, by block ID, from just before the current transaction.\n            currentTransactionOldBlockAttrs: {},\n            // Set of IDs of blocks whose attributes changed from the current transaction.\n            updatedBlocks: /* @__PURE__ */ new Set()\n          };\n        },\n        apply(t, n, r, s) {\n          if (n.currentTransactionOldBlockAttrs = {}, n.updatedBlocks.clear(), !t.docChanged || r.doc.eq(s.doc))\n            return n;\n          const i = {}, a = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_15__.findChildren)(r.doc, (d) => d.attrs.id), c = new Map(\n            a.map((d) => [d.node.attrs.id, d])\n          ), l = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_15__.findChildren)(s.doc, (d) => d.attrs.id);\n          for (const d of l) {\n            const p = c.get(d.node.attrs.id), h = p == null ? void 0 : p.node.firstChild, f = d.node.firstChild;\n            if (p && h && f) {\n              const m = {\n                index: f.attrs.index,\n                level: f.attrs.level,\n                type: f.type.name,\n                depth: s.doc.resolve(d.pos).depth\n              };\n              let g = {\n                index: h.attrs.index,\n                level: h.attrs.level,\n                type: h.type.name,\n                depth: r.doc.resolve(p.pos).depth\n              };\n              i[d.node.attrs.id] = g, t.getMeta(\"numberedListIndexing\") && (d.node.attrs.id in n.prevTransactionOldBlockAttrs && (g = n.prevTransactionOldBlockAttrs[d.node.attrs.id]), m.type === \"numberedListItem\" && (g.index = m.index)), n.currentTransactionOldBlockAttrs[d.node.attrs.id] = g, JSON.stringify(g) !== JSON.stringify(m) && (g[\"depth-change\"] = g.depth - m.depth, n.updatedBlocks.add(d.node.attrs.id));\n            }\n          }\n          return n.prevTransactionOldBlockAttrs = i, n;\n        }\n      },\n      props: {\n        decorations(t) {\n          const n = this.getState(t);\n          if (n.updatedBlocks.size === 0)\n            return;\n          const r = [];\n          return t.doc.descendants((s, i) => {\n            if (!s.attrs.id || !n.updatedBlocks.has(s.attrs.id))\n              return;\n            const a = n.currentTransactionOldBlockAttrs[s.attrs.id], c = {};\n            for (const [d, p] of Object.entries(a))\n              c[\"data-prev-\" + Gi[d]] = p || \"none\";\n            const l = prosemirror_view__WEBPACK_IMPORTED_MODULE_22__.Decoration.node(i, i + s.nodeSize, {\n              ...c\n            });\n            r.push(l);\n          }), prosemirror_view__WEBPACK_IMPORTED_MODULE_22__.DecorationSet.create(t.doc, r);\n        }\n      }\n    });\n  }\n}\nconst Rt = new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.PluginKey(\"blocknote-show-selection\");\nclass Ki {\n  constructor(o) {\n    u(this, \"plugin\");\n    u(this, \"enabled\", !1);\n    this.editor = o, this.plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.Plugin({\n      key: Rt,\n      props: {\n        decorations: (t) => {\n          const { doc: n, selection: r } = t;\n          if (!this.enabled)\n            return prosemirror_view__WEBPACK_IMPORTED_MODULE_22__.DecorationSet.empty;\n          const s = prosemirror_view__WEBPACK_IMPORTED_MODULE_22__.Decoration.inline(r.from, r.to, {\n            \"data-show-selection\": \"true\"\n          });\n          return prosemirror_view__WEBPACK_IMPORTED_MODULE_22__.DecorationSet.create(n, [s]);\n        }\n      }\n    });\n  }\n  setEnabled(o) {\n    var t, n;\n    this.enabled !== o && (this.enabled = o, (n = this.editor.prosemirrorView) == null || n.dispatch(\n      (t = this.editor.prosemirrorView) == null ? void 0 : t.state.tr.setMeta(Rt, {})\n    ));\n  }\n  getEnabled() {\n    return this.enabled;\n  }\n}\nfunction Do(e, o) {\n  var t, n;\n  for (; e && e.parentElement && e.parentElement !== o.dom && ((t = e.getAttribute) == null ? void 0 : t.call(e, \"data-node-type\")) !== \"blockContainer\"; )\n    e = e.parentElement;\n  if (((n = e.getAttribute) == null ? void 0 : n.call(e, \"data-node-type\")) === \"blockContainer\")\n    return { node: e, id: e.getAttribute(\"data-id\") };\n}\nclass le extends prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.Selection {\n  constructor(t, n) {\n    super(t, n);\n    u(this, \"nodes\");\n    const r = t.node();\n    this.nodes = [], t.doc.nodesBetween(t.pos, n.pos, (s, i, a) => {\n      if (a !== null && a.eq(r))\n        return this.nodes.push(s), !1;\n    });\n  }\n  static create(t, n, r = n) {\n    return new le(t.resolve(n), t.resolve(r));\n  }\n  content() {\n    return new prosemirror_model__WEBPACK_IMPORTED_MODULE_18__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_18__.Fragment.from(this.nodes), 0, 0);\n  }\n  eq(t) {\n    if (!(t instanceof le) || this.nodes.length !== t.nodes.length || this.from !== t.from || this.to !== t.to)\n      return !1;\n    for (let n = 0; n < this.nodes.length; n++)\n      if (!this.nodes[n].eq(t.nodes[n]))\n        return !1;\n    return !0;\n  }\n  map(t, n) {\n    const r = n.mapResult(this.from), s = n.mapResult(this.to);\n    return s.deleted ? prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.Selection.near(t.resolve(r.pos)) : r.deleted ? prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.Selection.near(t.resolve(s.pos)) : new le(\n      t.resolve(r.pos),\n      t.resolve(s.pos)\n    );\n  }\n  toJSON() {\n    return { type: \"node\", anchor: this.anchor, head: this.head };\n  }\n}\nlet _;\nfunction Xi(e, o) {\n  let t, n;\n  const r = o.resolve(e.from).node().type.spec.group === \"blockContent\", s = o.resolve(e.to).node().type.spec.group === \"blockContent\", i = Math.min(e.$anchor.depth, e.$head.depth);\n  if (r && s) {\n    const a = e.$from.start(i - 1), c = e.$to.end(i - 1);\n    t = o.resolve(a - 1).pos, n = o.resolve(c + 1).pos;\n  } else\n    t = e.from, n = e.to;\n  return { from: t, to: n };\n}\nfunction Vt(e, o, t = o) {\n  o === t && (t += e.state.doc.resolve(o + 1).node().nodeSize);\n  const n = e.domAtPos(o).node.cloneNode(!0), r = e.domAtPos(o).node, s = (p, h) => Array.prototype.indexOf.call(p.children, h), i = s(\n    r,\n    // Expects from position to be just before the first selected block.\n    e.domAtPos(o + 1).node.parentElement\n  ), a = s(\n    r,\n    // Expects to position to be just after the last selected block.\n    e.domAtPos(t - 1).node.parentElement\n  );\n  for (let p = r.childElementCount - 1; p >= 0; p--)\n    (p > a || p < i) && n.removeChild(n.children[p]);\n  Oo(e.root), _ = n;\n  const c = _.getElementsByTagName(\"iframe\");\n  for (let p = 0; p < c.length; p++) {\n    const h = c[p], f = h.parentElement;\n    f && f.removeChild(h);\n  }\n  const d = e.dom.className.split(\" \").filter(\n    (p) => p !== \"ProseMirror\" && p !== \"bn-root\" && p !== \"bn-editor\"\n  ).join(\" \");\n  _.className = _.className + \" bn-drag-preview \" + d, e.root instanceof ShadowRoot ? e.root.appendChild(_) : e.root.body.appendChild(_);\n}\nfunction Oo(e) {\n  _ !== void 0 && (e instanceof ShadowRoot ? e.removeChild(_) : e.body.removeChild(_), _ = void 0);\n}\nfunction Ji(e, o, t) {\n  if (!e.dataTransfer)\n    return;\n  const n = t.prosemirrorView;\n  if (!n)\n    return;\n  const r = D(o.id, n.state.doc);\n  if (!r)\n    throw new Error(`Block with ID ${o.id} not found`);\n  const s = r.posBeforeNode;\n  if (s != null) {\n    const i = n.state.selection, a = n.state.doc, { from: c, to: l } = Xi(i, a), d = c <= s && s < l, p = i.$anchor.node() !== i.$head.node() || i instanceof le;\n    d && p ? (n.dispatch(\n      n.state.tr.setSelection(le.create(a, c, l))\n    ), Vt(n, c, l)) : (n.dispatch(\n      n.state.tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.NodeSelection.create(n.state.doc, s))\n    ), Vt(n, s));\n    const h = n.state.selection.content(), f = t.pmSchema, m = n.serializeForClipboard(h).dom.innerHTML, g = Ve(f, t), b = Lo(h.content, t.schema), k = g.exportBlocks(b, {}), w = ht(k);\n    e.dataTransfer.clearData(), e.dataTransfer.setData(\"blocknote/html\", m), e.dataTransfer.setData(\"text/html\", k), e.dataTransfer.setData(\"text/plain\", w), e.dataTransfer.effectAllowed = \"move\", e.dataTransfer.setDragImage(_, 0, 0);\n  }\n}\nconst he = 0.1;\nfunction rt(e, o, t, n = !0) {\n  const r = e.root.elementsFromPoint(\n    // bit hacky - offset x position to right to account for the width of sidemenu itself\n    o.left + (t === \"editor\" ? 50 : 0),\n    o.top\n  );\n  for (const s of r)\n    if (e.dom.contains(s))\n      return n && s.closest(\"[data-node-type=columnList]\") ? rt(\n        e,\n        {\n          left: o.left + 50,\n          // bit hacky, but if we're inside a column, offset x position to right to account for the width of sidemenu itself\n          top: o.top\n        },\n        t,\n        !1\n      ) : Do(s, e);\n}\nfunction Yi(e, o, t) {\n  if (!o.dom.firstChild)\n    return;\n  const n = o.dom.firstChild.getBoundingClientRect(), r = {\n    left: e.x,\n    top: e.y\n  }, s = r.left < n.left, i = r.left > n.right;\n  t === \"viewport\" && (s && (r.left = n.left + 10), i && (r.left = n.right - 10));\n  let a = rt(o, r, t);\n  if (!i && a) {\n    const c = a.node.getBoundingClientRect();\n    r.left = c.right - 10, a = rt(o, r, \"viewport\", !1);\n  }\n  return a;\n}\nclass Zi {\n  constructor(o, t, n, r) {\n    u(this, \"state\");\n    u(this, \"emitUpdate\");\n    u(this, \"mousePos\");\n    u(this, \"hoveredBlock\");\n    u(this, \"menuFrozen\", !1);\n    u(this, \"isDragOrigin\", !1);\n    u(this, \"updateState\", (o) => {\n      this.state = o, this.emitUpdate(this.state);\n    });\n    u(this, \"updateStateFromMousePos\", () => {\n      var n, r, s, i;\n      if (this.menuFrozen || !this.mousePos)\n        return;\n      const o = Yi(\n        this.mousePos,\n        this.pmView,\n        this.sideMenuDetection\n      );\n      if (!o || !this.editor.isEditable) {\n        (n = this.state) != null && n.show && (this.state.show = !1, this.updateState(this.state));\n        return;\n      }\n      if ((r = this.state) != null && r.show && ((s = this.hoveredBlock) != null && s.hasAttribute(\"data-id\")) && ((i = this.hoveredBlock) == null ? void 0 : i.getAttribute(\"data-id\")) === o.id)\n        return;\n      this.hoveredBlock = o.node;\n      const t = o.node.firstChild;\n      if (t && this.editor.isEditable) {\n        const a = t.getBoundingClientRect(), c = o.node.closest(\"[data-node-type=column]\");\n        this.updateState({\n          show: !0,\n          referencePos: new DOMRect(\n            c ? (\n              // We take the first child as column elements have some default\n              // padding. This is a little weird since this child element will\n              // be the first block, but since it's always non-nested and we\n              // only take the x coordinate, it's ok.\n              c.firstElementChild.getBoundingClientRect().x\n            ) : this.pmView.dom.firstChild.getBoundingClientRect().x,\n            a.y,\n            a.width,\n            a.height\n          ),\n          block: this.editor.getBlock(\n            this.hoveredBlock.getAttribute(\"data-id\")\n          )\n        });\n      }\n    });\n    u(this, \"onDrop\", (o) => {\n      var r, s;\n      if (this.pmView.dragging === null)\n        return;\n      this.editor._tiptapEditor.commands.blur();\n      const t = o.target instanceof Node && ((r = o.target instanceof HTMLElement ? o.target : o.target.parentElement) == null ? void 0 : r.closest(\".bn-editor\")) || null;\n      if (t && (!this.isDragOrigin && this.pmView.dom === t ? this.pmView.dispatch(\n        this.pmView.state.tr.setSelection(\n          prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.TextSelection.create(\n            this.pmView.state.tr.doc,\n            this.pmView.state.tr.selection.to\n          )\n        )\n      ) : this.isDragOrigin && this.pmView.dom !== t && setTimeout(\n        () => this.pmView.dispatch(this.pmView.state.tr.deleteSelection()),\n        0\n      )), this.sideMenuDetection === \"editor\" || o.synthetic || !((s = o.dataTransfer) != null && s.types.includes(\"blocknote/html\")))\n        return;\n      const n = this.pmView.posAtCoords({\n        left: o.clientX,\n        top: o.clientY\n      });\n      if (!n || n.inside === -1) {\n        const i = this.createSyntheticEvent(o);\n        this.pmView.dom.dispatchEvent(i);\n      }\n    });\n    u(this, \"onDragEnd\", () => {\n      this.pmView.dragging = null;\n    });\n    /**\n     * If a block is being dragged, ProseMirror usually gets the context of what's\n     * being dragged from `view.dragging`, which is automatically set when a\n     * `dragstart` event fires in the editor. However, if the user tries to drag\n     * and drop blocks between multiple editors, only the one in which the drag\n     * began has that context, so we need to set it on the others manually. This\n     * ensures that PM always drops the blocks in between other blocks, and not\n     * inside them.\n     *\n     * After the `dragstart` event fires on the drag handle, it sets\n     * `blocknote/html` data on the clipboard. This handler fires right after,\n     * parsing the `blocknote/html` data into nodes and setting them on\n     * `view.dragging`.\n     *\n     * Note: Setting `view.dragging` on `dragover` would be better as the user\n     * could then drag between editors in different windows, but you can only\n     * access `dataTransfer` contents on `dragstart` and `drop` events.\n     */\n    u(this, \"onDragStart\", (o) => {\n      var i;\n      const t = (i = o.dataTransfer) == null ? void 0 : i.getData(\"blocknote/html\");\n      if (!t)\n        return;\n      if (this.pmView.dragging)\n        throw new Error(\"New drag was started while an existing drag is ongoing\");\n      const n = document.createElement(\"div\");\n      n.innerHTML = t;\n      const s = prosemirror_model__WEBPACK_IMPORTED_MODULE_18__.DOMParser.fromSchema(this.pmView.state.schema).parse(n, {\n        topNode: this.pmView.state.schema.nodes.blockGroup.create()\n      });\n      this.pmView.dragging = {\n        slice: new prosemirror_model__WEBPACK_IMPORTED_MODULE_18__.Slice(s.content, 0, 0),\n        move: !0\n      };\n    });\n    /**\n     * If the event is outside the editor contents,\n     * we dispatch a fake event, so that we can still drop the content\n     * when dragging / dropping to the side of the editor\n     */\n    u(this, \"onDragOver\", (o) => {\n      var n;\n      if (this.sideMenuDetection === \"editor\" || o.synthetic || !((n = o.dataTransfer) != null && n.types.includes(\"blocknote/html\")))\n        return;\n      const t = this.pmView.posAtCoords({\n        left: o.clientX,\n        top: o.clientY\n      });\n      if (!t || t.inside === -1 && this.pmView.dom.firstChild) {\n        const r = this.createSyntheticEvent(o);\n        this.pmView.dom.dispatchEvent(r);\n      }\n    });\n    u(this, \"onKeyDown\", (o) => {\n      var t;\n      (t = this.state) != null && t.show && this.editor.isFocused() && (this.state.show = !1, this.emitUpdate(this.state));\n    });\n    u(this, \"onMouseMove\", (o) => {\n      var s;\n      if (this.menuFrozen)\n        return;\n      this.mousePos = { x: o.clientX, y: o.clientY };\n      const t = this.pmView.dom.getBoundingClientRect(), n = this.mousePos.x > t.left && this.mousePos.x < t.right && this.mousePos.y > t.top && this.mousePos.y < t.bottom, r = this.pmView.dom.parentElement;\n      if (\n        // Cursor is within the editor area\n        n && // An element is hovered\n        o && o.target && // Element is outside the editor\n        !(r === o.target || r.contains(o.target))\n      ) {\n        (s = this.state) != null && s.show && (this.state.show = !1, this.emitUpdate(this.state));\n        return;\n      }\n      this.updateStateFromMousePos();\n    });\n    u(this, \"onScroll\", () => {\n      var o;\n      (o = this.state) != null && o.show && (this.state.referencePos = this.hoveredBlock.getBoundingClientRect(), this.emitUpdate(this.state));\n    });\n    this.editor = o, this.sideMenuDetection = t, this.pmView = n, this.emitUpdate = () => {\n      if (!this.state)\n        throw new Error(\"Attempting to update uninitialized side menu\");\n      r(this.state);\n    }, this.pmView.root.addEventListener(\n      \"dragstart\",\n      this.onDragStart\n    ), this.pmView.root.addEventListener(\n      \"dragover\",\n      this.onDragOver\n    ), this.pmView.root.addEventListener(\n      \"drop\",\n      this.onDrop,\n      !0\n    ), this.pmView.root.addEventListener(\n      \"dragend\",\n      this.onDragEnd,\n      !0\n    ), ut(), this.pmView.root.addEventListener(\n      \"mousemove\",\n      this.onMouseMove,\n      !0\n    ), this.pmView.root.addEventListener(\n      \"keydown\",\n      this.onKeyDown,\n      !0\n    ), n.root.addEventListener(\"scroll\", this.onScroll, !0);\n  }\n  createSyntheticEvent(o) {\n    const t = new Event(o.type, o), n = this.pmView.dom.firstChild.getBoundingClientRect();\n    return t.clientX = o.clientX, t.clientY = o.clientY, o.clientX < n.left && o.clientX > n.left - n.width * he ? t.clientX = n.left + n.width * he / 2 : o.clientX > n.right && o.clientX < n.right + n.width * he ? t.clientX = n.right - n.width * he / 2 : (o.clientX < n.left || o.clientX > n.right) && (t.clientX = n.left + he * n.width * 2), t.clientY = Math.min(\n      Math.max(o.clientY, n.top),\n      n.top + n.height\n    ), t.dataTransfer = o.dataTransfer, t.preventDefault = () => o.preventDefault(), t.synthetic = !0, t;\n  }\n  // Needed in cases where the editor state updates without the mouse cursor\n  // moving, as some state updates can require a side menu update. For example,\n  // adding a button to the side menu which removes the block can cause the\n  // block below to jump up into the place of the removed block when clicked,\n  // allowing the user to click the button again without moving the cursor. This\n  // would otherwise not update the side menu, and so clicking the button again\n  // would attempt to remove the same block again, causing an error.\n  update(o, t) {\n    var r;\n    !t.doc.eq(this.pmView.state.doc) && ((r = this.state) != null && r.show) && this.updateStateFromMousePos();\n  }\n  destroy() {\n    var o;\n    (o = this.state) != null && o.show && (this.state.show = !1, this.emitUpdate(this.state)), this.pmView.root.removeEventListener(\n      \"mousemove\",\n      this.onMouseMove,\n      !0\n    ), this.pmView.root.removeEventListener(\n      \"dragstart\",\n      this.onDragStart\n    ), this.pmView.root.removeEventListener(\n      \"dragover\",\n      this.onDragOver\n    ), this.pmView.root.removeEventListener(\n      \"drop\",\n      this.onDrop,\n      !0\n    ), this.pmView.root.removeEventListener(\n      \"dragend\",\n      this.onDragEnd,\n      !0\n    ), this.pmView.root.removeEventListener(\n      \"keydown\",\n      this.onKeyDown,\n      !0\n    ), this.pmView.root.removeEventListener(\"scroll\", this.onScroll, !0);\n  }\n}\nconst Qi = new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.PluginKey(\"SideMenuPlugin\");\nclass ea extends q {\n  constructor(t, n) {\n    super();\n    u(this, \"view\");\n    u(this, \"plugin\");\n    /**\n     * Handles drag & drop events for blocks.\n     */\n    u(this, \"blockDragStart\", (t, n) => {\n      this.view && (this.view.isDragOrigin = !0), Ji(t, n, this.editor);\n    });\n    /**\n     * Handles drag & drop events for blocks.\n     */\n    u(this, \"blockDragEnd\", () => {\n      this.editor.prosemirrorView && Oo(this.editor.prosemirrorView.root), this.view && (this.view.isDragOrigin = !1);\n    });\n    /**\n     * Freezes the side menu. When frozen, the side menu will stay\n     * attached to the same block regardless of which block is hovered by the\n     * mouse cursor.\n     */\n    u(this, \"freezeMenu\", () => {\n      this.view.menuFrozen = !0, this.view.state.show = !0, this.view.emitUpdate(this.view.state);\n    });\n    /**\n     * Unfreezes the side menu. When frozen, the side menu will stay\n     * attached to the same block regardless of which block is hovered by the\n     * mouse cursor.\n     */\n    u(this, \"unfreezeMenu\", () => {\n      this.view.menuFrozen = !1, this.view.state.show = !1, this.view.emitUpdate(this.view.state);\n    });\n    this.editor = t, this.plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.Plugin({\n      key: Qi,\n      view: (r) => (this.view = new Zi(\n        t,\n        n,\n        r,\n        (s) => {\n          this.emit(\"update\", s);\n        }\n      ), this.view)\n    });\n  }\n  onUpdate(t) {\n    return this.on(\"update\", t);\n  }\n}\nconst Me = /* @__PURE__ */ new Map();\nfunction ta(e) {\n  if (Me.has(e))\n    return Me.get(e);\n  const o = new prosemirror_transform__WEBPACK_IMPORTED_MODULE_19__.Mapping();\n  return e._tiptapEditor.on(\"transaction\", ({ transaction: t }) => {\n    o.appendMapping(t.mapping);\n  }), e._tiptapEditor.on(\"destroy\", () => {\n    Me.delete(e);\n  }), Me.set(e, o), o;\n}\nfunction oa(e, o, t = \"left\") {\n  const n = y_prosemirror__WEBPACK_IMPORTED_MODULE_23__.ySyncPluginKey.getState(e.prosemirrorState);\n  if (!n) {\n    const s = ta(e), i = s.maps.length;\n    return () => s.slice(i).map(o, t === \"left\" ? -1 : 1);\n  }\n  const r = (0,y_prosemirror__WEBPACK_IMPORTED_MODULE_25__.absolutePositionToRelativePosition)(\n    // Track the position after the position if we are on the right side\n    o + (t === \"right\" ? 1 : 0),\n    n.binding.type,\n    n.binding.mapping\n  );\n  return () => {\n    const s = y_prosemirror__WEBPACK_IMPORTED_MODULE_23__.ySyncPluginKey.getState(\n      e.prosemirrorState\n    ), i = (0,y_prosemirror__WEBPACK_IMPORTED_MODULE_25__.relativePositionToAbsolutePosition)(\n      s.doc,\n      s.binding.type,\n      r,\n      s.binding.mapping\n    );\n    if (i === null)\n      throw new Error(\"Position not found, cannot track positions\");\n    return i + (t === \"right\" ? -1 : 0);\n  };\n}\nconst na = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_15__.findParentNode)((e) => e.type.name === \"blockContainer\");\nclass ra {\n  constructor(o, t) {\n    u(this, \"state\");\n    u(this, \"emitUpdate\");\n    u(this, \"rootEl\");\n    u(this, \"pluginState\");\n    u(this, \"handleScroll\", () => {\n      var o, t;\n      if ((o = this.state) != null && o.show) {\n        const n = (t = this.rootEl) == null ? void 0 : t.querySelector(\n          `[data-decoration-id=\"${this.pluginState.decorationId}\"]`\n        );\n        if (!n)\n          return;\n        this.state.referencePos = n.getBoundingClientRect(), this.emitUpdate(this.pluginState.triggerCharacter);\n      }\n    });\n    u(this, \"closeMenu\", () => {\n      this.editor.dispatch(\n        this.editor._tiptapEditor.state.tr.setMeta(de, null)\n      );\n    });\n    u(this, \"clearQuery\", () => {\n      this.pluginState !== void 0 && this.editor._tiptapEditor.chain().focus().deleteRange({\n        from: this.pluginState.queryStartPos() - (this.pluginState.deleteTriggerCharacter ? this.pluginState.triggerCharacter.length : 0),\n        to: this.editor._tiptapEditor.state.selection.from\n      }).run();\n    });\n    var n, r;\n    this.editor = o, this.pluginState = void 0, this.emitUpdate = (s) => {\n      var i;\n      if (!this.state)\n        throw new Error(\"Attempting to update uninitialized suggestions menu\");\n      t(s, {\n        ...this.state,\n        ignoreQueryLength: (i = this.pluginState) == null ? void 0 : i.ignoreQueryLength\n      });\n    }, this.rootEl = (n = this.editor.prosemirrorView) == null ? void 0 : n.root, (r = this.rootEl) == null || r.addEventListener(\"scroll\", this.handleScroll, !0);\n  }\n  update(o, t) {\n    var l;\n    const n = de.getState(t), r = de.getState(\n      o.state\n    ), s = n === void 0 && r !== void 0, i = n !== void 0 && r === void 0;\n    if (!s && !(n !== void 0 && r !== void 0) && !i)\n      return;\n    if (this.pluginState = i ? n : r, i || !this.editor.isEditable) {\n      this.state && (this.state.show = !1), this.emitUpdate(this.pluginState.triggerCharacter);\n      return;\n    }\n    const c = (l = this.rootEl) == null ? void 0 : l.querySelector(\n      `[data-decoration-id=\"${this.pluginState.decorationId}\"]`\n    );\n    this.editor.isEditable && c && (this.state = {\n      show: !0,\n      referencePos: c.getBoundingClientRect(),\n      query: this.pluginState.query\n    }, this.emitUpdate(this.pluginState.triggerCharacter));\n  }\n  destroy() {\n    var o;\n    (o = this.rootEl) == null || o.removeEventListener(\"scroll\", this.handleScroll, !0);\n  }\n}\nconst de = new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.PluginKey(\"SuggestionMenuPlugin\");\nclass sa extends q {\n  constructor(t) {\n    super();\n    u(this, \"view\");\n    u(this, \"plugin\");\n    u(this, \"triggerCharacters\", []);\n    u(this, \"addTriggerCharacter\", (t) => {\n      this.triggerCharacters.push(t);\n    });\n    // TODO: Should this be called automatically when listeners are removed?\n    u(this, \"removeTriggerCharacter\", (t) => {\n      this.triggerCharacters = this.triggerCharacters.filter(\n        (n) => n !== t\n      );\n    });\n    u(this, \"closeMenu\", () => this.view.closeMenu());\n    u(this, \"clearQuery\", () => this.view.clearQuery());\n    const n = this.triggerCharacters;\n    this.plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.Plugin({\n      key: de,\n      view: () => (this.view = new ra(\n        t,\n        (r, s) => {\n          this.emit(`update ${r}`, s);\n        }\n      ), this.view),\n      state: {\n        // Initialize the plugin's internal state.\n        init() {\n        },\n        // Apply changes to the plugin state from an editor transaction.\n        apply(r, s, i, a) {\n          if (r.getMeta(\"orderedListIndexing\") !== void 0 || r.selection.$from.parent.type.spec.code)\n            return s;\n          const c = r.getMeta(de);\n          if (typeof c == \"object\" && c !== null && s === void 0) {\n            const d = oa(\n              t,\n              a.selection.from - // Need to account for the trigger char that was inserted, so we offset the position by the length of the trigger character.\n              c.triggerCharacter.length\n            );\n            return {\n              triggerCharacter: c.triggerCharacter,\n              deleteTriggerCharacter: c.deleteTriggerCharacter !== !1,\n              // When reading the queryStartPos, we offset the result by the length of the trigger character, to make it easy on the caller\n              queryStartPos: () => d() + c.triggerCharacter.length,\n              query: \"\",\n              decorationId: `id_${Math.floor(Math.random() * 4294967295)}`,\n              ignoreQueryLength: c == null ? void 0 : c.ignoreQueryLength\n            };\n          }\n          if (s === void 0)\n            return s;\n          if (\n            // Highlighting text should hide the menu.\n            a.selection.from !== a.selection.to || // Transactions with plugin metadata should hide the menu.\n            c === null || // Certain mouse events should hide the menu.\n            // TODO: Change to global mousedown listener.\n            r.getMeta(\"focus\") || r.getMeta(\"blur\") || r.getMeta(\"pointer\") || // Moving the caret before the character which triggered the menu should hide it.\n            s.triggerCharacter !== void 0 && a.selection.from < s.queryStartPos()\n          )\n            return;\n          const l = { ...s };\n          return l.query = a.doc.textBetween(\n            s.queryStartPos(),\n            a.selection.from\n          ), l;\n        }\n      },\n      props: {\n        handleTextInput(r, s, i, a) {\n          const c = this.getState(r.state);\n          return n.includes(a) && c === void 0 ? (r.dispatch(\n            r.state.tr.insertText(a).scrollIntoView().setMeta(de, {\n              triggerCharacter: a\n            })\n          ), !0) : !1;\n        },\n        // Setup decorator on the currently active suggestion.\n        decorations(r) {\n          const s = this.getState(r);\n          if (s === void 0)\n            return null;\n          if (!s.deleteTriggerCharacter) {\n            const i = na(r.selection);\n            if (i)\n              return prosemirror_view__WEBPACK_IMPORTED_MODULE_22__.DecorationSet.create(r.doc, [\n                prosemirror_view__WEBPACK_IMPORTED_MODULE_22__.Decoration.node(\n                  i.pos,\n                  i.pos + i.node.nodeSize,\n                  {\n                    nodeName: \"span\",\n                    class: \"bn-suggestion-decorator\",\n                    \"data-decoration-id\": s.decorationId\n                  }\n                )\n              ]);\n          }\n          return prosemirror_view__WEBPACK_IMPORTED_MODULE_22__.DecorationSet.create(r.doc, [\n            prosemirror_view__WEBPACK_IMPORTED_MODULE_22__.Decoration.inline(\n              s.queryStartPos() - s.triggerCharacter.length,\n              s.queryStartPos(),\n              {\n                nodeName: \"span\",\n                class: \"bn-suggestion-decorator\",\n                \"data-decoration-id\": s.decorationId\n              }\n            )\n          ]);\n        }\n      }\n    });\n  }\n  onUpdate(t, n) {\n    return this.triggerCharacters.includes(t) || this.addTriggerCharacter(t), this.on(`update ${t}`, n);\n  }\n  get shown() {\n    var t, n;\n    return ((n = (t = this.view) == null ? void 0 : t.state) == null ? void 0 : n.show) || !1;\n  }\n}\nfunction bc(e, o) {\n  e.suggestionMenus.addTriggerCharacter(o);\n}\nlet A;\nfunction Ut(e) {\n  A || (A = document.createElement(\"div\"), A.innerHTML = \"_\", A.style.opacity = \"0\", A.style.height = \"1px\", A.style.width = \"1px\", e instanceof Document ? e.body.appendChild(A) : e.appendChild(A));\n}\nfunction ia(e) {\n  A && (e instanceof Document ? e.body.removeChild(A) : e.removeChild(A), A = void 0);\n}\nfunction Pe(e) {\n  return Array.prototype.indexOf.call(e.parentElement.childNodes, e);\n}\nfunction aa(e) {\n  let o = e;\n  for (; o && o.nodeName !== \"TD\" && o.nodeName !== \"TH\" && !o.classList.contains(\"tableWrapper\"); ) {\n    if (o.classList.contains(\"ProseMirror\"))\n      return;\n    const t = o.parentNode;\n    if (!t || !(t instanceof Element))\n      return;\n    o = t;\n  }\n  return o.nodeName === \"TD\" || o.nodeName === \"TH\" ? {\n    type: \"cell\",\n    domNode: o,\n    tbodyNode: o.closest(\"tbody\")\n  } : {\n    type: \"wrapper\",\n    domNode: o,\n    tbodyNode: o.querySelector(\"tbody\")\n  };\n}\nfunction ca(e, o) {\n  const t = o.querySelectorAll(e);\n  for (let n = 0; n < t.length; n++)\n    t[n].style.visibility = \"hidden\";\n}\nclass la {\n  constructor(o, t, n) {\n    u(this, \"state\");\n    u(this, \"emitUpdate\");\n    u(this, \"tableId\");\n    u(this, \"tablePos\");\n    u(this, \"tableElement\");\n    u(this, \"menuFrozen\", !1);\n    u(this, \"mouseState\", \"up\");\n    u(this, \"prevWasEditable\", null);\n    u(this, \"viewMousedownHandler\", () => {\n      this.mouseState = \"down\";\n    });\n    u(this, \"mouseUpHandler\", (o) => {\n      this.mouseState = \"up\", this.mouseMoveHandler(o);\n    });\n    u(this, \"mouseMoveHandler\", (o) => {\n      var l, d, p, h, f, m, g;\n      if (this.menuFrozen || this.mouseState === \"selecting\" || !(o.target instanceof Element) || !this.pmView.dom.contains(o.target))\n        return;\n      const t = aa(o.target);\n      if ((t == null ? void 0 : t.type) === \"cell\" && this.mouseState === \"down\" && !((l = this.state) != null && l.draggingState)) {\n        this.mouseState = \"selecting\", (d = this.state) != null && d.show && (this.state.show = !1, this.state.showAddOrRemoveRowsButton = !1, this.state.showAddOrRemoveColumnsButton = !1, this.emitUpdate());\n        return;\n      }\n      if (!t || !this.editor.isEditable) {\n        (p = this.state) != null && p.show && (this.state.show = !1, this.state.showAddOrRemoveRowsButton = !1, this.state.showAddOrRemoveColumnsButton = !1, this.emitUpdate());\n        return;\n      }\n      if (!t.tbodyNode)\n        return;\n      const n = t.tbodyNode.getBoundingClientRect(), r = Do(t.domNode, this.pmView);\n      if (!r)\n        return;\n      this.tableElement = r.node;\n      let s;\n      const i = D(\n        r.id,\n        this.editor._tiptapEditor.state.doc\n      );\n      if (!i)\n        throw new Error(`Block with ID ${r.id} not found`);\n      const a = E(\n        i.node,\n        this.editor.schema.blockSchema,\n        this.editor.schema.inlineContentSchema,\n        this.editor.schema.styleSchema,\n        this.editor.blockCache\n      );\n      if (Cs(\"table\", a, this.editor) && (this.tablePos = i.posBeforeNode + 1, s = a), !s)\n        return;\n      this.tableId = r.id;\n      const c = (h = t.domNode.closest(\".tableWrapper\")) == null ? void 0 : h.querySelector(\".table-widgets-container\");\n      if ((t == null ? void 0 : t.type) === \"wrapper\") {\n        const b = o.clientY >= n.bottom - 1 && // -1 to account for fractions of pixels in \"bottom\"\n        o.clientY < n.bottom + 20, k = o.clientX >= n.right - 1 && o.clientX < n.right + 20, w = o.clientX > n.right || o.clientY > n.bottom;\n        this.state = {\n          ...this.state,\n          show: !0,\n          showAddOrRemoveRowsButton: b,\n          showAddOrRemoveColumnsButton: k,\n          referencePosTable: n,\n          block: s,\n          widgetContainer: c,\n          colIndex: w || (f = this.state) == null ? void 0 : f.colIndex,\n          rowIndex: w || (m = this.state) == null ? void 0 : m.rowIndex,\n          referencePosCell: w || (g = this.state) == null ? void 0 : g.referencePosCell\n        };\n      } else {\n        const b = Pe(t.domNode), k = Pe(t.domNode.parentElement), w = t.domNode.getBoundingClientRect();\n        if (this.state !== void 0 && this.state.show && this.tableId === r.id && this.state.rowIndex === k && this.state.colIndex === b)\n          return;\n        this.state = {\n          show: !0,\n          showAddOrRemoveColumnsButton: b === s.content.rows[0].cells.length - 1,\n          showAddOrRemoveRowsButton: k === s.content.rows.length - 1,\n          referencePosTable: n,\n          block: s,\n          draggingState: void 0,\n          referencePosCell: w,\n          colIndex: b,\n          rowIndex: k,\n          widgetContainer: c\n        };\n      }\n      return this.emitUpdate(), !1;\n    });\n    u(this, \"dragOverHandler\", (o) => {\n      var h;\n      if (((h = this.state) == null ? void 0 : h.draggingState) === void 0)\n        return;\n      o.preventDefault(), o.dataTransfer.dropEffect = \"move\", ca(\n        \".prosemirror-dropcursor-block, .prosemirror-dropcursor-inline\",\n        this.pmView.root\n      );\n      const t = {\n        left: Math.min(\n          Math.max(o.clientX, this.state.referencePosTable.left + 1),\n          this.state.referencePosTable.right - 1\n        ),\n        top: Math.min(\n          Math.max(o.clientY, this.state.referencePosTable.top + 1),\n          this.state.referencePosTable.bottom - 1\n        )\n      }, n = this.pmView.root.elementsFromPoint(t.left, t.top).filter(\n        (f) => f.tagName === \"TD\" || f.tagName === \"TH\"\n      );\n      if (n.length === 0)\n        return;\n      const r = n[0];\n      let s = !1;\n      const i = Pe(r.parentElement), a = Pe(r), c = this.state.draggingState.draggedCellOrientation === \"row\" ? this.state.rowIndex : this.state.colIndex, d = (this.state.draggingState.draggedCellOrientation === \"row\" ? i : a) !== c;\n      (this.state.rowIndex !== i || this.state.colIndex !== a) && (this.state.rowIndex = i, this.state.colIndex = a, this.state.referencePosCell = r.getBoundingClientRect(), s = !0);\n      const p = this.state.draggingState.draggedCellOrientation === \"row\" ? t.top : t.left;\n      this.state.draggingState.mousePos !== p && (this.state.draggingState.mousePos = p, s = !0), s && this.emitUpdate(), d && this.editor.dispatch(\n        this.pmView.state.tr.setMeta(fe, !0)\n      );\n    });\n    u(this, \"dropHandler\", (o) => {\n      if (this.mouseState = \"up\", this.state === void 0 || this.state.draggingState === void 0)\n        return !1;\n      if (this.state.rowIndex === void 0 || this.state.colIndex === void 0)\n        throw new Error(\n          \"Attempted to drop table row or column, but no table block was hovered prior.\"\n        );\n      o.preventDefault();\n      const { draggingState: t, colIndex: n, rowIndex: r } = this.state, s = this.state.block.content.columnWidths;\n      if (t.draggedCellOrientation === \"row\") {\n        if (!to(\n          this.state.block,\n          t.originalIndex,\n          r\n        ))\n          return !1;\n        const i = Xn(\n          this.state.block,\n          t.originalIndex,\n          r\n        );\n        this.editor.updateBlock(this.state.block, {\n          type: \"table\",\n          content: {\n            ...this.state.block.content,\n            rows: i\n          }\n        });\n      } else {\n        if (!oo(\n          this.state.block,\n          t.originalIndex,\n          n\n        ))\n          return !1;\n        const i = Kn(\n          this.state.block,\n          t.originalIndex,\n          n\n        ), [a] = s.splice(t.originalIndex, 1);\n        s.splice(n, 0, a), this.editor.updateBlock(this.state.block, {\n          type: \"table\",\n          content: {\n            ...this.state.block.content,\n            columnWidths: s,\n            rows: i\n          }\n        });\n      }\n      return this.editor.setTextCursorPosition(this.state.block.id), !0;\n    });\n    this.editor = o, this.pmView = t, this.emitUpdate = () => {\n      if (!this.state)\n        throw new Error(\"Attempting to update uninitialized image toolbar\");\n      n(this.state);\n    }, t.dom.addEventListener(\"mousemove\", this.mouseMoveHandler), t.dom.addEventListener(\"mousedown\", this.viewMousedownHandler), window.addEventListener(\"mouseup\", this.mouseUpHandler), t.root.addEventListener(\n      \"dragover\",\n      this.dragOverHandler\n    ), t.root.addEventListener(\n      \"drop\",\n      this.dropHandler\n    );\n  }\n  // Updates drag handles when the table is modified or removed.\n  update() {\n    var r;\n    if (!this.state || !this.state.show)\n      return;\n    if (this.state.block = this.editor.getBlock(this.state.block.id), !this.state.block || // when collaborating, the table element might be replaced and out of date\n    // because yjs replaces the element when for example you change the color via the side menu\n    !((r = this.tableElement) != null && r.isConnected)) {\n      this.state.show = !1, this.state.showAddOrRemoveRowsButton = !1, this.state.showAddOrRemoveColumnsButton = !1, this.emitUpdate();\n      return;\n    }\n    const { height: o, width: t } = ct(\n      this.state.block\n    );\n    this.state.rowIndex !== void 0 && this.state.colIndex !== void 0 && (this.state.rowIndex >= o && (this.state.rowIndex = o - 1), this.state.colIndex >= t && (this.state.colIndex = t - 1));\n    const n = this.tableElement.querySelector(\"tbody\");\n    if (!n)\n      throw new Error(\n        \"Table block does not contain a 'tbody' HTML element. This should never happen.\"\n      );\n    if (this.state.rowIndex !== void 0 && this.state.colIndex !== void 0) {\n      const i = n.children[this.state.rowIndex].children[this.state.colIndex];\n      i ? this.state.referencePosCell = i.getBoundingClientRect() : (this.state.rowIndex = void 0, this.state.colIndex = void 0);\n    }\n    this.state.referencePosTable = n.getBoundingClientRect(), this.emitUpdate();\n  }\n  destroy() {\n    this.pmView.dom.removeEventListener(\"mousemove\", this.mouseMoveHandler), window.removeEventListener(\"mouseup\", this.mouseUpHandler), this.pmView.dom.removeEventListener(\"mousedown\", this.viewMousedownHandler), this.pmView.root.removeEventListener(\n      \"dragover\",\n      this.dragOverHandler\n    ), this.pmView.root.removeEventListener(\n      \"drop\",\n      this.dropHandler\n    );\n  }\n}\nconst fe = new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.PluginKey(\"TableHandlesPlugin\");\nclass da extends q {\n  constructor(t) {\n    super();\n    u(this, \"view\");\n    u(this, \"plugin\");\n    /**\n     * Callback that should be set on the `dragStart` event for whichever element\n     * is used as the column drag handle.\n     */\n    u(this, \"colDragStart\", (t) => {\n      if (this.view.state === void 0 || this.view.state.colIndex === void 0)\n        throw new Error(\n          \"Attempted to drag table column, but no table block was hovered prior.\"\n        );\n      if (this.view.state.draggingState = {\n        draggedCellOrientation: \"col\",\n        originalIndex: this.view.state.colIndex,\n        mousePos: t.clientX\n      }, this.view.emitUpdate(), this.editor.dispatch(\n        this.editor._tiptapEditor.state.tr.setMeta(fe, {\n          draggedCellOrientation: this.view.state.draggingState.draggedCellOrientation,\n          originalIndex: this.view.state.colIndex,\n          newIndex: this.view.state.colIndex,\n          tablePos: this.view.tablePos\n        })\n      ), !this.editor.prosemirrorView)\n        throw new Error(\"Editor view not initialized.\");\n      Ut(this.editor.prosemirrorView.root), t.dataTransfer.setDragImage(A, 0, 0), t.dataTransfer.effectAllowed = \"move\";\n    });\n    /**\n     * Callback that should be set on the `dragStart` event for whichever element\n     * is used as the row drag handle.\n     */\n    u(this, \"rowDragStart\", (t) => {\n      if (this.view.state === void 0 || this.view.state.rowIndex === void 0)\n        throw new Error(\n          \"Attempted to drag table row, but no table block was hovered prior.\"\n        );\n      if (this.view.state.draggingState = {\n        draggedCellOrientation: \"row\",\n        originalIndex: this.view.state.rowIndex,\n        mousePos: t.clientY\n      }, this.view.emitUpdate(), this.editor.dispatch(\n        this.editor._tiptapEditor.state.tr.setMeta(fe, {\n          draggedCellOrientation: this.view.state.draggingState.draggedCellOrientation,\n          originalIndex: this.view.state.rowIndex,\n          newIndex: this.view.state.rowIndex,\n          tablePos: this.view.tablePos\n        })\n      ), !this.editor.prosemirrorView)\n        throw new Error(\"Editor view not initialized.\");\n      Ut(this.editor.prosemirrorView.root), t.dataTransfer.setDragImage(A, 0, 0), t.dataTransfer.effectAllowed = \"copyMove\";\n    });\n    /**\n     * Callback that should be set on the `dragEnd` event for both the element\n     * used as the row drag handle, and the one used as the column drag handle.\n     */\n    u(this, \"dragEnd\", () => {\n      if (this.view.state === void 0)\n        throw new Error(\n          \"Attempted to drag table row, but no table block was hovered prior.\"\n        );\n      if (this.view.state.draggingState = void 0, this.view.emitUpdate(), this.editor.dispatch(\n        this.editor._tiptapEditor.state.tr.setMeta(fe, null)\n      ), !this.editor.prosemirrorView)\n        throw new Error(\"Editor view not initialized.\");\n      ia(this.editor.prosemirrorView.root);\n    });\n    /**\n     * Freezes the drag handles. When frozen, they will stay attached to the same\n     * cell regardless of which cell is hovered by the mouse cursor.\n     */\n    u(this, \"freezeHandles\", () => {\n      this.view.menuFrozen = !0;\n    });\n    /**\n     * Unfreezes the drag handles. When frozen, they will stay attached to the\n     * same cell regardless of which cell is hovered by the mouse cursor.\n     */\n    u(this, \"unfreezeHandles\", () => {\n      this.view.menuFrozen = !1;\n    });\n    u(this, \"getCellsAtRowHandle\", (t, n) => Qe(t, n));\n    /**\n     * Get all the cells in a column of the table block.\n     */\n    u(this, \"getCellsAtColumnHandle\", (t, n) => et(t, n));\n    /**\n     * Sets the selection to the given cell or a range of cells.\n     * @returns The new state after the selection has been set.\n     */\n    u(this, \"setCellSelection\", (t, n = t) => {\n      const r = this.view;\n      if (!r)\n        throw new Error(\"Table handles view not initialized\");\n      const s = this.editor.prosemirrorState, i = s.doc.resolve(r.tablePos + 1), a = s.doc.resolve(\n        i.posAtIndex(t.row) + 1\n      ), c = s.doc.resolve(\n        // No need for +1, since CellSelection expects the position before the cell\n        a.posAtIndex(t.col)\n      ), l = s.doc.resolve(\n        i.posAtIndex(n.row) + 1\n      ), d = s.doc.resolve(\n        // No need for +1, since CellSelection expects the position before the cell\n        l.posAtIndex(n.col)\n      ), p = s.tr;\n      return p.setSelection(\n        new prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.CellSelection(c, d)\n      ), s.apply(p);\n    });\n    /**\n     * Adds a row or column to the table using prosemirror-table commands\n     */\n    u(this, \"addRowOrColumn\", (t, n) => {\n      const r = this.setCellSelection(\n        n.orientation === \"row\" ? { row: t, col: 0 } : { row: 0, col: t }\n      );\n      return n.orientation === \"row\" ? n.side === \"above\" ? (0,prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.addRowBefore)(r, this.editor.dispatch) : (0,prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.addRowAfter)(r, this.editor.dispatch) : n.side === \"left\" ? (0,prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.addColumnBefore)(r, this.editor.dispatch) : (0,prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.addColumnAfter)(r, this.editor.dispatch);\n    });\n    /**\n     * Removes a row or column from the table using prosemirror-table commands\n     */\n    u(this, \"removeRowOrColumn\", (t, n) => {\n      const r = this.setCellSelection(\n        n === \"row\" ? { row: t, col: 0 } : { row: 0, col: t }\n      );\n      return n === \"row\" ? (0,prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.deleteRow)(r, this.editor.dispatch) : (0,prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.deleteColumn)(r, this.editor.dispatch);\n    });\n    /**\n     * Merges the cells in the table block.\n     */\n    u(this, \"mergeCells\", (t) => {\n      const n = t ? this.setCellSelection(\n        t.relativeStartCell,\n        t.relativeEndCell\n      ) : this.editor.prosemirrorState;\n      return (0,prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.mergeCells)(n, this.editor.dispatch);\n    });\n    /**\n     * Splits the cell in the table block.\n     * If no cell is provided, the current cell selected will be split.\n     */\n    u(this, \"splitCell\", (t) => {\n      const n = t ? this.setCellSelection(t) : this.editor.prosemirrorState;\n      return (0,prosemirror_tables__WEBPACK_IMPORTED_MODULE_0__.splitCell)(n, this.editor.dispatch);\n    });\n    /**\n     * Gets the start and end cells of the current cell selection.\n     * @returns The start and end cells of the current cell selection.\n     */\n    u(this, \"getCellSelection\", () => {\n      const t = this.editor.prosemirrorState, n = t.selection;\n      let r = n.$from, s = n.$to;\n      if (It(n)) {\n        const { ranges: m } = n;\n        m.forEach((g) => {\n          r = g.$from.min(r ?? g.$from), s = g.$to.max(s ?? g.$to);\n        });\n      } else if (r = t.doc.resolve(\n        n.$from.pos - n.$from.parentOffset - 1\n      ), s = t.doc.resolve(\n        n.$to.pos - n.$to.parentOffset - 1\n      ), r.pos === 0 || s.pos === 0)\n        return;\n      const i = t.doc.resolve(\n        r.pos - r.parentOffset - 1\n      ), a = t.doc.resolve(s.pos - s.parentOffset - 1), c = t.doc.resolve(i.pos - i.parentOffset - 1), l = r.index(i.depth), d = i.index(c.depth), p = s.index(a.depth), h = a.index(c.depth), f = [];\n      for (let m = d; m <= h; m++)\n        for (let g = l; g <= p; g++)\n          f.push({ row: m, col: g });\n      return {\n        from: {\n          row: d,\n          col: l\n        },\n        to: {\n          row: h,\n          col: p\n        },\n        cells: f\n      };\n    });\n    /**\n     * Gets the direction of the merge based on the current cell selection.\n     *\n     * Returns undefined when there is no cell selection, or the selection is not within a table.\n     */\n    u(this, \"getMergeDirection\", (t) => {\n      const n = It(\n        this.editor.prosemirrorState.selection\n      ) ? this.editor.prosemirrorState.selection : void 0;\n      if (!n || !t || // Only offer the merge button if there is more than one cell selected.\n      n.ranges.length <= 1)\n        return;\n      const r = this.getCellSelection();\n      if (r)\n        return Zn(r.from, r.to, t) ? \"vertical\" : \"horizontal\";\n    });\n    u(this, \"cropEmptyRowsOrColumns\", (t, n) => Jn(t, n));\n    u(this, \"addRowsOrColumns\", (t, n, r) => Yn(t, n, r));\n    this.editor = t, this.plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.Plugin({\n      key: fe,\n      view: (n) => (this.view = new la(t, n, (r) => {\n        this.emit(\"update\", r);\n      }), this.view),\n      // We use decorations to render the drop cursor when dragging a table row\n      // or column. The decorations are updated in the `dragOverHandler` method.\n      props: {\n        decorations: (n) => {\n          if (this.view === void 0 || this.view.state === void 0 || this.view.state.draggingState === void 0 || this.view.tablePos === void 0)\n            return;\n          const r = this.view.state.draggingState.draggedCellOrientation === \"row\" ? this.view.state.rowIndex : this.view.state.colIndex;\n          if (r === void 0)\n            return;\n          const s = [], { block: i, draggingState: a } = this.view.state, { originalIndex: c, draggedCellOrientation: l } = a;\n          if (r === c || !i || l === \"row\" && !to(i, c, r) || l === \"col\" && !oo(i, c, r))\n            return prosemirror_view__WEBPACK_IMPORTED_MODULE_22__.DecorationSet.create(n.doc, s);\n          const d = n.doc.resolve(this.view.tablePos + 1);\n          return this.view.state.draggingState.draggedCellOrientation === \"row\" ? Qe(\n            this.view.state.block,\n            r\n          ).forEach(({ row: h, col: f }) => {\n            const m = n.doc.resolve(\n              d.posAtIndex(h) + 1\n            ), g = n.doc.resolve(\n              m.posAtIndex(f) + 1\n            ), b = g.node(), k = g.pos + (r > c ? b.nodeSize - 2 : 0);\n            s.push(\n              // The widget is a small bar which spans the width of the cell.\n              prosemirror_view__WEBPACK_IMPORTED_MODULE_22__.Decoration.widget(k, () => {\n                const w = document.createElement(\"div\");\n                return w.className = \"bn-table-drop-cursor\", w.style.left = \"0\", w.style.right = \"0\", r > c ? w.style.bottom = \"-2px\" : w.style.top = \"-3px\", w.style.height = \"4px\", w;\n              })\n            );\n          }) : et(\n            this.view.state.block,\n            r\n          ).forEach(({ row: h, col: f }) => {\n            const m = n.doc.resolve(\n              d.posAtIndex(h) + 1\n            ), g = n.doc.resolve(\n              m.posAtIndex(f) + 1\n            ), b = g.node(), k = g.pos + (r > c ? b.nodeSize - 2 : 0);\n            s.push(\n              // The widget is a small bar which spans the height of the cell.\n              prosemirror_view__WEBPACK_IMPORTED_MODULE_22__.Decoration.widget(k, () => {\n                const w = document.createElement(\"div\");\n                return w.className = \"bn-table-drop-cursor\", w.style.top = \"0\", w.style.bottom = \"0\", r > c ? w.style.right = \"-2px\" : w.style.left = \"-3px\", w.style.width = \"4px\", w;\n              })\n            );\n          }), prosemirror_view__WEBPACK_IMPORTED_MODULE_22__.DecorationSet.create(n.doc, s);\n        }\n      }\n    });\n  }\n  onUpdate(t) {\n    return this.on(\"update\", t);\n  }\n}\nconst pa = _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.Extension.create({\n  name: \"textAlignment\",\n  addGlobalAttributes() {\n    return [\n      {\n        // Attribute is applied to block content instead of container so that child blocks don't inherit the text\n        // alignment styling.\n        types: [\n          \"paragraph\",\n          \"heading\",\n          \"bulletListItem\",\n          \"numberedListItem\",\n          \"checkListItem\",\n          \"tableCell\",\n          \"tableHeader\"\n        ],\n        attributes: {\n          textAlignment: {\n            default: \"left\",\n            parseHTML: (e) => e.getAttribute(\"data-text-alignment\"),\n            renderHTML: (e) => e.textAlignment === \"left\" ? {} : {\n              \"data-text-alignment\": e.textAlignment\n            }\n          }\n        }\n      }\n    ];\n  }\n}), ua = _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.Extension.create({\n  name: \"blockTextColor\",\n  addGlobalAttributes() {\n    return [\n      {\n        types: [\"blockContainer\", \"tableCell\", \"tableHeader\"],\n        attributes: {\n          textColor: {\n            default: S.textColor.default,\n            parseHTML: (e) => e.hasAttribute(\"data-text-color\") ? e.getAttribute(\"data-text-color\") : S.textColor.default,\n            renderHTML: (e) => e.textColor === S.textColor.default ? {} : {\n              \"data-text-color\": e.textColor\n            }\n          }\n        }\n      }\n    ];\n  }\n}), ha = _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.Extension.create({\n  name: \"trailingNode\",\n  addProseMirrorPlugins() {\n    const e = new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.PluginKey(this.name);\n    return [\n      new prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.Plugin({\n        key: e,\n        appendTransaction: (o, t, n) => {\n          const { doc: r, tr: s, schema: i } = n, a = e.getState(n), c = r.content.size - 2, l = i.nodes.blockContainer, d = i.nodes.paragraph;\n          if (a)\n            return s.insert(\n              c,\n              l.create(void 0, d.create())\n            );\n        },\n        state: {\n          init: (o, t) => {\n          },\n          apply: (o, t) => {\n            if (!o.docChanged)\n              return t;\n            let n = o.doc.lastChild;\n            if (!n || n.type.name !== \"blockGroup\")\n              throw new Error(\"Expected blockGroup\");\n            if (n = n.lastChild, !n || n.type.name !== \"blockContainer\")\n              return !0;\n            const r = n.firstChild;\n            if (!r)\n              throw new Error(\"Expected blockContent\");\n            return n.nodeSize > 4 || r.type.spec.content !== \"inline*\";\n          }\n        }\n      })\n    ];\n  }\n}), fa = {\n  blockColor: \"data-block-color\",\n  blockStyle: \"data-block-style\",\n  id: \"data-id\",\n  depth: \"data-depth\",\n  depthChange: \"data-depth-change\"\n}, ma = _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.Node.create({\n  name: \"blockContainer\",\n  group: \"blockGroupChild bnBlock\",\n  // A block always contains content, and optionally a blockGroup which contains nested blocks\n  content: \"blockContent blockGroup?\",\n  // Ensures content-specific keyboard handlers trigger first.\n  priority: 50,\n  defining: !0,\n  parseHTML() {\n    return [\n      {\n        tag: \"div\",\n        getAttrs: (e) => {\n          if (typeof e == \"string\")\n            return !1;\n          const o = {};\n          for (const [t, n] of Object.entries(fa))\n            e.getAttribute(n) && (o[t] = e.getAttribute(n));\n          return e.getAttribute(\"data-node-type\") === \"blockContainer\" ? o : !1;\n        }\n      }\n    ];\n  },\n  renderHTML({ HTMLAttributes: e }) {\n    var r;\n    const o = document.createElement(\"div\");\n    o.className = \"bn-block-outer\", o.setAttribute(\"data-node-type\", \"blockOuter\");\n    for (const [s, i] of Object.entries(e))\n      s !== \"class\" && o.setAttribute(s, i);\n    const t = {\n      ...((r = this.options.domAttributes) == null ? void 0 : r.block) || {},\n      ...e\n    }, n = document.createElement(\"div\");\n    n.className = Y(\"bn-block\", t.class), n.setAttribute(\"data-node-type\", this.name);\n    for (const [s, i] of Object.entries(t))\n      s !== \"class\" && n.setAttribute(s, i);\n    return o.appendChild(n), {\n      dom: o,\n      contentDOM: n\n    };\n  }\n}), ga = _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.Node.create({\n  name: \"blockGroup\",\n  group: \"childContainer\",\n  content: \"blockGroupChild+\",\n  parseHTML() {\n    return [\n      {\n        tag: \"div\",\n        getAttrs: (e) => typeof e == \"string\" ? !1 : e.getAttribute(\"data-node-type\") === \"blockGroup\" ? null : !1\n      }\n    ];\n  },\n  renderHTML({ HTMLAttributes: e }) {\n    var n;\n    const o = {\n      ...((n = this.options.domAttributes) == null ? void 0 : n.blockGroup) || {},\n      ...e\n    }, t = document.createElement(\"div\");\n    t.className = Y(\n      \"bn-block-group\",\n      o.class\n    ), t.setAttribute(\"data-node-type\", \"blockGroup\");\n    for (const [r, s] of Object.entries(o))\n      r !== \"class\" && t.setAttribute(r, s);\n    return {\n      dom: t,\n      contentDOM: t\n    };\n  }\n}), ba = _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.Node.create({\n  name: \"doc\",\n  topNode: !0,\n  content: \"blockGroup\"\n}), ka = (e) => {\n  const o = {}, t = wa(e);\n  for (const r of t)\n    o[r.name] = r;\n  o.formattingToolbar = new Ai(\n    e.editor\n  ), o.linkToolbar = new Vi(e.editor), o.sideMenu = new ea(\n    e.editor,\n    e.sideMenuDetection\n  ), o.suggestionMenus = new sa(e.editor), o.filePanel = new Pi(e.editor), o.placeholder = new ji(e.editor, e.placeholders), (e.animations ?? !0) && (o.animations = new qi()), e.tableHandles && (o.tableHandles = new da(e.editor)), o.dropCursor = {\n    plugin: e.dropCursor({\n      width: 5,\n      color: \"#ddeeff\",\n      editor: e.editor\n    })\n  }, o.nodeSelectionKeyboard = new zi(), o.showSelection = new Ki(e.editor), e.comments && (o.comments = new xi(\n    e.editor,\n    e.comments.threadStore,\n    No.name\n  ));\n  const n = e.disableExtensions || [];\n  for (const r of n)\n    delete o[r];\n  return o;\n};\nlet $t = !1;\nconst wa = (e) => {\n  const o = [\n    _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.extensions.ClipboardTextSerializer,\n    _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.extensions.Commands,\n    _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.extensions.Editable,\n    _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.extensions.FocusEvents,\n    _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.extensions.Tabindex,\n    // DevTools,\n    _tiptap_extension_gapcursor__WEBPACK_IMPORTED_MODULE_9__.Gapcursor,\n    // DropCursor,\n    ve.configure({\n      // everything from bnBlock group (nodes that represent a BlockNote block should have an id)\n      types: [\"blockContainer\", \"columnList\", \"column\"],\n      setIdAttribute: e.setIdAttribute\n    }),\n    Ni,\n    // Comments,\n    // basics:\n    _tiptap_extension_text__WEBPACK_IMPORTED_MODULE_12__.Text,\n    // marks:\n    _tiptap_extension_link__WEBPACK_IMPORTED_MODULE_11__.Link.extend({\n      inclusive: !1\n    }).configure({\n      defaultProtocol: $i,\n      // only call this once if we have multiple editors installed. Or fix https://github.com/ueberdosis/tiptap/issues/5450\n      protocols: $t ? [] : Ui\n    }),\n    ...Object.values(e.styleSpecs).map((t) => t.implementation.mark.configure({\n      editor: e.editor\n    })),\n    ua,\n    vi,\n    pa,\n    // make sure escape blurs editor, so that we can tab to other elements in the host page (accessibility)\n    _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.Extension.create({\n      name: \"OverrideEscape\",\n      addKeyboardShortcuts() {\n        return {\n          Escape: () => e.editor.suggestionMenus.shown ? !1 : this.editor.commands.blur()\n        };\n      }\n    }),\n    // nodes\n    ba,\n    ma.configure({\n      editor: e.editor,\n      domAttributes: e.domAttributes\n    }),\n    Oi.configure({\n      editor: e.editor,\n      tabBehavior: e.tabBehavior\n    }),\n    ga.configure({\n      domAttributes: e.domAttributes\n    }),\n    ...Object.values(e.inlineContentSpecs).filter((t) => t.config !== \"link\" && t.config !== \"text\").map((t) => t.implementation.node.configure({\n      editor: e.editor\n    })),\n    ...Object.values(e.blockSpecs).flatMap((t) => [\n      // dependent nodes (e.g.: tablecell / row)\n      ...(t.implementation.requiredExtensions || []).map(\n        (n) => n.configure({\n          editor: e.editor,\n          domAttributes: e.domAttributes\n        })\n      ),\n      // the actual node itself\n      t.implementation.node.configure({\n        editor: e.editor,\n        domAttributes: e.domAttributes\n      })\n    ]),\n    Ci(e.editor),\n    wi(\n      e.editor,\n      e.pasteHandler || ((t) => t.defaultPasteHandler())\n    ),\n    oi(e.editor),\n    // This needs to be at the bottom of this list, because Key events (such as enter, when selecting a /command),\n    // should be handled before Enter handlers in other components like splitListItem\n    ...e.trailingBlock === void 0 || e.trailingBlock ? [ha] : [],\n    ...e.comments ? [No] : []\n  ];\n  return $t = !0, e.collaboration ? o.push(...Ei(e.collaboration)) : o.push(_tiptap_extension_history__WEBPACK_IMPORTED_MODULE_10__.History), o;\n};\nfunction ya(e, o) {\n  const t = [];\n  return e.forEach((n, r, s) => {\n    s !== o && t.push(n);\n  }), prosemirror_model__WEBPACK_IMPORTED_MODULE_18__.Fragment.from(t);\n}\nfunction Ca(e, o) {\n  const t = [];\n  for (let n = 0; n < e.childCount; n++)\n    if (e.child(n).type.name === \"tableRow\")\n      if (t.length > 0 && t[t.length - 1].type.name === \"table\") {\n        const r = t[t.length - 1], s = r.copy(r.content.addToEnd(e.child(n)));\n        t[t.length - 1] = s;\n      } else {\n        const r = o.nodes.table.createChecked(\n          void 0,\n          e.child(n)\n        );\n        t.push(r);\n      }\n    else\n      t.push(e.child(n));\n  return e = prosemirror_model__WEBPACK_IMPORTED_MODULE_18__.Fragment.from(t), e;\n}\nfunction va(e, o) {\n  let t = prosemirror_model__WEBPACK_IMPORTED_MODULE_18__.Fragment.from(e.content);\n  if (t = Ca(t, o.state.schema), !Ea(t, o))\n    return new prosemirror_model__WEBPACK_IMPORTED_MODULE_18__.Slice(t, e.openStart, e.openEnd);\n  for (let n = 0; n < t.childCount; n++)\n    if (t.child(n).type.spec.group === \"blockContent\") {\n      const r = [t.child(n)];\n      if (n + 1 < t.childCount && t.child(n + 1).type.name === \"blockGroup\") {\n        const i = t.child(n + 1).child(0).child(0);\n        (i.type.name === \"bulletListItem\" || i.type.name === \"numberedListItem\" || i.type.name === \"checkListItem\") && (r.push(t.child(n + 1)), t = ya(t, n + 1));\n      }\n      const s = o.state.schema.nodes.blockContainer.createChecked(\n        void 0,\n        r\n      );\n      t = t.replaceChild(n, s);\n    }\n  return new prosemirror_model__WEBPACK_IMPORTED_MODULE_18__.Slice(t, e.openStart, e.openEnd);\n}\nfunction Ea(e, o) {\n  var s, i;\n  const t = e.childCount === 1, n = ((s = e.firstChild) == null ? void 0 : s.type.spec.content) === \"inline*\", r = ((i = e.firstChild) == null ? void 0 : i.type.spec.content) === \"tableRow+\";\n  if (t) {\n    if (n)\n      return !1;\n    if (r) {\n      const a = C(o.state);\n      if (a.isBlockContainer)\n        return !(a.blockContent.node.type.spec.content === \"tableRow+\");\n    }\n  }\n  return !0;\n}\nconst Oe = class Oe extends _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.Editor {\n  constructor(t, n) {\n    super({ ...t, content: void 0 });\n    u(this, \"_state\");\n    /**\n     * Mounts / unmounts the editor to a dom element\n     *\n     * @param element DOM element to mount to, ur null / undefined to destroy\n     */\n    u(this, \"mount\", (t, n, r) => {\n      n ? (this.options.element = n, this.createViewAlternative(t, r)) : this.destroy();\n    });\n    const r = this.schema;\n    let s;\n    const i = r.nodes.doc.createAndFill;\n    r.nodes.doc.createAndFill = (...c) => {\n      if (s)\n        return s;\n      const l = i.apply(r.nodes.doc, c), d = JSON.parse(JSON.stringify(l.toJSON()));\n      return d.content[0].content[0].attrs.id = \"initialBlockId\", s = prosemirror_model__WEBPACK_IMPORTED_MODULE_18__.Node.fromJSON(r, d), s;\n    };\n    let a;\n    try {\n      const c = t == null ? void 0 : t.content.map(\n        (l) => ie(l, this.schema, n).toJSON()\n      );\n      a = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_15__.createDocument)(\n        {\n          type: \"doc\",\n          content: [\n            {\n              type: \"blockGroup\",\n              content: c\n            }\n          ]\n        },\n        this.schema,\n        this.options.parseOptions\n      );\n    } catch (c) {\n      throw console.error(\n        \"Error creating document from blocks passed as `initialContent`. Caused by exception: \",\n        c\n      ), new Error(\n        \"Error creating document from blocks passed as `initialContent`:\\n\" + +JSON.stringify(t.content)\n      );\n    }\n    this._state = prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.EditorState.create({\n      doc: a,\n      schema: this.schema\n      // selection: selection || undefined,\n    });\n  }\n  get state() {\n    return this.view && (this._state = this.view.state), this._state;\n  }\n  dispatch(t) {\n    this.view ? this.view.dispatch(t) : this._state = this.state.apply(t);\n  }\n  /**\n   * Replace the default `createView` method with a custom one - which we call on mount\n   */\n  createViewAlternative(t, n) {\n    this.contentComponent = n;\n    const r = {};\n    this.extensionManager.extensions.forEach((i) => {\n      i.type === \"mark\" && i.config.addMarkView && (r[i.name] = i.config.addMarkView(t));\n    }), this.view = new prosemirror_view__WEBPACK_IMPORTED_MODULE_22__.EditorView(\n      { mount: this.options.element },\n      // use mount option so that we reuse the existing element instead of creating a new one\n      {\n        ...this.options.editorProps,\n        // @ts-ignore\n        dispatchTransaction: this.dispatchTransaction.bind(this),\n        state: this.state,\n        markViews: r,\n        nodeViews: this.extensionManager.nodeViews\n      }\n    );\n    const s = this.state.reconfigure({\n      plugins: this.extensionManager.plugins\n    });\n    this.view.updateState(s), this.commands.focus(\n      this.options.autofocus || this.options.element.getAttribute(\"data-bn-autofocus\") === \"true\",\n      { scrollIntoView: !1 }\n    ), this.emit(\"create\", { editor: this }), this.isInitialized = !0;\n  }\n};\nu(Oe, \"create\", (t, n) => {\n  var s, i;\n  const r = (s = globalThis == null ? void 0 : globalThis.window) == null ? void 0 : s.setTimeout;\n  typeof ((i = globalThis == null ? void 0 : globalThis.window) == null ? void 0 : i.setTimeout) < \"u\" && (globalThis.window.setTimeout = () => 0);\n  try {\n    return new Oe(t, n);\n  } finally {\n    r && (globalThis.window.setTimeout = r);\n  }\n});\nlet De = Oe;\nDe.prototype.createView = function() {\n  this.options.onPaste = this.options.onDrop = void 0;\n};\nconst Sa = {\n  enableInputRules: !0,\n  enablePasteRules: !0,\n  enableCoreExtensions: !1\n};\nclass _o extends q {\n  constructor(t) {\n    var l, d, p, h, f, m, g, b, k, w, y, T, F, j, B;\n    super();\n    /**\n     * The underlying prosemirror schema\n     */\n    u(this, \"pmSchema\");\n    /**\n     * extensions that are added to the editor, can be tiptap extensions or prosemirror plugins\n     */\n    u(this, \"extensions\", {});\n    /**\n     * Boolean indicating whether the editor is in headless mode.\n     * Headless mode means we can use features like importing / exporting blocks,\n     * but there's no underlying editor (UI) instantiated.\n     *\n     * You probably don't need to set this manually, but use the `server-util` package instead that uses this option internally\n     */\n    u(this, \"headless\", !1);\n    u(this, \"_tiptapEditor\");\n    // TODO: Type should actually reflect that it can be `undefined` in headless mode\n    /**\n     * Used by React to store a reference to an `ElementRenderer` helper utility to make sure we can render React elements\n     * in the correct context (used by `ReactRenderUtil`)\n     */\n    u(this, \"elementRenderer\", null);\n    /**\n     * Cache of all blocks. This makes sure we don't have to \"recompute\" blocks if underlying Prosemirror Nodes haven't changed.\n     * This is especially useful when we want to keep track of the same block across multiple operations,\n     * with this cache, blocks stay the same object reference (referential equality with ===).\n     */\n    u(this, \"blockCache\", /* @__PURE__ */ new WeakMap());\n    /**\n     * The dictionary contains translations for the editor.\n     */\n    u(this, \"dictionary\");\n    /**\n     * The schema of the editor. The schema defines which Blocks, InlineContent, and Styles are available in the editor.\n     */\n    u(this, \"schema\");\n    u(this, \"blockImplementations\");\n    u(this, \"inlineContentImplementations\");\n    u(this, \"styleImplementations\");\n    u(this, \"formattingToolbar\");\n    u(this, \"linkToolbar\");\n    u(this, \"sideMenu\");\n    u(this, \"suggestionMenus\");\n    u(this, \"filePanel\");\n    u(this, \"tableHandles\");\n    u(this, \"comments\");\n    u(this, \"showSelectionPlugin\");\n    /**\n     * The `uploadFile` method is what the editor uses when files need to be uploaded (for example when selecting an image to upload).\n     * This method should set when creating the editor as this is application-specific.\n     *\n     * `undefined` means the application doesn't support file uploads.\n     *\n     * @param file The file that should be uploaded.\n     * @returns The URL of the uploaded file OR an object containing props that should be set on the file block (such as an id)\n     */\n    u(this, \"uploadFile\");\n    u(this, \"onUploadStartCallbacks\", []);\n    u(this, \"onUploadEndCallbacks\", []);\n    u(this, \"resolveFileUrl\");\n    u(this, \"resolveUsers\");\n    /**\n     * Editor settings\n     */\n    u(this, \"settings\");\n    u(this, \"dispatch\", (t) => {\n      this._tiptapEditor.dispatch(t);\n    });\n    /**\n     * Mount the editor to a parent DOM element. Call mount(undefined) to clean up\n     *\n     * @warning Not needed to call manually when using React, use BlockNoteView to take care of mounting\n     */\n    u(this, \"mount\", (t, n) => {\n      this._tiptapEditor.mount(this, t, n);\n    });\n    this.options = t;\n    const n = t;\n    if (n.onEditorContentChange)\n      throw new Error(\n        \"onEditorContentChange initialization option is deprecated, use <BlockNoteView onChange={...} />, the useEditorChange(...) hook, or editor.onChange(...)\"\n      );\n    if (n.onTextCursorPositionChange)\n      throw new Error(\n        \"onTextCursorPositionChange initialization option is deprecated, use <BlockNoteView onSelectionChange={...} />, the useEditorSelectionChange(...) hook, or editor.onSelectionChange(...)\"\n      );\n    if (n.onEditorReady)\n      throw new Error(\n        \"onEditorReady is deprecated. Editor is immediately ready for use after creation.\"\n      );\n    if (n.editable)\n      throw new Error(\n        \"editable initialization option is deprecated, use <BlockNoteView editable={true/false} />, or alternatively editor.isEditable = true/false\"\n      );\n    this.dictionary = t.dictionary || _en_B7ycW7c8_js__WEBPACK_IMPORTED_MODULE_26__.e, this.settings = {\n      tables: {\n        splitCells: ((l = t == null ? void 0 : t.tables) == null ? void 0 : l.splitCells) ?? !1,\n        cellBackgroundColor: ((d = t == null ? void 0 : t.tables) == null ? void 0 : d.cellBackgroundColor) ?? !1,\n        cellTextColor: ((p = t == null ? void 0 : t.tables) == null ? void 0 : p.cellTextColor) ?? !1,\n        headers: ((h = t == null ? void 0 : t.tables) == null ? void 0 : h.headers) ?? !1\n      },\n      codeBlock: {\n        indentLineWithTab: ((f = t == null ? void 0 : t.codeBlock) == null ? void 0 : f.indentLineWithTab) ?? !0,\n        defaultLanguage: ((m = t == null ? void 0 : t.codeBlock) == null ? void 0 : m.defaultLanguage) ?? \"text\",\n        supportedLanguages: ((g = t == null ? void 0 : t.codeBlock) == null ? void 0 : g.supportedLanguages) ?? {},\n        createHighlighter: ((b = t == null ? void 0 : t.codeBlock) == null ? void 0 : b.createHighlighter) ?? void 0\n      }\n    };\n    const r = {\n      defaultStyles: !0,\n      schema: t.schema || Be.create(),\n      _headless: !1,\n      ...t,\n      placeholders: {\n        ...this.dictionary.placeholders,\n        ...t.placeholders\n      }\n    };\n    if (r.comments && !r.resolveUsers)\n      throw new Error(\"resolveUsers is required when using comments\");\n    if (this.resolveUsers = r.resolveUsers, this.schema = r.schema, this.blockImplementations = r.schema.blockSpecs, this.inlineContentImplementations = r.schema.inlineContentSpecs, this.styleImplementations = r.schema.styleSpecs, this.extensions = ka({\n      editor: this,\n      domAttributes: r.domAttributes || {},\n      blockSpecs: this.schema.blockSpecs,\n      styleSpecs: this.schema.styleSpecs,\n      inlineContentSpecs: this.schema.inlineContentSpecs,\n      collaboration: r.collaboration,\n      trailingBlock: r.trailingBlock,\n      disableExtensions: r.disableExtensions,\n      setIdAttribute: r.setIdAttribute,\n      animations: r.animations ?? !0,\n      tableHandles: L(\"table\", this),\n      dropCursor: this.options.dropCursor ?? prosemirror_dropcursor__WEBPACK_IMPORTED_MODULE_27__.dropCursor,\n      placeholders: r.placeholders,\n      tabBehavior: r.tabBehavior,\n      sideMenuDetection: r.sideMenuDetection || \"viewport\",\n      comments: r.comments,\n      pasteHandler: r.pasteHandler\n    }), (((k = r._tiptapOptions) == null ? void 0 : k.extensions) || []).forEach((v) => {\n      this.extensions[v.name] = v;\n    }), Object.entries(r._extensions || {}).forEach(([v, I]) => {\n      typeof I == \"function\" && (I = I(this)), this.extensions[v] = I;\n    }), this.formattingToolbar = this.extensions.formattingToolbar, this.linkToolbar = this.extensions.linkToolbar, this.sideMenu = this.extensions.sideMenu, this.suggestionMenus = this.extensions.suggestionMenus, this.filePanel = this.extensions.filePanel, this.tableHandles = this.extensions.tableHandles, this.comments = this.extensions.comments, this.showSelectionPlugin = this.extensions.showSelection, r.uploadFile) {\n      const v = r.uploadFile;\n      this.uploadFile = async (I, ae) => {\n        this.onUploadStartCallbacks.forEach(\n          (Fe) => Fe.apply(this, [ae])\n        );\n        try {\n          return await v(I, ae);\n        } finally {\n          this.onUploadEndCallbacks.forEach(\n            (Fe) => Fe.apply(this, [ae])\n          );\n        }\n      };\n    }\n    this.resolveFileUrl = r.resolveFileUrl, this.headless = r._headless;\n    const s = \"collaboration\" in this.extensions || \"liveblocksExtension\" in this.extensions;\n    s && r.initialContent && console.warn(\n      \"When using Collaboration, initialContent might cause conflicts, because changes should come from the collaboration provider\"\n    );\n    const i = r.initialContent || (s ? [\n      {\n        type: \"paragraph\",\n        id: \"initialBlockId\"\n      }\n    ] : [\n      {\n        type: \"paragraph\",\n        id: ve.options.generateID()\n      }\n    ]);\n    if (!Array.isArray(i) || i.length === 0)\n      throw new Error(\n        \"initialContent must be a non-empty array of blocks, received: \" + i\n      );\n    const a = [\n      ...Object.entries(this.extensions).map(([v, I]) => {\n        if (I instanceof _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.Extension || I instanceof _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.Node || I instanceof _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.Mark)\n          return I;\n        if (!I.plugin)\n          throw new Error(\n            \"Extension should either be a TipTap extension or a ProseMirror plugin in a plugin property\"\n          );\n        return _tiptap_core__WEBPACK_IMPORTED_MODULE_15__.Extension.create({\n          name: v,\n          addProseMirrorPlugins: () => [I.plugin]\n        });\n      })\n    ], c = {\n      ...Sa,\n      ...r._tiptapOptions,\n      content: i,\n      extensions: a,\n      editorProps: {\n        ...(w = r._tiptapOptions) == null ? void 0 : w.editorProps,\n        attributes: {\n          // As of TipTap v2.5.0 the tabIndex is removed when the editor is not\n          // editable, so you can't focus it. We want to revert this as we have\n          // UI behaviour that relies on it.\n          tabIndex: \"0\",\n          ...(T = (y = r._tiptapOptions) == null ? void 0 : y.editorProps) == null ? void 0 : T.attributes,\n          ...(F = r.domAttributes) == null ? void 0 : F.editor,\n          class: Y(\n            \"bn-editor\",\n            r.defaultStyles ? \"bn-default-styles\" : \"\",\n            ((B = (j = r.domAttributes) == null ? void 0 : j.editor) == null ? void 0 : B.class) || \"\"\n          )\n        },\n        transformPasted: va\n      }\n    };\n    this.headless ? this.pmSchema = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_15__.getSchema)(c.extensions) : (this._tiptapEditor = De.create(\n      c,\n      this.schema.styleSchema\n    ), this.pmSchema = this._tiptapEditor.schema), this.emit(\"create\");\n  }\n  static create(t = {}) {\n    return new _o(t);\n  }\n  /**\n   * Get the underlying prosemirror view\n   */\n  get prosemirrorView() {\n    return this._tiptapEditor.view;\n  }\n  /**\n   * Get the underlying prosemirror state\n   */\n  get prosemirrorState() {\n    return this._tiptapEditor.state;\n  }\n  get domElement() {\n    var t;\n    return (t = this.prosemirrorView) == null ? void 0 : t.dom;\n  }\n  isFocused() {\n    var t;\n    return ((t = this.prosemirrorView) == null ? void 0 : t.hasFocus()) || !1;\n  }\n  focus() {\n    var t;\n    (t = this.prosemirrorView) == null || t.focus();\n  }\n  onUploadStart(t) {\n    return this.onUploadStartCallbacks.push(t), () => {\n      const n = this.onUploadStartCallbacks.indexOf(t);\n      n > -1 && this.onUploadStartCallbacks.splice(n, 1);\n    };\n  }\n  onUploadEnd(t) {\n    return this.onUploadEndCallbacks.push(t), () => {\n      const n = this.onUploadEndCallbacks.indexOf(t);\n      n > -1 && this.onUploadEndCallbacks.splice(n, 1);\n    };\n  }\n  /**\n   * @deprecated, use `editor.document` instead\n   */\n  get topLevelBlocks() {\n    return this.document;\n  }\n  /**\n   * Gets a snapshot of all top-level (non-nested) blocks in the editor.\n   * @returns A snapshot of all top-level (non-nested) blocks in the editor.\n   */\n  get document() {\n    const t = [];\n    return this.prosemirrorState.doc.firstChild.descendants((n) => (t.push(\n      E(\n        n,\n        this.schema.blockSchema,\n        this.schema.inlineContentSchema,\n        this.schema.styleSchema,\n        this.blockCache\n      )\n    ), !1)), t;\n  }\n  /**\n   * Gets a snapshot of an existing block from the editor.\n   * @param blockIdentifier The identifier of an existing block that should be\n   * retrieved.\n   * @returns The block that matches the identifier, or `undefined` if no\n   * matching block was found.\n   */\n  getBlock(t) {\n    return Os(this, t);\n  }\n  /**\n   * Gets a snapshot of the previous sibling of an existing block from the\n   * editor.\n   * @param blockIdentifier The identifier of an existing block for which the\n   * previous sibling should be retrieved.\n   * @returns The previous sibling of the block that matches the identifier.\n   * `undefined` if no matching block was found, or it's the first child/block\n   * in the document.\n   */\n  getPrevBlock(t) {\n    return _s(this, t);\n  }\n  /**\n   * Gets a snapshot of the next sibling of an existing block from the editor.\n   * @param blockIdentifier The identifier of an existing block for which the\n   * next sibling should be retrieved.\n   * @returns The next sibling of the block that matches the identifier.\n   * `undefined` if no matching block was found, or it's the last child/block in\n   * the document.\n   */\n  getNextBlock(t) {\n    return Rs(this, t);\n  }\n  /**\n   * Gets a snapshot of the parent of an existing block from the editor.\n   * @param blockIdentifier The identifier of an existing block for which the\n   * parent should be retrieved.\n   * @returns The parent of the block that matches the identifier. `undefined`\n   * if no matching block was found, or the block isn't nested.\n   */\n  getParentBlock(t) {\n    return Vs(this, t);\n  }\n  /**\n   * Traverses all blocks in the editor depth-first, and executes a callback for each.\n   * @param callback The callback to execute for each block. Returning `false` stops the traversal.\n   * @param reverse Whether the blocks should be traversed in reverse order.\n   */\n  forEachBlock(t, n = !1) {\n    const r = this.document.slice();\n    n && r.reverse();\n    function s(i) {\n      for (const a of i) {\n        if (t(a) === !1)\n          return !1;\n        const c = n ? a.children.slice().reverse() : a.children;\n        if (!s(c))\n          return !1;\n      }\n      return !0;\n    }\n    s(r);\n  }\n  /**\n   * Executes a callback whenever the editor's contents change.\n   * @param callback The callback to execute.\n   *\n   * @deprecated use `onChange` instead\n   */\n  onEditorContentChange(t) {\n    this._tiptapEditor.on(\"update\", t);\n  }\n  /**\n   * Executes a callback whenever the editor's selection changes.\n   * @param callback The callback to execute.\n   *\n   * @deprecated use `onSelectionChange` instead\n   */\n  onEditorSelectionChange(t) {\n    this._tiptapEditor.on(\"selectionUpdate\", t);\n  }\n  /**\n   * Gets a snapshot of the current text cursor position.\n   * @returns A snapshot of the current text cursor position.\n   */\n  getTextCursorPosition() {\n    return zs(this);\n  }\n  /**\n   * Sets the text cursor position to the start or end of an existing block. Throws an error if the target block could\n   * not be found.\n   * @param targetBlock The identifier of an existing block that the text cursor should be moved to.\n   * @param placement Whether the text cursor should be placed at the start or end of the block.\n   */\n  setTextCursorPosition(t, n = \"start\") {\n    To(this, t, n);\n  }\n  /**\n   * Gets a snapshot of the current selection.\n   */\n  getSelection() {\n    return $s(this);\n  }\n  setSelection(t, n) {\n    Fs(this, t, n);\n  }\n  /**\n   * Checks if the editor is currently editable, or if it's locked.\n   * @returns True if the editor is editable, false otherwise.\n   */\n  get isEditable() {\n    if (!this._tiptapEditor) {\n      if (!this.headless)\n        throw new Error(\"no editor, but also not headless?\");\n      return !1;\n    }\n    return this._tiptapEditor.isEditable === void 0 ? !0 : this._tiptapEditor.isEditable;\n  }\n  /**\n   * Makes the editor editable or locks it, depending on the argument passed.\n   * @param editable True to make the editor editable, or false to lock it.\n   */\n  set isEditable(t) {\n    if (!this._tiptapEditor) {\n      if (!this.headless)\n        throw new Error(\"no editor, but also not headless?\");\n      return;\n    }\n    this._tiptapEditor.options.editable !== t && this._tiptapEditor.setEditable(t);\n  }\n  /**\n   * Inserts new blocks into the editor. If a block's `id` is undefined, BlockNote generates one automatically. Throws an\n   * error if the reference block could not be found.\n   * @param blocksToInsert An array of partial blocks that should be inserted.\n   * @param referenceBlock An identifier for an existing block, at which the new blocks should be inserted.\n   * @param placement Whether the blocks should be inserted just before, just after, or nested inside the\n   * `referenceBlock`.\n   */\n  insertBlocks(t, n, r = \"before\") {\n    return Bs(this, t, n, r);\n  }\n  /**\n   * Updates an existing block in the editor. Since updatedBlock is a PartialBlock object, some fields might not be\n   * defined. These undefined fields are kept as-is from the existing block. Throws an error if the block to update could\n   * not be found.\n   * @param blockToUpdate The block that should be updated.\n   * @param update A partial block which defines how the existing block should be changed.\n   */\n  updateBlock(t, n) {\n    return tr(this, t, n);\n  }\n  /**\n   * Removes existing blocks from the editor. Throws an error if any of the blocks could not be found.\n   * @param blocksToRemove An array of identifiers for existing blocks that should be removed.\n   */\n  removeBlocks(t) {\n    return Ds(this, t);\n  }\n  /**\n   * Replaces existing blocks in the editor with new blocks. If the blocks that should be removed are not adjacent or\n   * are at different nesting levels, `blocksToInsert` will be inserted at the position of the first block in\n   * `blocksToRemove`. Throws an error if any of the blocks to remove could not be found.\n   * @param blocksToRemove An array of blocks that should be replaced.\n   * @param blocksToInsert An array of partial blocks to replace the old ones with.\n   */\n  replaceBlocks(t, n) {\n    return Hs(this, t, n);\n  }\n  /**\n   * Insert a piece of content at the current cursor position.\n   *\n   * @param content can be a string, or array of partial inline content elements\n   */\n  insertInlineContent(t) {\n    const n = O(\n      t,\n      this.pmSchema,\n      this.schema.styleSchema\n    );\n    Us(\n      {\n        from: this._tiptapEditor.state.selection.from,\n        to: this._tiptapEditor.state.selection.to\n      },\n      n,\n      this\n    );\n  }\n  /**\n   * Gets the active text styles at the text cursor position or at the end of the current selection if it's active.\n   */\n  getActiveStyles() {\n    const t = {}, n = this._tiptapEditor.state.selection.$to.marks();\n    for (const r of n) {\n      const s = this.schema.styleSchema[r.type.name];\n      if (!s) {\n        // Links are not considered styles in blocknote\n        r.type.name !== \"link\" && // \"blocknoteIgnore\" tagged marks (such as comments) are also not considered BlockNote \"styles\"\n        !r.type.spec.blocknoteIgnore && console.warn(\"mark not found in styleschema\", r.type.name);\n        continue;\n      }\n      s.propSchema === \"boolean\" ? t[s.type] = !0 : t[s.type] = r.attrs.stringValue;\n    }\n    return t;\n  }\n  /**\n   * Adds styles to the currently selected content.\n   * @param styles The styles to add.\n   */\n  addStyles(t) {\n    for (const [n, r] of Object.entries(t)) {\n      const s = this.schema.styleSchema[n];\n      if (!s)\n        throw new Error(`style ${n} not found in styleSchema`);\n      if (s.propSchema === \"boolean\")\n        this._tiptapEditor.commands.setMark(n);\n      else if (s.propSchema === \"string\")\n        this._tiptapEditor.commands.setMark(n, { stringValue: r });\n      else\n        throw new $(s.propSchema);\n    }\n  }\n  /**\n   * Removes styles from the currently selected content.\n   * @param styles The styles to remove.\n   */\n  removeStyles(t) {\n    for (const n of Object.keys(t))\n      this._tiptapEditor.commands.unsetMark(n);\n  }\n  /**\n   * Toggles styles on the currently selected content.\n   * @param styles The styles to toggle.\n   */\n  toggleStyles(t) {\n    for (const [n, r] of Object.entries(t)) {\n      const s = this.schema.styleSchema[n];\n      if (!s)\n        throw new Error(`style ${n} not found in styleSchema`);\n      if (s.propSchema === \"boolean\")\n        this._tiptapEditor.commands.toggleMark(n);\n      else if (s.propSchema === \"string\")\n        this._tiptapEditor.commands.toggleMark(n, { stringValue: r });\n      else\n        throw new $(s.propSchema);\n    }\n  }\n  /**\n   * Gets the currently selected text.\n   */\n  getSelectedText() {\n    return this._tiptapEditor.state.doc.textBetween(\n      this._tiptapEditor.state.selection.from,\n      this._tiptapEditor.state.selection.to\n    );\n  }\n  /**\n   * Gets the URL of the last link in the current selection, or `undefined` if there are no links in the selection.\n   */\n  getSelectedLinkUrl() {\n    return this._tiptapEditor.getAttributes(\"link\").href;\n  }\n  /**\n   * Creates a new link to replace the selected content.\n   * @param url The link URL.\n   * @param text The text to display the link with.\n   */\n  createLink(t, n) {\n    if (t === \"\")\n      return;\n    const { from: r, to: s } = this._tiptapEditor.state.selection, i = this.pmSchema.mark(\"link\", { href: t });\n    this.dispatch(\n      n ? this._tiptapEditor.state.tr.insertText(n, r, s).addMark(r, r + n.length, i) : this._tiptapEditor.state.tr.setSelection(\n        prosemirror_state__WEBPACK_IMPORTED_MODULE_17__.TextSelection.create(this._tiptapEditor.state.tr.doc, s)\n      ).addMark(r, s, i)\n    );\n  }\n  /**\n   * Checks if the block containing the text cursor can be nested.\n   */\n  canNestBlock() {\n    return As(this);\n  }\n  /**\n   * Nests the block containing the text cursor into the block above it.\n   */\n  nestBlock() {\n    So(this);\n  }\n  /**\n   * Checks if the block containing the text cursor is nested.\n   */\n  canUnnestBlock() {\n    return Ns(this);\n  }\n  /**\n   * Lifts the block containing the text cursor out of its parent.\n   */\n  unnestBlock() {\n    Ls(this);\n  }\n  /**\n   * Moves the selected blocks up. If the previous block has children, moves\n   * them to the end of its children. If there is no previous block, but the\n   * current blocks share a common parent, moves them out of & before it.\n   */\n  moveBlocksUp() {\n    Ms(this);\n  }\n  /**\n   * Moves the selected blocks down. If the next block has children, moves\n   * them to the start of its children. If there is no next block, but the\n   * current blocks share a common parent, moves them out of & after it.\n   */\n  moveBlocksDown() {\n    Ps(this);\n  }\n  /**\n   * Exports blocks into a simplified HTML string. To better conform to HTML standards, children of blocks which aren't list\n   * items are un-nested in the output HTML.\n   *\n   * @param blocks An array of blocks that should be serialized into HTML.\n   * @returns The blocks, serialized as an HTML string.\n   */\n  async blocksToHTMLLossy(t = this.document) {\n    return Ve(this.pmSchema, this).exportBlocks(t, {});\n  }\n  /**\n   * Serializes blocks into an HTML string in the format that would normally be rendered by the editor.\n   *\n   * Use this method if you want to server-side render HTML (for example, a blog post that has been edited in BlockNote)\n   * and serve it to users without loading the editor on the client (i.e.: displaying the blog post)\n   *\n   * @param blocks An array of blocks that should be serialized into HTML.\n   * @returns The blocks, serialized as an HTML string.\n   */\n  async blocksToFullHTML(t) {\n    return ir(this.pmSchema, this).serializeBlocks(t, {});\n  }\n  /**\n   * Parses blocks from an HTML string. Tries to create `Block` objects out of any HTML block-level elements, and\n   * `InlineNode` objects from any HTML inline elements, though not all element types are recognized. If BlockNote\n   * doesn't recognize an HTML element's tag, it will parse it as a paragraph or plain text.\n   * @param html The HTML string to parse blocks from.\n   * @returns The blocks parsed from the HTML string.\n   */\n  async tryParseHTMLToBlocks(t) {\n    return Mo(\n      t,\n      this.schema.blockSchema,\n      this.schema.inlineContentSchema,\n      this.schema.styleSchema,\n      this.pmSchema\n    );\n  }\n  /**\n   * Serializes blocks into a Markdown string. The output is simplified as Markdown does not support all features of\n   * BlockNote - children of blocks which aren't list items are un-nested and certain styles are removed.\n   * @param blocks An array of blocks that should be serialized into Markdown.\n   * @returns The blocks, serialized as a Markdown string.\n   */\n  async blocksToMarkdownLossy(t = this.document) {\n    return Gs(t, this.pmSchema, this, {});\n  }\n  /**\n   * Creates a list of blocks from a Markdown string. Tries to create `Block` and `InlineNode` objects based on\n   * Markdown syntax, though not all symbols are recognized. If BlockNote doesn't recognize a symbol, it will parse it\n   * as text.\n   * @param markdown The Markdown string to parse blocks from.\n   * @returns The blocks parsed from the Markdown string.\n   */\n  async tryParseMarkdownToBlocks(t) {\n    return Qs(\n      t,\n      this.schema.blockSchema,\n      this.schema.inlineContentSchema,\n      this.schema.styleSchema,\n      this.pmSchema\n    );\n  }\n  /**\n   * Updates the user info for the current user that's shown to other collaborators.\n   */\n  updateCollaborationUserInfo(t) {\n    if (!this.options.collaboration)\n      throw new Error(\n        \"Cannot update collaboration user info when collaboration is disabled.\"\n      );\n    this._tiptapEditor.commands.updateUser(t);\n  }\n  /**\n   * A callback function that runs whenever the editor's contents change.\n   *\n   * @param callback The callback to execute.\n   * @returns A function to remove the callback.\n   */\n  onChange(t) {\n    if (this.headless)\n      return;\n    const n = () => {\n      t(this);\n    };\n    return this._tiptapEditor.on(\"update\", n), () => {\n      this._tiptapEditor.off(\"update\", n);\n    };\n  }\n  /**\n   * A callback function that runs whenever the text cursor position or selection changes.\n   *\n   * @param callback The callback to execute.\n   * @returns A function to remove the callback.\n   */\n  onSelectionChange(t, n) {\n    if (this.headless)\n      return;\n    const r = (s) => {\n      s.transaction.getMeta(y_prosemirror__WEBPACK_IMPORTED_MODULE_23__.ySyncPluginKey) && !n || t(this);\n    };\n    return this._tiptapEditor.on(\"selectionUpdate\", r), () => {\n      this._tiptapEditor.off(\"selectionUpdate\", r);\n    };\n  }\n  /**\n   * A callback function that runs when the editor has been initialized.\n   *\n   * This can be useful for plugins to initialize themselves after the editor has been initialized.\n   */\n  onCreate(t) {\n    return this.on(\"create\", t), () => {\n      this.off(\"create\", t);\n    };\n  }\n  getSelectionBoundingBox() {\n    var a;\n    if (!this.prosemirrorView)\n      return;\n    const t = (a = this.prosemirrorView) == null ? void 0 : a.state, { selection: n } = t, { ranges: r } = n, s = Math.min(...r.map((c) => c.$from.pos)), i = Math.max(...r.map((c) => c.$to.pos));\n    if ((0,_tiptap_core__WEBPACK_IMPORTED_MODULE_15__.isNodeSelection)(n)) {\n      const c = this.prosemirrorView.nodeDOM(s);\n      if (c)\n        return c.getBoundingClientRect();\n    }\n    return (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_15__.posToDOMRect)(this.prosemirrorView, s, i);\n  }\n  get isEmpty() {\n    const t = this.document;\n    return t.length === 0 || t.length === 1 && t[0].type === \"paragraph\" && t[0].content.length === 0;\n  }\n  openSuggestionMenu(t, n) {\n    var i;\n    const r = (i = this.prosemirrorView) == null ? void 0 : i.state.tr;\n    if (!r)\n      return;\n    const s = n && n.deleteTriggerCharacter ? r.insertText(t) : r;\n    this.prosemirrorView.focus(), this.prosemirrorView.dispatch(\n      s.scrollIntoView().setMeta(this.suggestionMenus.plugin, {\n        triggerCharacter: t,\n        deleteTriggerCharacter: (n == null ? void 0 : n.deleteTriggerCharacter) || !1,\n        ignoreQueryLength: (n == null ? void 0 : n.ignoreQueryLength) || !1\n      })\n    );\n  }\n  // `forceSelectionVisible` determines whether the editor selection is shows\n  // even when the editor is not focused. This is useful for e.g. creating new\n  // links, so the user still sees the affected content when an input field is\n  // focused.\n  // TODO: Reconsider naming?\n  getForceSelectionVisible() {\n    return this.showSelectionPlugin.getEnabled();\n  }\n  setForceSelectionVisible(t) {\n    this.showSelectionPlugin.setEnabled(t);\n  }\n  /**\n   * This will convert HTML into a format that is compatible with BlockNote.\n   */\n  convertHtmlToBlockNoteHtml(t) {\n    return xo(t.trim()).innerHTML;\n  }\n  /**\n   * Paste HTML into the editor. Defaults to converting HTML to BlockNote HTML.\n   * @param html The HTML to paste.\n   * @param raw Whether to paste the HTML as is, or to convert it to BlockNote HTML.\n   */\n  pasteHTML(t, n = !1) {\n    var s;\n    let r = t;\n    n || (r = this.convertHtmlToBlockNoteHtml(t)), r && ((s = this.prosemirrorView) == null || s.pasteHTML(r));\n  }\n  /**\n   * Paste text into the editor. Defaults to interpreting text as markdown.\n   * @param text The text to paste.\n   */\n  pasteText(t) {\n    var n;\n    return (n = this.prosemirrorView) == null ? void 0 : n.pasteText(t);\n  }\n  /**\n   * Paste markdown into the editor.\n   * @param markdown The markdown to paste.\n   */\n  async pasteMarkdown(t) {\n    return this.pasteHTML(await Po(t));\n  }\n}\nconst kc = {\n  gray: {\n    text: \"#9b9a97\",\n    background: \"#ebeced\"\n  },\n  brown: {\n    text: \"#64473a\",\n    background: \"#e9e5e3\"\n  },\n  red: {\n    text: \"#e03e3e\",\n    background: \"#fbe4e4\"\n  },\n  orange: {\n    text: \"#d9730d\",\n    background: \"#f6e9d9\"\n  },\n  yellow: {\n    text: \"#dfab01\",\n    background: \"#fbf3db\"\n  },\n  green: {\n    text: \"#4d6461\",\n    background: \"#ddedea\"\n  },\n  blue: {\n    text: \"#0b6e99\",\n    background: \"#ddebf1\"\n  },\n  purple: {\n    text: \"#6940a5\",\n    background: \"#eae4f2\"\n  },\n  pink: {\n    text: \"#ad1a72\",\n    background: \"#f4dfeb\"\n  }\n}, wc = {\n  gray: {\n    text: \"#bebdb8\",\n    background: \"#9b9a97\"\n  },\n  brown: {\n    text: \"#8e6552\",\n    background: \"#64473a\"\n  },\n  red: {\n    text: \"#ec4040\",\n    background: \"#be3434\"\n  },\n  orange: {\n    text: \"#e3790d\",\n    background: \"#b7600a\"\n  },\n  yellow: {\n    text: \"#dfab01\",\n    background: \"#b58b00\"\n  },\n  green: {\n    text: \"#6b8b87\",\n    background: \"#4d6461\"\n  },\n  blue: {\n    text: \"#0e87bc\",\n    background: \"#0b6e99\"\n  },\n  purple: {\n    text: \"#8552d7\",\n    background: \"#6940a5\"\n  },\n  pink: {\n    text: \"#da208f\",\n    background: \"#ad1a72\"\n  }\n};\nclass yc {\n  constructor(o, t, n) {\n    this.mappings = t, this.options = n;\n  }\n  async resolveFile(o) {\n    var n;\n    if (!((n = this.options) != null && n.resolveFileUrl))\n      return (await fetch(o)).blob();\n    const t = await this.options.resolveFileUrl(o);\n    return t instanceof Blob ? t : (await fetch(t)).blob();\n  }\n  mapStyles(o) {\n    return Object.entries(o).map(([n, r]) => this.mappings.styleMapping[n](r, this));\n  }\n  mapInlineContent(o) {\n    return this.mappings.inlineContentMapping[o.type](\n      o,\n      this\n    );\n  }\n  transformInlineContent(o) {\n    return o.map((t) => this.mapInlineContent(t));\n  }\n  async mapBlock(o, t, n) {\n    return this.mappings.blockMapping[o.type](\n      o,\n      this,\n      t,\n      n\n    );\n  }\n}\nfunction Cc(e) {\n  return {\n    createBlockMapping: (o) => o,\n    createInlineContentMapping: (o) => o,\n    createStyleMapping: (o) => o\n  };\n}\nlet Ie;\nasync function Ba() {\n  return Ie || (Ie = (async () => {\n    const [e, o] = await Promise.all([\n      __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_emoji-mart_dist_module_js\").then(__webpack_require__.bind(__webpack_require__, /*! emoji-mart */ \"(app-pages-browser)/./node_modules/emoji-mart/dist/module.js\")),\n      // use a dynamic import to encourage bundle-splitting\n      // and a smaller initial client bundle size\n      __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_emoji-mart_data_sets_15_native_json\").then(__webpack_require__.t.bind(__webpack_require__, /*! @emoji-mart/data */ \"(app-pages-browser)/./node_modules/@emoji-mart/data/sets/15/native.json\", 17))\n    ]), t = \"default\" in e ? e.default : e, n = \"default\" in o ? o.default : o;\n    return await t.init({ data: n }), { emojiMart: t, emojiData: n };\n  })(), Ie);\n}\nasync function vc(e, o) {\n  if (!ys(\"text\", e))\n    return [];\n  const { emojiData: t, emojiMart: n } = await Ba();\n  return (o.trim() === \"\" ? Object.values(t.emojis) : await n.SearchIndex.search(o)).map((s) => ({\n    id: s.skins[0].native,\n    onItemClick: () => e.insertInlineContent(s.skins[0].native + \" \")\n  }));\n}\nfunction Ec(e, ...o) {\n  const t = [...e];\n  for (const n of o)\n    for (const r of n) {\n      const s = t.findLastIndex(\n        (i) => i.group === r.group\n      );\n      s === -1 ? t.push(r) : t.splice(s + 1, 0, r);\n    }\n  return t;\n}\nfunction qe(e = \"\") {\n  return typeof e == \"string\" ? [\n    {\n      type: \"text\",\n      text: e,\n      styles: {}\n    }\n  ] : e;\n}\nfunction pe(e) {\n  var o, t, n, r, s;\n  return typeof e == \"string\" ? qe(e) : Array.isArray(e) ? e.flatMap((i) => typeof i == \"string\" ? qe(i) : it(i) ? {\n    ...i,\n    content: qe(i.content)\n  } : J(i) ? i : {\n    props: {},\n    ...i,\n    content: pe(i.content)\n  }) : (e == null ? void 0 : e.type) === \"tableContent\" ? {\n    type: \"tableContent\",\n    columnWidths: e.columnWidths,\n    headerRows: e.headerRows,\n    headerCols: e.headerCols,\n    rows: e.rows.map((i) => ({\n      ...i,\n      cells: i.cells.map(\n        (a) => pe(a)\n      )\n    }))\n  } : (e == null ? void 0 : e.type) === \"tableCell\" ? {\n    type: \"tableCell\",\n    content: pe(e.content),\n    props: {\n      backgroundColor: ((o = e.props) == null ? void 0 : o.backgroundColor) ?? \"default\",\n      textColor: ((t = e.props) == null ? void 0 : t.textColor) ?? \"default\",\n      textAlignment: ((n = e.props) == null ? void 0 : n.textAlignment) ?? \"left\",\n      colspan: ((r = e.props) == null ? void 0 : r.colspan) ?? 1,\n      rowspan: ((s = e.props) == null ? void 0 : s.rowspan) ?? 1\n    }\n  } : e;\n}\nfunction Sc(e, o) {\n  return o.map(\n    (t) => Ro(e.blockSchema, t)\n  );\n}\nfunction Ro(e, o) {\n  var r;\n  const t = e[o.type].content, n = {\n    id: \"\",\n    type: o.type,\n    props: {},\n    content: t === \"inline\" ? [] : t === \"table\" ? {\n      type: \"tableContent\",\n      columnWidths: void 0,\n      headerRows: void 0,\n      headerCols: void 0,\n      rows: []\n    } : void 0,\n    children: [],\n    ...o\n  };\n  if (Object.entries(e[o.type].propSchema).forEach(\n    ([s, i]) => {\n      n.props[s] === void 0 && i.default !== void 0 && (n.props[s] = i.default);\n    }\n  ), t === \"inline\") {\n    const s = n.content;\n    n.content = pe(s);\n  } else if (t === \"table\") {\n    const s = n.content;\n    n.content = {\n      type: \"tableContent\",\n      columnWidths: (s == null ? void 0 : s.columnWidths) || ((r = s == null ? void 0 : s.rows[0]) == null ? void 0 : r.cells.map(() => {\n      })) || [],\n      headerRows: (s == null ? void 0 : s.headerRows) || void 0,\n      headerCols: (s == null ? void 0 : s.headerCols) || void 0,\n      rows: (s == null ? void 0 : s.rows.map((i) => ({\n        cells: i.cells.map((a) => pe(a))\n      }))) || []\n    };\n  }\n  return {\n    ...n,\n    content: pe(n.content),\n    children: n.children.map((s) => Ro(e, s))\n  };\n}\nfunction Ta(e) {\n  e.id || (e.id = ve.options.generateID()), e.children && xa(e.children);\n}\nfunction xa(e) {\n  for (const o of e)\n    Ta(o);\n}\n\n//# sourceMappingURL=blocknote.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@blocknote/core/dist/blocknote.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@blocknote/core/dist/en-B7ycW7c8.js":
/*!**********************************************************!*\
  !*** ./node_modules/@blocknote/core/dist/en-B7ycW7c8.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   e: () => (/* binding */ t)\n/* harmony export */ });\nconst t = {\n  slash_menu: {\n    heading: {\n      title: \"Heading 1\",\n      subtext: \"Top-level heading\",\n      aliases: [\"h\", \"heading1\", \"h1\"],\n      group: \"Headings\"\n    },\n    heading_2: {\n      title: \"Heading 2\",\n      subtext: \"Key section heading\",\n      aliases: [\"h2\", \"heading2\", \"subheading\"],\n      group: \"Headings\"\n    },\n    heading_3: {\n      title: \"Heading 3\",\n      subtext: \"Subsection and group heading\",\n      aliases: [\"h3\", \"heading3\", \"subheading\"],\n      group: \"Headings\"\n    },\n    quote: {\n      title: \"Quote\",\n      subtext: \"Quote or excerpt\",\n      aliases: [\"quotation\", \"blockquote\", \"bq\"],\n      group: \"Basic blocks\"\n    },\n    numbered_list: {\n      title: \"Numbered List\",\n      subtext: \"List with ordered items\",\n      aliases: [\"ol\", \"li\", \"list\", \"numberedlist\", \"numbered list\"],\n      group: \"Basic blocks\"\n    },\n    bullet_list: {\n      title: \"Bullet List\",\n      subtext: \"List with unordered items\",\n      aliases: [\"ul\", \"li\", \"list\", \"bulletlist\", \"bullet list\"],\n      group: \"Basic blocks\"\n    },\n    check_list: {\n      title: \"Check List\",\n      subtext: \"List with checkboxes\",\n      aliases: [\n        \"ul\",\n        \"li\",\n        \"list\",\n        \"checklist\",\n        \"check list\",\n        \"checked list\",\n        \"checkbox\"\n      ],\n      group: \"Basic blocks\"\n    },\n    paragraph: {\n      title: \"Paragraph\",\n      subtext: \"The body of your document\",\n      aliases: [\"p\", \"paragraph\"],\n      group: \"Basic blocks\"\n    },\n    code_block: {\n      title: \"Code Block\",\n      subtext: \"Code block with syntax highlighting\",\n      aliases: [\"code\", \"pre\"],\n      group: \"Basic blocks\"\n    },\n    page_break: {\n      title: \"Page Break\",\n      subtext: \"Page separator\",\n      aliases: [\"page\", \"break\", \"separator\"],\n      group: \"Basic blocks\"\n    },\n    table: {\n      title: \"Table\",\n      subtext: \"Table with editable cells\",\n      aliases: [\"table\"],\n      group: \"Advanced\"\n    },\n    image: {\n      title: \"Image\",\n      subtext: \"Resizable image with caption\",\n      aliases: [\n        \"image\",\n        \"imageUpload\",\n        \"upload\",\n        \"img\",\n        \"picture\",\n        \"media\",\n        \"url\"\n      ],\n      group: \"Media\"\n    },\n    video: {\n      title: \"Video\",\n      subtext: \"Resizable video with caption\",\n      aliases: [\n        \"video\",\n        \"videoUpload\",\n        \"upload\",\n        \"mp4\",\n        \"film\",\n        \"media\",\n        \"url\"\n      ],\n      group: \"Media\"\n    },\n    audio: {\n      title: \"Audio\",\n      subtext: \"Embedded audio with caption\",\n      aliases: [\n        \"audio\",\n        \"audioUpload\",\n        \"upload\",\n        \"mp3\",\n        \"sound\",\n        \"media\",\n        \"url\"\n      ],\n      group: \"Media\"\n    },\n    file: {\n      title: \"File\",\n      subtext: \"Embedded file\",\n      aliases: [\"file\", \"upload\", \"embed\", \"media\", \"url\"],\n      group: \"Media\"\n    },\n    emoji: {\n      title: \"Emoji\",\n      subtext: \"Search for and insert an emoji\",\n      aliases: [\"emoji\", \"emote\", \"emotion\", \"face\"],\n      group: \"Others\"\n    }\n  },\n  placeholders: {\n    default: \"Enter text or type '/' for commands\",\n    heading: \"Heading\",\n    bulletListItem: \"List\",\n    numberedListItem: \"List\",\n    checkListItem: \"List\",\n    emptyDocument: void 0,\n    new_comment: \"Write a comment...\",\n    edit_comment: \"Edit comment...\",\n    comment_reply: \"Add comment...\"\n  },\n  file_blocks: {\n    image: {\n      add_button_text: \"Add image\"\n    },\n    video: {\n      add_button_text: \"Add video\"\n    },\n    audio: {\n      add_button_text: \"Add audio\"\n    },\n    file: {\n      add_button_text: \"Add file\"\n    }\n  },\n  // from react package:\n  side_menu: {\n    add_block_label: \"Add block\",\n    drag_handle_label: \"Open block menu\"\n  },\n  drag_handle: {\n    delete_menuitem: \"Delete\",\n    colors_menuitem: \"Colors\",\n    header_row_menuitem: \"Header row\",\n    header_column_menuitem: \"Header column\"\n  },\n  table_handle: {\n    delete_column_menuitem: \"Delete column\",\n    delete_row_menuitem: \"Delete row\",\n    add_left_menuitem: \"Add column left\",\n    add_right_menuitem: \"Add column right\",\n    add_above_menuitem: \"Add row above\",\n    add_below_menuitem: \"Add row below\",\n    split_cell_menuitem: \"Split cell\",\n    merge_cells_menuitem: \"Merge cells\",\n    background_color_menuitem: \"Background color\"\n  },\n  suggestion_menu: {\n    no_items_title: \"No items found\",\n    loading: \"Loading…\"\n  },\n  color_picker: {\n    text_title: \"Text\",\n    background_title: \"Background\",\n    colors: {\n      default: \"Default\",\n      gray: \"Gray\",\n      brown: \"Brown\",\n      red: \"Red\",\n      orange: \"Orange\",\n      yellow: \"Yellow\",\n      green: \"Green\",\n      blue: \"Blue\",\n      purple: \"Purple\",\n      pink: \"Pink\"\n    }\n  },\n  formatting_toolbar: {\n    bold: {\n      tooltip: \"Bold\",\n      secondary_tooltip: \"Mod+B\"\n    },\n    italic: {\n      tooltip: \"Italic\",\n      secondary_tooltip: \"Mod+I\"\n    },\n    underline: {\n      tooltip: \"Underline\",\n      secondary_tooltip: \"Mod+U\"\n    },\n    strike: {\n      tooltip: \"Strike\",\n      secondary_tooltip: \"Mod+Shift+S\"\n    },\n    code: {\n      tooltip: \"Code\",\n      secondary_tooltip: \"\"\n    },\n    colors: {\n      tooltip: \"Colors\"\n    },\n    link: {\n      tooltip: \"Create link\",\n      secondary_tooltip: \"Mod+K\"\n    },\n    file_caption: {\n      tooltip: \"Edit caption\",\n      input_placeholder: \"Edit caption\"\n    },\n    file_replace: {\n      tooltip: {\n        image: \"Replace image\",\n        video: \"Replace video\",\n        audio: \"Replace audio\",\n        file: \"Replace file\"\n      }\n    },\n    file_rename: {\n      tooltip: {\n        image: \"Rename image\",\n        video: \"Rename video\",\n        audio: \"Rename audio\",\n        file: \"Rename file\"\n      },\n      input_placeholder: {\n        image: \"Rename image\",\n        video: \"Rename video\",\n        audio: \"Rename audio\",\n        file: \"Rename file\"\n      }\n    },\n    file_download: {\n      tooltip: {\n        image: \"Download image\",\n        video: \"Download video\",\n        audio: \"Download audio\",\n        file: \"Download file\"\n      }\n    },\n    file_delete: {\n      tooltip: {\n        image: \"Delete image\",\n        video: \"Delete video\",\n        audio: \"Delete audio\",\n        file: \"Delete file\"\n      }\n    },\n    file_preview_toggle: {\n      tooltip: \"Toggle preview\"\n    },\n    nest: {\n      tooltip: \"Nest block\",\n      secondary_tooltip: \"Tab\"\n    },\n    unnest: {\n      tooltip: \"Unnest block\",\n      secondary_tooltip: \"Shift+Tab\"\n    },\n    align_left: {\n      tooltip: \"Align text left\"\n    },\n    align_center: {\n      tooltip: \"Align text center\"\n    },\n    align_right: {\n      tooltip: \"Align text right\"\n    },\n    align_justify: {\n      tooltip: \"Justify text\"\n    },\n    table_cell_merge: {\n      tooltip: \"Merge cells\"\n    },\n    comment: {\n      tooltip: \"Add comment\"\n    }\n  },\n  file_panel: {\n    upload: {\n      title: \"Upload\",\n      file_placeholder: {\n        image: \"Upload image\",\n        video: \"Upload video\",\n        audio: \"Upload audio\",\n        file: \"Upload file\"\n      },\n      upload_error: \"Error: Upload failed\"\n    },\n    embed: {\n      title: \"Embed\",\n      embed_button: {\n        image: \"Embed image\",\n        video: \"Embed video\",\n        audio: \"Embed audio\",\n        file: \"Embed file\"\n      },\n      url_placeholder: \"Enter URL\"\n    }\n  },\n  link_toolbar: {\n    delete: {\n      tooltip: \"Remove link\"\n    },\n    edit: {\n      text: \"Edit link\",\n      tooltip: \"Edit\"\n    },\n    open: {\n      tooltip: \"Open in new tab\"\n    },\n    form: {\n      title_placeholder: \"Edit title\",\n      url_placeholder: \"Edit URL\"\n    }\n  },\n  comments: {\n    actions: {\n      add_reaction: \"Add reaction\",\n      resolve: \"Resolve\",\n      edit_comment: \"Edit comment\",\n      delete_comment: \"Delete comment\",\n      more_actions: \"More actions\"\n    },\n    reactions: {\n      reacted_by: \"Reacted by\"\n    },\n    sidebar: {\n      marked_as_resolved: \"Marked as resolved\",\n      more_replies: (e) => `${e} more replies`\n    }\n  },\n  generic: {\n    ctrl_shortcut: \"Ctrl\"\n  }\n};\n\n//# sourceMappingURL=en-B7ycW7c8.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@blocknote/core/dist/en-B7ycW7c8.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@blocknote/react/dist/blocknote-react.js":
/*!***************************************************************!*\
  !*** ./node_modules/@blocknote/react/dist/blocknote-react.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AddBlockButton: () => (/* binding */ dr),\n/* harmony export */   AddButton: () => (/* binding */ Je),\n/* harmony export */   AddCommentButton: () => (/* binding */ Xo),\n/* harmony export */   AddFileButton: () => (/* binding */ ci),\n/* harmony export */   AddTiptapCommentButton: () => (/* binding */ Yo),\n/* harmony export */   AudioBlock: () => (/* binding */ ui),\n/* harmony export */   AudioPreview: () => (/* binding */ si),\n/* harmony export */   AudioToExternalHTML: () => (/* binding */ di),\n/* harmony export */   BasicTextStyleButton: () => (/* binding */ ne),\n/* harmony export */   BlockColorsItem: () => (/* binding */ mr),\n/* harmony export */   BlockContentWrapper: () => (/* binding */ pe),\n/* harmony export */   BlockNoteContext: () => (/* binding */ dt),\n/* harmony export */   BlockNoteDefaultUI: () => (/* binding */ Kr),\n/* harmony export */   BlockNoteViewEditor: () => (/* binding */ oi),\n/* harmony export */   BlockNoteViewRaw: () => (/* binding */ Fi),\n/* harmony export */   BlockTypeSelect: () => (/* binding */ Ko),\n/* harmony export */   ColorPickerButton: () => (/* binding */ zr),\n/* harmony export */   ColorStyleButton: () => (/* binding */ Zo),\n/* harmony export */   Comment: () => (/* binding */ Lo),\n/* harmony export */   Comments: () => (/* binding */ Eo),\n/* harmony export */   ComponentsContext: () => (/* binding */ On),\n/* harmony export */   CreateLinkButton: () => (/* binding */ Ao),\n/* harmony export */   DeleteButton: () => (/* binding */ _r),\n/* harmony export */   DeleteLinkButton: () => (/* binding */ rr),\n/* harmony export */   DragHandleButton: () => (/* binding */ Cr),\n/* harmony export */   DragHandleMenu: () => (/* binding */ br),\n/* harmony export */   EditLinkButton: () => (/* binding */ ir),\n/* harmony export */   EditLinkMenuItems: () => (/* binding */ Vt),\n/* harmony export */   EmbedTab: () => (/* binding */ _o),\n/* harmony export */   ExperimentalMobileFormattingToolbarController: () => (/* binding */ Wi),\n/* harmony export */   ExtendButton: () => (/* binding */ Rr),\n/* harmony export */   FigureWithCaption: () => (/* binding */ Pe),\n/* harmony export */   FileBlock: () => (/* binding */ hi),\n/* harmony export */   FileBlockWrapper: () => (/* binding */ Oe),\n/* harmony export */   FileCaptionButton: () => (/* binding */ Go),\n/* harmony export */   FileDeleteButton: () => (/* binding */ Uo),\n/* harmony export */   FileDownloadButton: () => (/* binding */ Jo),\n/* harmony export */   FileNameWithIcon: () => (/* binding */ ai),\n/* harmony export */   FilePanel: () => (/* binding */ Bt),\n/* harmony export */   FilePanelController: () => (/* binding */ No),\n/* harmony export */   FilePreviewButton: () => (/* binding */ Qo),\n/* harmony export */   FileRenameButton: () => (/* binding */ zo),\n/* harmony export */   FileReplaceButton: () => (/* binding */ jo),\n/* harmony export */   FileToExternalHTML: () => (/* binding */ mi),\n/* harmony export */   FloatingComposer: () => (/* binding */ Fn),\n/* harmony export */   FloatingComposerController: () => (/* binding */ An),\n/* harmony export */   FloatingThreadController: () => (/* binding */ Ro),\n/* harmony export */   FormattingToolbar: () => (/* binding */ St),\n/* harmony export */   FormattingToolbarController: () => (/* binding */ or),\n/* harmony export */   GridSuggestionMenuController: () => (/* binding */ xr),\n/* harmony export */   GridSuggestionMenuWrapper: () => (/* binding */ Mr),\n/* harmony export */   ImageBlock: () => (/* binding */ bi),\n/* harmony export */   ImagePreview: () => (/* binding */ fi),\n/* harmony export */   ImageToExternalHTML: () => (/* binding */ gi),\n/* harmony export */   InlineContentWrapper: () => (/* binding */ Bi),\n/* harmony export */   LinkToolbar: () => (/* binding */ cr),\n/* harmony export */   LinkToolbarController: () => (/* binding */ ar),\n/* harmony export */   LinkWithCaption: () => (/* binding */ fe),\n/* harmony export */   NestBlockButton: () => (/* binding */ Wo),\n/* harmony export */   OpenLinkButton: () => (/* binding */ lr),\n/* harmony export */   ReactAudioBlock: () => (/* binding */ Ai),\n/* harmony export */   ReactFileBlock: () => (/* binding */ Gi),\n/* harmony export */   ReactImageBlock: () => (/* binding */ Ui),\n/* harmony export */   ReactVideoBlock: () => (/* binding */ ji),\n/* harmony export */   RemoveBlockItem: () => (/* binding */ hr),\n/* harmony export */   ResizableFileBlockWrapper: () => (/* binding */ It),\n/* harmony export */   SideMenu: () => (/* binding */ pr),\n/* harmony export */   SideMenuController: () => (/* binding */ kr),\n/* harmony export */   SplitButton: () => (/* binding */ jr),\n/* harmony export */   SuggestionMenuController: () => (/* binding */ Lr),\n/* harmony export */   SuggestionMenuWrapper: () => (/* binding */ Vr),\n/* harmony export */   TableCellButton: () => (/* binding */ $r),\n/* harmony export */   TableCellMenu: () => (/* binding */ Wr),\n/* harmony export */   TableCellMergeButton: () => (/* binding */ er),\n/* harmony export */   TableColumnHeaderItem: () => (/* binding */ gr),\n/* harmony export */   TableHandle: () => (/* binding */ Dr),\n/* harmony export */   TableHandleMenu: () => (/* binding */ Or),\n/* harmony export */   TableHandlesController: () => (/* binding */ qr),\n/* harmony export */   TableRowHeaderItem: () => (/* binding */ fr),\n/* harmony export */   TextAlignButton: () => (/* binding */ be),\n/* harmony export */   Thread: () => (/* binding */ xt),\n/* harmony export */   ThreadsSidebar: () => (/* binding */ $i),\n/* harmony export */   UnnestBlockButton: () => (/* binding */ $o),\n/* harmony export */   UploadTab: () => (/* binding */ Io),\n/* harmony export */   VideoBlock: () => (/* binding */ vi),\n/* harmony export */   VideoPreview: () => (/* binding */ ki),\n/* harmony export */   VideoToExternalHTML: () => (/* binding */ wi),\n/* harmony export */   blockTypeSelectItems: () => (/* binding */ qo),\n/* harmony export */   createReactBlockSpec: () => (/* binding */ he),\n/* harmony export */   createReactInlineContentSpec: () => (/* binding */ Yi),\n/* harmony export */   createReactStyleSpec: () => (/* binding */ Ji),\n/* harmony export */   elementOverflow: () => (/* binding */ Qi),\n/* harmony export */   getDefaultReactEmojiPickerItems: () => (/* binding */ wr),\n/* harmony export */   getDefaultReactSlashMenuItems: () => (/* binding */ Tr),\n/* harmony export */   getFormattingToolbarItems: () => (/* binding */ nr),\n/* harmony export */   getPageBreakReactSlashMenuItems: () => (/* binding */ zi),\n/* harmony export */   getReferenceText: () => (/* binding */ tt),\n/* harmony export */   mergeRefs: () => (/* binding */ Po),\n/* harmony export */   useActiveStyles: () => (/* binding */ qi),\n/* harmony export */   useBlockNote: () => (/* binding */ Oi),\n/* harmony export */   useBlockNoteContext: () => (/* binding */ D),\n/* harmony export */   useBlockNoteEditor: () => (/* binding */ b),\n/* harmony export */   useCloseSuggestionMenuNoItems: () => (/* binding */ Lt),\n/* harmony export */   useComponentsContext: () => (/* binding */ C),\n/* harmony export */   useCreateBlockNote: () => (/* binding */ de),\n/* harmony export */   useDictionary: () => (/* binding */ M),\n/* harmony export */   useEditorChange: () => (/* binding */ ue),\n/* harmony export */   useEditorContentOrSelectionChange: () => (/* binding */ U),\n/* harmony export */   useEditorForceUpdate: () => (/* binding */ Ki),\n/* harmony export */   useEditorSelectionChange: () => (/* binding */ se),\n/* harmony export */   useExtendButtonsPositioning: () => (/* binding */ Zr),\n/* harmony export */   useFocusWithin: () => (/* binding */ Xi),\n/* harmony export */   useGridSuggestionMenuKeyboardNavigation: () => (/* binding */ Hr),\n/* harmony export */   useLoadSuggestionMenuItems: () => (/* binding */ Et),\n/* harmony export */   usePrefersColorScheme: () => (/* binding */ Xr),\n/* harmony export */   useResolveUrl: () => (/* binding */ Ne),\n/* harmony export */   useSelectedBlocks: () => (/* binding */ R),\n/* harmony export */   useSuggestionMenuKeyboardNavigation: () => (/* binding */ Br),\n/* harmony export */   useTableHandlesPositioning: () => (/* binding */ Ur),\n/* harmony export */   useThreads: () => (/* binding */ yt),\n/* harmony export */   useUser: () => (/* binding */ So),\n/* harmony export */   useUsers: () => (/* binding */ Ie)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @floating-ui/react */ \"(app-pages-browser)/./node_modules/@floating-ui/react/dist/floating-ui.react.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @floating-ui/react */ \"(app-pages-browser)/./node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs\");\n/* harmony import */ var _blocknote_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @blocknote/core */ \"(app-pages-browser)/./node_modules/@blocknote/core/dist/blocknote.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\");\n/* harmony import */ var _tiptap_react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @tiptap/react */ \"(app-pages-browser)/./node_modules/@tiptap/react/dist/index.js\");\n/* harmony import */ var _tiptap_react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @tiptap/react */ \"(app-pages-browser)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var react_dom_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-dom/client */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/client.js\");\nvar Zt = Object.defineProperty;\nvar De = (e) => {\n  throw TypeError(e);\n};\nvar Ft = (e, t, n) => t in e ? Zt(e, t, { enumerable: !0, configurable: !0, writable: !0, value: n }) : e[t] = n;\nvar L = (e, t, n) => Ft(e, typeof t != \"symbol\" ? t + \"\" : t, n), At = (e, t, n) => t.has(e) || De(\"Cannot \" + n);\nvar Ze = (e, t, n) => t.has(e) ? De(\"Cannot add the same private member more than once\") : t instanceof WeakSet ? t.add(e) : t.set(e, n);\nvar ge = (e, t, n) => (At(e, t, \"access private method\"), n);\n\n\n\n\n\n\n\nconst dt = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(void 0);\nfunction D(e) {\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(dt);\n}\nfunction b(e) {\n  const t = D();\n  if (!(t != null && t.editor))\n    throw new Error(\n      \"useBlockNoteEditor was called outside of a BlockNoteContext provider or BlockNoteView component\"\n    );\n  return t.editor;\n}\nfunction se(e, t, n) {\n  const o = D();\n  t || (t = o == null ? void 0 : o.editor), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (!t)\n      throw new Error(\n        \"'editor' is required, either from BlockNoteContext or as a function argument\"\n      );\n    return t.onSelectionChange(e, n);\n  }, [e, t, n]);\n}\nfunction Pn(e, t) {\n  const n = b();\n  t = t || n;\n  const [o, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => {\n    if (e)\n      return t.getSelectionBoundingBox();\n  }), l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    if (!e)\n      return;\n    const c = t.getSelectionBoundingBox();\n    r(c);\n  }, [t, e]);\n  return se(l, t, !0), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    r(e ? t.getSelectionBoundingBox() : void 0);\n  }, [e, t]), o;\n}\nfunction G(e, t, n, o) {\n  const { refs: r, update: l, context: c, floatingStyles: s } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_4__.useFloating)({\n    open: e,\n    ...o\n  }), { isMounted: d, styles: a } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_4__.useTransitionStyles)(c), u = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_4__.useDismiss)(c), { getReferenceProps: m, getFloatingProps: h } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_4__.useInteractions)([u]);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    l();\n  }, [t, l]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    t !== null && r.setReference({\n      getBoundingClientRect: () => t\n    });\n  }, [t, r]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({\n    isMounted: d,\n    ref: r.setFloating,\n    setReference: r.setReference,\n    style: {\n      display: \"flex\",\n      ...a,\n      ...s,\n      zIndex: n\n    },\n    getFloatingProps: h,\n    getReferenceProps: m\n  }), [\n    s,\n    d,\n    r.setFloating,\n    r.setReference,\n    a,\n    n,\n    h,\n    m\n  ]);\n}\nfunction P(e) {\n  const [t, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => e((o) => {\n    n({ ...o });\n  }), [e]), t;\n}\nconst On = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(\n  void 0\n);\nfunction C() {\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(On);\n}\nconst de = (e = {}, t = []) => (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n  const n = _blocknote_core__WEBPACK_IMPORTED_MODULE_5__.BlockNoteEditor.create(e);\n  return window && (window.ProseMirror = n._tiptapEditor), n;\n}, t), Oi = de;\nfunction M() {\n  return D().editor.dictionary;\n}\nfunction ue(e, t) {\n  const n = D();\n  t || (t = n == null ? void 0 : n.editor), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (!t)\n      throw new Error(\n        \"'editor' is required, either from BlockNoteContext or as a function argument\"\n      );\n    return t.onChange(e);\n  }, [e, t]);\n}\nconst Le = (e) => {\n  const [t, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [o, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(e.editor.isEmpty), l = C();\n  ue(() => {\n    r(e.editor.isEmpty);\n  }, e.editor);\n  const c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    n(!0);\n  }, []), s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    n(!1);\n  }, []);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    e.editable && e.autoFocus && e.editor.focus();\n  }, [e.autoFocus, e.editable, e.editor]), /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      l.Comments.Editor,\n      {\n        autoFocus: e.autoFocus,\n        className: \"bn-comment-editor\",\n        editor: e.editor,\n        onFocus: c,\n        onBlur: s,\n        editable: e.editable\n      }\n    ),\n    e.actions && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { className: \"bn-comment-actions-wrapper\", children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(e.actions, { isFocused: t, isEmpty: o }) })\n  ] });\n}, Dn = (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.createBlockSpecFromStronglyTypedTiptapNode)(\n  (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.createStronglyTypedTiptapNode)(\n    _blocknote_core__WEBPACK_IMPORTED_MODULE_5__.defaultBlockSpecs.paragraph.implementation.node.config\n  ),\n  // disable default props on paragraph (such as textalignment and colors)\n  {}\n), { textColor: Di, backgroundColor: Zi, ...Zn } = _blocknote_core__WEBPACK_IMPORTED_MODULE_5__.defaultStyleSpecs, Ee = _blocknote_core__WEBPACK_IMPORTED_MODULE_5__.BlockNoteSchema.create({\n  blockSpecs: {\n    paragraph: Dn\n  },\n  styleSpecs: Zn\n});\nfunction Fn() {\n  const e = b();\n  if (!e.comments)\n    throw new Error(\"Comments plugin not found\");\n  const t = e.comments, n = C(), o = M(), r = de({\n    trailingBlock: !1,\n    dictionary: {\n      ...o,\n      placeholders: {\n        emptyDocument: o.placeholders.new_comment\n      }\n    },\n    schema: Ee,\n    sideMenuDetection: \"editor\"\n  });\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(n.Comments.Card, { className: \"bn-thread\", children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    Le,\n    {\n      autoFocus: !0,\n      editable: !0,\n      editor: r,\n      actions: ({ isEmpty: l }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n        n.Generic.Toolbar.Root,\n        {\n          className: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.mergeCSSClasses)(\n            \"bn-action-toolbar\",\n            \"bn-comment-actions\"\n          ),\n          variant: \"action-toolbar\",\n          children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n            n.Generic.Toolbar.Button,\n            {\n              className: \"bn-button\",\n              mainTooltip: \"Save\",\n              variant: \"compact\",\n              isDisabled: l,\n              onClick: async () => {\n                await t.createThread({\n                  initialComment: {\n                    body: r.document\n                  }\n                }), t.stopPendingComment();\n              },\n              children: \"Save\"\n            }\n          )\n        }\n      )\n    }\n  ) });\n}\nconst An = (e) => {\n  const t = b();\n  if (!t.comments)\n    throw new Error(\n      \"FloatingComposerController can only be used when BlockNote editor has enabled comments\"\n    );\n  const n = t.comments;\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const u = n.onUpdate(\n      (m) => t.setForceSelectionVisible(m.pendingComment)\n    );\n    return () => u();\n  }, [n, t]);\n  const o = P(n.onUpdate.bind(n)), r = Pn(o == null ? void 0 : o.pendingComment), { isMounted: l, ref: c, style: s, getFloatingProps: d } = G(\n    (o == null ? void 0 : o.pendingComment) || !1,\n    r || null,\n    5e3,\n    {\n      placement: \"bottom\",\n      middleware: [(0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.offset)(10), (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.shift)(), (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.flip)()],\n      onOpenChange: (u) => {\n        u || (n.stopPendingComment(), t.focus());\n      },\n      ...e.floatingOptions\n    }\n  );\n  if (!l || !o)\n    return null;\n  const a = e.floatingComposer || Fn;\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { ref: c, style: s, ...d(), children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(a, {}) });\n};\nvar ut = {\n  color: void 0,\n  size: void 0,\n  className: void 0,\n  style: void 0,\n  attr: void 0\n}, Ge = react__WEBPACK_IMPORTED_MODULE_0__.createContext && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createContext(ut), Gn = [\"attr\", \"size\", \"title\"];\nfunction Un(e, t) {\n  if (e == null) return {};\n  var n = zn(e, t), o, r;\n  if (Object.getOwnPropertySymbols) {\n    var l = Object.getOwnPropertySymbols(e);\n    for (r = 0; r < l.length; r++)\n      o = l[r], !(t.indexOf(o) >= 0) && Object.prototype.propertyIsEnumerable.call(e, o) && (n[o] = e[o]);\n  }\n  return n;\n}\nfunction zn(e, t) {\n  if (e == null) return {};\n  var n = {};\n  for (var o in e)\n    if (Object.prototype.hasOwnProperty.call(e, o)) {\n      if (t.indexOf(o) >= 0) continue;\n      n[o] = e[o];\n    }\n  return n;\n}\nfunction oe() {\n  return oe = Object.assign ? Object.assign.bind() : function(e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n      for (var o in n)\n        Object.prototype.hasOwnProperty.call(n, o) && (e[o] = n[o]);\n    }\n    return e;\n  }, oe.apply(this, arguments);\n}\nfunction Ue(e, t) {\n  var n = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    t && (o = o.filter(function(r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), n.push.apply(n, o);\n  }\n  return n;\n}\nfunction re(e) {\n  for (var t = 1; t < arguments.length; t++) {\n    var n = arguments[t] != null ? arguments[t] : {};\n    t % 2 ? Ue(Object(n), !0).forEach(function(o) {\n      jn(e, o, n[o]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : Ue(Object(n)).forEach(function(o) {\n      Object.defineProperty(e, o, Object.getOwnPropertyDescriptor(n, o));\n    });\n  }\n  return e;\n}\nfunction jn(e, t, n) {\n  return t = Wn(t), t in e ? Object.defineProperty(e, t, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = n, e;\n}\nfunction Wn(e) {\n  var t = $n(e, \"string\");\n  return typeof t == \"symbol\" ? t : t + \"\";\n}\nfunction $n(e, t) {\n  if (typeof e != \"object\" || !e) return e;\n  var n = e[Symbol.toPrimitive];\n  if (n !== void 0) {\n    var o = n.call(e, t);\n    if (typeof o != \"object\") return o;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (t === \"string\" ? String : Number)(e);\n}\nfunction mt(e) {\n  return e && e.map((t, n) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(t.tag, re({\n    key: n\n  }, t.attr), mt(t.child)));\n}\nfunction p(e) {\n  return (t) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(qn, oe({\n    attr: re({}, e.attr)\n  }, t), mt(e.child));\n}\nfunction qn(e) {\n  var t = (n) => {\n    var {\n      attr: o,\n      size: r,\n      title: l\n    } = e, c = Un(e, Gn), s = r || n.size || \"1em\", d;\n    return n.className && (d = n.className), e.className && (d = (d ? d + \" \" : \"\") + e.className), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", oe({\n      stroke: \"currentColor\",\n      fill: \"currentColor\",\n      strokeWidth: \"0\"\n    }, n.attr, o, c, {\n      className: d,\n      style: re(re({\n        color: e.color || n.color\n      }, n.style), e.style),\n      height: s,\n      width: s,\n      xmlns: \"http://www.w3.org/2000/svg\"\n    }), l && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"title\", null, l), e.children);\n  };\n  return Ge !== void 0 ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ge.Consumer, null, (n) => t(n)) : t(ut);\n}\nfunction Kn(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M8 7V11L2 6L8 1V5H13C17.4183 5 21 8.58172 21 13C21 17.4183 17.4183 21 13 21H4V19H13C16.3137 19 19 16.3137 19 13C19 9.68629 16.3137 7 13 7H8Z\" }, child: [] }] })(e);\n}\nfunction ht(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M7.29117 20.8242L2 22L3.17581 16.7088C2.42544 15.3056 2 13.7025 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22C10.2975 22 8.6944 21.5746 7.29117 20.8242ZM7.58075 18.711L8.23428 19.0605C9.38248 19.6745 10.6655 20 12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 13.3345 4.32549 14.6175 4.93949 15.7657L5.28896 16.4192L4.63416 19.3658L7.58075 18.711Z\" }, child: [] }] })(e);\n}\nfunction Xn(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M7.24264 17.9967H3V13.754L14.435 2.319C14.8256 1.92848 15.4587 1.92848 15.8492 2.319L18.6777 5.14743C19.0682 5.53795 19.0682 6.17112 18.6777 6.56164L7.24264 17.9967ZM3 19.9967H21V21.9967H3V19.9967Z\" }, child: [] }] })(e);\n}\nfunction Yn(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M23 12L15.9289 19.0711L14.5147 17.6569L20.1716 12L14.5147 6.34317L15.9289 4.92896L23 12ZM3.82843 12L9.48528 17.6569L8.07107 19.0711L1 12L8.07107 4.92896L9.48528 6.34317L3.82843 12Z\" }, child: [] }] })(e);\n}\nfunction Re(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M3 8L9.00319 2H19.9978C20.5513 2 21 2.45531 21 2.9918V21.0082C21 21.556 20.5551 22 20.0066 22H3.9934C3.44476 22 3 21.5501 3 20.9932V8ZM10 4V9H5V20H19V4H10Z\" }, child: [] }] })(e);\n}\nfunction Jn(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M3 4H21V6H3V4ZM5 19H19V21H5V19ZM3 14H21V16H3V14ZM5 9H19V11H5V9Z\" }, child: [] }] })(e);\n}\nfunction Qn(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M3 4H21V6H3V4ZM3 19H21V21H3V19ZM3 14H21V16H3V14ZM3 9H21V11H3V9Z\" }, child: [] }] })(e);\n}\nfunction eo(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M3 4H21V6H3V4ZM3 19H17V21H3V19ZM3 14H21V16H3V14ZM3 9H17V11H3V9Z\" }, child: [] }] })(e);\n}\nfunction to(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M3 4H21V6H3V4ZM7 19H21V21H7V19ZM3 14H21V16H3V14ZM7 9H21V11H7V9Z\" }, child: [] }] })(e);\n}\nfunction no(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M8 11H12.5C13.8807 11 15 9.88071 15 8.5C15 7.11929 13.8807 6 12.5 6H8V11ZM18 15.5C18 17.9853 15.9853 20 13.5 20H6V4H12.5C14.9853 4 17 6.01472 17 8.5C17 9.70431 16.5269 10.7981 15.7564 11.6058C17.0979 12.3847 18 13.837 18 15.5ZM8 13V18H13.5C14.8807 18 16 16.8807 16 15.5C16 14.1193 14.8807 13 13.5 13H8Z\" }, child: [] }] })(e);\n}\nfunction oo(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M3.41436 5.99995L5.70726 3.70706L4.29304 2.29285L0.585938 5.99995L4.29304 9.70706L5.70726 8.29285L3.41436 5.99995ZM9.58594 5.99995L7.29304 3.70706L8.70726 2.29285L12.4144 5.99995L8.70726 9.70706L7.29304 8.29285L9.58594 5.99995ZM14.0002 2.99995H21.0002C21.5524 2.99995 22.0002 3.44767 22.0002 3.99995V20C22.0002 20.5522 21.5524 21 21.0002 21H3.00015C2.44787 21 2.00015 20.5522 2.00015 20V12H4.00015V19H20.0002V4.99995H14.0002V2.99995Z\" }, child: [] }] })(e);\n}\nfunction ze(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M5.55397 22H3.3999L10.9999 3H12.9999L20.5999 22H18.4458L16.0458 16H7.95397L5.55397 22ZM8.75397 14H15.2458L11.9999 5.88517L8.75397 14Z\" }, child: [] }] })(e);\n}\nfunction ft(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M13 20H11V13H4V20H2V4H4V11H11V4H13V20ZM21.0005 8V20H19.0005L19 10.204L17 10.74V8.67L19.5005 8H21.0005Z\" }, child: [] }] })(e);\n}\nfunction gt(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M4 4V11H11V4H13V20H11V13H4V20H2V4H4ZM18.5 8C20.5711 8 22.25 9.67893 22.25 11.75C22.25 12.6074 21.9623 13.3976 21.4781 14.0292L21.3302 14.2102L18.0343 18H22V20H15L14.9993 18.444L19.8207 12.8981C20.0881 12.5908 20.25 12.1893 20.25 11.75C20.25 10.7835 19.4665 10 18.5 10C17.5818 10 16.8288 10.7071 16.7558 11.6065L16.75 11.75H14.75C14.75 9.67893 16.4289 8 18.5 8Z\" }, child: [] }] })(e);\n}\nfunction bt(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M22 8L21.9984 10L19.4934 12.883C21.0823 13.3184 22.25 14.7728 22.25 16.5C22.25 18.5711 20.5711 20.25 18.5 20.25C16.674 20.25 15.1528 18.9449 14.8184 17.2166L16.7821 16.8352C16.9384 17.6413 17.6481 18.25 18.5 18.25C19.4665 18.25 20.25 17.4665 20.25 16.5C20.25 15.5335 19.4665 14.75 18.5 14.75C18.214 14.75 17.944 14.8186 17.7056 14.9403L16.3992 13.3932L19.3484 10H15V8H22ZM4 4V11H11V4H13V20H11V13H4V20H2V4H4Z\" }, child: [] }] })(e);\n}\nfunction ro(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M3 4H21V6H3V4ZM3 19H21V21H3V19ZM11 14H21V16H11V14ZM11 9H21V11H11V9ZM3 12.5L7 9V16L3 12.5Z\" }, child: [] }] })(e);\n}\nfunction io(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M3 4H21V6H3V4ZM3 19H21V21H3V19ZM11 14H21V16H11V14ZM11 9H21V11H11V9ZM7 12.5L3 16V9L7 12.5Z\" }, child: [] }] })(e);\n}\nfunction je(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M8 5H11V19H8V21H16V19H13V5H16V3H8V5ZM2 7C1.44772 7 1 7.44772 1 8V16C1 16.5523 1.44772 17 2 17H8V15H3V9H8V7H2ZM16 9H21V15H16V17H22C22.5523 17 23 16.5523 23 16V8C23 7.44772 22.5523 7 22 7H16V9Z\" }, child: [] }] })(e);\n}\nfunction lo(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M15 20H7V18H9.92661L12.0425 6H9V4H17V6H14.0734L11.9575 18H15V20Z\" }, child: [] }] })(e);\n}\nfunction co(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M17 17H22V19H19V22H17V17ZM7 7H2V5H5V2H7V7ZM18.364 15.5355L16.9497 14.1213L18.364 12.7071C20.3166 10.7545 20.3166 7.58866 18.364 5.63604C16.4113 3.68342 13.2455 3.68342 11.2929 5.63604L9.87868 7.05025L8.46447 5.63604L9.87868 4.22183C12.6123 1.48816 17.0445 1.48816 19.7782 4.22183C22.5118 6.9555 22.5118 11.3877 19.7782 14.1213L18.364 15.5355ZM15.5355 18.364L14.1213 19.7782C11.3877 22.5118 6.9555 22.5118 4.22183 19.7782C1.48816 17.0445 1.48816 12.6123 4.22183 9.87868L5.63604 8.46447L7.05025 9.87868L5.63604 11.2929C3.68342 13.2455 3.68342 16.4113 5.63604 18.364C7.58866 20.3166 10.7545 20.3166 12.7071 18.364L14.1213 16.9497L15.5355 18.364ZM14.8284 7.75736L16.2426 9.17157L9.17157 16.2426L7.75736 14.8284L14.8284 7.75736Z\" }, child: [] }] })(e);\n}\nfunction Ct(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z\" }, child: [] }] })(e);\n}\nfunction pt(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M8.00008 6V9H5.00008V6H8.00008ZM3.00008 4V11H10.0001V4H3.00008ZM13.0001 4H21.0001V6H13.0001V4ZM13.0001 11H21.0001V13H13.0001V11ZM13.0001 18H21.0001V20H13.0001V18ZM10.7072 16.2071L9.29297 14.7929L6.00008 18.0858L4.20718 16.2929L2.79297 17.7071L6.00008 20.9142L10.7072 16.2071Z\" }, child: [] }] })(e);\n}\nfunction kt(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M8 4H21V6H8V4ZM5 3V6H6V7H3V6H4V4H3V3H5ZM3 14V11.5H5V11H3V10H6V12.5H4V13H6V14H3ZM5 19.5H3V18.5H5V18H3V17H6V21H3V20H5V19.5ZM8 11H21V13H8V11ZM8 18H21V20H8V18Z\" }, child: [] }] })(e);\n}\nfunction wt(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M8 4H21V6H8V4ZM4.5 6.5C3.67157 6.5 3 5.82843 3 5C3 4.17157 3.67157 3.5 4.5 3.5C5.32843 3.5 6 4.17157 6 5C6 5.82843 5.32843 6.5 4.5 6.5ZM4.5 13.5C3.67157 13.5 3 12.8284 3 12C3 11.1716 3.67157 10.5 4.5 10.5C5.32843 10.5 6 11.1716 6 12C6 12.8284 5.32843 13.5 4.5 13.5ZM4.5 20.4C3.67157 20.4 3 19.7284 3 18.9C3 18.0716 3.67157 17.4 4.5 17.4C5.32843 17.4 6 18.0716 6 18.9C6 19.7284 5.32843 20.4 4.5 20.4ZM8 11H21V13H8V11ZM8 18H21V20H8V18Z\" }, child: [] }] })(e);\n}\nfunction ao(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M20 3C20.5523 3 21 3.44772 21 4V20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3H20ZM11 5H5V10.999H7V9L10 12L7 15V13H5V19H11V17H13V19H19V13H17V15L14 12L17 9V10.999H19V5H13V7H11V5ZM13 13V15H11V13H13ZM13 9V11H11V9H13Z\" }, child: [] }] })(e);\n}\nfunction so(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M21 20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3H20C20.5523 3 21 3.44772 21 4V20ZM19 11V5H13.001V7H15L12 10L9 7H11V5H5V11H7V13H5V19H11V17H9L12 14L15 17H13.001V19H19V13H17V11H19ZM11 13H9V11H11V13ZM15 13H13V11H15V13Z\" }, child: [] }] })(e);\n}\nfunction vt(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M21 4H3V6H21V4ZM21 11H8V13H21V11ZM21 18H8V20H21V18ZM5 11H3V20H5V11Z\" }, child: [] }] })(e);\n}\nfunction uo(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M17.1538 14C17.3846 14.5161 17.5 15.0893 17.5 15.7196C17.5 17.0625 16.9762 18.1116 15.9286 18.867C14.8809 19.6223 13.4335 20 11.5862 20C9.94674 20 8.32335 19.6185 6.71592 18.8555V16.6009C8.23538 17.4783 9.7908 17.917 11.3822 17.917C13.9333 17.917 15.2128 17.1846 15.2208 15.7196C15.2208 15.0939 15.0049 14.5598 14.5731 14.1173C14.5339 14.0772 14.4939 14.0381 14.4531 14H3V12H21V14H17.1538ZM13.076 11H7.62908C7.4566 10.8433 7.29616 10.6692 7.14776 10.4778C6.71592 9.92084 6.5 9.24559 6.5 8.45207C6.5 7.21602 6.96583 6.165 7.89749 5.299C8.82916 4.43299 10.2706 4 12.2219 4C13.6934 4 15.1009 4.32808 16.4444 4.98426V7.13591C15.2448 6.44921 13.9293 6.10587 12.4978 6.10587C10.0187 6.10587 8.77917 6.88793 8.77917 8.45207C8.77917 8.87172 8.99709 9.23796 9.43293 9.55079C9.86878 9.86362 10.4066 10.1135 11.0463 10.3004C11.6665 10.4816 12.3431 10.7148 13.076 11H13.076Z\" }, child: [] }] })(e);\n}\nfunction mo(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M13 10V14H19V10H13ZM11 10H5V14H11V10ZM13 19H19V16H13V19ZM11 19V16H5V19H11ZM13 5V8H19V5H13ZM11 5H5V8H11V5ZM4 3H20C20.5523 3 21 3.44772 21 4V20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3Z\" }, child: [] }] })(e);\n}\nfunction _e(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M13 6V21H11V6H5V4H19V6H13Z\" }, child: [] }] })(e);\n}\nfunction ho(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M8 3V12C8 14.2091 9.79086 16 12 16C14.2091 16 16 14.2091 16 12V3H18V12C18 15.3137 15.3137 18 12 18C8.68629 18 6 15.3137 6 12V3H8ZM4 20H20V22H4V20Z\" }, child: [] }] })(e);\n}\nfunction fo(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M2 3.9934C2 3.44476 2.45531 3 2.9918 3H21.0082C21.556 3 22 3.44495 22 3.9934V20.0066C22 20.5552 21.5447 21 21.0082 21H2.9918C2.44405 21 2 20.5551 2 20.0066V3.9934ZM8 5V19H16V5H8ZM4 5V7H6V5H4ZM18 5V7H20V5H18ZM4 9V11H6V9H4ZM18 9V11H20V9H18ZM4 13V15H6V13H4ZM18 13V15H20V13H18ZM4 17V19H6V17H4ZM18 17V19H20V17H18Z\" }, child: [] }] })(e);\n}\nfunction Ht(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M5 11.1005L7 9.1005L12.5 14.6005L16 11.1005L19 14.1005V5H5V11.1005ZM4 3H20C20.5523 3 21 3.44772 21 4V20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3ZM15.5 10C14.6716 10 14 9.32843 14 8.5C14 7.67157 14.6716 7 15.5 7C16.3284 7 17 7.67157 17 8.5C17 9.32843 16.3284 10 15.5 10Z\" }, child: [] }] })(e);\n}\nfunction go(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M21 15V18H24V20H21V23H19V20H16V18H19V15H21ZM21.0082 3C21.556 3 22 3.44495 22 3.9934L22.0007 13.3417C21.3749 13.1204 20.7015 13 20 13V5H4L4.001 19L13.2929 9.70715C13.6528 9.34604 14.22 9.31823 14.6123 9.62322L14.7065 9.70772L18.2521 13.2586C15.791 14.0069 14 16.2943 14 19C14 19.7015 14.1204 20.3749 14.3417 21.0007L2.9918 21C2.44405 21 2 20.5551 2 20.0066V3.9934C2 3.44476 2.45531 3 2.9918 3H21.0082ZM8 7C9.10457 7 10 7.89543 10 9C10 10.1046 9.10457 11 8 11C6.89543 11 6 10.1046 6 9C6 7.89543 6.89543 7 8 7Z\" }, child: [] }] })(e);\n}\nfunction bo(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M20 3C20.5523 3 21 3.44772 21 4V5.757L19 7.757V5H5V13.1L9 9.1005L13.328 13.429L12.0012 14.7562L11.995 18.995L16.2414 19.0012L17.571 17.671L18.8995 19H19V16.242L21 14.242V20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3H20ZM21.7782 7.80761L23.1924 9.22183L15.4142 17L13.9979 16.9979L14 15.5858L21.7782 7.80761ZM15.5 7C16.3284 7 17 7.67157 17 8.5C17 9.32843 16.3284 10 15.5 10C14.6716 10 14 9.32843 14 8.5C14 7.67157 14.6716 7 15.5 7Z\" }, child: [] }] })(e);\n}\nfunction Co(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M3 3.9934C3 3.44476 3.44495 3 3.9934 3H20.0066C20.5552 3 21 3.44495 21 3.9934V20.0066C21 20.5552 20.5551 21 20.0066 21H3.9934C3.44476 21 3 20.5551 3 20.0066V3.9934ZM10.6219 8.41459C10.5562 8.37078 10.479 8.34741 10.4 8.34741C10.1791 8.34741 10 8.52649 10 8.74741V15.2526C10 15.3316 10.0234 15.4088 10.0672 15.4745C10.1897 15.6583 10.4381 15.708 10.6219 15.5854L15.5008 12.3328C15.5447 12.3035 15.5824 12.2658 15.6117 12.2219C15.7343 12.0381 15.6846 11.7897 15.5008 11.6672L10.6219 8.41459Z\" }, child: [] }] })(e);\n}\nfunction Mt(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M2 16.0001H5.88889L11.1834 20.3319C11.2727 20.405 11.3846 20.4449 11.5 20.4449C11.7761 20.4449 12 20.2211 12 19.9449V4.05519C12 3.93977 11.9601 3.8279 11.887 3.73857C11.7121 3.52485 11.3971 3.49335 11.1834 3.66821L5.88889 8.00007H2C1.44772 8.00007 1 8.44778 1 9.00007V15.0001C1 15.5524 1.44772 16.0001 2 16.0001ZM23 12C23 15.292 21.5539 18.2463 19.2622 20.2622L17.8445 18.8444C19.7758 17.1937 21 14.7398 21 12C21 9.26016 19.7758 6.80629 17.8445 5.15557L19.2622 3.73779C21.5539 5.75368 23 8.70795 23 12ZM18 12C18 10.0883 17.106 8.38548 15.7133 7.28673L14.2842 8.71584C15.3213 9.43855 16 10.64 16 12C16 13.36 15.3213 14.5614 14.2842 15.2841L15.7133 16.7132C17.106 15.6145 18 13.9116 18 12Z\" }, child: [] }] })(e);\n}\nfunction po(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M11 11V5H13V11H19V13H13V19H11V13H5V11H11Z\" }, child: [] }] })(e);\n}\nfunction ko(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M9.9997 15.1709L19.1921 5.97852L20.6063 7.39273L9.9997 17.9993L3.63574 11.6354L5.04996 10.2212L9.9997 15.1709Z\" }, child: [] }] })(e);\n}\nfunction wo(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M17 6H22V8H20V21C20 21.5523 19.5523 22 19 22H5C4.44772 22 4 21.5523 4 21V8H2V6H7V3C7 2.44772 7.44772 2 8 2H16C16.5523 2 17 2.44772 17 3V6ZM18 8H6V20H18V8ZM9 4V6H15V4H9Z\" }, child: [] }] })(e);\n}\nfunction vo(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M17 6H22V8H20V21C20 21.5523 19.5523 22 19 22H5C4.44772 22 4 21.5523 4 21V8H2V6H7V3C7 2.44772 7.44772 2 8 2H16C16.5523 2 17 2.44772 17 3V6ZM9 11V17H11V11H9ZM13 11V17H15V11H13ZM9 4V6H15V4H9Z\" }, child: [] }] })(e);\n}\nfunction Ho(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M4 19H20V12H22V20C22 20.5523 21.5523 21 21 21H3C2.44772 21 2 20.5523 2 20V12H4V19ZM14 9H19L12 16L5 9H10V3H14V9Z\" }, child: [] }] })(e);\n}\nfunction Mo(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M10 6V8H5V19H16V14H18V20C18 20.5523 17.5523 21 17 21H4C3.44772 21 3 20.5523 3 20V7C3 6.44772 3.44772 6 4 6H10ZM21 3V12L17.206 8.207L11.2071 14.2071L9.79289 12.7929L15.792 6.793L12 3H21Z\" }, child: [] }] })(e);\n}\nfunction xo(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M5 10C3.9 10 3 10.9 3 12C3 13.1 3.9 14 5 14C6.1 14 7 13.1 7 12C7 10.9 6.1 10 5 10ZM19 10C17.9 10 17 10.9 17 12C17 13.1 17.9 14 19 14C20.1 14 21 13.1 21 12C21 10.9 20.1 10 19 10ZM12 10C10.9 10 10 10.9 10 12C10 13.1 10.9 14 12 14C13.1 14 14 13.1 14 12C14 10.9 13.1 10 12 10Z\" }, child: [] }] })(e);\n}\nfunction yo(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22ZM8 13C8 15.2091 9.79086 17 12 17C14.2091 17 16 15.2091 16 13H8ZM8 11C8.82843 11 9.5 10.3284 9.5 9.5C9.5 8.67157 8.82843 8 8 8C7.17157 8 6.5 8.67157 6.5 9.5C6.5 10.3284 7.17157 11 8 11ZM16 11C16.8284 11 17.5 10.3284 17.5 9.5C17.5 8.67157 16.8284 8 16 8C15.1716 8 14.5 8.67157 14.5 9.5C14.5 10.3284 15.1716 11 16 11Z\" }, child: [] }] })(e);\n}\nfunction We(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"currentColor\" }, child: [{ tag: \"path\", attr: { d: \"M12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22ZM12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20ZM8 13H16C16 15.2091 14.2091 17 12 17C9.79086 17 8 15.2091 8 13ZM8 11C7.17157 11 6.5 10.3284 6.5 9.5C6.5 8.67157 7.17157 8 8 8C8.82843 8 9.5 8.67157 9.5 9.5C9.5 10.3284 8.82843 11 8 11ZM16 11C15.1716 11 14.5 10.3284 14.5 9.5C14.5 8.67157 15.1716 8 16 8C16.8284 8 17.5 8.67157 17.5 9.5C17.5 10.3284 16.8284 11 16 11Z\" }, child: [] }] })(e);\n}\nlet te;\nasync function Bo() {\n  return te || (te = (async () => {\n    const [e, t] = await Promise.all([\n      __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_emoji-mart_dist_module_js\").then(__webpack_require__.bind(__webpack_require__, /*! emoji-mart */ \"(app-pages-browser)/./node_modules/emoji-mart/dist/module.js\")),\n      // use a dynamic import to encourage bundle-splitting\n      // and a smaller initial client bundle size\n      __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_emoji-mart_data_sets_15_native_json\").then(__webpack_require__.t.bind(__webpack_require__, /*! @emoji-mart/data */ \"(app-pages-browser)/./node_modules/@emoji-mart/data/sets/15/native.json\", 17))\n    ]), n = \"default\" in e ? e.default : e, o = \"default\" in t ? t.default : t;\n    return await n.init({ data: o }), { emojiMart: n, emojiData: o };\n  })(), te);\n}\nfunction Vo(e) {\n  const t = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), n = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  return n.current && n.current.update(e), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => ((async () => {\n    const { emojiMart: o } = await Bo();\n    n.current = new o.Picker({ ...e, ref: t });\n  })(), () => {\n    n.current = null;\n  }), []), react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { ref: t });\n}\nconst $e = (e) => {\n  const [t, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), o = C(), r = D();\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(o.Generic.Popover.Root, { opened: t, children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(o.Generic.Popover.Trigger, { children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      \"div\",\n      {\n        onClick: (l) => {\n          l.preventDefault(), l.stopPropagation(), n(!t);\n        },\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        children: e.children\n      }\n    ) }),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(o.Generic.Popover.Content, { variant: \"panel-popover\", children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      Vo,\n      {\n        perLine: 7,\n        onClickOutside: () => n(!1),\n        onEmojiSelect: (l) => {\n          e.onEmojiSelect(l), n(!1);\n        },\n        theme: r == null ? void 0 : r.colorSchemePreference\n      }\n    ) })\n  ] });\n};\nfunction So(e, t) {\n  return Ie(e, [t]).get(t);\n}\nfunction Ie(e, t) {\n  const n = e.comments;\n  if (!n)\n    throw new Error(\"Comments plugin not found\");\n  const o = n.userStore, r = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    const s = /* @__PURE__ */ new Map();\n    for (const d of t) {\n      const a = o.getUser(d);\n      a && s.set(d, a);\n    }\n    return s;\n  }, [o, t]), l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({\n    current: r()\n  }), [r]), c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (s) => {\n      const d = o.subscribe((a) => {\n        l.current = r(), s();\n      });\n      return o.loadUsers(t), d;\n    },\n    [o, r, t, l]\n  );\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useSyncExternalStore)(c, () => l.current);\n}\nconst To = (e) => {\n  const t = C(), n = M(), o = b();\n  if (!o.comments)\n    throw new Error(\n      \"ReactionBadge must be used inside a BlockNote editor with comments enabled\"\n    );\n  const r = e.comment.reactions.find(\n    (d) => d.emoji === e.emoji\n  );\n  if (!r)\n    throw new Error(\n      \"Trying to render reaction badge for non-existing reaction\"\n    );\n  const [l, c] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]), s = Ie(o, l);\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    t.Generic.Badge.Root,\n    {\n      className: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.mergeCSSClasses)(\"bn-badge\", \"bn-comment-reaction\"),\n      text: r.userIds.length.toString(),\n      icon: r.emoji,\n      isSelected: o.comments.threadStore.auth.canDeleteReaction(\n        e.comment,\n        r.emoji\n      ),\n      onClick: () => e.onReactionSelect(r.emoji),\n      onMouseEnter: () => c(r.userIds),\n      mainTooltip: n.comments.reactions.reacted_by,\n      secondaryTooltip: `${Array.from(s.values()).map((d) => d.username).join(`\n`)}`\n    },\n    r.emoji\n  );\n}, Lo = ({\n  comment: e,\n  thread: t,\n  showResolveButton: n\n}) => {\n  const o = M(), r = de(\n    {\n      initialContent: e.body,\n      trailingBlock: !1,\n      dictionary: {\n        ...o,\n        placeholders: {\n          emptyDocument: o.placeholders.edit_comment\n        }\n      },\n      schema: Ee,\n      sideMenuDetection: \"editor\"\n    },\n    [e.body]\n  ), l = C(), [c, s] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), d = b();\n  if (!d.comments)\n    throw new Error(\"Comments plugin not found\");\n  const a = d.comments.threadStore, u = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    s(!0);\n  }, []), m = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    r.replaceBlocks(r.document, e.body), s(!1);\n  }, [r, e.body]), h = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    async (E) => {\n      await a.updateComment({\n        commentId: e.id,\n        comment: {\n          body: r.document\n        },\n        threadId: t.id\n      }), s(!1);\n    },\n    [e, t.id, r, a]\n  ), f = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async () => {\n    await a.deleteComment({\n      commentId: e.id,\n      threadId: t.id\n    });\n  }, [e, t.id, a]), w = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    async (E) => {\n      a.auth.canAddReaction(e, E) ? await a.addReaction({\n        threadId: t.id,\n        commentId: e.id,\n        emoji: E\n      }) : a.auth.canDeleteReaction(e, E) && await a.deleteReaction({\n        threadId: t.id,\n        commentId: e.id,\n        emoji: E\n      });\n    },\n    [a, e, t.id]\n  ), H = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async () => {\n    await a.resolveThread({\n      threadId: t.id\n    });\n  }, [t.id, a]), B = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async () => {\n    await a.unresolveThread({\n      threadId: t.id\n    });\n  }, [t.id, a]), V = So(d, e.userId);\n  if (!e.body)\n    return null;\n  let S;\n  const O = a.auth.canAddReaction(e), z = a.auth.canDeleteComment(e), j = a.auth.canUpdateComment(e), Z = n && (t.resolved ? a.auth.canUnresolveThread(t) : a.auth.canResolveThread(t));\n  c || (S = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\n    l.Generic.Toolbar.Root,\n    {\n      className: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.mergeCSSClasses)(\"bn-action-toolbar\", \"bn-comment-actions\"),\n      variant: \"action-toolbar\",\n      children: [\n        O && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          $e,\n          {\n            onEmojiSelect: (E) => w(E.native),\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n              l.Generic.Toolbar.Button,\n              {\n                mainTooltip: o.comments.actions.add_reaction,\n                variant: \"compact\",\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(We, { size: 16 })\n              },\n              \"add-reaction\"\n            )\n          }\n        ),\n        Z && (t.resolved ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          l.Generic.Toolbar.Button,\n          {\n            mainTooltip: \"Re-open\",\n            variant: \"compact\",\n            onClick: B,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Kn, { size: 16 })\n          },\n          \"reopen\"\n        ) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          l.Generic.Toolbar.Button,\n          {\n            mainTooltip: o.comments.actions.resolve,\n            variant: \"compact\",\n            onClick: H,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ko, { size: 16 })\n          },\n          \"resolve\"\n        )),\n        (z || j) && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(l.Generic.Menu.Root, { position: \"bottom-start\", children: [\n          /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(l.Generic.Menu.Trigger, { children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n            l.Generic.Toolbar.Button,\n            {\n              mainTooltip: o.comments.actions.more_actions,\n              variant: \"compact\",\n              children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(xo, { size: 16 })\n            },\n            \"more-actions\"\n          ) }),\n          /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(l.Generic.Menu.Dropdown, { className: \"bn-menu-dropdown\", children: [\n            j && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n              l.Generic.Menu.Item,\n              {\n                icon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Xn, {}),\n                onClick: u,\n                children: o.comments.actions.edit_comment\n              },\n              \"edit-comment\"\n            ),\n            z && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n              l.Generic.Menu.Item,\n              {\n                icon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(vo, {}),\n                onClick: f,\n                children: o.comments.actions.delete_comment\n              },\n              \"delete-comment\"\n            )\n          ] })\n        ] })\n      ]\n    }\n  ));\n  const $ = e.createdAt.toLocaleDateString(void 0, {\n    month: \"short\",\n    day: \"numeric\"\n  });\n  if (!e.body)\n    throw new Error(\"soft deletes are not yet supported\");\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    l.Comments.Comment,\n    {\n      authorInfo: V ?? \"loading\",\n      timeString: $,\n      edited: e.updatedAt.getTime() !== e.createdAt.getTime(),\n      showActions: \"hover\",\n      actions: S,\n      className: \"bn-thread-comment\",\n      children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n        Le,\n        {\n          autoFocus: c,\n          editor: r,\n          editable: c,\n          actions: e.reactions.length > 0 || c ? ({ isEmpty: E }) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children: [\n            e.reactions.length > 0 && !c && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\n              l.Generic.Badge.Group,\n              {\n                className: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.mergeCSSClasses)(\n                  \"bn-badge-group\",\n                  \"bn-comment-reactions\"\n                ),\n                children: [\n                  e.reactions.map((F) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n                    To,\n                    {\n                      comment: e,\n                      emoji: F.emoji,\n                      onReactionSelect: w\n                    },\n                    F.emoji\n                  )),\n                  /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n                    $e,\n                    {\n                      onEmojiSelect: (F) => w(F.native),\n                      children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n                        l.Generic.Badge.Root,\n                        {\n                          className: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.mergeCSSClasses)(\n                            \"bn-badge\",\n                            \"bn-comment-add-reaction\"\n                          ),\n                          text: \"+\",\n                          icon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(We, { size: 16 }),\n                          mainTooltip: o.comments.actions.add_reaction\n                        }\n                      )\n                    }\n                  )\n                ]\n              }\n            ),\n            c && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\n              l.Generic.Toolbar.Root,\n              {\n                variant: \"action-toolbar\",\n                className: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.mergeCSSClasses)(\n                  \"bn-action-toolbar\",\n                  \"bn-comment-actions\"\n                ),\n                children: [\n                  /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n                    l.Generic.Toolbar.Button,\n                    {\n                      mainTooltip: \"Save\",\n                      variant: \"compact\",\n                      onClick: h,\n                      isDisabled: E,\n                      children: \"Save\"\n                    }\n                  ),\n                  /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n                    l.Generic.Toolbar.Button,\n                    {\n                      className: \"bn-button\",\n                      mainTooltip: \"Cancel\",\n                      variant: \"compact\",\n                      onClick: m,\n                      children: \"Cancel\"\n                    }\n                  )\n                ]\n              }\n            )\n          ] }) : void 0\n        }\n      )\n    }\n  );\n}, Eo = ({\n  thread: e,\n  maxCommentsBeforeCollapse: t\n}) => {\n  const n = C(), o = M(), r = b(), l = Ie(r, e.resolvedBy ? [e.resolvedBy] : []), c = e.comments.map((s, d) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    Lo,\n    {\n      thread: e,\n      comment: s,\n      showResolveButton: d === 0\n    },\n    s.id\n  ));\n  if (e.resolved && e.resolvedUpdatedAt && e.resolvedBy) {\n    if (!l.get(e.resolvedBy))\n      throw new Error(\n        `User ${e.resolvedBy} resolved thread ${e.id}, but their data could not be found.`\n      );\n    const d = e.comments.findLastIndex(\n      (a) => e.resolvedUpdatedAt.getTime() > a.createdAt.getTime()\n    ) + 1;\n    c.splice(\n      d,\n      0,\n      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n        n.Comments.Comment,\n        {\n          className: \"bn-thread-comment\",\n          authorInfo: e.resolvedBy && l.get(e.resolvedBy) || \"loading\",\n          timeString: e.resolvedUpdatedAt.toLocaleDateString(void 0, {\n            month: \"short\",\n            day: \"numeric\"\n          }),\n          edited: !1,\n          showActions: !1,\n          children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { className: \"bn-resolved-text\", children: o.comments.sidebar.marked_as_resolved })\n        },\n        \"resolved-comment\"\n      )\n    );\n  }\n  return t && c.length > t && c.splice(\n    1,\n    c.length - 2,\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      n.Comments.ExpandSectionsPrompt,\n      {\n        className: \"bn-thread-expand-prompt\",\n        children: o.comments.sidebar.more_replies(e.comments.length - 2)\n      },\n      \"expand-prompt\"\n    )\n  ), c;\n}, xt = ({\n  thread: e,\n  selected: t,\n  referenceText: n,\n  maxCommentsBeforeCollapse: o,\n  onFocus: r,\n  onBlur: l,\n  tabIndex: c\n}) => {\n  const s = C(), d = M(), u = b().comments;\n  if (!u)\n    throw new Error(\"Comments plugin not found\");\n  const m = de({\n    trailingBlock: !1,\n    dictionary: {\n      ...d,\n      placeholders: {\n        emptyDocument: d.placeholders.comment_reply\n      }\n    },\n    schema: Ee,\n    sideMenuDetection: \"editor\"\n  }), h = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async () => {\n    await u.threadStore.addComment({\n      comment: {\n        body: m.document\n      },\n      threadId: e.id\n    }), m.removeBlocks(m.document);\n  }, [u, m, e.id]);\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\n    s.Comments.Card,\n    {\n      className: \"bn-thread\",\n      headerText: n,\n      onFocus: r,\n      onBlur: l,\n      selected: t,\n      tabIndex: c,\n      children: [\n        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(s.Comments.CardSection, { className: \"bn-thread-comments\", children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          Eo,\n          {\n            thread: e,\n            maxCommentsBeforeCollapse: t ? void 0 : o || 5\n          }\n        ) }),\n        t && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(s.Comments.CardSection, { className: \"bn-thread-composer\", children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          Le,\n          {\n            autoFocus: !1,\n            editable: !0,\n            editor: m,\n            actions: ({ isEmpty: f }) => f ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n              s.Generic.Toolbar.Root,\n              {\n                variant: \"action-toolbar\",\n                className: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.mergeCSSClasses)(\n                  \"bn-action-toolbar\",\n                  \"bn-comment-actions\"\n                ),\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n                  s.Generic.Toolbar.Button,\n                  {\n                    mainTooltip: \"Save\",\n                    variant: \"compact\",\n                    isDisabled: f,\n                    onClick: h,\n                    children: \"Save\"\n                  }\n                )\n              }\n            )\n          }\n        ) })\n      ]\n    }\n  );\n};\nfunction yt(e) {\n  const t = e.comments;\n  if (!t)\n    throw new Error(\"Comments plugin not found\");\n  const n = t.threadStore, o = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n  o.current || (o.current = n.getThreads());\n  const r = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (l) => n.subscribe((c) => {\n      o.current = c, l();\n    }),\n    [n]\n  );\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useSyncExternalStore)(r, () => o.current);\n}\nconst Ro = (e) => {\n  const t = b();\n  if (!t.comments)\n    throw new Error(\n      \"FloatingComposerController can only be used when BlockNote editor has enabled comments\"\n    );\n  const n = P(\n    t.comments.onUpdate.bind(t.comments)\n  ), { isMounted: o, ref: r, style: l, getFloatingProps: c, setReference: s } = G(!!(n != null && n.selectedThreadId), null, 5e3, {\n    placement: \"bottom\",\n    middleware: [(0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.offset)(10), (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.shift)(), (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.flip)()],\n    onOpenChange: (m) => {\n      var h;\n      m || ((h = t.comments) == null || h.selectThread(void 0), t.focus());\n    },\n    ...e.floatingOptions\n  }), d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    var h;\n    if (!(n != null && n.selectedThreadId))\n      return;\n    const m = (h = t.domElement) == null ? void 0 : h.querySelector(\n      `[data-bn-thread-id=\"${n == null ? void 0 : n.selectedThreadId}\"]`\n    );\n    m && s(m);\n  }, [s, t, n == null ? void 0 : n.selectedThreadId]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (n != null && n.selectedThreadId)\n      return t.onChange(() => {\n        d();\n      });\n  }, [t, d, n == null ? void 0 : n.selectedThreadId]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(d, [d]);\n  const a = yt(t);\n  if (!o || !n || !n.selectedThreadId)\n    return null;\n  const u = e.floatingThread || xt;\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { ref: r, style: l, ...c(), children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    u,\n    {\n      thread: a.get(n.selectedThreadId),\n      selected: !0\n    }\n  ) });\n}, _o = (e) => {\n  const t = C(), n = M(), { block: o } = e, r = b(), [l, c] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (u) => {\n      c(u.currentTarget.value);\n    },\n    []\n  ), d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (u) => {\n      u.key === \"Enter\" && (u.preventDefault(), r.updateBlock(o, {\n        props: {\n          name: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.filenameFromURL)(l),\n          url: l\n        }\n      }));\n    },\n    [r, o, l]\n  ), a = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    r.updateBlock(o, {\n      props: {\n        name: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.filenameFromURL)(l),\n        url: l\n      }\n    });\n  }, [r, o, l]);\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(t.FilePanel.TabPanel, { className: \"bn-tab-panel\", children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      t.FilePanel.TextInput,\n      {\n        className: \"bn-text-input\",\n        placeholder: n.file_panel.embed.url_placeholder,\n        value: l,\n        onChange: s,\n        onKeyDown: d,\n        \"data-test\": \"embed-input\"\n      }\n    ),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      t.FilePanel.Button,\n      {\n        className: \"bn-button\",\n        onClick: a,\n        \"data-test\": \"embed-input-button\",\n        children: n.file_panel.embed.embed_button[o.type] || n.file_panel.embed.embed_button.file\n      }\n    )\n  ] });\n}, Io = (e) => {\n  var m;\n  const t = C(), n = M(), { block: o, setLoading: r } = e, l = b(), [c, s] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    c && setTimeout(() => {\n      s(!1);\n    }, 3e3);\n  }, [c]);\n  const d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (h) => {\n      if (h === null)\n        return;\n      async function f(w) {\n        if (r(!0), l.uploadFile !== void 0)\n          try {\n            let H = await l.uploadFile(w);\n            typeof H == \"string\" && (H = {\n              props: {\n                name: w.name,\n                url: H\n              }\n            }), l.updateBlock(o, H);\n          } catch {\n            s(!0);\n          } finally {\n            r(!1);\n          }\n      }\n      f(h);\n    },\n    [o, l, r]\n  ), a = l.schema.blockSchema[o.type], u = a.isFileBlock && ((m = a.fileBlockAccept) != null && m.length) ? a.fileBlockAccept.join(\",\") : \"*/*\";\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(t.FilePanel.TabPanel, { className: \"bn-tab-panel\", children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      t.FilePanel.FileInput,\n      {\n        className: \"bn-file-input\",\n        \"data-test\": \"upload-input\",\n        accept: u,\n        placeholder: n.file_panel.upload.file_placeholder[o.type] || n.file_panel.upload.file_placeholder.file,\n        value: null,\n        onChange: d\n      }\n    ),\n    c && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { className: \"bn-error-text\", children: n.file_panel.upload.upload_error })\n  ] });\n}, Bt = (e) => {\n  const t = C(), n = M(), o = b(), [r, l] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), c = e.tabs ?? [\n    ...o.uploadFile !== void 0 ? [\n      {\n        name: n.file_panel.upload.title,\n        tabPanel: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Io, { block: e.block, setLoading: l })\n      }\n    ] : [],\n    {\n      name: n.file_panel.embed.title,\n      tabPanel: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_o, { block: e.block })\n    }\n  ], [s, d] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n    e.defaultOpenTab || c[0].name\n  );\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    t.FilePanel.Root,\n    {\n      className: \"bn-panel\",\n      defaultOpenTab: s,\n      openTab: s,\n      setOpenTab: d,\n      tabs: c,\n      loading: r\n    }\n  );\n}, No = (e) => {\n  const t = b();\n  if (!t.filePanel)\n    throw new Error(\n      \"FileToolbarController can only be used when BlockNote editor schema contains file block\"\n    );\n  const n = P(\n    t.filePanel.onUpdate.bind(t.filePanel)\n  ), { isMounted: o, ref: r, style: l, getFloatingProps: c } = G(\n    (n == null ? void 0 : n.show) || !1,\n    (n == null ? void 0 : n.referencePos) || null,\n    5e3,\n    {\n      placement: \"bottom\",\n      middleware: [(0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.offset)(10), (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.flip)()],\n      onOpenChange: (m) => {\n        m || (t.filePanel.closeMenu(), t.focus());\n      },\n      ...e.floatingOptions\n    }\n  );\n  if (!o || !n)\n    return null;\n  const { show: s, referencePos: d, ...a } = n, u = e.filePanel || Bt;\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { ref: r, style: l, ...c(), children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(u, { ...a }) });\n};\nfunction U(e, t) {\n  ue(e, t), se(e, t);\n}\nfunction Po(e) {\n  return (t) => {\n    e.forEach((n) => {\n      typeof n == \"function\" ? n(t) : n != null && (n.current = t);\n    });\n  };\n}\nfunction R(e) {\n  const t = D();\n  if (e || (e = t == null ? void 0 : t.editor), !e)\n    throw new Error(\n      \"'editor' is required, either from BlockNoteContext or as a function argument\"\n    );\n  const n = e, [o, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => {\n    var l;\n    return ((l = n.getSelection()) == null ? void 0 : l.blocks) || [n.getTextCursorPosition().block];\n  });\n  return U(\n    () => {\n      var l;\n      return r(\n        ((l = n.getSelection()) == null ? void 0 : l.blocks) || [n.getTextCursorPosition().block]\n      );\n    },\n    n\n  ), o;\n}\nconst Oo = {\n  bold: no,\n  italic: lo,\n  underline: ho,\n  strike: uo,\n  code: Yn\n};\nfunction Do(e, t) {\n  return e in t.schema.styleSchema && t.schema.styleSchema[e].type === e && t.schema.styleSchema[e].propSchema === \"boolean\";\n}\nconst ne = (e) => {\n  const t = M(), n = C(), o = b(), r = Do(\n    e.basicTextStyle,\n    o\n  ), l = R(o), [c, s] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n    e.basicTextStyle in o.getActiveStyles()\n  );\n  U(() => {\n    r && s(e.basicTextStyle in o.getActiveStyles());\n  }, o);\n  const d = (m) => {\n    if (o.focus(), !!r) {\n      if (o.schema.styleSchema[m].propSchema !== \"boolean\")\n        throw new Error(\"can only toggle boolean styles\");\n      o.toggleStyles({ [m]: !0 });\n    }\n  };\n  if (!(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => r ? !!l.find((m) => m.content !== void 0) : !1, [r, l]) || !o.isEditable)\n    return null;\n  const u = Oo[e.basicTextStyle];\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    n.FormattingToolbar.Button,\n    {\n      className: \"bn-button\",\n      \"data-test\": e.basicTextStyle,\n      onClick: () => d(e.basicTextStyle),\n      isSelected: c,\n      label: t.formatting_toolbar[e.basicTextStyle].tooltip,\n      mainTooltip: t.formatting_toolbar[e.basicTextStyle].tooltip,\n      secondaryTooltip: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.formatKeyboardShortcut)(\n        t.formatting_toolbar[e.basicTextStyle].secondary_tooltip,\n        t.generic.ctrl_shortcut\n      ),\n      icon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(u, {})\n    }\n  );\n}, we = (e) => {\n  const t = e.textColor || \"default\", n = e.backgroundColor || \"default\", o = e.size || 16, r = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(\n    () => ({\n      pointerEvents: \"none\",\n      fontSize: (o * 0.75).toString() + \"px\",\n      height: o.toString() + \"px\",\n      lineHeight: o.toString() + \"px\",\n      textAlign: \"center\",\n      width: o.toString() + \"px\"\n    }),\n    [o]\n  );\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    \"div\",\n    {\n      className: \"bn-color-icon\",\n      \"data-background-color\": n,\n      \"data-text-color\": t,\n      style: r,\n      children: \"A\"\n    }\n  );\n}, qe = [\n  \"default\",\n  \"gray\",\n  \"brown\",\n  \"red\",\n  \"orange\",\n  \"yellow\",\n  \"green\",\n  \"blue\",\n  \"purple\",\n  \"pink\"\n], me = (e) => {\n  const t = C(), n = M();\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(() => e.text ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children: [\n      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(t.Generic.Menu.Label, { children: n.color_picker.text_title }),\n      qe.map((l) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n        t.Generic.Menu.Item,\n        {\n          onClick: () => {\n            e.onClick && e.onClick(), e.text.setColor(l);\n          },\n          \"data-test\": \"text-color-\" + l,\n          icon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(we, { textColor: l, size: e.iconSize }),\n          checked: e.text.color === l,\n          children: n.color_picker.colors[l]\n        },\n        \"text-color-\" + l\n      ))\n    ] }) : null, {}),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(() => e.background ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children: [\n      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(t.Generic.Menu.Label, { children: n.color_picker.background_title }),\n      qe.map((l) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n        t.Generic.Menu.Item,\n        {\n          onClick: () => {\n            e.onClick && e.onClick(), e.background.setColor(l);\n          },\n          \"data-test\": \"background-color-\" + l,\n          icon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(we, { backgroundColor: l, size: e.iconSize }),\n          checked: e.background.color === l,\n          children: n.color_picker.colors[l]\n        },\n        \"background-color-\" + l\n      ))\n    ] }) : null, {})\n  ] });\n};\nfunction Ke(e, t) {\n  return `${e}Color` in t.schema.styleSchema && t.schema.styleSchema[`${e}Color`].type === `${e}Color` && t.schema.styleSchema[`${e}Color`].propSchema === \"string\";\n}\nconst Zo = () => {\n  const e = C(), t = M(), n = b(), o = Ke(\"text\", n), r = Ke(\"background\", n), l = R(n), [c, s] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n    o && n.getActiveStyles().textColor || \"default\"\n  ), [d, a] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n    r && n.getActiveStyles().backgroundColor || \"default\"\n  );\n  U(() => {\n    o && s(n.getActiveStyles().textColor || \"default\"), r && a(\n      n.getActiveStyles().backgroundColor || \"default\"\n    );\n  }, n);\n  const u = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (f) => {\n      if (!o)\n        throw Error(\n          \"Tried to set text color, but style does not exist in editor schema.\"\n        );\n      f === \"default\" ? n.removeStyles({ textColor: f }) : n.addStyles({ textColor: f }), setTimeout(() => {\n        n.focus();\n      });\n    },\n    [n, o]\n  ), m = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (f) => {\n      if (!r)\n        throw Error(\n          \"Tried to set background color, but style does not exist in editor schema.\"\n        );\n      f === \"default\" ? n.removeStyles({ backgroundColor: f }) : n.addStyles({ backgroundColor: f }), setTimeout(() => {\n        n.focus();\n      });\n    },\n    [r, n]\n  );\n  return !(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    if (!o && !r)\n      return !1;\n    for (const f of l)\n      if (f.content !== void 0)\n        return !0;\n    return !1;\n  }, [r, l, o]) || !n.isEditable ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(e.Generic.Menu.Root, { children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(e.Generic.Menu.Trigger, { children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      e.FormattingToolbar.Button,\n      {\n        className: \"bn-button\",\n        \"data-test\": \"colors\",\n        label: t.formatting_toolbar.colors.tooltip,\n        mainTooltip: t.formatting_toolbar.colors.tooltip,\n        icon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          we,\n          {\n            textColor: c,\n            backgroundColor: d,\n            size: 20\n          }\n        )\n      }\n    ) }),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      e.Generic.Menu.Dropdown,\n      {\n        className: \"bn-menu-dropdown bn-color-picker-dropdown\",\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          me,\n          {\n            text: o ? {\n              color: c,\n              setColor: u\n            } : void 0,\n            background: r ? {\n              color: d,\n              setColor: m\n            } : void 0\n          }\n        )\n      }\n    )\n  ] });\n}, Xe = (e) => {\n  for (const t of _blocknote_core__WEBPACK_IMPORTED_MODULE_5__.VALID_LINK_PROTOCOLS)\n    if (e.startsWith(t))\n      return e;\n  return `${_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_LINK_PROTOCOL}://${e}`;\n}, Vt = (e) => {\n  const t = C(), n = M(), { url: o, text: r, editLink: l, showTextField: c } = e, [s, d] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(o), [a, u] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(r);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    d(o), u(r);\n  }, [r, o]);\n  const m = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (H) => {\n      H.key === \"Enter\" && (H.preventDefault(), l(Xe(s), a));\n    },\n    [l, s, a]\n  ), h = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (H) => d(H.currentTarget.value),\n    []\n  ), f = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (H) => u(H.currentTarget.value),\n    []\n  ), w = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    () => l(Xe(s), a),\n    [l, s, a]\n  );\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(t.Generic.Form.Root, { children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      t.Generic.Form.TextInput,\n      {\n        className: \"bn-text-input\",\n        name: \"url\",\n        icon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Ct, {}),\n        autoFocus: !0,\n        placeholder: n.link_toolbar.form.url_placeholder,\n        value: s,\n        onKeyDown: m,\n        onChange: h,\n        onSubmit: w\n      }\n    ),\n    c !== !1 && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      t.Generic.Form.TextInput,\n      {\n        className: \"bn-text-input\",\n        name: \"title\",\n        icon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_e, {}),\n        placeholder: n.link_toolbar.form.title_placeholder,\n        value: a,\n        onKeyDown: m,\n        onChange: f,\n        onSubmit: w\n      }\n    )\n  ] });\n};\nfunction Fo(e) {\n  return \"link\" in e.schema.inlineContentSchema && e.schema.inlineContentSchema.link === \"link\";\n}\nconst Ao = () => {\n  var f;\n  const e = b(), t = C(), n = M(), o = Fo(e), r = R(e), [l, c] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [s, d] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(e.getSelectedLinkUrl() || \"\"), [a, u] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(e.getSelectedText());\n  U(() => {\n    c(!1), u(e.getSelectedText() || \"\"), d(e.getSelectedLinkUrl() || \"\");\n  }, e), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    var H;\n    const w = (B) => {\n      (B.ctrlKey || B.metaKey) && B.key === \"k\" && (c(!0), B.preventDefault());\n    };\n    return (H = e.prosemirrorView) == null || H.dom.addEventListener(\"keydown\", w), () => {\n      var B;\n      (B = e.prosemirrorView) == null || B.dom.removeEventListener(\"keydown\", w);\n    };\n  }, [(f = e.prosemirrorView) == null ? void 0 : f.dom]);\n  const m = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (w) => {\n      e.createLink(w), e.focus();\n    },\n    [e]\n  );\n  return !(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    if (!o)\n      return !1;\n    for (const w of r)\n      if (w.content === void 0)\n        return !1;\n    return !(0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.isTableCellSelection)(e.prosemirrorState.selection);\n  }, [o, r, e.prosemirrorState.selection]) || !(\"link\" in e.schema.inlineContentSchema) || !e.isEditable ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(t.Generic.Popover.Root, { opened: l, children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(t.Generic.Popover.Trigger, { children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      t.FormattingToolbar.Button,\n      {\n        className: \"bn-button\",\n        \"data-test\": \"createLink\",\n        label: n.formatting_toolbar.link.tooltip,\n        mainTooltip: n.formatting_toolbar.link.tooltip,\n        secondaryTooltip: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.formatKeyboardShortcut)(\n          n.formatting_toolbar.link.secondary_tooltip,\n          n.generic.ctrl_shortcut\n        ),\n        icon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Ct, {}),\n        onClick: () => c(!0)\n      }\n    ) }),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      t.Generic.Popover.Content,\n      {\n        className: \"bn-popover-content bn-form-popover\",\n        variant: \"form-popover\",\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          Vt,\n          {\n            url: s,\n            text: a,\n            editLink: m,\n            showTextField: !1\n          }\n        )\n      }\n    )\n  ] });\n}, Go = () => {\n  const e = M(), t = C(), n = b(), [o, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), l = R(n), c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    if (l.length !== 1)\n      return;\n    const a = l[0];\n    if ((0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.checkBlockIsFileBlock)(a, n))\n      return r(a.props.caption), a;\n  }, [n, l]), s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (a) => {\n      c && a.key === \"Enter\" && (a.preventDefault(), n.updateBlock(c, {\n        props: {\n          caption: o\n          // TODO\n        }\n      }));\n    },\n    [o, n, c]\n  ), d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (a) => r(a.currentTarget.value),\n    []\n  );\n  return !c || (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.checkBlockIsFileBlockWithPlaceholder)(c, n) || !n.isEditable ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(t.Generic.Popover.Root, { children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(t.Generic.Popover.Trigger, { children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      t.FormattingToolbar.Button,\n      {\n        className: \"bn-button\",\n        label: e.formatting_toolbar.file_caption.tooltip,\n        mainTooltip: e.formatting_toolbar.file_caption.tooltip,\n        icon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(je, {}),\n        isSelected: c.props.caption !== \"\"\n      }\n    ) }),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      t.Generic.Popover.Content,\n      {\n        className: \"bn-popover-content bn-form-popover\",\n        variant: \"form-popover\",\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(t.Generic.Form.Root, { children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          t.Generic.Form.TextInput,\n          {\n            name: \"file-caption\",\n            icon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(je, {}),\n            value: o || \"\",\n            autoFocus: !0,\n            placeholder: e.formatting_toolbar.file_caption.input_placeholder,\n            onKeyDown: s,\n            onChange: d\n          }\n        ) })\n      }\n    )\n  ] });\n}, Uo = () => {\n  const e = M(), t = C(), n = b(), o = R(n), r = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    if (o.length !== 1)\n      return;\n    const c = o[0];\n    if ((0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.checkBlockIsFileBlock)(c, n))\n      return c;\n  }, [n, o]), l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    n.focus(), n.removeBlocks([r]);\n  }, [n, r]);\n  return !r || (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.checkBlockIsFileBlockWithPlaceholder)(r, n) || !n.isEditable ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    t.FormattingToolbar.Button,\n    {\n      className: \"bn-button\",\n      label: e.formatting_toolbar.file_delete.tooltip[r.type] || e.formatting_toolbar.file_delete.tooltip.file,\n      mainTooltip: e.formatting_toolbar.file_delete.tooltip[r.type] || e.formatting_toolbar.file_delete.tooltip.file,\n      icon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(wo, {}),\n      onClick: l\n    }\n  );\n}, zo = () => {\n  const e = M(), t = C(), n = b(), [o, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), l = R(n), c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    if (l.length !== 1)\n      return;\n    const a = l[0];\n    if ((0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.checkBlockIsFileBlock)(a, n))\n      return r(a.props.name), a;\n  }, [n, l]), s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (a) => {\n      c && a.key === \"Enter\" && (a.preventDefault(), n.updateBlock(c, {\n        props: {\n          name: o\n          // TODO\n        }\n      }));\n    },\n    [o, n, c]\n  ), d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (a) => r(a.currentTarget.value),\n    []\n  );\n  return !c || (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.checkBlockIsFileBlockWithPlaceholder)(c, n) || !n.isEditable ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(t.Generic.Popover.Root, { children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(t.Generic.Popover.Trigger, { children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      t.FormattingToolbar.Button,\n      {\n        className: \"bn-button\",\n        label: e.formatting_toolbar.file_rename.tooltip[c.type] || e.formatting_toolbar.file_rename.tooltip.file,\n        mainTooltip: e.formatting_toolbar.file_rename.tooltip[c.type] || e.formatting_toolbar.file_rename.tooltip.file,\n        icon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ze, {})\n      }\n    ) }),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      t.Generic.Popover.Content,\n      {\n        className: \"bn-popover-content bn-form-popover\",\n        variant: \"form-popover\",\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(t.Generic.Form.Root, { children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          t.Generic.Form.TextInput,\n          {\n            name: \"file-name\",\n            icon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ze, {}),\n            value: o || \"\",\n            autoFocus: !0,\n            placeholder: e.formatting_toolbar.file_rename.input_placeholder[c.type] || e.formatting_toolbar.file_rename.input_placeholder.file,\n            onKeyDown: s,\n            onChange: d\n          }\n        ) })\n      }\n    )\n  ] });\n}, jo = () => {\n  const e = M(), t = C(), n = b(), o = R(n), [r, l] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    l(!1);\n  }, [o]);\n  const c = o.length === 1 ? o[0] : void 0;\n  return c === void 0 || !(0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.checkBlockIsFileBlock)(c, n) || !n.isEditable ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(t.Generic.Popover.Root, { opened: r, position: \"bottom\", children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(t.Generic.Popover.Trigger, { children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      t.FormattingToolbar.Button,\n      {\n        className: \"bn-button\",\n        onClick: () => l(!r),\n        isSelected: r,\n        mainTooltip: e.formatting_toolbar.file_replace.tooltip[c.type] || e.formatting_toolbar.file_replace.tooltip.file,\n        label: e.formatting_toolbar.file_replace.tooltip[c.type] || e.formatting_toolbar.file_replace.tooltip.file,\n        icon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(bo, {})\n      }\n    ) }),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      t.Generic.Popover.Content,\n      {\n        className: \"bn-popover-content bn-panel-popover\",\n        variant: \"panel-popover\",\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Bt, { block: c })\n      }\n    )\n  ] });\n}, Wo = () => {\n  const e = M(), t = C(), n = b(), o = R(n), [r, l] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n    () => n.canNestBlock()\n  );\n  U(() => {\n    l(n.canNestBlock());\n  }, n);\n  const c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    n.focus(), n.nestBlock();\n  }, [n]);\n  return !(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => !o.find(\n    (d) => n.schema.blockSchema[d.type].content !== \"inline\"\n  ), [n.schema.blockSchema, o]) || !n.isEditable ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    t.FormattingToolbar.Button,\n    {\n      className: \"bn-button\",\n      \"data-test\": \"nestBlock\",\n      onClick: c,\n      isDisabled: !r,\n      label: e.formatting_toolbar.nest.tooltip,\n      mainTooltip: e.formatting_toolbar.nest.tooltip,\n      secondaryTooltip: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.formatKeyboardShortcut)(\n        e.formatting_toolbar.nest.secondary_tooltip,\n        e.generic.ctrl_shortcut\n      ),\n      icon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(io, {})\n    }\n  );\n}, $o = () => {\n  const e = M(), t = C(), n = b(), o = R(n), [r, l] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n    () => n.canUnnestBlock()\n  );\n  U(() => {\n    l(n.canUnnestBlock());\n  }, n);\n  const c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    n.focus(), n.unnestBlock();\n  }, [n]);\n  return !(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => !o.find(\n    (d) => n.schema.blockSchema[d.type].content !== \"inline\"\n  ), [n.schema.blockSchema, o]) || !n.isEditable ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    t.FormattingToolbar.Button,\n    {\n      className: \"bn-button\",\n      \"data-test\": \"unnestBlock\",\n      onClick: c,\n      isDisabled: !r,\n      label: e.formatting_toolbar.unnest.tooltip,\n      mainTooltip: e.formatting_toolbar.unnest.tooltip,\n      secondaryTooltip: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.formatKeyboardShortcut)(\n        e.formatting_toolbar.unnest.secondary_tooltip,\n        e.generic.ctrl_shortcut\n      ),\n      icon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ro, {})\n    }\n  );\n}, qo = (e) => [\n  {\n    name: e.slash_menu.paragraph.title,\n    type: \"paragraph\",\n    icon: _e,\n    isSelected: (t) => t.type === \"paragraph\"\n  },\n  {\n    name: e.slash_menu.heading.title,\n    type: \"heading\",\n    props: { level: 1 },\n    icon: ft,\n    isSelected: (t) => t.type === \"heading\" && \"level\" in t.props && t.props.level === 1\n  },\n  {\n    name: e.slash_menu.heading_2.title,\n    type: \"heading\",\n    props: { level: 2 },\n    icon: gt,\n    isSelected: (t) => t.type === \"heading\" && \"level\" in t.props && t.props.level === 2\n  },\n  {\n    name: e.slash_menu.heading_3.title,\n    type: \"heading\",\n    props: { level: 3 },\n    icon: bt,\n    isSelected: (t) => t.type === \"heading\" && \"level\" in t.props && t.props.level === 3\n  },\n  {\n    name: e.slash_menu.quote.title,\n    type: \"quote\",\n    icon: vt,\n    isSelected: (t) => t.type === \"quote\"\n  },\n  {\n    name: e.slash_menu.bullet_list.title,\n    type: \"bulletListItem\",\n    icon: wt,\n    isSelected: (t) => t.type === \"bulletListItem\"\n  },\n  {\n    name: e.slash_menu.numbered_list.title,\n    type: \"numberedListItem\",\n    icon: kt,\n    isSelected: (t) => t.type === \"numberedListItem\"\n  },\n  {\n    name: e.slash_menu.check_list.title,\n    type: \"checkListItem\",\n    icon: pt,\n    isSelected: (t) => t.type === \"checkListItem\"\n  }\n], Ko = (e) => {\n  const t = C(), n = M(), o = b(), r = R(o), [l, c] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(o.getTextCursorPosition().block), s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => (e.items || qo(n)).filter(\n    (u) => u.type in o.schema.blockSchema\n  ), [o, n, e.items]), d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(\n    () => s.find((u) => u.type === l.type) !== void 0,\n    [l.type, s]\n  ), a = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    const u = (m) => {\n      o.focus();\n      for (const h of r)\n        o.updateBlock(h, {\n          type: m.type,\n          props: m.props\n        });\n    };\n    return s.map((m) => {\n      const h = m.icon;\n      return {\n        text: m.name,\n        icon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(h, { size: 16 }),\n        onClick: () => u(m),\n        isSelected: m.isSelected(l)\n      };\n    });\n  }, [l, s, o, r]);\n  return U(() => {\n    c(o.getTextCursorPosition().block);\n  }, o), !d || !o.isEditable ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    t.FormattingToolbar.Select,\n    {\n      className: \"bn-select\",\n      items: a\n    }\n  );\n}, Xo = () => {\n  const e = M(), t = C(), n = b(), o = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    var r;\n    (r = n.comments) == null || r.startPendingComment(), n.formattingToolbar.closeMenu();\n  }, [n]);\n  return n.comments ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    t.FormattingToolbar.Button,\n    {\n      className: \"bn-button\",\n      label: e.formatting_toolbar.comment.tooltip,\n      mainTooltip: e.formatting_toolbar.comment.tooltip,\n      icon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ht, {}),\n      onClick: o\n    }\n  ) : null;\n}, Yo = () => {\n  const e = M(), t = C(), n = b(), o = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    n._tiptapEditor.chain().focus().addPendingComment().run();\n  }, [n]);\n  return (\n    // We manually check if a comment extension (like liveblocks) is installed\n    // By adding default support for this, the user doesn't need to customize the formatting toolbar\n    !n._tiptapEditor.commands.addPendingComment || !n.isEditable ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      t.FormattingToolbar.Button,\n      {\n        className: \"bn-button\",\n        label: e.formatting_toolbar.comment.tooltip,\n        mainTooltip: e.formatting_toolbar.comment.tooltip,\n        icon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ht, {}),\n        onClick: o\n      }\n    )\n  );\n};\nfunction ve(e, t) {\n  try {\n    const n = new URL(e, t);\n    if (n.protocol !== \"javascript:\")\n      return n.href;\n  } catch {\n  }\n  return \"#\";\n}\nconst Jo = () => {\n  const e = M(), t = C(), n = b(), o = R(n), r = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    if (o.length !== 1)\n      return;\n    const c = o[0];\n    if ((0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.checkBlockIsFileBlock)(c, n))\n      return c;\n  }, [n, o]), l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    r && r.props.url && (n.focus(), n.resolveFileUrl ? n.resolveFileUrl(r.props.url).then(\n      (c) => window.open(ve(c, window.location.href))\n    ) : window.open(ve(r.props.url, window.location.href)));\n  }, [n, r]);\n  return !r || (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.checkBlockIsFileBlockWithPlaceholder)(r, n) ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    t.FormattingToolbar.Button,\n    {\n      className: \"bn-button\",\n      label: e.formatting_toolbar.file_download.tooltip[r.type] || e.formatting_toolbar.file_download.tooltip.file,\n      mainTooltip: e.formatting_toolbar.file_download.tooltip[r.type] || e.formatting_toolbar.file_download.tooltip.file,\n      icon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Ho, {}),\n      onClick: l\n    }\n  );\n}, Qo = () => {\n  const e = M(), t = C(), n = b(), o = R(n), r = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    if (o.length !== 1)\n      return;\n    const c = o[0];\n    if ((0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.checkBlockIsFileBlockWithPreview)(c, n))\n      return c;\n  }, [n, o]), l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    r && n.updateBlock(r, {\n      props: {\n        showPreview: !r.props.showPreview\n        // TODO\n      }\n    });\n  }, [n, r]);\n  return !r || (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.checkBlockIsFileBlockWithPlaceholder)(r, n) || !n.isEditable ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    t.FormattingToolbar.Button,\n    {\n      className: \"bn-button\",\n      label: \"Toggle preview\",\n      mainTooltip: e.formatting_toolbar.file_preview_toggle.tooltip,\n      icon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(go, {}),\n      isSelected: r.props.showPreview,\n      onClick: l\n    }\n  );\n}, er = () => {\n  const e = M(), t = C(), n = b(), o = R(n), r = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    var s;\n    if (o.length !== 1)\n      return;\n    const c = o[0];\n    if (c.type === \"table\")\n      return (s = n.tableHandles) == null ? void 0 : s.getMergeDirection(c);\n  }, [n, o]), l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    var c;\n    (c = n.tableHandles) == null || c.mergeCells();\n  }, [n]);\n  return !n.isEditable || r === void 0 || !n.settings.tables.splitCells ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    t.FormattingToolbar.Button,\n    {\n      className: \"bn-button\",\n      label: e.formatting_toolbar.table_cell_merge.tooltip,\n      mainTooltip: e.formatting_toolbar.table_cell_merge.tooltip,\n      icon: r === \"horizontal\" ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ao, {}) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(so, {}),\n      onClick: l\n    }\n  );\n}, tr = {\n  left: eo,\n  center: Jn,\n  right: to,\n  justify: Qn\n}, be = (e) => {\n  const t = C(), n = M(), o = b(), r = R(o), l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    var u;\n    const a = r[0];\n    if ((0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.checkBlockHasDefaultProp)(\"textAlignment\", a, o))\n      return a.props.textAlignment;\n    if (a.type === \"table\") {\n      const m = (u = o.tableHandles) == null ? void 0 : u.getCellSelection();\n      if (!m)\n        return;\n      const h = m.cells.map(\n        ({ row: w, col: H }) => (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.mapTableCell)(\n          a.content.rows[w].cells[H]\n        ).props.textAlignment\n      ), f = h[0];\n      if (h.every((w) => w === f))\n        return f;\n    }\n  }, [o, r]), c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (a) => {\n      var u;\n      o.focus();\n      for (const m of r)\n        if ((0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.checkBlockTypeHasDefaultProp)(\"textAlignment\", m.type, o))\n          o.updateBlock(m, {\n            props: { textAlignment: a }\n          });\n        else if (m.type === \"table\") {\n          const h = (u = o.tableHandles) == null ? void 0 : u.getCellSelection();\n          if (!h)\n            continue;\n          const f = m.content.rows.map(\n            (w) => ({\n              ...w,\n              cells: w.cells.map((H) => (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.mapTableCell)(H))\n            })\n          );\n          h.cells.forEach(({ row: w, col: H }) => {\n            f[w].cells[H].props.textAlignment = a;\n          }), o.updateBlock(m, {\n            type: \"table\",\n            content: {\n              ...m.content,\n              type: \"tableContent\",\n              rows: f\n            }\n          }), o.setTextCursorPosition(m);\n        }\n    },\n    [o, r]\n  );\n  if (!(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => !!r.find(\n    (a) => \"textAlignment\" in a.props || a.type === \"table\" && a.children\n  ), [r]) || !o.isEditable)\n    return null;\n  const d = tr[e.textAlignment];\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    t.FormattingToolbar.Button,\n    {\n      className: \"bn-button\",\n      \"data-test\": `alignText${e.textAlignment.slice(0, 1).toUpperCase() + e.textAlignment.slice(1)}`,\n      onClick: () => c(e.textAlignment),\n      isSelected: l === e.textAlignment,\n      label: n.formatting_toolbar[`align_${e.textAlignment}`].tooltip,\n      mainTooltip: n.formatting_toolbar[`align_${e.textAlignment}`].tooltip,\n      icon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(d, {})\n    }\n  );\n}, nr = (e) => [\n  /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Ko, { items: e }, \"blockTypeSelect\"),\n  /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(er, {}, \"tableCellMergeButton\"),\n  /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Go, {}, \"fileCaptionButton\"),\n  /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(jo, {}, \"replaceFileButton\"),\n  /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(zo, {}, \"fileRenameButton\"),\n  /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Uo, {}, \"fileDeleteButton\"),\n  /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Jo, {}, \"fileDownloadButton\"),\n  /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Qo, {}, \"filePreviewButton\"),\n  /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ne, { basicTextStyle: \"bold\" }, \"boldStyleButton\"),\n  /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ne, { basicTextStyle: \"italic\" }, \"italicStyleButton\"),\n  /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    ne,\n    {\n      basicTextStyle: \"underline\"\n    },\n    \"underlineStyleButton\"\n  ),\n  /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ne, { basicTextStyle: \"strike\" }, \"strikeStyleButton\"),\n  /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(be, { textAlignment: \"left\" }, \"textAlignLeftButton\"),\n  /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(be, { textAlignment: \"center\" }, \"textAlignCenterButton\"),\n  /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(be, { textAlignment: \"right\" }, \"textAlignRightButton\"),\n  /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Zo, {}, \"colorStyleButton\"),\n  /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Wo, {}, \"nestBlockButton\"),\n  /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)($o, {}, \"unnestBlockButton\"),\n  /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Ao, {}, \"createLinkButton\"),\n  /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Xo, {}, \"addCommentButton\"),\n  /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Yo, {}, \"addTiptapCommentButton\")\n], St = (e) => {\n  const t = C();\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    t.FormattingToolbar.Root,\n    {\n      className: \"bn-toolbar bn-formatting-toolbar\",\n      children: e.children || nr(e.blockTypeSelectItems)\n    }\n  );\n}, Ye = (e) => {\n  switch (e) {\n    case \"left\":\n      return \"top-start\";\n    case \"center\":\n      return \"top\";\n    case \"right\":\n      return \"top-end\";\n    default:\n      return \"top-start\";\n  }\n}, or = (e) => {\n  const t = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), n = b(), [o, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n    () => {\n      const h = n.getTextCursorPosition().block;\n      return \"textAlignment\" in h.props ? Ye(\n        h.props.textAlignment\n      ) : \"top-start\";\n    }\n  );\n  U(() => {\n    const h = n.getTextCursorPosition().block;\n    \"textAlignment\" in h.props ? r(\n      Ye(\n        h.props.textAlignment\n      )\n    ) : r(\"top-start\");\n  }, n);\n  const l = P(\n    n.formattingToolbar.onUpdate.bind(n.formattingToolbar)\n  ), { isMounted: c, ref: s, style: d, getFloatingProps: a } = G(\n    (l == null ? void 0 : l.show) || !1,\n    (l == null ? void 0 : l.referencePos) || null,\n    3e3,\n    {\n      placement: o,\n      middleware: [(0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.offset)(10), (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.shift)(), (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.flip)()],\n      onOpenChange: (h, f) => {\n        h || (n.formattingToolbar.closeMenu(), n.focus());\n      },\n      ...e.floatingOptions\n    }\n  ), u = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => Po([t, s]), [t, s]);\n  if (!c || !l)\n    return null;\n  if (!l.show && t.current)\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      \"div\",\n      {\n        ref: u,\n        style: d,\n        dangerouslySetInnerHTML: { __html: t.current.innerHTML }\n      }\n    );\n  const m = e.formattingToolbar || St;\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { ref: u, style: d, ...a(), children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(m, {}) });\n}, rr = (e) => {\n  const t = C(), n = M();\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    t.LinkToolbar.Button,\n    {\n      className: \"bn-button\",\n      label: n.link_toolbar.delete.tooltip,\n      mainTooltip: n.link_toolbar.delete.tooltip,\n      isSelected: !1,\n      onClick: e.deleteLink,\n      icon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(co, {})\n    }\n  );\n}, ir = (e) => {\n  const t = C(), n = M();\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(t.Generic.Popover.Root, { children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(t.Generic.Popover.Trigger, { children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      t.LinkToolbar.Button,\n      {\n        className: \"bn-button\",\n        mainTooltip: n.link_toolbar.edit.tooltip,\n        isSelected: !1,\n        children: n.link_toolbar.edit.text\n      }\n    ) }),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      t.Generic.Popover.Content,\n      {\n        className: \"bn-popover-content bn-form-popover\",\n        variant: \"form-popover\",\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Vt, { ...e })\n      }\n    )\n  ] });\n}, lr = (e) => {\n  const t = C(), n = M();\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    t.LinkToolbar.Button,\n    {\n      className: \"bn-button\",\n      mainTooltip: n.link_toolbar.open.tooltip,\n      label: n.link_toolbar.open.tooltip,\n      isSelected: !1,\n      onClick: () => {\n        window.open(ve(e.url, window.location.href), \"_blank\");\n      },\n      icon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Mo, {})\n    }\n  );\n}, cr = (e) => {\n  const t = C();\n  return e.children ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(t.LinkToolbar.Root, { className: \"bn-toolbar bn-link-toolbar\", children: e.children }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\n    t.LinkToolbar.Root,\n    {\n      className: \"bn-toolbar bn-link-toolbar\",\n      onMouseEnter: e.stopHideTimer,\n      onMouseLeave: e.startHideTimer,\n      children: [\n        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          ir,\n          {\n            url: e.url,\n            text: e.text,\n            editLink: e.editLink\n          }\n        ),\n        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(lr, { url: e.url }),\n        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(rr, { deleteLink: e.deleteLink })\n      ]\n    }\n  );\n}, ar = (e) => {\n  const t = b(), n = {\n    deleteLink: t.linkToolbar.deleteLink,\n    editLink: t.linkToolbar.editLink,\n    startHideTimer: t.linkToolbar.startHideTimer,\n    stopHideTimer: t.linkToolbar.stopHideTimer\n  }, o = P(\n    t.linkToolbar.onUpdate.bind(t.linkToolbar)\n  ), { isMounted: r, ref: l, style: c, getFloatingProps: s } = G(\n    (o == null ? void 0 : o.show) || !1,\n    (o == null ? void 0 : o.referencePos) || null,\n    4e3,\n    {\n      placement: \"top-start\",\n      middleware: [(0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.offset)(10), (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.flip)()],\n      onOpenChange: (h) => {\n        h || (t.linkToolbar.closeMenu(), t.focus());\n      },\n      ...e.floatingOptions\n    }\n  );\n  if (!r || !o)\n    return null;\n  const { show: d, referencePos: a, ...u } = o, m = e.linkToolbar || cr;\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { ref: l, style: c, ...s(), children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(m, { ...u, ...n }) });\n};\nfunction sr(e) {\n  return p({ attr: { viewBox: \"0 0 1024 1024\" }, child: [{ tag: \"path\", attr: { d: \"M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8Z\" }, child: [] }, { tag: \"path\", attr: { d: \"M192 474h672q8 0 8 8v60q0 8-8 8H160q-8 0-8-8v-60q0-8 8-8Z\" }, child: [] }] })(e);\n}\nconst dr = (e) => {\n  const t = C(), n = M(), o = b(), r = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    const l = e.block.content;\n    if (l !== void 0 && Array.isArray(l) && l.length === 0)\n      o.setTextCursorPosition(e.block), o.openSuggestionMenu(\"/\");\n    else {\n      const s = o.insertBlocks(\n        [{ type: \"paragraph\" }],\n        e.block,\n        \"after\"\n      )[0];\n      o.setTextCursorPosition(s), o.openSuggestionMenu(\"/\");\n    }\n  }, [o, e.block]);\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    t.SideMenu.Button,\n    {\n      className: \"bn-button\",\n      label: n.side_menu.add_block_label,\n      icon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(sr, { size: 24, onClick: r, \"data-test\": \"dragHandleAdd\" })\n    }\n  );\n};\nfunction Tt(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"path\", attr: { fill: \"none\", d: \"M0 0h24v24H0V0z\" }, child: [] }, { tag: \"path\", attr: { d: \"M11 18c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm-2-8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\" }, child: [] }] })(e);\n}\nfunction ur(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"path\", attr: { fill: \"none\", d: \"M0 0h24v24H0z\" }, child: [] }, { tag: \"path\", attr: { d: \"m7 10 5 5 5-5z\" }, child: [] }] })(e);\n}\nconst mr = (e) => {\n  const t = C(), n = b();\n  return !(0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.checkBlockTypeHasDefaultProp)(\"textColor\", e.block.type, n) && !(0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.checkBlockTypeHasDefaultProp)(\"backgroundColor\", e.block.type, n) ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(t.Generic.Menu.Root, { position: \"right\", sub: !0, children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(t.Generic.Menu.Trigger, { sub: !0, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      t.Generic.Menu.Item,\n      {\n        className: \"bn-menu-item\",\n        subTrigger: !0,\n        children: e.children\n      }\n    ) }),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      t.Generic.Menu.Dropdown,\n      {\n        sub: !0,\n        className: \"bn-menu-dropdown bn-color-picker-dropdown\",\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          me,\n          {\n            iconSize: 18,\n            text: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.checkBlockTypeHasDefaultProp)(\n              \"textColor\",\n              e.block.type,\n              n\n            ) && (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.checkBlockHasDefaultProp)(\"textColor\", e.block, n) ? {\n              color: e.block.props.textColor,\n              setColor: (o) => n.updateBlock(e.block, {\n                type: e.block.type,\n                props: { textColor: o }\n              })\n            } : void 0,\n            background: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.checkBlockTypeHasDefaultProp)(\n              \"backgroundColor\",\n              e.block.type,\n              n\n            ) && (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.checkBlockHasDefaultProp)(\"backgroundColor\", e.block, n) ? {\n              color: e.block.props.backgroundColor,\n              setColor: (o) => n.updateBlock(e.block, {\n                props: { backgroundColor: o }\n              })\n            } : void 0\n          }\n        )\n      }\n    )\n  ] });\n}, hr = (e) => {\n  const t = C(), n = b();\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    t.Generic.Menu.Item,\n    {\n      className: \"bn-menu-item\",\n      onClick: () => n.removeBlocks([e.block]),\n      children: e.children\n    }\n  );\n}, fr = (e) => {\n  const t = C(), n = b();\n  if (e.block.type !== \"table\" || !n.settings.tables.headers)\n    return null;\n  const o = !!e.block.content.headerRows;\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    t.Generic.Menu.Item,\n    {\n      className: \"bn-menu-item\",\n      checked: o,\n      onClick: () => {\n        const r = n.getBlock(e.block.id);\n        r && n.updateBlock(r, {\n          ...r,\n          content: {\n            ...r.content,\n            headerRows: o ? void 0 : 1\n          }\n        });\n      },\n      children: e.children\n    }\n  );\n}, gr = (e) => {\n  const t = C(), n = b();\n  if (e.block.type !== \"table\" || !n.settings.tables.headers)\n    return null;\n  const o = !!e.block.content.headerCols;\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    t.Generic.Menu.Item,\n    {\n      className: \"bn-menu-item\",\n      checked: o,\n      onClick: () => {\n        n.updateBlock(e.block, {\n          type: \"table\",\n          content: {\n            ...e.block.content,\n            type: \"tableContent\",\n            headerCols: o ? void 0 : 1\n          }\n        });\n      },\n      children: e.children\n    }\n  );\n}, br = (e) => {\n  const t = C(), n = M();\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    t.Generic.Menu.Dropdown,\n    {\n      className: \"bn-menu-dropdown bn-drag-handle-menu\",\n      children: e.children || /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children: [\n        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(hr, { ...e, children: n.drag_handle.delete_menuitem }),\n        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(mr, { ...e, children: n.drag_handle.colors_menuitem }),\n        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(fr, { ...e, children: n.drag_handle.header_row_menuitem }),\n        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(gr, { ...e, children: n.drag_handle.header_column_menuitem })\n      ] })\n    }\n  );\n}, Cr = (e) => {\n  const t = C(), n = M(), o = e.dragHandleMenu || br;\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\n    t.Generic.Menu.Root,\n    {\n      onOpenChange: (r) => {\n        r ? e.freezeMenu() : e.unfreezeMenu();\n      },\n      position: \"left\",\n      children: [\n        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(t.Generic.Menu.Trigger, { children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          t.SideMenu.Button,\n          {\n            label: n.side_menu.drag_handle_label,\n            draggable: !0,\n            onDragStart: (r) => e.blockDragStart(r, e.block),\n            onDragEnd: e.blockDragEnd,\n            className: \"bn-button\",\n            icon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Tt, { size: 24, \"data-test\": \"dragHandle\" })\n          }\n        ) }),\n        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(o, { block: e.block, children: e.children })\n      ]\n    }\n  );\n}, pr = (e) => {\n  const t = C(), n = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    const o = {\n      \"data-block-type\": e.block.type\n    };\n    return e.block.type === \"heading\" && (o[\"data-level\"] = e.block.props.level.toString()), e.editor.schema.blockSchema[e.block.type].isFileBlock && (e.block.props.url ? o[\"data-url\"] = \"true\" : o[\"data-url\"] = \"false\"), o;\n  }, [e.block, e.editor.schema.blockSchema]);\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(t.SideMenu.Root, { className: \"bn-side-menu\", ...n, children: e.children || /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(dr, { ...e }),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Cr, { ...e })\n  ] }) });\n}, kr = (e) => {\n  const t = b(), n = {\n    blockDragStart: t.sideMenu.blockDragStart,\n    blockDragEnd: t.sideMenu.blockDragEnd,\n    freezeMenu: t.sideMenu.freezeMenu,\n    unfreezeMenu: t.sideMenu.unfreezeMenu\n  }, o = P(\n    t.sideMenu.onUpdate.bind(t.sideMenu)\n  ), { isMounted: r, ref: l, style: c, getFloatingProps: s } = G(\n    (o == null ? void 0 : o.show) || !1,\n    (o == null ? void 0 : o.referencePos) || null,\n    1e3,\n    {\n      placement: \"left-start\",\n      ...e.floatingOptions\n    }\n  );\n  if (!r || !o)\n    return null;\n  const { show: d, referencePos: a, ...u } = o, m = e.sideMenu || pr;\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { ref: l, style: c, ...s(), children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(m, { ...u, ...n, editor: t }) });\n};\nasync function wr(e, t) {\n  return (await (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.getDefaultEmojiPickerItems)(e, t)).map(\n    ({ id: n, onItemClick: o }) => ({\n      id: n,\n      onItemClick: o,\n      icon: n\n    })\n  );\n}\nfunction vr(e) {\n  const t = C(), n = M(), { items: o, loadingState: r, selectedIndex: l, onItemClick: c, columns: s } = e, d = r === \"loading-initial\" || r === \"loading\" ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    t.GridSuggestionMenu.Loader,\n    {\n      className: \"bn-grid-suggestion-menu-loader\",\n      columns: s,\n      children: n.suggestion_menu.loading\n    }\n  ) : null, a = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    const u = [];\n    for (let m = 0; m < o.length; m++) {\n      const h = o[m];\n      u.push(\n        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          t.GridSuggestionMenu.Item,\n          {\n            className: \"bn-grid-suggestion-menu-item\",\n            item: h,\n            id: `bn-grid-suggestion-menu-item-${m}`,\n            isSelected: m === l,\n            onClick: () => c == null ? void 0 : c(h)\n          },\n          h.id\n        )\n      );\n    }\n    return u;\n  }, [t, o, c, l]);\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\n    t.GridSuggestionMenu.Root,\n    {\n      id: \"bn-grid-suggestion-menu\",\n      columns: s,\n      className: \"bn-grid-suggestion-menu\",\n      children: [\n        d,\n        a,\n        a.length === 0 && e.loadingState === \"loaded\" && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          t.GridSuggestionMenu.EmptyItem,\n          {\n            className: \"bn-grid-suggestion-menu-empty-item\",\n            columns: s,\n            children: n.suggestion_menu.no_items_title\n          }\n        )\n      ]\n    }\n  );\n}\nfunction Lt(e, t, n, o = 3) {\n  const r = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    t !== void 0 && (e.length > 0 ? r.current = t.length : t.length - r.current > o && n());\n  }, [n, o, e.length, t]);\n}\nfunction Et(e, t) {\n  const [n, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]), [r, l] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const d = e;\n    c.current = e, l(!0), t(e).then((a) => {\n      c.current === d && (o(a), l(!1), s.current = d);\n    });\n  }, [e, t]), {\n    items: n || [],\n    // The query that was used to retrieve the last set of items may not be the\n    // same as the current query as the items from the current query may not\n    // have been retrieved yet. This is useful when using the returns of this\n    // hook in other hooks.\n    usedQuery: s.current,\n    loadingState: s.current === void 0 ? \"loading-initial\" : r ? \"loading\" : \"loaded\"\n  };\n}\nfunction Hr(e, t, n, o, r) {\n  const [l, c] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0), s = o !== void 0 && o > 1;\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    var a;\n    const d = (u) => (u.key === \"ArrowLeft\" && (u.preventDefault(), n.length && c((l - 1 + n.length) % n.length)), u.key === \"ArrowRight\" && (u.preventDefault(), n.length && c((l + 1 + n.length) % n.length)), u.key === \"ArrowUp\" ? (u.preventDefault(), n.length && c(\n      (l - o + n.length) % n.length\n    ), !0) : u.key === \"ArrowDown\" ? (u.preventDefault(), n.length && c((l + o) % n.length), !0) : u.key === \"Enter\" && !u.isComposing ? (u.preventDefault(), n.length && (r == null || r(n[l])), !0) : !1);\n    return (a = e.domElement) == null || a.addEventListener(\n      \"keydown\",\n      d,\n      !0\n    ), () => {\n      var u;\n      (u = e.domElement) == null || u.removeEventListener(\n        \"keydown\",\n        d,\n        !0\n      );\n    };\n  }, [e.domElement, n, l, r, o, s]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    c(0);\n  }, [t]), {\n    selectedIndex: n.length === 0 ? void 0 : l\n  };\n}\nfunction Mr(e) {\n  const n = D().setContentEditableProps, o = b(), {\n    getItems: r,\n    gridSuggestionMenuComponent: l,\n    query: c,\n    clearQuery: s,\n    closeMenu: d,\n    onItemClick: a,\n    columns: u\n  } = e, m = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (V) => {\n      d(), s(), a == null || a(V);\n    },\n    [a, d, s]\n  ), { items: h, usedQuery: f, loadingState: w } = Et(\n    c,\n    r\n  );\n  Lt(h, f, d);\n  const { selectedIndex: H } = Hr(\n    o,\n    c,\n    h,\n    u,\n    m\n  );\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => (n((V) => ({\n    ...V,\n    \"aria-expanded\": !0,\n    \"aria-controls\": \"bn-suggestion-menu\"\n  })), () => {\n    n((V) => ({\n      ...V,\n      \"aria-expanded\": !1,\n      \"aria-controls\": void 0\n    }));\n  }), [n]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => (n((V) => ({\n    ...V,\n    \"aria-activedescendant\": H ? \"bn-suggestion-menu-item-\" + H : void 0\n  })), () => {\n    n((V) => ({\n      ...V,\n      \"aria-activedescendant\": void 0\n    }));\n  }), [n, H]), /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    l,\n    {\n      items: h,\n      onItemClick: m,\n      loadingState: w,\n      selectedIndex: H,\n      columns: u\n    }\n  );\n}\nfunction xr(e) {\n  const t = b(), {\n    triggerCharacter: n,\n    gridSuggestionMenuComponent: o,\n    columns: r,\n    minQueryLength: l,\n    onItemClick: c,\n    getItems: s,\n    floatingOptions: d\n  } = e, a = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => c || ((S) => {\n    S.onItemClick(t);\n  }), [t, c]), u = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => s || (async (S) => await wr(\n    t,\n    S\n  )), [t, s]), m = {\n    closeMenu: t.suggestionMenus.closeMenu,\n    clearQuery: t.suggestionMenus.clearQuery\n  }, h = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (S) => t.suggestionMenus.onUpdate(n, S),\n    [t.suggestionMenus, n]\n  ), f = P(h), { isMounted: w, ref: H, style: B, getFloatingProps: V } = G(\n    (f == null ? void 0 : f.show) || !1,\n    (f == null ? void 0 : f.referencePos) || null,\n    2e3,\n    {\n      placement: \"bottom-start\",\n      middleware: [\n        (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.offset)(10),\n        // Flips the menu placement to maximize the space available, and prevents\n        // the menu from being cut off by the confines of the screen.\n        (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.flip)(),\n        (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.size)({\n          apply({ availableHeight: S, elements: O }) {\n            Object.assign(O.floating.style, {\n              maxHeight: `${S - 10}px`\n            });\n          }\n        })\n      ],\n      onOpenChange(S) {\n        S || t.suggestionMenus.closeMenu();\n      },\n      ...d\n    }\n  );\n  return !w || !f || !(f != null && f.ignoreQueryLength) && l && (f.query.startsWith(\" \") || f.query.length < l) ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { ref: H, style: B, ...V(), children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    Mr,\n    {\n      query: f.query,\n      closeMenu: m.closeMenu,\n      clearQuery: m.clearQuery,\n      getItems: u,\n      columns: r,\n      gridSuggestionMenuComponent: o || vr,\n      onItemClick: a\n    }\n  ) });\n}\nfunction yr(e) {\n  const t = C(), n = M(), { items: o, loadingState: r, selectedIndex: l, onItemClick: c } = e, s = r === \"loading-initial\" || r === \"loading\" ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(t.SuggestionMenu.Loader, { className: \"bn-suggestion-menu-loader\", children: n.suggestion_menu.loading }) : null, d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    let a;\n    const u = [];\n    for (let m = 0; m < o.length; m++) {\n      const h = o[m];\n      h.group !== a && (a = h.group, u.push(\n        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          t.SuggestionMenu.Label,\n          {\n            className: \"bn-suggestion-menu-label\",\n            children: a\n          },\n          a\n        )\n      )), u.push(\n        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          t.SuggestionMenu.Item,\n          {\n            className: \"bn-suggestion-menu-item\",\n            item: h,\n            id: `bn-suggestion-menu-item-${m}`,\n            isSelected: m === l,\n            onClick: () => c == null ? void 0 : c(h)\n          },\n          h.title\n        )\n      );\n    }\n    return u;\n  }, [t, o, c, l]);\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\n    t.SuggestionMenu.Root,\n    {\n      id: \"bn-suggestion-menu\",\n      className: \"bn-suggestion-menu\",\n      children: [\n        d,\n        d.length === 0 && (e.loadingState === \"loading\" || e.loadingState === \"loaded\") && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          t.SuggestionMenu.EmptyItem,\n          {\n            className: \"bn-suggestion-menu-item\",\n            children: n.suggestion_menu.no_items_title\n          }\n        ),\n        s\n      ]\n    }\n  );\n}\nfunction Br(e, t, n, o) {\n  const [r, l] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    var s;\n    const c = (d) => d.key === \"ArrowUp\" ? (d.preventDefault(), n.length && l((r - 1 + n.length) % n.length), !0) : d.key === \"ArrowDown\" ? (d.preventDefault(), n.length && l((r + 1) % n.length), !0) : d.key === \"Enter\" && !d.isComposing ? (d.preventDefault(), d.stopPropagation(), n.length && (o == null || o(n[r])), !0) : !1;\n    return (s = e.domElement) == null || s.addEventListener(\n      \"keydown\",\n      c,\n      !0\n    ), () => {\n      var d;\n      (d = e.domElement) == null || d.removeEventListener(\n        \"keydown\",\n        c,\n        !0\n      );\n    };\n  }, [e.domElement, n, r, o]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    l(0);\n  }, [t]), {\n    selectedIndex: n.length === 0 ? void 0 : r\n  };\n}\nfunction Vr(e) {\n  const n = D().setContentEditableProps, o = b(), {\n    getItems: r,\n    suggestionMenuComponent: l,\n    query: c,\n    clearQuery: s,\n    closeMenu: d,\n    onItemClick: a\n  } = e, u = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (B) => {\n      d(), s(), a == null || a(B);\n    },\n    [a, d, s]\n  ), { items: m, usedQuery: h, loadingState: f } = Et(\n    c,\n    r\n  );\n  Lt(m, h, d);\n  const { selectedIndex: w } = Br(\n    o,\n    c,\n    m,\n    u\n  );\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => (n((B) => ({\n    ...B,\n    \"aria-expanded\": !0,\n    \"aria-controls\": \"bn-suggestion-menu\"\n  })), () => {\n    n((B) => ({\n      ...B,\n      \"aria-expanded\": !1,\n      \"aria-controls\": void 0\n    }));\n  }), [n]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => (n((B) => ({\n    ...B,\n    \"aria-activedescendant\": w ? \"bn-suggestion-menu-item-\" + w : void 0\n  })), () => {\n    n((B) => ({\n      ...B,\n      \"aria-activedescendant\": void 0\n    }));\n  }), [n, w]), /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    l,\n    {\n      items: m,\n      onItemClick: u,\n      loadingState: f,\n      selectedIndex: w\n    }\n  );\n}\nconst Sr = {\n  heading: ft,\n  heading_2: gt,\n  heading_3: bt,\n  quote: vt,\n  numbered_list: kt,\n  bullet_list: wt,\n  check_list: pt,\n  paragraph: _e,\n  table: mo,\n  image: Ht,\n  video: fo,\n  audio: Mt,\n  file: Re,\n  emoji: yo,\n  code_block: oo\n};\nfunction Tr(e) {\n  return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.getDefaultSlashMenuItems)(e).map((t) => {\n    const n = Sr[t.key];\n    return {\n      ...t,\n      icon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(n, { size: 18 })\n    };\n  });\n}\nfunction Lr(e) {\n  const t = b(), {\n    triggerCharacter: n,\n    suggestionMenuComponent: o,\n    minQueryLength: r,\n    onItemClick: l,\n    getItems: c,\n    floatingOptions: s\n  } = e, d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => l || ((V) => {\n    V.onItemClick(t);\n  }), [t, l]), a = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => c || (async (V) => (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.filterSuggestionItems)(\n    Tr(t),\n    V\n  )), [t, c]), u = {\n    closeMenu: t.suggestionMenus.closeMenu,\n    clearQuery: t.suggestionMenus.clearQuery\n  }, m = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (V) => t.suggestionMenus.onUpdate(n, V),\n    [t.suggestionMenus, n]\n  ), h = P(m), { isMounted: f, ref: w, style: H, getFloatingProps: B } = G(\n    (h == null ? void 0 : h.show) || !1,\n    (h == null ? void 0 : h.referencePos) || null,\n    2e3,\n    {\n      placement: \"bottom-start\",\n      middleware: [\n        (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.offset)(10),\n        // Flips the menu placement to maximize the space available, and prevents\n        // the menu from being cut off by the confines of the screen.\n        (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.flip)({\n          mainAxis: !0,\n          crossAxis: !1\n        }),\n        (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.shift)(),\n        (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.size)({\n          apply({ availableHeight: V, elements: S }) {\n            Object.assign(S.floating.style, {\n              maxHeight: `${V - 10}px`\n            });\n          }\n        })\n      ],\n      onOpenChange(V) {\n        V || t.suggestionMenus.closeMenu();\n      },\n      ...s\n    }\n  );\n  return !f || !h || !(h != null && h.ignoreQueryLength) && r && (h.query.startsWith(\" \") || h.query.length < r) ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { ref: w, style: H, ...B(), children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    Vr,\n    {\n      query: h.query,\n      closeMenu: u.closeMenu,\n      clearQuery: u.clearQuery,\n      getItems: a,\n      suggestionMenuComponent: o || yr,\n      onItemClick: d\n    }\n  ) });\n}\nconst Er = (e, t = 0.3) => {\n  const n = Math.floor(e) + t, o = Math.ceil(e) - t;\n  return e >= n && e <= o ? Math.round(e) : e < n ? Math.floor(e) : Math.ceil(e);\n}, Rr = (e) => {\n  const t = C(), n = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(!1), [o, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (s) => {\n      e.onMouseDown(), r({\n        originalContent: e.block.content,\n        originalCroppedContent: {\n          rows: e.editor.tableHandles.cropEmptyRowsOrColumns(\n            e.block,\n            e.orientation === \"addOrRemoveColumns\" ? \"columns\" : \"rows\"\n          )\n        },\n        startPos: e.orientation === \"addOrRemoveColumns\" ? s.clientX : s.clientY\n      }), n.current = !1, s.preventDefault();\n    },\n    [e]\n  ), c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    n.current || e.editor.updateBlock(e.block, {\n      type: \"table\",\n      content: {\n        ...e.block.content,\n        rows: e.orientation === \"addOrRemoveColumns\" ? e.editor.tableHandles.addRowsOrColumns(\n          e.block,\n          \"columns\",\n          1\n        ) : e.editor.tableHandles.addRowsOrColumns(\n          e.block,\n          \"rows\",\n          1\n        )\n      }\n    });\n  }, [e.block, e.orientation, e.editor]);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const s = (d) => {\n      var w, H;\n      if (!o)\n        throw new Error(\"editingState is undefined\");\n      n.current = !0;\n      const a = (e.orientation === \"addOrRemoveColumns\" ? d.clientX : d.clientY) - o.startPos, u = e.orientation === \"addOrRemoveColumns\" ? ((w = o.originalCroppedContent.rows[0]) == null ? void 0 : w.cells.length) ?? 0 : o.originalCroppedContent.rows.length, m = e.orientation === \"addOrRemoveColumns\" ? ((H = o.originalContent.rows[0]) == null ? void 0 : H.cells.length) ?? 0 : o.originalContent.rows.length, h = e.orientation === \"addOrRemoveColumns\" ? e.block.content.rows[0].cells.length : e.block.content.rows.length, f = m + Er(\n        a / (e.orientation === \"addOrRemoveColumns\" ? _blocknote_core__WEBPACK_IMPORTED_MODULE_5__.EMPTY_CELL_WIDTH : _blocknote_core__WEBPACK_IMPORTED_MODULE_5__.EMPTY_CELL_HEIGHT),\n        0.3\n      );\n      f >= u && f > 0 && f !== h && (e.editor.updateBlock(e.block, {\n        type: \"table\",\n        content: {\n          ...e.block.content,\n          rows: e.orientation === \"addOrRemoveColumns\" ? e.editor.tableHandles.addRowsOrColumns(\n            {\n              type: \"table\",\n              content: o.originalCroppedContent\n            },\n            \"columns\",\n            f - u\n          ) : e.editor.tableHandles.addRowsOrColumns(\n            {\n              type: \"table\",\n              content: o.originalCroppedContent\n            },\n            \"rows\",\n            f - u\n          )\n        }\n      }), e.block.content && e.editor.setTextCursorPosition(e.block));\n    };\n    return o && window.addEventListener(\"mousemove\", s), () => {\n      window.removeEventListener(\"mousemove\", s);\n    };\n  }, [o, e.block, e.editor, e.orientation]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const s = e.onMouseUp, d = () => {\n      r(void 0), s();\n    };\n    return o && window.addEventListener(\"mouseup\", d), () => {\n      window.removeEventListener(\"mouseup\", d);\n    };\n  }, [o, e.onMouseUp]), /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    t.TableHandle.ExtendButton,\n    {\n      className: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.mergeCSSClasses)(\n        \"bn-extend-button\",\n        e.orientation === \"addOrRemoveColumns\" ? \"bn-extend-button-add-remove-columns\" : \"bn-extend-button-add-remove-rows\",\n        o !== null ? \"bn-extend-button-editing\" : \"\"\n      ),\n      onClick: c,\n      onMouseDown: l,\n      children: e.children || /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(po, { size: 18, \"data-test\": \"extendButton\" })\n    }\n  );\n}, Je = (e) => {\n  const t = C(), n = M(), r = b().tableHandles;\n  return r ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    t.Generic.Menu.Item,\n    {\n      onClick: () => {\n        r.addRowOrColumn(\n          e.index,\n          e.orientation === \"row\" ? { orientation: \"row\", side: e.side } : { orientation: \"column\", side: e.side }\n        );\n      },\n      children: n.table_handle[`add_${e.side}_menuitem`]\n    }\n  ) : null;\n}, _r = (e) => {\n  const t = C(), n = M(), r = b().tableHandles;\n  return r ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    t.Generic.Menu.Item,\n    {\n      onClick: () => {\n        r.removeRowOrColumn(e.index, e.orientation);\n      },\n      children: e.orientation === \"row\" ? n.table_handle.delete_row_menuitem : n.table_handle.delete_column_menuitem\n    }\n  ) : null;\n}, Ir = (e) => {\n  const t = C(), n = M(), o = b(), r = o.tableHandles, l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => !r || !e.block ? [] : e.orientation === \"row\" ? r.getCellsAtRowHandle(e.block, e.index) : r.getCellsAtColumnHandle(e.block, e.index), [e.block, e.index, e.orientation, r]), c = (d, a) => {\n    const u = e.block.content.rows.map((m) => ({\n      ...m,\n      cells: m.cells.map((h) => (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.mapTableCell)(h))\n    }));\n    l.forEach(({ row: m, col: h }) => {\n      a === \"text\" ? u[m].cells[h].props.textColor = d : u[m].cells[h].props.backgroundColor = d;\n    }), o.updateBlock(e.block, {\n      type: \"table\",\n      content: {\n        ...e.block.content,\n        rows: u\n      }\n    }), o.setTextCursorPosition(e.block);\n  };\n  if (!l || !l[0] || !r || o.settings.tables.cellTextColor === !1 && o.settings.tables.cellBackgroundColor === !1)\n    return null;\n  const s = (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.mapTableCell)(l[0].cell);\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(t.Generic.Menu.Root, { position: \"right\", sub: !0, children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(t.Generic.Menu.Trigger, { sub: !0, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      t.Generic.Menu.Item,\n      {\n        className: \"bn-menu-item\",\n        subTrigger: !0,\n        children: e.children || n.drag_handle.colors_menuitem\n      }\n    ) }),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      t.Generic.Menu.Dropdown,\n      {\n        sub: !0,\n        className: \"bn-menu-dropdown bn-color-picker-dropdown\",\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          me,\n          {\n            iconSize: 18,\n            text: o.settings.tables.cellTextColor ? {\n              // All cells have the same text color\n              color: l.every(\n                ({ cell: d }) => (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.isTableCell)(d) && d.props.textColor === s.props.textColor\n              ) ? s.props.textColor : \"default\",\n              setColor: (d) => {\n                c(d, \"text\");\n              }\n            } : void 0,\n            background: o.settings.tables.cellBackgroundColor ? {\n              color: l.every(\n                ({ cell: d }) => (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.isTableCell)(d) && d.props.backgroundColor === s.props.backgroundColor\n              ) ? s.props.backgroundColor : \"default\",\n              setColor: (d) => c(d, \"background\")\n            } : void 0\n          }\n        )\n      }\n    )\n  ] });\n}, Nr = (e) => {\n  const t = C(), n = M(), o = b();\n  if (!o.tableHandles || e.index !== 0 || e.orientation !== \"row\" || !o.settings.tables.headers)\n    return null;\n  const l = !!e.block.content.headerRows;\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    t.Generic.Menu.Item,\n    {\n      className: \"bn-menu-item\",\n      checked: l,\n      onClick: () => {\n        const c = o.getBlock(e.block.id);\n        c && o.updateBlock(c, {\n          ...c,\n          content: {\n            ...c.content,\n            headerRows: l ? void 0 : 1\n          }\n        });\n      },\n      children: n.drag_handle.header_row_menuitem\n    }\n  );\n}, Pr = (e) => {\n  const t = C(), n = M(), o = b();\n  if (!o.tableHandles || e.index !== 0 || e.orientation !== \"column\" || !o.settings.tables.headers)\n    return null;\n  const l = !!e.block.content.headerCols;\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    t.Generic.Menu.Item,\n    {\n      className: \"bn-menu-item\",\n      checked: l,\n      onClick: () => {\n        const c = o.getBlock(e.block.id);\n        c && o.updateBlock(c, {\n          ...c,\n          content: {\n            ...c.content,\n            headerCols: l ? void 0 : 1\n          }\n        });\n      },\n      children: n.drag_handle.header_column_menuitem\n    }\n  );\n}, Or = (e) => {\n  const t = C();\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(t.Generic.Menu.Dropdown, { className: \"bn-table-handle-menu\", children: e.children || /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      _r,\n      {\n        orientation: e.orientation,\n        block: e.block,\n        index: e.index\n      }\n    ),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      Je,\n      {\n        orientation: e.orientation,\n        block: e.block,\n        index: e.index,\n        side: e.orientation === \"row\" ? \"above\" : \"left\"\n      }\n    ),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      Je,\n      {\n        orientation: e.orientation,\n        block: e.block,\n        index: e.index,\n        side: e.orientation === \"row\" ? \"below\" : \"right\"\n      }\n    ),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      Nr,\n      {\n        orientation: e.orientation,\n        block: e.block,\n        index: e.index\n      }\n    ),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      Pr,\n      {\n        orientation: e.orientation,\n        block: e.block,\n        index: e.index\n      }\n    ),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      Ir,\n      {\n        orientation: e.orientation,\n        block: e.block,\n        index: e.index\n      }\n    )\n  ] }) });\n}, Dr = (e) => {\n  const t = C(), [n, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), r = e.tableHandleMenu || Or, l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    const c = e.editor.tableHandles;\n    return !c || !e.block ? !1 : e.orientation === \"column\" ? c.getCellsAtColumnHandle(e.block, e.index).every(({ cell: s }) => (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.getColspan)(s) === 1) : c.getCellsAtRowHandle(e.block, e.index).every(({ cell: s }) => (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.getRowspan)(s) === 1);\n  }, [e.block, e.editor.tableHandles, e.index, e.orientation]);\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\n    t.Generic.Menu.Root,\n    {\n      onOpenChange: (c) => {\n        c ? (e.freezeHandles(), e.hideOtherSide()) : (e.unfreezeHandles(), e.showOtherSide(), e.editor.focus());\n      },\n      position: \"right\",\n      children: [\n        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(t.Generic.Menu.Trigger, { children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          t.TableHandle.Root,\n          {\n            className: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.mergeCSSClasses)(\n              \"bn-table-handle\",\n              n ? \"bn-table-handle-dragging\" : \"\",\n              l ? \"\" : \"bn-table-handle-not-draggable\"\n            ),\n            draggable: l,\n            onDragStart: (c) => {\n              o(!0), e.dragStart(c);\n            },\n            onDragEnd: () => {\n              e.dragEnd(), o(!1);\n            },\n            style: e.orientation === \"column\" ? { transform: \"rotate(0.25turn)\" } : void 0,\n            children: e.children || /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Tt, { size: 24, \"data-test\": \"tableHandle\" })\n          }\n        ) }),\n        (0,react_dom__WEBPACK_IMPORTED_MODULE_2__.createPortal)(\n          /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n            r,\n            {\n              orientation: e.orientation,\n              block: e.block,\n              index: e.index\n            }\n          ),\n          e.menuContainer\n        )\n      ]\n    }\n  );\n};\nfunction Qe(e, t, n) {\n  const { refs: o, update: r, context: l, floatingStyles: c } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_4__.useFloating)({\n    open: t,\n    placement: e === \"addOrRemoveColumns\" ? \"right\" : \"bottom\",\n    middleware: [\n      (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.size)({\n        apply({ rects: a, elements: u }) {\n          Object.assign(\n            u.floating.style,\n            e === \"addOrRemoveColumns\" ? {\n              height: `${a.reference.height}px`\n            } : {\n              width: `${a.reference.width}px`\n            }\n          );\n        }\n      })\n    ]\n  }), { isMounted: s, styles: d } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_4__.useTransitionStyles)(l);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    r();\n  }, [n, r]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    n !== null && o.setReference({\n      getBoundingClientRect: () => n\n    });\n  }, [e, n, o]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(\n    () => ({\n      isMounted: s,\n      ref: o.setFloating,\n      style: {\n        display: \"flex\",\n        ...d,\n        ...c\n      }\n    }),\n    [c, s, o.setFloating, d]\n  );\n}\nfunction Zr(e, t, n) {\n  const o = Qe(\n    \"addOrRemoveRows\",\n    t,\n    n\n  ), r = Qe(\n    \"addOrRemoveColumns\",\n    e,\n    n\n  );\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(\n    () => ({\n      addOrRemoveRowsButton: o,\n      addOrRemoveColumnsButton: r\n    }),\n    [r, o]\n  );\n}\nfunction Fr(e, t, n) {\n  return n && n.draggedCellOrientation === \"row\" ? new DOMRect(\n    t.x,\n    n.mousePos,\n    t.width,\n    0\n  ) : new DOMRect(\n    t.x,\n    e.y,\n    t.width,\n    e.height\n  );\n}\nfunction Ar(e, t, n) {\n  return n && n.draggedCellOrientation === \"col\" ? new DOMRect(\n    n.mousePos,\n    t.y,\n    0,\n    t.height\n  ) : new DOMRect(\n    e.x,\n    t.y,\n    e.width,\n    t.height\n  );\n}\nfunction Gr(e) {\n  return new DOMRect(\n    e.x,\n    e.y,\n    e.width,\n    0\n  );\n}\nfunction Ce(e, t, n, o, r) {\n  const { refs: l, update: c, context: s, floatingStyles: d } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_4__.useFloating)({\n    open: t,\n    placement: e === \"row\" ? \"left\" : e === \"col\" ? \"top\" : \"bottom-end\",\n    middleware: [\n      (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.offset)(\n        e === \"row\" ? -10 : e === \"col\" ? -12 : { mainAxis: 1, crossAxis: -1 }\n      )\n    ]\n  }), { isMounted: a, styles: u } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_4__.useTransitionStyles)(s);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    c();\n  }, [n, o, c]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    n === null || o === null || // Ignore cell handle when dragging\n    r && e === \"cell\" || l.setReference({\n      getBoundingClientRect: () => (e === \"row\" ? Fr : e === \"col\" ? Ar : Gr)(n, o, r)\n    });\n  }, [r, e, n, o, l]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(\n    () => ({\n      isMounted: a,\n      ref: l.setFloating,\n      style: {\n        display: \"flex\",\n        ...u,\n        ...d\n      }\n    }),\n    [d, a, l.setFloating, u]\n  );\n}\nfunction Ur(e, t, n, o) {\n  const r = Ce(\n    \"row\",\n    e,\n    t,\n    n,\n    o\n  ), l = Ce(\n    \"col\",\n    e,\n    t,\n    n,\n    o\n  ), c = Ce(\n    \"cell\",\n    e,\n    t,\n    n,\n    o\n  );\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(\n    () => ({\n      rowHandle: r,\n      colHandle: l,\n      cellHandle: c\n    }),\n    [l, r, c]\n  );\n}\nconst zr = (e) => {\n  var c, s;\n  const t = C(), n = M(), o = b(), r = (d, a) => {\n    const u = e.block.content.rows.map((m) => ({\n      ...m,\n      cells: m.cells.map((h) => (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.mapTableCell)(h))\n    }));\n    a === \"text\" ? u[e.rowIndex].cells[e.colIndex].props.textColor = d : u[e.rowIndex].cells[e.colIndex].props.backgroundColor = d, o.updateBlock(e.block, {\n      type: \"table\",\n      content: {\n        ...e.block.content,\n        rows: u\n      }\n    }), o.setTextCursorPosition(e.block);\n  }, l = (s = (c = e.block.content.rows[e.rowIndex]) == null ? void 0 : c.cells) == null ? void 0 : s[e.colIndex];\n  return !l || o.settings.tables.cellTextColor === !1 && o.settings.tables.cellBackgroundColor === !1 ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(t.Generic.Menu.Root, { position: \"right\", sub: !0, children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(t.Generic.Menu.Trigger, { sub: !0, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      t.Generic.Menu.Item,\n      {\n        className: \"bn-menu-item\",\n        subTrigger: !0,\n        children: e.children || n.drag_handle.colors_menuitem\n      }\n    ) }),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      t.Generic.Menu.Dropdown,\n      {\n        sub: !0,\n        className: \"bn-menu-dropdown bn-color-picker-dropdown\",\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          me,\n          {\n            iconSize: 18,\n            text: o.settings.tables.cellTextColor ? {\n              color: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.isTableCell)(l) ? l.props.textColor : \"default\",\n              setColor: (d) => r(d, \"text\")\n            } : void 0,\n            background: o.settings.tables.cellBackgroundColor ? {\n              color: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.isTableCell)(l) ? l.props.backgroundColor : \"default\",\n              setColor: (d) => r(d, \"background\")\n            } : void 0\n          }\n        )\n      }\n    )\n  ] });\n}, jr = (e) => {\n  var l, c;\n  const t = C(), n = M(), o = b(), r = (c = (l = e.block.content.rows[e.rowIndex]) == null ? void 0 : l.cells) == null ? void 0 : c[e.colIndex];\n  return !r || !(0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.isTableCell)(r) || (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.getRowspan)(r) === 1 && (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.getColspan)(r) === 1 || !o.settings.tables.splitCells ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    t.Generic.Menu.Item,\n    {\n      onClick: () => {\n        var s;\n        (s = o.tableHandles) == null || s.splitCell({\n          row: e.rowIndex,\n          col: e.colIndex\n        });\n      },\n      children: n.table_handle.split_cell_menuitem\n    }\n  );\n}, Wr = (e) => {\n  const t = C();\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    t.Generic.Menu.Dropdown,\n    {\n      className: \"bn-menu-dropdown bn-drag-handle-menu\",\n      children: e.children || /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children: [\n        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          jr,\n          {\n            block: e.block,\n            rowIndex: e.rowIndex,\n            colIndex: e.colIndex\n          }\n        ),\n        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          zr,\n          {\n            block: e.block,\n            rowIndex: e.rowIndex,\n            colIndex: e.colIndex\n          }\n        )\n      ] })\n    }\n  );\n}, $r = (e) => {\n  const t = C(), n = e.tableCellMenu || Wr;\n  return !e.editor.settings.tables.splitCells && !e.editor.settings.tables.cellBackgroundColor && !e.editor.settings.tables.cellTextColor ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\n    t.Generic.Menu.Root,\n    {\n      onOpenChange: (o) => {\n        o ? e.freezeHandles() : (e.unfreezeHandles(), e.editor.focus());\n      },\n      position: \"right\",\n      children: [\n        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(t.Generic.Menu.Trigger, { children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(t.Generic.Menu.Button, { className: \"bn-table-cell-handle\", children: e.children || /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ur, { size: 12, \"data-test\": \"tableCellHandle\" }) }) }),\n        (0,react_dom__WEBPACK_IMPORTED_MODULE_2__.createPortal)(\n          /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n            n,\n            {\n              block: e.block,\n              rowIndex: e.rowIndex,\n              colIndex: e.colIndex\n            }\n          ),\n          e.menuContainer\n        )\n      ]\n    }\n  );\n}, qr = (e) => {\n  var $, E;\n  const t = b(), [n, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n  if (!t.tableHandles)\n    throw new Error(\n      \"TableHandlesController can only be used when BlockNote editor schema contains table block\"\n    );\n  const r = {\n    rowDragStart: t.tableHandles.rowDragStart,\n    colDragStart: t.tableHandles.colDragStart,\n    dragEnd: t.tableHandles.dragEnd,\n    freezeHandles: t.tableHandles.freezeHandles,\n    unfreezeHandles: t.tableHandles.unfreezeHandles\n  }, { freezeHandles: l, unfreezeHandles: c } = r, s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    l(), O(!0), V(!0);\n  }, [l]), d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    c(), O(!1), V(!1);\n  }, [c]), a = P(\n    t.tableHandles.onUpdate.bind(t.tableHandles)\n  ), u = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    var F, ee;\n    return a != null && a.draggingState ? {\n      draggedCellOrientation: (F = a == null ? void 0 : a.draggingState) == null ? void 0 : F.draggedCellOrientation,\n      mousePos: (ee = a == null ? void 0 : a.draggingState) == null ? void 0 : ee.mousePos\n    } : void 0;\n  }, [\n    a == null ? void 0 : a.draggingState,\n    ($ = a == null ? void 0 : a.draggingState) == null ? void 0 : $.draggedCellOrientation,\n    (E = a == null ? void 0 : a.draggingState) == null ? void 0 : E.mousePos\n  ]), { rowHandle: m, colHandle: h, cellHandle: f } = Ur(\n    (a == null ? void 0 : a.show) || !1,\n    (a == null ? void 0 : a.referencePosCell) || null,\n    (a == null ? void 0 : a.referencePosTable) || null,\n    u\n  ), { addOrRemoveColumnsButton: w, addOrRemoveRowsButton: H } = Zr(\n    (a == null ? void 0 : a.showAddOrRemoveColumnsButton) || !1,\n    (a == null ? void 0 : a.showAddOrRemoveRowsButton) || !1,\n    (a == null ? void 0 : a.referencePosTable) || null\n  ), [B, V] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [S, O] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);\n  if (!a)\n    return null;\n  const z = e.tableHandle || Dr, j = e.extendButton || Rr, Z = e.tableCellHandle || $r;\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { ref: o }),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_floating_ui_react__WEBPACK_IMPORTED_MODULE_4__.FloatingPortal, { root: a.widgetContainer, children: [\n      !B && n && m.isMounted && a.rowIndex !== void 0 && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { ref: m.ref, style: m.style, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n        z,\n        {\n          editor: t,\n          orientation: \"row\",\n          showOtherSide: () => O(!1),\n          hideOtherSide: () => O(!0),\n          index: a.rowIndex,\n          block: a.block,\n          dragStart: r.rowDragStart,\n          dragEnd: r.dragEnd,\n          freezeHandles: r.freezeHandles,\n          unfreezeHandles: r.unfreezeHandles,\n          menuContainer: n\n        }\n      ) }),\n      !S && n && h.isMounted && a.colIndex !== void 0 && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { ref: h.ref, style: h.style, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n        z,\n        {\n          editor: t,\n          orientation: \"column\",\n          showOtherSide: () => V(!1),\n          hideOtherSide: () => V(!0),\n          index: a.colIndex,\n          block: a.block,\n          dragStart: r.colDragStart,\n          dragEnd: r.dragEnd,\n          freezeHandles: r.freezeHandles,\n          unfreezeHandles: r.unfreezeHandles,\n          menuContainer: n\n        }\n      ) }),\n      n && f.isMounted && a.colIndex !== void 0 && a.rowIndex !== void 0 && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { ref: f.ref, style: f.style, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n        Z,\n        {\n          editor: t,\n          block: a.block,\n          rowIndex: a.rowIndex,\n          colIndex: a.colIndex,\n          menuContainer: n,\n          freezeHandles: r.freezeHandles,\n          unfreezeHandles: r.unfreezeHandles\n        }\n      ) }),\n      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n        \"div\",\n        {\n          ref: H.ref,\n          style: H.style,\n          children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n            j,\n            {\n              editor: t,\n              orientation: \"addOrRemoveRows\",\n              block: a.block,\n              onMouseDown: s,\n              onMouseUp: d\n            }\n          )\n        }\n      ),\n      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n        \"div\",\n        {\n          ref: w.ref,\n          style: w.style,\n          children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n            j,\n            {\n              editor: t,\n              orientation: \"addOrRemoveColumns\",\n              block: a.block,\n              onMouseDown: s,\n              onMouseUp: d\n            }\n          )\n        }\n      )\n    ] })\n  ] });\n};\nfunction Kr(e) {\n  const t = b();\n  if (!t)\n    throw new Error(\n      \"BlockNoteDefaultUI must be used within a BlockNoteContext.Provider\"\n    );\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children: [\n    e.formattingToolbar !== !1 && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(or, {}),\n    e.linkToolbar !== !1 && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ar, {}),\n    e.slashMenu !== !1 && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Lr, { triggerCharacter: \"/\" }),\n    e.emojiPicker !== !1 && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      xr,\n      {\n        triggerCharacter: \":\",\n        columns: 10,\n        minQueryLength: 2\n      }\n    ),\n    e.sideMenu !== !1 && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(kr, {}),\n    t.filePanel && e.filePanel !== !1 && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(No, {}),\n    t.tableHandles && e.tableHandles !== !1 && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(qr, {}),\n    t.comments && e.comments !== !1 && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children: [\n      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(An, {}),\n      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Ro, {})\n    ] })\n  ] });\n}\nconst Xr = () => {\n  const e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(\n    () => {\n      var c;\n      return (c = window.matchMedia) == null ? void 0 : c.call(window, \"(prefers-color-scheme: dark)\");\n    },\n    []\n  ), t = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(\n    () => {\n      var c;\n      return (c = window.matchMedia) == null ? void 0 : c.call(window, \"(prefers-color-scheme: light)\");\n    },\n    []\n  ), n = e == null ? void 0 : e.matches, o = t == null ? void 0 : t.matches, [r, l] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(n ? \"dark\" : o ? \"light\" : \"no-preference\");\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    l(n ? \"dark\" : o ? \"light\" : \"no-preference\");\n  }, [n, o]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (typeof (e == null ? void 0 : e.addEventListener) == \"function\") {\n      const c = ({ matches: d }) => d && l(\"dark\"), s = ({ matches: d }) => d && l(\"light\");\n      return e == null || e.addEventListener(\"change\", c), t == null || t.addEventListener(\"change\", s), () => {\n        e == null || e.removeEventListener(\"change\", c), t == null || t.removeEventListener(\"change\", s);\n      };\n    } else {\n      const c = () => l(\n        e.matches ? \"dark\" : t.matches ? \"light\" : \"no-preference\"\n      );\n      return e == null || e.addEventListener(\"change\", c), t == null || t.addEventListener(\"change\", c), () => {\n        e == null || e.removeEventListener(\"change\", c), t == null || t.removeEventListener(\"change\", c);\n      };\n    }\n  }, [e, t]), typeof window.matchMedia != \"function\", r;\n}, Rt = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(void 0);\nfunction Yr() {\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Rt);\n}\nfunction Jr() {\n  const e = /* @__PURE__ */ new Set();\n  let t = {};\n  return {\n    /**\n     * Subscribe to the editor instance's changes.\n     */\n    subscribe(n) {\n      return e.add(n), () => {\n        e.delete(n);\n      };\n    },\n    getSnapshot() {\n      return t;\n    },\n    getServerSnapshot() {\n      return t;\n    },\n    /**\n     * Adds a new NodeView Renderer to the editor.\n     */\n    setRenderer(n, o) {\n      t = {\n        ...t,\n        [n]: (0,react_dom__WEBPACK_IMPORTED_MODULE_2__.createPortal)(o.reactElement, o.element, n)\n      }, e.forEach((r) => r());\n    },\n    /**\n     * Removes a NodeView Renderer from the editor.\n     */\n    removeRenderer(n) {\n      const o = { ...t };\n      delete o[n], t = o, e.forEach((r) => r());\n    }\n  };\n}\nconst Qr = ({\n  contentComponent: e\n}) => {\n  const t = (0,react__WEBPACK_IMPORTED_MODULE_0__.useSyncExternalStore)(\n    e.subscribe,\n    e.getSnapshot,\n    e.getServerSnapshot\n  );\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children: Object.values(t) });\n}, ei = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((e, t) => {\n  const [n, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(\n    t,\n    () => (r, l) => {\n      (0,react_dom__WEBPACK_IMPORTED_MODULE_2__.flushSync)(() => {\n        o({ node: r, container: l });\n      }), o(void 0);\n    },\n    []\n  ), /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children: n && (0,react_dom__WEBPACK_IMPORTED_MODULE_2__.createPortal)(n.node, n.container) });\n}), et = () => {\n};\nfunction ti(e, t) {\n  const {\n    editor: n,\n    className: o,\n    theme: r,\n    children: l,\n    editable: c,\n    onSelectionChange: s,\n    onChange: d,\n    formattingToolbar: a,\n    linkToolbar: u,\n    slashMenu: m,\n    emojiPicker: h,\n    sideMenu: f,\n    filePanel: w,\n    tableHandles: H,\n    comments: B,\n    autoFocus: V,\n    renderEditor: S = !n.headless,\n    ...O\n  } = e, [z, j] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), Z = D(), $ = Xr(), E = (Z == null ? void 0 : Z.colorSchemePreference) || $, F = r || (E === \"dark\" ? \"dark\" : \"light\");\n  ue(d || et, n), se(s || et, n), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    n.isEditable = c !== !1;\n  }, [c, n]);\n  const ee = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (Dt) => {\n      n.elementRenderer = Dt;\n    },\n    [n]\n  ), Nt = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({\n    ...Z,\n    editor: n,\n    setContentEditableProps: j\n  }), [Z, n]), Pt = {\n    formattingToolbar: a,\n    linkToolbar: u,\n    slashMenu: m,\n    emojiPicker: h,\n    sideMenu: f,\n    filePanel: w,\n    tableHandles: H,\n    comments: B\n  }, Ot = {\n    autoFocus: V,\n    contentEditableProps: z\n  };\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(dt.Provider, { value: Nt, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\n    Rt.Provider,\n    {\n      value: {\n        editorProps: Ot,\n        defaultUIProps: Pt\n      },\n      children: [\n        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ei, { ref: ee }),\n        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          ni,\n          {\n            className: o,\n            renderEditor: S,\n            editorColorScheme: F,\n            ref: t,\n            ...O,\n            children: l\n          }\n        )\n      ]\n    }\n  ) });\n}\nconst ni = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ className: e, renderEditor: t, editorColorScheme: n, children: o, ...r }, l) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n  \"div\",\n  {\n    className: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.mergeCSSClasses)(\"bn-container\", n, e),\n    \"data-color-scheme\": n,\n    ...r,\n    ref: l,\n    children: t ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(oi, { children: o }) : o\n  }\n)), Fi = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(ti), oi = (e) => {\n  const t = Yr(), n = b(), o = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => Jr(), []), r = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (l) => {\n      n.mount(l, o);\n    },\n    [n, o]\n  );\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Qr, { contentComponent: o }),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ri, { ...t.editorProps, ...e, mount: r }),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Kr, { ...t.defaultUIProps }),\n    e.children\n  ] });\n}, ri = (e) => {\n  const { autoFocus: t, mount: n, contentEditableProps: o } = e;\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    \"div\",\n    {\n      \"aria-autocomplete\": \"list\",\n      \"aria-haspopup\": \"listbox\",\n      \"data-bn-autofocus\": t,\n      ref: n,\n      ...o\n    }\n  );\n};\nfunction ie(e, t) {\n  let n;\n  const o = document.createElement(\"div\");\n  let r;\n  if (t != null && t.elementRenderer)\n    t.elementRenderer(\n      e((d) => n = d || void 0),\n      o\n    );\n  else {\n    if (!(t != null && t.headless))\n      throw new Error(\n        \"elementRenderer not available, expected headless editor\"\n      );\n    r = (0,react_dom_client__WEBPACK_IMPORTED_MODULE_3__.createRoot)(o), (0,react_dom__WEBPACK_IMPORTED_MODULE_2__.flushSync)(() => {\n      r.render(e((d) => n = d || void 0));\n    });\n  }\n  if (!o.childElementCount)\n    return console.warn(\"ReactInlineContentSpec: renderHTML() failed\"), {\n      dom: document.createElement(\"span\")\n    };\n  n == null || n.setAttribute(\"data-tmp-find\", \"true\");\n  const l = o.cloneNode(!0), c = l.firstElementChild, s = l.querySelector(\n    \"[data-tmp-find]\"\n  );\n  return s == null || s.removeAttribute(\"data-tmp-find\"), r == null || r.unmount(), {\n    dom: c,\n    contentDOM: s || void 0\n  };\n}\nfunction pe(e) {\n  var t;\n  return (\n    // Creates `blockContent` element\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      _tiptap_react__WEBPACK_IMPORTED_MODULE_7__.NodeViewWrapper,\n      {\n        onDragOver: (n) => n.preventDefault(),\n        ...Object.fromEntries(\n          Object.entries(e.domAttributes || {}).filter(\n            ([n]) => n !== \"class\"\n          )\n        ),\n        className: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.mergeCSSClasses)(\n          \"bn-block-content\",\n          ((t = e.domAttributes) == null ? void 0 : t.class) || \"\"\n        ),\n        \"data-content-type\": e.blockType,\n        ...Object.fromEntries(\n          Object.entries(e.blockProps).filter(([n, o]) => {\n            const r = e.propSchema[n];\n            return !_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.inheritedProps.includes(n) && o !== r.default;\n          }).map(([n, o]) => [(0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.camelToDataKebab)(n), o])\n        ),\n        \"data-file-block\": e.isFileBlock === !0 || void 0,\n        children: e.children\n      }\n    )\n  );\n}\nfunction he(e, t) {\n  const n = (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.createStronglyTypedTiptapNode)({\n    name: e.type,\n    content: e.content === \"inline\" ? \"inline*\" : \"\",\n    group: \"blockContent\",\n    selectable: e.isSelectable ?? !0,\n    isolating: !0,\n    addAttributes() {\n      return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.propsToAttributes)(e.propSchema);\n    },\n    parseHTML() {\n      return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.getParseRules)(e, t.parse);\n    },\n    renderHTML({ HTMLAttributes: o }) {\n      const r = document.createElement(\"div\");\n      return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.wrapInBlockStructure)(\n        {\n          dom: r,\n          contentDOM: e.content === \"inline\" ? r : void 0\n        },\n        e.type,\n        {},\n        e.propSchema,\n        e.isFileBlock,\n        o\n      );\n    },\n    addNodeView() {\n      return (o) => {\n        const r = (0,_tiptap_react__WEBPACK_IMPORTED_MODULE_7__.ReactNodeViewRenderer)(\n          (l) => {\n            var m;\n            const c = this.options.editor, s = (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.getBlockFromPos)(\n              l.getPos,\n              c,\n              this.editor,\n              e.type\n            ), d = ((m = this.options.domAttributes) == null ? void 0 : m.blockContent) || {}, a = (0,_tiptap_react__WEBPACK_IMPORTED_MODULE_7__.useReactNodeView)().nodeViewContentRef;\n            if (!a)\n              throw new Error(\"nodeViewContentRef is not set\");\n            const u = t.render;\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n              pe,\n              {\n                blockType: s.type,\n                blockProps: s.props,\n                propSchema: e.propSchema,\n                isFileBlock: e.isFileBlock,\n                domAttributes: d,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n                  u,\n                  {\n                    block: s,\n                    editor: c,\n                    contentRef: a\n                  }\n                )\n              }\n            );\n          },\n          {\n            className: \"bn-react-node-view-renderer\"\n          }\n        )(o);\n        return e.isSelectable === !1 && (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.applyNonSelectableBlockFix)(r, this.editor), r;\n      };\n    }\n  });\n  return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.createInternalBlockSpec)(e, {\n    node: n,\n    toInternalHTML: (o, r) => {\n      var d, a;\n      const l = ((d = n.options.domAttributes) == null ? void 0 : d.blockContent) || {}, c = t.render, s = ie(\n        (u) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          pe,\n          {\n            blockType: o.type,\n            blockProps: o.props,\n            propSchema: e.propSchema,\n            domAttributes: l,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n              c,\n              {\n                block: o,\n                editor: r,\n                contentRef: u\n              }\n            )\n          }\n        ),\n        r\n      );\n      return (a = s.contentDOM) == null || a.setAttribute(\"data-editable\", \"\"), s;\n    },\n    toExternalHTML: (o, r) => {\n      var d, a;\n      const l = ((d = n.options.domAttributes) == null ? void 0 : d.blockContent) || {}, c = t.toExternalHTML || t.render, s = ie((u) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n        pe,\n        {\n          blockType: o.type,\n          blockProps: o.props,\n          propSchema: e.propSchema,\n          domAttributes: l,\n          children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n            c,\n            {\n              block: o,\n              editor: r,\n              contentRef: u\n            }\n          )\n        }\n      ), r);\n      return (a = s.contentDOM) == null || a.setAttribute(\"data-editable\", \"\"), s;\n    }\n  });\n}\nfunction Ne(e) {\n  const t = b(), [n, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"loading\"), [r, l] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();\n  if ((0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    let c = !0;\n    return (async () => {\n      let s = \"\";\n      o(\"loading\");\n      try {\n        s = t.resolveFileUrl ? await t.resolveFileUrl(e) : e;\n      } catch {\n        o(\"error\");\n        return;\n      }\n      c && (o(\"loaded\"), l(s));\n    })(), () => {\n      c = !1;\n    };\n  }, [t, e]), n !== \"loaded\")\n    return {\n      loadingState: n\n    };\n  if (!r)\n    throw new Error(\"Finished fetching file but did not get download URL.\");\n  return {\n    loadingState: n,\n    downloadUrl: r\n  };\n}\nconst Pe = (e) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"figure\", { children: [\n  e.children,\n  /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"figcaption\", { children: e.caption })\n] });\nfunction ii(e) {\n  const t = b();\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => t.onUploadEnd(e), [e, t]);\n}\nfunction li(e) {\n  const t = b();\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => t.onUploadStart(e), [e, t]);\n}\nfunction _t(e) {\n  const [t, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);\n  return li((o) => {\n    o === e && n(!0);\n  }), ii((o) => {\n    o === e && n(!1);\n  }), t;\n}\nconst ci = (e) => {\n  const t = M(), n = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (r) => {\n      r.preventDefault();\n    },\n    []\n  ), o = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    e.editor.dispatch(\n      e.editor._tiptapEditor.state.tr.setMeta(\n        e.editor.filePanel.plugin,\n        {\n          block: e.block\n        }\n      )\n    );\n  }, [e.block, e.editor]);\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\n    \"div\",\n    {\n      className: \"bn-add-file-button\",\n      onMouseDown: n,\n      onClick: o,\n      children: [\n        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { className: \"bn-add-file-button-icon\", children: e.buttonIcon || /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Re, { size: 24 }) }),\n        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { className: \"bn-add-file-button-text\", children: e.buttonText || t.file_blocks.file.add_button_text })\n      ]\n    }\n  );\n}, ai = (e) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\n  \"div\",\n  {\n    className: \"bn-file-name-with-icon\",\n    contentEditable: !1,\n    draggable: !1,\n    children: [\n      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { className: \"bn-file-icon\", children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Re, { size: 24 }) }),\n      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", { className: \"bn-file-name\", children: e.block.props.name })\n    ]\n  }\n), Oe = (e) => {\n  const t = _t(e.block.id);\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    \"div\",\n    {\n      className: \"bn-file-block-content-wrapper\",\n      onMouseEnter: e.onMouseEnter,\n      onMouseLeave: e.onMouseLeave,\n      style: e.style,\n      children: t ? (\n        // Show loader while a file is being uploaded.\n        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { className: \"bn-file-loading-preview\", children: \"Loading...\" })\n      ) : e.block.props.url === \"\" ? (\n        // Show the add file button if the file has not been uploaded yet.\n        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ci, { ...e })\n      ) : (\n        // Show the file preview, or the file name and icon.\n        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children: [\n          e.block.props.showPreview === !1 || !e.children ? (\n            // Show file name and icon.\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ai, { ...e })\n          ) : (\n            // Show preview.\n            e.children\n          ),\n          e.block.props.caption && // Show the caption if there is one.\n          /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", { className: \"bn-file-caption\", children: e.block.props.caption })\n        ] })\n      )\n    }\n  );\n}, fe = (e) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", { children: [\n  e.children,\n  /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", { children: e.caption })\n] }), si = (e) => {\n  const t = Ne(e.block.props.url);\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    \"audio\",\n    {\n      className: \"bn-audio\",\n      src: t.loadingState === \"loading\" ? e.block.props.url : t.downloadUrl,\n      controls: !0,\n      contentEditable: !1,\n      draggable: !1\n    }\n  );\n}, di = (e) => {\n  if (!e.block.props.url)\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", { children: \"Add audio\" });\n  const t = e.block.props.showPreview ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"audio\", { src: e.block.props.url }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", { href: e.block.props.url, children: e.block.props.name || e.block.props.url });\n  return e.block.props.caption ? e.block.props.showPreview ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Pe, { caption: e.block.props.caption, children: t }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(fe, { caption: e.block.props.caption, children: t }) : t;\n}, ui = (e) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n  Oe,\n  {\n    ...e,\n    buttonText: e.editor.dictionary.file_blocks.audio.add_button_text,\n    buttonIcon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Mt, { size: 24 }),\n    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(si, { ...e })\n  }\n), Ai = he(_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.audioBlockConfig, {\n  render: ui,\n  parse: _blocknote_core__WEBPACK_IMPORTED_MODULE_5__.audioParse,\n  toExternalHTML: di\n}), mi = (e) => {\n  if (!e.block.props.url)\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", { children: \"Add file\" });\n  const t = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", { href: e.block.props.url, children: e.block.props.name || e.block.props.url });\n  return e.block.props.caption ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(fe, { caption: e.block.props.caption, children: t }) : t;\n}, hi = (e) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Oe, { ...e }), Gi = he(_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.fileBlockConfig, {\n  render: hi,\n  parse: _blocknote_core__WEBPACK_IMPORTED_MODULE_5__.fileParse,\n  toExternalHTML: mi\n}), It = (e) => {\n  const [t, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0), [o, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(e.block.props.previewWidth), [l, c] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const f = (H) => {\n      let B;\n      e.block.props.textAlignment === \"center\" ? t.handleUsed === \"left\" ? B = t.initialWidth + (t.initialClientX - H.clientX) * 2 : B = t.initialWidth + (H.clientX - t.initialClientX) * 2 : t.handleUsed === \"left\" ? B = t.initialWidth + t.initialClientX - H.clientX : B = t.initialWidth + H.clientX - t.initialClientX;\n      const V = 64;\n      B < V ? r(V) : r(B);\n    }, w = () => {\n      n(void 0), e.editor.updateBlock(e.block, {\n        props: {\n          previewWidth: o\n        }\n      });\n    };\n    return t && (window.addEventListener(\"mousemove\", f), window.addEventListener(\"mouseup\", w)), () => {\n      window.removeEventListener(\"mousemove\", f), window.removeEventListener(\"mouseup\", w);\n    };\n  }, [e, t, o]);\n  const d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    e.editor.isEditable && c(!0);\n  }, [e.editor.isEditable]), a = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    c(!1);\n  }, []), u = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (f) => {\n      f.preventDefault(), n({\n        handleUsed: \"left\",\n        initialWidth: s.current.clientWidth,\n        initialClientX: f.clientX\n      });\n    },\n    []\n  ), m = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (f) => {\n      f.preventDefault(), n({\n        handleUsed: \"right\",\n        initialWidth: s.current.clientWidth,\n        initialClientX: f.clientX\n      });\n    },\n    []\n  ), h = _t(e.block.id);\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    Oe,\n    {\n      ...e,\n      onMouseEnter: d,\n      onMouseLeave: a,\n      style: e.block.props.url && !h && e.block.props.showPreview ? { width: `${o}px` } : void 0,\n      children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", { className: \"bn-visual-media-wrapper\", ref: s, children: [\n        e.children,\n        (l || t) && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children: [\n          /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n            \"div\",\n            {\n              className: \"bn-resize-handle\",\n              style: { left: \"4px\" },\n              onMouseDown: u\n            }\n          ),\n          /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n            \"div\",\n            {\n              className: \"bn-resize-handle\",\n              style: { right: \"4px\" },\n              onMouseDown: m\n            }\n          )\n        ] })\n      ] })\n    }\n  );\n}, fi = (e) => {\n  const t = Ne(e.block.props.url);\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    \"img\",\n    {\n      className: \"bn-visual-media\",\n      src: t.loadingState === \"loading\" ? e.block.props.url : t.downloadUrl,\n      alt: e.block.props.caption || \"BlockNote image\",\n      contentEditable: !1,\n      draggable: !1\n    }\n  );\n}, gi = (e) => {\n  if (!e.block.props.url)\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", { children: \"Add image\" });\n  const t = e.block.props.showPreview ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    \"img\",\n    {\n      src: e.block.props.url,\n      alt: e.block.props.name || e.block.props.caption || \"BlockNote image\",\n      width: e.block.props.previewWidth\n    }\n  ) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", { href: e.block.props.url, children: e.block.props.name || e.block.props.url });\n  return e.block.props.caption ? e.block.props.showPreview ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Pe, { caption: e.block.props.caption, children: t }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(fe, { caption: e.block.props.caption, children: t }) : t;\n}, bi = (e) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n  It,\n  {\n    ...e,\n    buttonText: e.editor.dictionary.file_blocks.image.add_button_text,\n    buttonIcon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Ht, { size: 24 }),\n    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(fi, { ...e })\n  }\n), Ui = he(_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.imageBlockConfig, {\n  render: bi,\n  parse: _blocknote_core__WEBPACK_IMPORTED_MODULE_5__.imageParse,\n  toExternalHTML: gi\n});\nfunction Ci(e) {\n  return p({ attr: { viewBox: \"0 0 24 24\", fill: \"none\", stroke: \"currentColor\", strokeWidth: \"2\", strokeLinecap: \"round\", strokeLinejoin: \"round\" }, child: [{ tag: \"path\", attr: { d: \"M14 3v4a1 1 0 0 0 1 1h4\" }, child: [] }, { tag: \"path\", attr: { d: \"M19 18v1a2 2 0 0 1 -2 2h-10a2 2 0 0 1 -2 -2v-1\" }, child: [] }, { tag: \"path\", attr: { d: \"M3 14h3m4.5 0h3m4.5 0h3\" }, child: [] }, { tag: \"path\", attr: { d: \"M5 10v-5a2 2 0 0 1 2 -2h7l5 5v2\" }, child: [] }] })(e);\n}\nconst pi = {\n  page_break: Ci\n};\nfunction zi(e) {\n  return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.getPageBreakSlashMenuItems)(e).map((t) => {\n    const n = pi[t.key];\n    return {\n      ...t,\n      icon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(n, { size: 18 })\n    };\n  });\n}\nconst ki = (e) => {\n  const t = Ne(e.block.props.url);\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    \"video\",\n    {\n      className: \"bn-visual-media\",\n      src: t.loadingState === \"loading\" ? e.block.props.url : t.downloadUrl,\n      controls: !0,\n      contentEditable: !1,\n      draggable: !1\n    }\n  );\n}, wi = (e) => {\n  if (!e.block.props.url)\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", { children: \"Add video\" });\n  const t = e.block.props.showPreview ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"video\", { src: e.block.props.url }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", { href: e.block.props.url, children: e.block.props.name || e.block.props.url });\n  return e.block.props.caption ? e.block.props.showPreview ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Pe, { caption: e.block.props.caption, children: t }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(fe, { caption: e.block.props.caption, children: t }) : t;\n}, vi = (e) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n  It,\n  {\n    ...e,\n    buttonText: e.editor.dictionary.file_blocks.video.add_button_text,\n    buttonIcon: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Co, { size: 24 }),\n    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ki, { ...e })\n  }\n), ji = he(_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.videoBlockConfig, {\n  render: vi,\n  parse: _blocknote_core__WEBPACK_IMPORTED_MODULE_5__.videoParse,\n  toExternalHTML: wi\n}), Wi = (e) => {\n  const [t, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"none\"), o = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), r = b(), l = P(\n    r.formattingToolbar.onUpdate.bind(r.formattingToolbar)\n  ), c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({\n    display: \"flex\",\n    position: \"fixed\",\n    bottom: 0,\n    zIndex: 3e3,\n    transform: t\n  }), [t]);\n  if ((0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const d = window.visualViewport;\n    function a() {\n      const u = document.body, m = d.offsetLeft, h = d.height - u.getBoundingClientRect().height + d.offsetTop;\n      n(\n        `translate(${m}px, ${h}px) scale(${1 / d.scale})`\n      );\n    }\n    return window.visualViewport.addEventListener(\"scroll\", a), window.visualViewport.addEventListener(\"resize\", a), a(), () => {\n      window.visualViewport.removeEventListener(\"scroll\", a), window.visualViewport.removeEventListener(\"resize\", a);\n    };\n  }, []), !l)\n    return null;\n  if (!l.show && o.current)\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      \"div\",\n      {\n        ref: o,\n        style: c,\n        dangerouslySetInnerHTML: { __html: o.current.innerHTML }\n      }\n    );\n  const s = e.formattingToolbar || St;\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { ref: o, style: c, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(s, {}) });\n}, Hi = react__WEBPACK_IMPORTED_MODULE_0__.memo(\n  ({\n    thread: e,\n    selectedThreadId: t,\n    editor: n,\n    maxCommentsBeforeCollapse: o,\n    referenceText: r\n  }) => {\n    const l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n      (s) => {\n        var d;\n        s.target.closest(\".bn-action-toolbar\") || (d = n.comments) == null || d.selectThread(e.id);\n      },\n      [n.comments, e.id]\n    ), c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n      (s) => {\n        var u;\n        if (!s.relatedTarget || s.relatedTarget.closest(\".bn-action-toolbar\"))\n          return;\n        const d = s.target instanceof Node ? s.target : null, a = s.relatedTarget instanceof Node ? s.relatedTarget.closest(\".bn-thread\") : null;\n        (!d || !a || !a.contains(d)) && ((u = n.comments) == null || u.selectThread(void 0));\n      },\n      [n.comments]\n    );\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      xt,\n      {\n        thread: e,\n        selected: e.id === t,\n        referenceText: r,\n        maxCommentsBeforeCollapse: o,\n        onFocus: l,\n        onBlur: c,\n        tabIndex: 0\n      }\n    );\n  }\n);\nfunction Mi(e, t, n) {\n  if (t === \"recent-activity\")\n    return e.sort(\n      (o, r) => r.comments[r.comments.length - 1].createdAt.getTime() - o.comments[o.comments.length - 1].createdAt.getTime()\n    );\n  if (t === \"oldest\")\n    return e.sort(\n      (o, r) => o.createdAt.getTime() - r.createdAt.getTime()\n    );\n  if (t === \"position\")\n    return e.sort((o, r) => {\n      var s, d;\n      const l = ((s = n == null ? void 0 : n.get(o.id)) == null ? void 0 : s.from) || Number.MAX_VALUE, c = ((d = n == null ? void 0 : n.get(r.id)) == null ? void 0 : d.from) || Number.MAX_VALUE;\n      return l - c;\n    });\n  throw new _blocknote_core__WEBPACK_IMPORTED_MODULE_5__.UnreachableCaseError(t);\n}\nfunction tt(e, t) {\n  if (!t)\n    return \"Original content deleted\";\n  if (e.prosemirrorState.doc.nodeSize < t.to)\n    return \"\";\n  const n = e.prosemirrorState.doc.textBetween(\n    t.from,\n    t.to\n  );\n  return n.length > 15 ? `${n.slice(0, 15)}…` : n;\n}\nfunction $i(e) {\n  const t = b();\n  if (!t.comments)\n    throw new Error(\"Comments plugin not found\");\n  const n = P(\n    t.comments.onUpdate.bind(t.comments)\n  ), o = n == null ? void 0 : n.selectedThreadId, r = yt(t), l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    const c = Array.from(r.values()), s = Mi(\n      c,\n      e.sort || \"position\",\n      n == null ? void 0 : n.threadPositions\n    ), d = [];\n    for (const a of s)\n      a.resolved ? (e.filter === \"resolved\" || e.filter === \"all\") && d.push({\n        thread: a,\n        referenceText: tt(\n          t,\n          n == null ? void 0 : n.threadPositions.get(a.id)\n        )\n      }) : (e.filter === \"open\" || e.filter === \"all\") && d.push({\n        thread: a,\n        referenceText: tt(\n          t,\n          n == null ? void 0 : n.threadPositions.get(a.id)\n        )\n      });\n    return d;\n  }, [r, n == null ? void 0 : n.threadPositions, e.filter, e.sort, t]);\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { className: \"bn-threads-sidebar\", children: l.map((c) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    Hi,\n    {\n      thread: c.thread,\n      selectedThreadId: o,\n      editor: t,\n      referenceText: c.referenceText,\n      maxCommentsBeforeCollapse: e.maxCommentsBeforeCollapse\n    },\n    c.thread.id\n  )) });\n}\nfunction qi(e) {\n  const t = D();\n  if (e || (e = t == null ? void 0 : t.editor), !e)\n    throw new Error(\n      \"'editor' is required, either from BlockNoteContext or as a function argument\"\n    );\n  const n = e, [o, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => n.getActiveStyles());\n  return ue(() => {\n    r(n.getActiveStyles());\n  }, n), se(() => {\n    r(n.getActiveStyles());\n  }, n), o;\n}\nfunction xi() {\n  const [, e] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n  return () => e((t) => t + 1);\n}\nconst Ki = (e) => {\n  const t = xi();\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const n = () => {\n      requestAnimationFrame(() => {\n        requestAnimationFrame(() => {\n          t();\n        });\n      });\n    };\n    return e.on(\"transaction\", n), () => {\n      e.off(\"transaction\", n);\n    };\n  }, [e]);\n};\nfunction yi(e) {\n  return e.currentTarget instanceof HTMLElement && e.relatedTarget instanceof HTMLElement ? e.currentTarget.contains(e.relatedTarget) : !1;\n}\nfunction Xi({\n  onBlur: e,\n  onFocus: t\n} = {}) {\n  const n = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), [o, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(!1), c = (a) => {\n    r(a), l.current = a;\n  }, s = (a) => {\n    l.current || (c(!0), t == null || t(a));\n  }, d = (a) => {\n    l.current && !yi(a) && (c(!1), e == null || e(a));\n  };\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const a = n.current;\n    if (a)\n      return a.addEventListener(\"focusin\", s), a.addEventListener(\"focusout\", d), () => {\n        a == null || a.removeEventListener(\"focusin\", s), a == null || a.removeEventListener(\"focusout\", d);\n      };\n  }, [s, d]), { ref: n, focused: o };\n}\nfunction Bi(e) {\n  return (\n    // Creates inline content section element\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      _tiptap_react__WEBPACK_IMPORTED_MODULE_7__.NodeViewWrapper,\n      {\n        as: \"span\",\n        className: \"bn-inline-content-section\",\n        \"data-inline-content-type\": e.inlineContentType,\n        ...Object.fromEntries(\n          Object.entries(e.inlineContentProps).filter(([t, n]) => {\n            const o = e.propSchema[t];\n            return n !== o.default;\n          }).map(([t, n]) => [(0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.camelToDataKebab)(t), n])\n        ),\n        children: e.children\n      }\n    )\n  );\n}\nfunction Yi(e, t) {\n  const n = (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.createStronglyTypedTiptapNode)({\n    name: e.type,\n    inline: !0,\n    group: \"inline\",\n    selectable: e.content === \"styled\",\n    atom: e.content === \"none\",\n    content: e.content === \"styled\" ? \"inline*\" : \"\",\n    addAttributes() {\n      return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.propsToAttributes)(e.propSchema);\n    },\n    addKeyboardShortcuts() {\n      return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.addInlineContentKeyboardShortcuts)(e);\n    },\n    parseHTML() {\n      return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.getInlineContentParseRules)(e);\n    },\n    renderHTML({ node: o }) {\n      const r = this.options.editor, l = (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.nodeToCustomInlineContent)(\n        o,\n        r.schema.inlineContentSchema,\n        r.schema.styleSchema\n      ), c = t.render, s = ie(\n        (d) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          c,\n          {\n            inlineContent: l,\n            updateInlineContent: () => {\n            },\n            contentRef: d\n          }\n        ),\n        r\n      );\n      return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.addInlineContentAttributes)(\n        s,\n        e.type,\n        o.attrs,\n        e.propSchema\n      );\n    },\n    // TODO: needed?\n    addNodeView() {\n      const o = this.options.editor;\n      return (r) => (0,_tiptap_react__WEBPACK_IMPORTED_MODULE_7__.ReactNodeViewRenderer)(\n        (l) => {\n          const c = (0,_tiptap_react__WEBPACK_IMPORTED_MODULE_7__.useReactNodeView)().nodeViewContentRef;\n          if (!c)\n            throw new Error(\"nodeViewContentRef is not set\");\n          const s = t.render;\n          return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n            Bi,\n            {\n              inlineContentProps: l.node.attrs,\n              inlineContentType: e.type,\n              propSchema: e.propSchema,\n              children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n                s,\n                {\n                  contentRef: c,\n                  inlineContent: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.nodeToCustomInlineContent)(\n                    l.node,\n                    o.schema.inlineContentSchema,\n                    o.schema.styleSchema\n                  ),\n                  updateInlineContent: (d) => {\n                    const a = (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.inlineContentToNodes)(\n                      [d],\n                      o._tiptapEditor.schema,\n                      o.schema.styleSchema\n                    );\n                    o.dispatch(\n                      o.prosemirrorView.state.tr.replaceWith(\n                        l.getPos(),\n                        l.getPos() + l.node.nodeSize,\n                        a\n                      )\n                    );\n                  }\n                }\n              )\n            }\n          );\n        },\n        {\n          className: \"bn-ic-react-node-view-renderer\",\n          as: \"span\"\n          // contentDOMElementTag: \"span\", (requires tt upgrade)\n        }\n      )(r);\n    }\n  });\n  return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.createInternalInlineContentSpec)(e, {\n    node: n\n  });\n}\nvar Y, He;\nclass Vi {\n  constructor({\n    mark: t,\n    view: n,\n    inline: o,\n    options: r,\n    editor: l\n    // BlockNote specific\n  }) {\n    Ze(this, Y);\n    L(this, \"dom\");\n    L(this, \"contentDOM\");\n    L(this, \"mark\");\n    L(this, \"view\");\n    L(this, \"inline\");\n    L(this, \"options\");\n    L(this, \"editor\");\n    L(this, \"shouldIgnoreMutation\", (t) => !this.dom || !this.contentDOM ? !0 : t.type === \"selection\" ? !1 : this.contentDOM === t.target && t.type === \"attributes\" ? !0 : !this.contentDOM.contains(t.target));\n    L(this, \"ignoreMutation\", (t) => {\n      if (!this.dom || !this.contentDOM) return !0;\n      let n;\n      const o = this.options.ignoreMutation;\n      return o && (n = o(t)), typeof n != \"boolean\" && (n = this.shouldIgnoreMutation(t)), n;\n    });\n    this.mark = t, this.view = n, this.inline = o, this.options = r, this.editor = l, this.dom = this.createDOM(r.as), this.contentDOM = r.contentAs ? this.createContentDOM(r.contentAs) : void 0, this.dom.setAttribute(\"data-mark-view-root\", \"true\"), this.contentDOM && (this.contentDOM.setAttribute(\"data-mark-view-content\", \"true\"), this.contentDOM.style.whiteSpace = \"inherit\");\n  }\n  createDOM(t) {\n    return ge(this, Y, He).call(this, t);\n  }\n  createContentDOM(t) {\n    return ge(this, Y, He).call(this, t);\n  }\n  get component() {\n    return this.options.component;\n  }\n  destroy() {\n    var t, n, o;\n    (n = (t = this.options).destroy) == null || n.call(t), this.dom.remove(), (o = this.contentDOM) == null || o.remove();\n  }\n}\nY = new WeakSet(), He = function(t) {\n  const { inline: n, mark: o } = this;\n  return t == null ? document.createElement(n ? \"span\" : \"div\") : t instanceof HTMLElement ? t : t instanceof Function ? t(o) : document.createElement(t);\n};\nclass Si extends Vi {\n  constructor() {\n    super(...arguments);\n    // implements ReactRenderer<MarkViewContext>\n    // key: string = nanoid();\n    L(this, \"id\", Math.floor(Math.random() * 4294967295).toString());\n    L(this, \"context\", {\n      contentRef: (n) => {\n        n && this.contentDOM && n.firstChild !== this.contentDOM && n.appendChild(this.contentDOM);\n      },\n      view: this.view,\n      mark: this.mark\n    });\n    L(this, \"updateContext\", () => {\n      Object.assign(this.context, {\n        mark: this.mark\n      });\n    });\n    // render = () => {\n    //   const UserComponent = this.component;\n    //   return createPortal(\n    //     <markViewContext.Provider value={this.context}>\n    //       <UserComponent />\n    //     </markViewContext.Provider>,\n    //     this.dom,\n    //     this.key\n    //   );\n    // };\n    L(this, \"render\", () => {\n      this.editor._tiptapEditor.contentComponent.setRenderer(\n        this.id,\n        this.renderer()\n      );\n    });\n    L(this, \"destroy\", () => {\n      super.destroy(), this.editor._tiptapEditor.contentComponent.removeRenderer(this.id);\n    });\n    L(this, \"renderer\", () => {\n      const n = this.component, o = {};\n      return this.mark.attrs.stringValue && (o.value = this.mark.attrs.stringValue), {\n        reactElement: (\n          // <markViewContext.Provider value={this.context}>\n          /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(n, { contentRef: this.context.contentRef, ...o })\n        ),\n        element: this.dom\n      };\n    });\n  }\n}\nfunction Ji(e, t) {\n  const n = _tiptap_react__WEBPACK_IMPORTED_MODULE_8__.Mark.create({\n    name: e.type,\n    addAttributes() {\n      return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.stylePropsToAttributes)(e.propSchema);\n    },\n    parseHTML() {\n      return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.getStyleParseRules)(e);\n    },\n    renderHTML({ mark: o }) {\n      const r = {};\n      e.propSchema === \"string\" && (r.value = o.attrs.stringValue);\n      const l = t.render, c = ie(\n        (s) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(l, { ...r, contentRef: s }),\n        this.options.editor\n      );\n      return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.addStyleAttributes)(\n        c,\n        e.type,\n        o.attrs.stringValue,\n        e.propSchema\n      );\n    }\n  });\n  return n.config.addMarkView = (o) => (r, l) => {\n    const c = new Si({\n      editor: o,\n      inline: !0,\n      mark: r,\n      options: {\n        component: t.render,\n        contentAs: \"span\"\n      },\n      view: l\n    });\n    return c.render(), c;\n  }, (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_5__.createInternalStyleSpec)(e, {\n    mark: n\n  });\n}\nfunction Qi(e, t) {\n  const n = e.getBoundingClientRect(), o = t.getBoundingClientRect(), r = n.top < o.top, l = n.bottom > o.bottom;\n  return r && l ? \"both\" : r ? \"top\" : l ? \"bottom\" : \"none\";\n}\n\n//# sourceMappingURL=blocknote-react.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@blocknote/react/dist/blocknote-react.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@floating-ui/react/dist/floating-ui.react.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@floating-ui/react/dist/floating-ui.react.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("var react__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Composite: () => (/* binding */ Composite),\n/* harmony export */   CompositeItem: () => (/* binding */ CompositeItem),\n/* harmony export */   FloatingArrow: () => (/* binding */ FloatingArrow),\n/* harmony export */   FloatingDelayGroup: () => (/* binding */ FloatingDelayGroup),\n/* harmony export */   FloatingFocusManager: () => (/* binding */ FloatingFocusManager),\n/* harmony export */   FloatingList: () => (/* binding */ FloatingList),\n/* harmony export */   FloatingNode: () => (/* binding */ FloatingNode),\n/* harmony export */   FloatingOverlay: () => (/* binding */ FloatingOverlay),\n/* harmony export */   FloatingPortal: () => (/* binding */ FloatingPortal),\n/* harmony export */   FloatingTree: () => (/* binding */ FloatingTree),\n/* harmony export */   arrow: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__.arrow),\n/* harmony export */   autoPlacement: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__.autoPlacement),\n/* harmony export */   autoUpdate: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.autoUpdate),\n/* harmony export */   computePosition: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.computePosition),\n/* harmony export */   detectOverflow: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.detectOverflow),\n/* harmony export */   flip: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__.flip),\n/* harmony export */   getOverflowAncestors: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.getOverflowAncestors),\n/* harmony export */   hide: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__.hide),\n/* harmony export */   inline: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__.inline),\n/* harmony export */   inner: () => (/* binding */ inner),\n/* harmony export */   limitShift: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__.limitShift),\n/* harmony export */   offset: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__.offset),\n/* harmony export */   platform: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.platform),\n/* harmony export */   safePolygon: () => (/* binding */ safePolygon),\n/* harmony export */   shift: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__.shift),\n/* harmony export */   size: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__.size),\n/* harmony export */   useClick: () => (/* binding */ useClick),\n/* harmony export */   useClientPoint: () => (/* binding */ useClientPoint),\n/* harmony export */   useDelayGroup: () => (/* binding */ useDelayGroup),\n/* harmony export */   useDelayGroupContext: () => (/* binding */ useDelayGroupContext),\n/* harmony export */   useDismiss: () => (/* binding */ useDismiss),\n/* harmony export */   useFloating: () => (/* binding */ useFloating),\n/* harmony export */   useFloatingNodeId: () => (/* binding */ useFloatingNodeId),\n/* harmony export */   useFloatingParentNodeId: () => (/* binding */ useFloatingParentNodeId),\n/* harmony export */   useFloatingPortalNode: () => (/* binding */ useFloatingPortalNode),\n/* harmony export */   useFloatingRootContext: () => (/* binding */ useFloatingRootContext),\n/* harmony export */   useFloatingTree: () => (/* binding */ useFloatingTree),\n/* harmony export */   useFocus: () => (/* binding */ useFocus),\n/* harmony export */   useHover: () => (/* binding */ useHover),\n/* harmony export */   useId: () => (/* binding */ useId),\n/* harmony export */   useInnerOffset: () => (/* binding */ useInnerOffset),\n/* harmony export */   useInteractions: () => (/* binding */ useInteractions),\n/* harmony export */   useListItem: () => (/* binding */ useListItem),\n/* harmony export */   useListNavigation: () => (/* binding */ useListNavigation),\n/* harmony export */   useMergeRefs: () => (/* binding */ useMergeRefs),\n/* harmony export */   useRole: () => (/* binding */ useRole),\n/* harmony export */   useTransitionStatus: () => (/* binding */ useTransitionStatus),\n/* harmony export */   useTransitionStyles: () => (/* binding */ useTransitionStyles),\n/* harmony export */   useTypeahead: () => (/* binding */ useTypeahead)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @floating-ui/react/utils */ \"(app-pages-browser)/./node_modules/@floating-ui/react/dist/floating-ui.react.utils.mjs\");\n/* harmony import */ var _floating_ui_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @floating-ui/utils */ \"(app-pages-browser)/./node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs\");\n/* harmony import */ var _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @floating-ui/react-dom */ \"(app-pages-browser)/./node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs\");\n/* harmony import */ var tabbable__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tabbable */ \"(app-pages-browser)/./node_modules/tabbable/dist/index.esm.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\");\n/* harmony import */ var _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @floating-ui/react-dom */ \"(app-pages-browser)/./node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs\");\n/* harmony import */ var _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @floating-ui/react-dom */ \"(app-pages-browser)/./node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\");\n\n\n\n\n\n\n\n\n\n\n/**\n * Merges an array of refs into a single memoized callback ref or `null`.\n * @see https://floating-ui.com/docs/react-utils#usemergerefs\n */\nfunction useMergeRefs(refs) {\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    if (refs.every(ref => ref == null)) {\n      return null;\n    }\n    return value => {\n      refs.forEach(ref => {\n        if (typeof ref === 'function') {\n          ref(value);\n        } else if (ref != null) {\n          ref.current = value;\n        }\n      });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, refs);\n}\n\n// https://github.com/mui/material-ui/issues/41190#issuecomment-2040873379\nconst SafeReact = {\n  .../*#__PURE__*/ (react__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (react__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(react__WEBPACK_IMPORTED_MODULE_0__, 2)))\n};\n\nconst useInsertionEffect = SafeReact.useInsertionEffect;\nconst useSafeInsertionEffect = useInsertionEffect || (fn => fn());\nfunction useEffectEvent(callback) {\n  const ref = react__WEBPACK_IMPORTED_MODULE_0__.useRef(() => {\n    if (true) {\n      throw new Error('Cannot call an event handler while rendering.');\n    }\n  });\n  useSafeInsertionEffect(() => {\n    ref.current = callback;\n  });\n  return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return ref.current == null ? void 0 : ref.current(...args);\n  }, []);\n}\n\nconst ARROW_UP = 'ArrowUp';\nconst ARROW_DOWN = 'ArrowDown';\nconst ARROW_LEFT = 'ArrowLeft';\nconst ARROW_RIGHT = 'ArrowRight';\nfunction isDifferentRow(index, cols, prevRow) {\n  return Math.floor(index / cols) !== prevRow;\n}\nfunction isIndexOutOfBounds(listRef, index) {\n  return index < 0 || index >= listRef.current.length;\n}\nfunction getMinIndex(listRef, disabledIndices) {\n  return findNonDisabledIndex(listRef, {\n    disabledIndices\n  });\n}\nfunction getMaxIndex(listRef, disabledIndices) {\n  return findNonDisabledIndex(listRef, {\n    decrement: true,\n    startingIndex: listRef.current.length,\n    disabledIndices\n  });\n}\nfunction findNonDisabledIndex(listRef, _temp) {\n  let {\n    startingIndex = -1,\n    decrement = false,\n    disabledIndices,\n    amount = 1\n  } = _temp === void 0 ? {} : _temp;\n  const list = listRef.current;\n  let index = startingIndex;\n  do {\n    index += decrement ? -amount : amount;\n  } while (index >= 0 && index <= list.length - 1 && isDisabled(list, index, disabledIndices));\n  return index;\n}\nfunction getGridNavigatedIndex(elementsRef, _ref) {\n  let {\n    event,\n    orientation,\n    loop,\n    rtl,\n    cols,\n    disabledIndices,\n    minIndex,\n    maxIndex,\n    prevIndex,\n    stopEvent: stop = false\n  } = _ref;\n  let nextIndex = prevIndex;\n  if (event.key === ARROW_UP) {\n    stop && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\n    if (prevIndex === -1) {\n      nextIndex = maxIndex;\n    } else {\n      nextIndex = findNonDisabledIndex(elementsRef, {\n        startingIndex: nextIndex,\n        amount: cols,\n        decrement: true,\n        disabledIndices\n      });\n      if (loop && (prevIndex - cols < minIndex || nextIndex < 0)) {\n        const col = prevIndex % cols;\n        const maxCol = maxIndex % cols;\n        const offset = maxIndex - (maxCol - col);\n        if (maxCol === col) {\n          nextIndex = maxIndex;\n        } else {\n          nextIndex = maxCol > col ? offset : offset - cols;\n        }\n      }\n    }\n    if (isIndexOutOfBounds(elementsRef, nextIndex)) {\n      nextIndex = prevIndex;\n    }\n  }\n  if (event.key === ARROW_DOWN) {\n    stop && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\n    if (prevIndex === -1) {\n      nextIndex = minIndex;\n    } else {\n      nextIndex = findNonDisabledIndex(elementsRef, {\n        startingIndex: prevIndex,\n        amount: cols,\n        disabledIndices\n      });\n      if (loop && prevIndex + cols > maxIndex) {\n        nextIndex = findNonDisabledIndex(elementsRef, {\n          startingIndex: prevIndex % cols - cols,\n          amount: cols,\n          disabledIndices\n        });\n      }\n    }\n    if (isIndexOutOfBounds(elementsRef, nextIndex)) {\n      nextIndex = prevIndex;\n    }\n  }\n\n  // Remains on the same row/column.\n  if (orientation === 'both') {\n    const prevRow = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_6__.floor)(prevIndex / cols);\n    if (event.key === (rtl ? ARROW_LEFT : ARROW_RIGHT)) {\n      stop && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\n      if (prevIndex % cols !== cols - 1) {\n        nextIndex = findNonDisabledIndex(elementsRef, {\n          startingIndex: prevIndex,\n          disabledIndices\n        });\n        if (loop && isDifferentRow(nextIndex, cols, prevRow)) {\n          nextIndex = findNonDisabledIndex(elementsRef, {\n            startingIndex: prevIndex - prevIndex % cols - 1,\n            disabledIndices\n          });\n        }\n      } else if (loop) {\n        nextIndex = findNonDisabledIndex(elementsRef, {\n          startingIndex: prevIndex - prevIndex % cols - 1,\n          disabledIndices\n        });\n      }\n      if (isDifferentRow(nextIndex, cols, prevRow)) {\n        nextIndex = prevIndex;\n      }\n    }\n    if (event.key === (rtl ? ARROW_RIGHT : ARROW_LEFT)) {\n      stop && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\n      if (prevIndex % cols !== 0) {\n        nextIndex = findNonDisabledIndex(elementsRef, {\n          startingIndex: prevIndex,\n          decrement: true,\n          disabledIndices\n        });\n        if (loop && isDifferentRow(nextIndex, cols, prevRow)) {\n          nextIndex = findNonDisabledIndex(elementsRef, {\n            startingIndex: prevIndex + (cols - prevIndex % cols),\n            decrement: true,\n            disabledIndices\n          });\n        }\n      } else if (loop) {\n        nextIndex = findNonDisabledIndex(elementsRef, {\n          startingIndex: prevIndex + (cols - prevIndex % cols),\n          decrement: true,\n          disabledIndices\n        });\n      }\n      if (isDifferentRow(nextIndex, cols, prevRow)) {\n        nextIndex = prevIndex;\n      }\n    }\n    const lastRow = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_6__.floor)(maxIndex / cols) === prevRow;\n    if (isIndexOutOfBounds(elementsRef, nextIndex)) {\n      if (loop && lastRow) {\n        nextIndex = event.key === (rtl ? ARROW_RIGHT : ARROW_LEFT) ? maxIndex : findNonDisabledIndex(elementsRef, {\n          startingIndex: prevIndex - prevIndex % cols - 1,\n          disabledIndices\n        });\n      } else {\n        nextIndex = prevIndex;\n      }\n    }\n  }\n  return nextIndex;\n}\n\n/** For each cell index, gets the item index that occupies that cell */\nfunction buildCellMap(sizes, cols, dense) {\n  const cellMap = [];\n  let startIndex = 0;\n  sizes.forEach((_ref2, index) => {\n    let {\n      width,\n      height\n    } = _ref2;\n    if (width > cols) {\n      if (true) {\n        throw new Error(\"[Floating UI]: Invalid grid - item width at index \" + index + \" is greater than grid columns\");\n      }\n    }\n    let itemPlaced = false;\n    if (dense) {\n      startIndex = 0;\n    }\n    while (!itemPlaced) {\n      const targetCells = [];\n      for (let i = 0; i < width; i++) {\n        for (let j = 0; j < height; j++) {\n          targetCells.push(startIndex + i + j * cols);\n        }\n      }\n      if (startIndex % cols + width <= cols && targetCells.every(cell => cellMap[cell] == null)) {\n        targetCells.forEach(cell => {\n          cellMap[cell] = index;\n        });\n        itemPlaced = true;\n      } else {\n        startIndex++;\n      }\n    }\n  });\n\n  // convert into a non-sparse array\n  return [...cellMap];\n}\n\n/** Gets cell index of an item's corner or -1 when index is -1. */\nfunction getCellIndexOfCorner(index, sizes, cellMap, cols, corner) {\n  if (index === -1) return -1;\n  const firstCellIndex = cellMap.indexOf(index);\n  const sizeItem = sizes[index];\n  switch (corner) {\n    case 'tl':\n      return firstCellIndex;\n    case 'tr':\n      if (!sizeItem) {\n        return firstCellIndex;\n      }\n      return firstCellIndex + sizeItem.width - 1;\n    case 'bl':\n      if (!sizeItem) {\n        return firstCellIndex;\n      }\n      return firstCellIndex + (sizeItem.height - 1) * cols;\n    case 'br':\n      return cellMap.lastIndexOf(index);\n  }\n}\n\n/** Gets all cell indices that correspond to the specified indices */\nfunction getCellIndices(indices, cellMap) {\n  return cellMap.flatMap((index, cellIndex) => indices.includes(index) ? [cellIndex] : []);\n}\nfunction isDisabled(list, index, disabledIndices) {\n  if (disabledIndices) {\n    return disabledIndices.includes(index);\n  }\n  const element = list[index];\n  return element == null || element.hasAttribute('disabled') || element.getAttribute('aria-disabled') === 'true';\n}\n\nvar index = typeof document !== 'undefined' ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n\nfunction sortByDocumentPosition(a, b) {\n  const position = a.compareDocumentPosition(b);\n  if (position & Node.DOCUMENT_POSITION_FOLLOWING || position & Node.DOCUMENT_POSITION_CONTAINED_BY) {\n    return -1;\n  }\n  if (position & Node.DOCUMENT_POSITION_PRECEDING || position & Node.DOCUMENT_POSITION_CONTAINS) {\n    return 1;\n  }\n  return 0;\n}\nfunction areMapsEqual(map1, map2) {\n  if (map1.size !== map2.size) {\n    return false;\n  }\n  for (const [key, value] of map1.entries()) {\n    if (value !== map2.get(key)) {\n      return false;\n    }\n  }\n  return true;\n}\nconst FloatingListContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n  register: () => {},\n  unregister: () => {},\n  map: /*#__PURE__*/new Map(),\n  elementsRef: {\n    current: []\n  }\n});\n/**\n * Provides context for a list of items within the floating element.\n * @see https://floating-ui.com/docs/FloatingList\n */\nfunction FloatingList(props) {\n  const {\n    children,\n    elementsRef,\n    labelsRef\n  } = props;\n  const [map, setMap] = react__WEBPACK_IMPORTED_MODULE_0__.useState(() => new Map());\n  const register = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(node => {\n    setMap(prevMap => new Map(prevMap).set(node, null));\n  }, []);\n  const unregister = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(node => {\n    setMap(prevMap => {\n      const map = new Map(prevMap);\n      map.delete(node);\n      return map;\n    });\n  }, []);\n  index(() => {\n    const newMap = new Map(map);\n    const nodes = Array.from(newMap.keys()).sort(sortByDocumentPosition);\n    nodes.forEach((node, index) => {\n      newMap.set(node, index);\n    });\n    if (!areMapsEqual(map, newMap)) {\n      setMap(newMap);\n    }\n  }, [map]);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(FloatingListContext.Provider, {\n    value: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\n      register,\n      unregister,\n      map,\n      elementsRef,\n      labelsRef\n    }), [register, unregister, map, elementsRef, labelsRef])\n  }, children);\n}\n/**\n * Used to register a list item and its index (DOM position) in the\n * `FloatingList`.\n * @see https://floating-ui.com/docs/FloatingList#uselistitem\n */\nfunction useListItem(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  const {\n    label\n  } = props;\n  const {\n    register,\n    unregister,\n    map,\n    elementsRef,\n    labelsRef\n  } = react__WEBPACK_IMPORTED_MODULE_0__.useContext(FloatingListContext);\n  const [index$1, setIndex] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n  const componentRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const ref = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(node => {\n    componentRef.current = node;\n    if (index$1 !== null) {\n      elementsRef.current[index$1] = node;\n      if (labelsRef) {\n        var _node$textContent;\n        const isLabelDefined = label !== undefined;\n        labelsRef.current[index$1] = isLabelDefined ? label : (_node$textContent = node == null ? void 0 : node.textContent) != null ? _node$textContent : null;\n      }\n    }\n  }, [index$1, elementsRef, labelsRef, label]);\n  index(() => {\n    const node = componentRef.current;\n    if (node) {\n      register(node);\n      return () => {\n        unregister(node);\n      };\n    }\n  }, [register, unregister]);\n  index(() => {\n    const index = componentRef.current ? map.get(componentRef.current) : null;\n    if (index != null) {\n      setIndex(index);\n    }\n  }, [map]);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\n    ref,\n    index: index$1 == null ? -1 : index$1\n  }), [index$1, ref]);\n}\n\nfunction renderJsx(render, computedProps) {\n  if (typeof render === 'function') {\n    return render(computedProps);\n  }\n  if (render) {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(render, computedProps);\n  }\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", computedProps);\n}\nconst CompositeContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n  activeIndex: 0,\n  onNavigate: () => {}\n});\nconst horizontalKeys = [ARROW_LEFT, ARROW_RIGHT];\nconst verticalKeys = [ARROW_UP, ARROW_DOWN];\nconst allKeys = [...horizontalKeys, ...verticalKeys];\n\n/**\n * Creates a single tab stop whose items are navigated by arrow keys, which\n * provides list navigation outside of floating element contexts.\n *\n * This is useful to enable navigation of a list of items that aren’t part of a\n * floating element. A menubar is an example of a composite, with each reference\n * element being an item.\n * @see https://floating-ui.com/docs/Composite\n */\nconst Composite = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function Composite(props, forwardedRef) {\n  const {\n    render,\n    orientation = 'both',\n    loop = true,\n    rtl = false,\n    cols = 1,\n    disabledIndices,\n    activeIndex: externalActiveIndex,\n    onNavigate: externalSetActiveIndex,\n    itemSizes,\n    dense = false,\n    ...domProps\n  } = props;\n  const [internalActiveIndex, internalSetActiveIndex] = react__WEBPACK_IMPORTED_MODULE_0__.useState(0);\n  const activeIndex = externalActiveIndex != null ? externalActiveIndex : internalActiveIndex;\n  const onNavigate = useEffectEvent(externalSetActiveIndex != null ? externalSetActiveIndex : internalSetActiveIndex);\n  const elementsRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef([]);\n  const renderElementProps = render && typeof render !== 'function' ? render.props : {};\n  const contextValue = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\n    activeIndex,\n    onNavigate\n  }), [activeIndex, onNavigate]);\n  const isGrid = cols > 1;\n  function handleKeyDown(event) {\n    if (!allKeys.includes(event.key)) return;\n    let nextIndex = activeIndex;\n    const minIndex = getMinIndex(elementsRef, disabledIndices);\n    const maxIndex = getMaxIndex(elementsRef, disabledIndices);\n    const horizontalEndKey = rtl ? ARROW_LEFT : ARROW_RIGHT;\n    const horizontalStartKey = rtl ? ARROW_RIGHT : ARROW_LEFT;\n    if (isGrid) {\n      const sizes = itemSizes || Array.from({\n        length: elementsRef.current.length\n      }, () => ({\n        width: 1,\n        height: 1\n      }));\n      // To calculate movements on the grid, we use hypothetical cell indices\n      // as if every item was 1x1, then convert back to real indices.\n      const cellMap = buildCellMap(sizes, cols, dense);\n      const minGridIndex = cellMap.findIndex(index => index != null && !isDisabled(elementsRef.current, index, disabledIndices));\n      // last enabled index\n      const maxGridIndex = cellMap.reduce((foundIndex, index, cellIndex) => index != null && !isDisabled(elementsRef.current, index, disabledIndices) ? cellIndex : foundIndex, -1);\n      const maybeNextIndex = cellMap[getGridNavigatedIndex({\n        current: cellMap.map(itemIndex => itemIndex ? elementsRef.current[itemIndex] : null)\n      }, {\n        event,\n        orientation,\n        loop,\n        rtl,\n        cols,\n        // treat undefined (empty grid spaces) as disabled indices so we\n        // don't end up in them\n        disabledIndices: getCellIndices([...(disabledIndices || elementsRef.current.map((_, index) => isDisabled(elementsRef.current, index) ? index : undefined)), undefined], cellMap),\n        minIndex: minGridIndex,\n        maxIndex: maxGridIndex,\n        prevIndex: getCellIndexOfCorner(activeIndex > maxIndex ? minIndex : activeIndex, sizes, cellMap, cols,\n        // use a corner matching the edge closest to the direction we're\n        // moving in so we don't end up in the same item. Prefer\n        // top/left over bottom/right.\n        event.key === ARROW_DOWN ? 'bl' : event.key === horizontalEndKey ? 'tr' : 'tl')\n      })];\n      if (maybeNextIndex != null) {\n        nextIndex = maybeNextIndex;\n      }\n    }\n    const toEndKeys = {\n      horizontal: [horizontalEndKey],\n      vertical: [ARROW_DOWN],\n      both: [horizontalEndKey, ARROW_DOWN]\n    }[orientation];\n    const toStartKeys = {\n      horizontal: [horizontalStartKey],\n      vertical: [ARROW_UP],\n      both: [horizontalStartKey, ARROW_UP]\n    }[orientation];\n    const preventedKeys = isGrid ? allKeys : {\n      horizontal: horizontalKeys,\n      vertical: verticalKeys,\n      both: allKeys\n    }[orientation];\n    if (nextIndex === activeIndex && [...toEndKeys, ...toStartKeys].includes(event.key)) {\n      if (loop && nextIndex === maxIndex && toEndKeys.includes(event.key)) {\n        nextIndex = minIndex;\n      } else if (loop && nextIndex === minIndex && toStartKeys.includes(event.key)) {\n        nextIndex = maxIndex;\n      } else {\n        nextIndex = findNonDisabledIndex(elementsRef, {\n          startingIndex: nextIndex,\n          decrement: toStartKeys.includes(event.key),\n          disabledIndices\n        });\n      }\n    }\n    if (nextIndex !== activeIndex && !isIndexOutOfBounds(elementsRef, nextIndex)) {\n      var _elementsRef$current$;\n      event.stopPropagation();\n      if (preventedKeys.includes(event.key)) {\n        event.preventDefault();\n      }\n      onNavigate(nextIndex);\n      (_elementsRef$current$ = elementsRef.current[nextIndex]) == null || _elementsRef$current$.focus();\n    }\n  }\n  const computedProps = {\n    ...domProps,\n    ...renderElementProps,\n    ref: forwardedRef,\n    'aria-orientation': orientation === 'both' ? undefined : orientation,\n    onKeyDown(e) {\n      domProps.onKeyDown == null || domProps.onKeyDown(e);\n      renderElementProps.onKeyDown == null || renderElementProps.onKeyDown(e);\n      handleKeyDown(e);\n    }\n  };\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(CompositeContext.Provider, {\n    value: contextValue\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(FloatingList, {\n    elementsRef: elementsRef\n  }, renderJsx(render, computedProps)));\n});\n/**\n * @see https://floating-ui.com/docs/Composite\n */\nconst CompositeItem = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function CompositeItem(props, forwardedRef) {\n  const {\n    render,\n    ...domProps\n  } = props;\n  const renderElementProps = render && typeof render !== 'function' ? render.props : {};\n  const {\n    activeIndex,\n    onNavigate\n  } = react__WEBPACK_IMPORTED_MODULE_0__.useContext(CompositeContext);\n  const {\n    ref,\n    index\n  } = useListItem();\n  const mergedRef = useMergeRefs([ref, forwardedRef, renderElementProps.ref]);\n  const isActive = activeIndex === index;\n  const computedProps = {\n    ...domProps,\n    ...renderElementProps,\n    ref: mergedRef,\n    tabIndex: isActive ? 0 : -1,\n    'data-active': isActive ? '' : undefined,\n    onFocus(e) {\n      domProps.onFocus == null || domProps.onFocus(e);\n      renderElementProps.onFocus == null || renderElementProps.onFocus(e);\n      onNavigate(index);\n    }\n  };\n  return renderJsx(render, computedProps);\n});\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nlet serverHandoffComplete = false;\nlet count = 0;\nconst genId = () => // Ensure the id is unique with multiple independent versions of Floating UI\n// on <React 18\n\"floating-ui-\" + Math.random().toString(36).slice(2, 6) + count++;\nfunction useFloatingId() {\n  const [id, setId] = react__WEBPACK_IMPORTED_MODULE_0__.useState(() => serverHandoffComplete ? genId() : undefined);\n  index(() => {\n    if (id == null) {\n      setId(genId());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    serverHandoffComplete = true;\n  }, []);\n  return id;\n}\nconst useReactId = SafeReact.useId;\n\n/**\n * Uses React 18's built-in `useId()` when available, or falls back to a\n * slightly less performant (requiring a double render) implementation for\n * earlier React versions.\n * @see https://floating-ui.com/docs/react-utils#useid\n */\nconst useId = useReactId || useFloatingId;\n\nlet devMessageSet;\nif (true) {\n  devMessageSet = /*#__PURE__*/new Set();\n}\nfunction warn() {\n  var _devMessageSet;\n  for (var _len = arguments.length, messages = new Array(_len), _key = 0; _key < _len; _key++) {\n    messages[_key] = arguments[_key];\n  }\n  const message = \"Floating UI: \" + messages.join(' ');\n  if (!((_devMessageSet = devMessageSet) != null && _devMessageSet.has(message))) {\n    var _devMessageSet2;\n    (_devMessageSet2 = devMessageSet) == null || _devMessageSet2.add(message);\n    console.warn(message);\n  }\n}\nfunction error() {\n  var _devMessageSet3;\n  for (var _len2 = arguments.length, messages = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    messages[_key2] = arguments[_key2];\n  }\n  const message = \"Floating UI: \" + messages.join(' ');\n  if (!((_devMessageSet3 = devMessageSet) != null && _devMessageSet3.has(message))) {\n    var _devMessageSet4;\n    (_devMessageSet4 = devMessageSet) == null || _devMessageSet4.add(message);\n    console.error(message);\n  }\n}\n\n/**\n * Renders a pointing arrow triangle.\n * @see https://floating-ui.com/docs/FloatingArrow\n */\nconst FloatingArrow = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function FloatingArrow(props, ref) {\n  const {\n    context: {\n      placement,\n      elements: {\n        floating\n      },\n      middlewareData: {\n        arrow,\n        shift\n      }\n    },\n    width = 14,\n    height = 7,\n    tipRadius = 0,\n    strokeWidth = 0,\n    staticOffset,\n    stroke,\n    d,\n    style: {\n      transform,\n      ...restStyle\n    } = {},\n    ...rest\n  } = props;\n  if (true) {\n    if (!ref) {\n      warn('The `ref` prop is required for `FloatingArrow`.');\n    }\n  }\n  const clipPathId = useId();\n  const [isRTL, setIsRTL] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n\n  // https://github.com/floating-ui/floating-ui/issues/2932\n  index(() => {\n    if (!floating) return;\n    const isRTL = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.getComputedStyle)(floating).direction === 'rtl';\n    if (isRTL) {\n      setIsRTL(true);\n    }\n  }, [floating]);\n  if (!floating) {\n    return null;\n  }\n  const [side, alignment] = placement.split('-');\n  const isVerticalSide = side === 'top' || side === 'bottom';\n  let computedStaticOffset = staticOffset;\n  if (isVerticalSide && shift != null && shift.x || !isVerticalSide && shift != null && shift.y) {\n    computedStaticOffset = null;\n  }\n\n  // Strokes must be double the border width, this ensures the stroke's width\n  // works as you'd expect.\n  const computedStrokeWidth = strokeWidth * 2;\n  const halfStrokeWidth = computedStrokeWidth / 2;\n  const svgX = width / 2 * (tipRadius / -8 + 1);\n  const svgY = height / 2 * tipRadius / 4;\n  const isCustomShape = !!d;\n  const yOffsetProp = computedStaticOffset && alignment === 'end' ? 'bottom' : 'top';\n  let xOffsetProp = computedStaticOffset && alignment === 'end' ? 'right' : 'left';\n  if (computedStaticOffset && isRTL) {\n    xOffsetProp = alignment === 'end' ? 'left' : 'right';\n  }\n  const arrowX = (arrow == null ? void 0 : arrow.x) != null ? computedStaticOffset || arrow.x : '';\n  const arrowY = (arrow == null ? void 0 : arrow.y) != null ? computedStaticOffset || arrow.y : '';\n  const dValue = d || 'M0,0' + (\" H\" + width) + (\" L\" + (width - svgX) + \",\" + (height - svgY)) + (\" Q\" + width / 2 + \",\" + height + \" \" + svgX + \",\" + (height - svgY)) + ' Z';\n  const rotation = {\n    top: isCustomShape ? 'rotate(180deg)' : '',\n    left: isCustomShape ? 'rotate(90deg)' : 'rotate(-90deg)',\n    bottom: isCustomShape ? '' : 'rotate(180deg)',\n    right: isCustomShape ? 'rotate(-90deg)' : 'rotate(90deg)'\n  }[side];\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", _extends({}, rest, {\n    \"aria-hidden\": true,\n    ref: ref,\n    width: isCustomShape ? width : width + computedStrokeWidth,\n    height: width,\n    viewBox: \"0 0 \" + width + \" \" + (height > width ? height : width),\n    style: {\n      position: 'absolute',\n      pointerEvents: 'none',\n      [xOffsetProp]: arrowX,\n      [yOffsetProp]: arrowY,\n      [side]: isVerticalSide || isCustomShape ? '100%' : \"calc(100% - \" + computedStrokeWidth / 2 + \"px)\",\n      transform: [rotation, transform].filter(t => !!t).join(' '),\n      ...restStyle\n    }\n  }), computedStrokeWidth > 0 && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    clipPath: \"url(#\" + clipPathId + \")\",\n    fill: \"none\",\n    stroke: stroke\n    // Account for the stroke on the fill path rendered below.\n    ,\n    strokeWidth: computedStrokeWidth + (d ? 0 : 1),\n    d: dValue\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    stroke: computedStrokeWidth && !d ? rest.fill : 'none',\n    d: dValue\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"clipPath\", {\n    id: clipPathId\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"rect\", {\n    x: -halfStrokeWidth,\n    y: halfStrokeWidth * (isCustomShape ? -1 : 1),\n    width: width + computedStrokeWidth,\n    height: width\n  })));\n});\n\nfunction createPubSub() {\n  const map = new Map();\n  return {\n    emit(event, data) {\n      var _map$get;\n      (_map$get = map.get(event)) == null || _map$get.forEach(handler => handler(data));\n    },\n    on(event, listener) {\n      map.set(event, [...(map.get(event) || []), listener]);\n    },\n    off(event, listener) {\n      var _map$get2;\n      map.set(event, ((_map$get2 = map.get(event)) == null ? void 0 : _map$get2.filter(l => l !== listener)) || []);\n    }\n  };\n}\n\nconst FloatingNodeContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\nconst FloatingTreeContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\n\n/**\n * Returns the parent node id for nested floating elements, if available.\n * Returns `null` for top-level floating elements.\n */\nconst useFloatingParentNodeId = () => {\n  var _React$useContext;\n  return ((_React$useContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(FloatingNodeContext)) == null ? void 0 : _React$useContext.id) || null;\n};\n\n/**\n * Returns the nearest floating tree context, if available.\n */\nconst useFloatingTree = () => react__WEBPACK_IMPORTED_MODULE_0__.useContext(FloatingTreeContext);\n\n/**\n * Registers a node into the `FloatingTree`, returning its id.\n * @see https://floating-ui.com/docs/FloatingTree\n */\nfunction useFloatingNodeId(customParentId) {\n  const id = useId();\n  const tree = useFloatingTree();\n  const reactParentId = useFloatingParentNodeId();\n  const parentId = customParentId || reactParentId;\n  index(() => {\n    const node = {\n      id,\n      parentId\n    };\n    tree == null || tree.addNode(node);\n    return () => {\n      tree == null || tree.removeNode(node);\n    };\n  }, [tree, id, parentId]);\n  return id;\n}\n/**\n * Provides parent node context for nested floating elements.\n * @see https://floating-ui.com/docs/FloatingTree\n */\nfunction FloatingNode(props) {\n  const {\n    children,\n    id\n  } = props;\n  const parentId = useFloatingParentNodeId();\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(FloatingNodeContext.Provider, {\n    value: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\n      id,\n      parentId\n    }), [id, parentId])\n  }, children);\n}\n/**\n * Provides context for nested floating elements when they are not children of\n * each other on the DOM.\n * This is not necessary in all cases, except when there must be explicit communication between parent and child floating elements. It is necessary for:\n * - The `bubbles` option in the `useDismiss()` Hook\n * - Nested virtual list navigation\n * - Nested floating elements that each open on hover\n * - Custom communication between parent and child floating elements\n * @see https://floating-ui.com/docs/FloatingTree\n */\nfunction FloatingTree(props) {\n  const {\n    children\n  } = props;\n  const nodesRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef([]);\n  const addNode = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(node => {\n    nodesRef.current = [...nodesRef.current, node];\n  }, []);\n  const removeNode = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(node => {\n    nodesRef.current = nodesRef.current.filter(n => n !== node);\n  }, []);\n  const events = react__WEBPACK_IMPORTED_MODULE_0__.useState(() => createPubSub())[0];\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(FloatingTreeContext.Provider, {\n    value: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\n      nodesRef,\n      addNode,\n      removeNode,\n      events\n    }), [addNode, removeNode, events])\n  }, children);\n}\n\nfunction createAttribute(name) {\n  return \"data-floating-ui-\" + name;\n}\n\nfunction useLatestRef(value) {\n  const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(value);\n  index(() => {\n    ref.current = value;\n  });\n  return ref;\n}\n\nconst safePolygonIdentifier = /*#__PURE__*/createAttribute('safe-polygon');\nfunction getDelay(value, prop, pointerType) {\n  if (pointerType && !(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isMouseLikePointerType)(pointerType)) {\n    return 0;\n  }\n  if (typeof value === 'number') {\n    return value;\n  }\n  return value == null ? void 0 : value[prop];\n}\n/**\n * Opens the floating element while hovering over the reference element, like\n * CSS `:hover`.\n * @see https://floating-ui.com/docs/useHover\n */\nfunction useHover(context, props) {\n  if (props === void 0) {\n    props = {};\n  }\n  const {\n    open,\n    onOpenChange,\n    dataRef,\n    events,\n    elements\n  } = context;\n  const {\n    enabled = true,\n    delay = 0,\n    handleClose = null,\n    mouseOnly = false,\n    restMs = 0,\n    move = true\n  } = props;\n  const tree = useFloatingTree();\n  const parentId = useFloatingParentNodeId();\n  const handleCloseRef = useLatestRef(handleClose);\n  const delayRef = useLatestRef(delay);\n  const openRef = useLatestRef(open);\n  const pointerTypeRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\n  const timeoutRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(-1);\n  const handlerRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\n  const restTimeoutRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(-1);\n  const blockMouseMoveRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(true);\n  const performedPointerEventsMutationRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n  const unbindMouseMoveRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(() => {});\n  const restTimeoutPendingRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n  const isHoverOpen = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {\n    var _dataRef$current$open;\n    const type = (_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type;\n    return (type == null ? void 0 : type.includes('mouse')) && type !== 'mousedown';\n  }, [dataRef]);\n\n  // When closing before opening, clear the delay timeouts to cancel it\n  // from showing.\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!enabled) return;\n    function onOpenChange(_ref) {\n      let {\n        open\n      } = _ref;\n      if (!open) {\n        clearTimeout(timeoutRef.current);\n        clearTimeout(restTimeoutRef.current);\n        blockMouseMoveRef.current = true;\n        restTimeoutPendingRef.current = false;\n      }\n    }\n    events.on('openchange', onOpenChange);\n    return () => {\n      events.off('openchange', onOpenChange);\n    };\n  }, [enabled, events]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!enabled) return;\n    if (!handleCloseRef.current) return;\n    if (!open) return;\n    function onLeave(event) {\n      if (isHoverOpen()) {\n        onOpenChange(false, event, 'hover');\n      }\n    }\n    const html = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(elements.floating).documentElement;\n    html.addEventListener('mouseleave', onLeave);\n    return () => {\n      html.removeEventListener('mouseleave', onLeave);\n    };\n  }, [elements.floating, open, onOpenChange, enabled, handleCloseRef, isHoverOpen]);\n  const closeWithDelay = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(function (event, runElseBranch, reason) {\n    if (runElseBranch === void 0) {\n      runElseBranch = true;\n    }\n    if (reason === void 0) {\n      reason = 'hover';\n    }\n    const closeDelay = getDelay(delayRef.current, 'close', pointerTypeRef.current);\n    if (closeDelay && !handlerRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = window.setTimeout(() => onOpenChange(false, event, reason), closeDelay);\n    } else if (runElseBranch) {\n      clearTimeout(timeoutRef.current);\n      onOpenChange(false, event, reason);\n    }\n  }, [delayRef, onOpenChange]);\n  const cleanupMouseMoveHandler = useEffectEvent(() => {\n    unbindMouseMoveRef.current();\n    handlerRef.current = undefined;\n  });\n  const clearPointerEvents = useEffectEvent(() => {\n    if (performedPointerEventsMutationRef.current) {\n      const body = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(elements.floating).body;\n      body.style.pointerEvents = '';\n      body.removeAttribute(safePolygonIdentifier);\n      performedPointerEventsMutationRef.current = false;\n    }\n  });\n  const isClickLikeOpenEvent = useEffectEvent(() => {\n    return dataRef.current.openEvent ? ['click', 'mousedown'].includes(dataRef.current.openEvent.type) : false;\n  });\n\n  // Registering the mouse events on the reference directly to bypass React's\n  // delegation system. If the cursor was on a disabled element and then entered\n  // the reference (no gap), `mouseenter` doesn't fire in the delegation system.\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!enabled) return;\n    function onMouseEnter(event) {\n      clearTimeout(timeoutRef.current);\n      blockMouseMoveRef.current = false;\n      if (mouseOnly && !(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isMouseLikePointerType)(pointerTypeRef.current) || restMs > 0 && !getDelay(delayRef.current, 'open')) {\n        return;\n      }\n      const openDelay = getDelay(delayRef.current, 'open', pointerTypeRef.current);\n      if (openDelay) {\n        timeoutRef.current = window.setTimeout(() => {\n          if (!openRef.current) {\n            onOpenChange(true, event, 'hover');\n          }\n        }, openDelay);\n      } else if (!open) {\n        onOpenChange(true, event, 'hover');\n      }\n    }\n    function onMouseLeave(event) {\n      if (isClickLikeOpenEvent()) return;\n      unbindMouseMoveRef.current();\n      const doc = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(elements.floating);\n      clearTimeout(restTimeoutRef.current);\n      restTimeoutPendingRef.current = false;\n      if (handleCloseRef.current && dataRef.current.floatingContext) {\n        // Prevent clearing `onScrollMouseLeave` timeout.\n        if (!open) {\n          clearTimeout(timeoutRef.current);\n        }\n        handlerRef.current = handleCloseRef.current({\n          ...dataRef.current.floatingContext,\n          tree,\n          x: event.clientX,\n          y: event.clientY,\n          onClose() {\n            clearPointerEvents();\n            cleanupMouseMoveHandler();\n            if (!isClickLikeOpenEvent()) {\n              closeWithDelay(event, true, 'safe-polygon');\n            }\n          }\n        });\n        const handler = handlerRef.current;\n        doc.addEventListener('mousemove', handler);\n        unbindMouseMoveRef.current = () => {\n          doc.removeEventListener('mousemove', handler);\n        };\n        return;\n      }\n\n      // Allow interactivity without `safePolygon` on touch devices. With a\n      // pointer, a short close delay is an alternative, so it should work\n      // consistently.\n      const shouldClose = pointerTypeRef.current === 'touch' ? !(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(elements.floating, event.relatedTarget) : true;\n      if (shouldClose) {\n        closeWithDelay(event);\n      }\n    }\n\n    // Ensure the floating element closes after scrolling even if the pointer\n    // did not move.\n    // https://github.com/floating-ui/floating-ui/discussions/1692\n    function onScrollMouseLeave(event) {\n      if (isClickLikeOpenEvent()) return;\n      if (!dataRef.current.floatingContext) return;\n      handleCloseRef.current == null || handleCloseRef.current({\n        ...dataRef.current.floatingContext,\n        tree,\n        x: event.clientX,\n        y: event.clientY,\n        onClose() {\n          clearPointerEvents();\n          cleanupMouseMoveHandler();\n          if (!isClickLikeOpenEvent()) {\n            closeWithDelay(event);\n          }\n        }\n      })(event);\n    }\n    if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.isElement)(elements.domReference)) {\n      var _elements$floating;\n      const ref = elements.domReference;\n      open && ref.addEventListener('mouseleave', onScrollMouseLeave);\n      (_elements$floating = elements.floating) == null || _elements$floating.addEventListener('mouseleave', onScrollMouseLeave);\n      move && ref.addEventListener('mousemove', onMouseEnter, {\n        once: true\n      });\n      ref.addEventListener('mouseenter', onMouseEnter);\n      ref.addEventListener('mouseleave', onMouseLeave);\n      return () => {\n        var _elements$floating2;\n        open && ref.removeEventListener('mouseleave', onScrollMouseLeave);\n        (_elements$floating2 = elements.floating) == null || _elements$floating2.removeEventListener('mouseleave', onScrollMouseLeave);\n        move && ref.removeEventListener('mousemove', onMouseEnter);\n        ref.removeEventListener('mouseenter', onMouseEnter);\n        ref.removeEventListener('mouseleave', onMouseLeave);\n      };\n    }\n  }, [elements, enabled, context, mouseOnly, restMs, move, closeWithDelay, cleanupMouseMoveHandler, clearPointerEvents, onOpenChange, open, openRef, tree, delayRef, handleCloseRef, dataRef, isClickLikeOpenEvent]);\n\n  // Block pointer-events of every element other than the reference and floating\n  // while the floating element is open and has a `handleClose` handler. Also\n  // handles nested floating elements.\n  // https://github.com/floating-ui/floating-ui/issues/1722\n  index(() => {\n    var _handleCloseRef$curre;\n    if (!enabled) return;\n    if (open && (_handleCloseRef$curre = handleCloseRef.current) != null && _handleCloseRef$curre.__options.blockPointerEvents && isHoverOpen()) {\n      performedPointerEventsMutationRef.current = true;\n      const floatingEl = elements.floating;\n      if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.isElement)(elements.domReference) && floatingEl) {\n        var _tree$nodesRef$curren;\n        const body = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(elements.floating).body;\n        body.setAttribute(safePolygonIdentifier, '');\n        const ref = elements.domReference;\n        const parentFloating = tree == null || (_tree$nodesRef$curren = tree.nodesRef.current.find(node => node.id === parentId)) == null || (_tree$nodesRef$curren = _tree$nodesRef$curren.context) == null ? void 0 : _tree$nodesRef$curren.elements.floating;\n        if (parentFloating) {\n          parentFloating.style.pointerEvents = '';\n        }\n        body.style.pointerEvents = 'none';\n        ref.style.pointerEvents = 'auto';\n        floatingEl.style.pointerEvents = 'auto';\n        return () => {\n          body.style.pointerEvents = '';\n          ref.style.pointerEvents = '';\n          floatingEl.style.pointerEvents = '';\n        };\n      }\n    }\n  }, [enabled, open, parentId, elements, tree, handleCloseRef, isHoverOpen]);\n  index(() => {\n    if (!open) {\n      pointerTypeRef.current = undefined;\n      restTimeoutPendingRef.current = false;\n      cleanupMouseMoveHandler();\n      clearPointerEvents();\n    }\n  }, [open, cleanupMouseMoveHandler, clearPointerEvents]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    return () => {\n      cleanupMouseMoveHandler();\n      clearTimeout(timeoutRef.current);\n      clearTimeout(restTimeoutRef.current);\n      clearPointerEvents();\n    };\n  }, [enabled, elements.domReference, cleanupMouseMoveHandler, clearPointerEvents]);\n  const reference = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    function setPointerRef(event) {\n      pointerTypeRef.current = event.pointerType;\n    }\n    return {\n      onPointerDown: setPointerRef,\n      onPointerEnter: setPointerRef,\n      onMouseMove(event) {\n        const {\n          nativeEvent\n        } = event;\n        function handleMouseMove() {\n          if (!blockMouseMoveRef.current && !openRef.current) {\n            onOpenChange(true, nativeEvent, 'hover');\n          }\n        }\n        if (mouseOnly && !(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isMouseLikePointerType)(pointerTypeRef.current)) {\n          return;\n        }\n        if (open || restMs === 0) {\n          return;\n        }\n\n        // Ignore insignificant movements to account for tremors.\n        if (restTimeoutPendingRef.current && event.movementX ** 2 + event.movementY ** 2 < 2) {\n          return;\n        }\n        clearTimeout(restTimeoutRef.current);\n        if (pointerTypeRef.current === 'touch') {\n          handleMouseMove();\n        } else {\n          restTimeoutPendingRef.current = true;\n          restTimeoutRef.current = window.setTimeout(handleMouseMove, restMs);\n        }\n      }\n    };\n  }, [mouseOnly, onOpenChange, open, openRef, restMs]);\n  const floating = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\n    onMouseEnter() {\n      clearTimeout(timeoutRef.current);\n    },\n    onMouseLeave(event) {\n      if (!isClickLikeOpenEvent()) {\n        closeWithDelay(event.nativeEvent, false);\n      }\n    }\n  }), [closeWithDelay, isClickLikeOpenEvent]);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => enabled ? {\n    reference,\n    floating\n  } : {}, [enabled, reference, floating]);\n}\n\nconst NOOP = () => {};\nconst FloatingDelayGroupContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n  delay: 0,\n  initialDelay: 0,\n  timeoutMs: 0,\n  currentId: null,\n  setCurrentId: NOOP,\n  setState: NOOP,\n  isInstantPhase: false\n});\n\n/**\n * @deprecated\n * Use the return value of `useDelayGroup()` instead.\n */\nconst useDelayGroupContext = () => react__WEBPACK_IMPORTED_MODULE_0__.useContext(FloatingDelayGroupContext);\n/**\n * Provides context for a group of floating elements that should share a\n * `delay`.\n * @see https://floating-ui.com/docs/FloatingDelayGroup\n */\nfunction FloatingDelayGroup(props) {\n  const {\n    children,\n    delay,\n    timeoutMs = 0\n  } = props;\n  const [state, setState] = react__WEBPACK_IMPORTED_MODULE_0__.useReducer((prev, next) => ({\n    ...prev,\n    ...next\n  }), {\n    delay,\n    timeoutMs,\n    initialDelay: delay,\n    currentId: null,\n    isInstantPhase: false\n  });\n  const initialCurrentIdRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const setCurrentId = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(currentId => {\n    setState({\n      currentId\n    });\n  }, []);\n  index(() => {\n    if (state.currentId) {\n      if (initialCurrentIdRef.current === null) {\n        initialCurrentIdRef.current = state.currentId;\n      } else if (!state.isInstantPhase) {\n        setState({\n          isInstantPhase: true\n        });\n      }\n    } else {\n      if (state.isInstantPhase) {\n        setState({\n          isInstantPhase: false\n        });\n      }\n      initialCurrentIdRef.current = null;\n    }\n  }, [state.currentId, state.isInstantPhase]);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(FloatingDelayGroupContext.Provider, {\n    value: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\n      ...state,\n      setState,\n      setCurrentId\n    }), [state, setCurrentId])\n  }, children);\n}\n/**\n * Enables grouping when called inside a component that's a child of a\n * `FloatingDelayGroup`.\n * @see https://floating-ui.com/docs/FloatingDelayGroup\n */\nfunction useDelayGroup(context, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    open,\n    onOpenChange,\n    floatingId\n  } = context;\n  const {\n    id: optionId,\n    enabled = true\n  } = options;\n  const id = optionId != null ? optionId : floatingId;\n  const groupContext = useDelayGroupContext();\n  const {\n    currentId,\n    setCurrentId,\n    initialDelay,\n    setState,\n    timeoutMs\n  } = groupContext;\n  index(() => {\n    if (!enabled) return;\n    if (!currentId) return;\n    setState({\n      delay: {\n        open: 1,\n        close: getDelay(initialDelay, 'close')\n      }\n    });\n    if (currentId !== id) {\n      onOpenChange(false);\n    }\n  }, [enabled, id, onOpenChange, setState, currentId, initialDelay]);\n  index(() => {\n    function unset() {\n      onOpenChange(false);\n      setState({\n        delay: initialDelay,\n        currentId: null\n      });\n    }\n    if (!enabled) return;\n    if (!currentId) return;\n    if (!open && currentId === id) {\n      if (timeoutMs) {\n        const timeout = window.setTimeout(unset, timeoutMs);\n        return () => {\n          clearTimeout(timeout);\n        };\n      }\n      unset();\n    }\n  }, [enabled, open, setState, currentId, id, onOpenChange, initialDelay, timeoutMs]);\n  index(() => {\n    if (!enabled) return;\n    if (setCurrentId === NOOP || !open) return;\n    setCurrentId(id);\n  }, [enabled, open, setCurrentId, id]);\n  return groupContext;\n}\n\nlet rafId = 0;\nfunction enqueueFocus(el, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    preventScroll = false,\n    cancelPrevious = true,\n    sync = false\n  } = options;\n  cancelPrevious && cancelAnimationFrame(rafId);\n  const exec = () => el == null ? void 0 : el.focus({\n    preventScroll\n  });\n  if (sync) {\n    exec();\n  } else {\n    rafId = requestAnimationFrame(exec);\n  }\n}\n\nfunction getAncestors(nodes, id) {\n  var _nodes$find;\n  let allAncestors = [];\n  let currentParentId = (_nodes$find = nodes.find(node => node.id === id)) == null ? void 0 : _nodes$find.parentId;\n  while (currentParentId) {\n    const currentNode = nodes.find(node => node.id === currentParentId);\n    currentParentId = currentNode == null ? void 0 : currentNode.parentId;\n    if (currentNode) {\n      allAncestors = allAncestors.concat(currentNode);\n    }\n  }\n  return allAncestors;\n}\n\nfunction getChildren(nodes, id) {\n  let allChildren = nodes.filter(node => {\n    var _node$context;\n    return node.parentId === id && ((_node$context = node.context) == null ? void 0 : _node$context.open);\n  });\n  let currentChildren = allChildren;\n  while (currentChildren.length) {\n    currentChildren = nodes.filter(node => {\n      var _currentChildren;\n      return (_currentChildren = currentChildren) == null ? void 0 : _currentChildren.some(n => {\n        var _node$context2;\n        return node.parentId === n.id && ((_node$context2 = node.context) == null ? void 0 : _node$context2.open);\n      });\n    });\n    allChildren = allChildren.concat(currentChildren);\n  }\n  return allChildren;\n}\nfunction getDeepestNode(nodes, id) {\n  let deepestNodeId;\n  let maxDepth = -1;\n  function findDeepest(nodeId, depth) {\n    if (depth > maxDepth) {\n      deepestNodeId = nodeId;\n      maxDepth = depth;\n    }\n    const children = getChildren(nodes, nodeId);\n    children.forEach(child => {\n      findDeepest(child.id, depth + 1);\n    });\n  }\n  findDeepest(id, 0);\n  return nodes.find(node => node.id === deepestNodeId);\n}\n\n// Modified to add conditional `aria-hidden` support:\n// https://github.com/theKashey/aria-hidden/blob/9220c8f4a4fd35f63bee5510a9f41a37264382d4/src/index.ts\nlet counterMap = /*#__PURE__*/new WeakMap();\nlet uncontrolledElementsSet = /*#__PURE__*/new WeakSet();\nlet markerMap = {};\nlet lockCount$1 = 0;\nconst supportsInert = () => typeof HTMLElement !== 'undefined' && 'inert' in HTMLElement.prototype;\nconst unwrapHost = node => node && (node.host || unwrapHost(node.parentNode));\nconst correctElements = (parent, targets) => targets.map(target => {\n  if (parent.contains(target)) {\n    return target;\n  }\n  const correctedTarget = unwrapHost(target);\n  if (parent.contains(correctedTarget)) {\n    return correctedTarget;\n  }\n  return null;\n}).filter(x => x != null);\nfunction applyAttributeToOthers(uncorrectedAvoidElements, body, ariaHidden, inert) {\n  const markerName = 'data-floating-ui-inert';\n  const controlAttribute = inert ? 'inert' : ariaHidden ? 'aria-hidden' : null;\n  const avoidElements = correctElements(body, uncorrectedAvoidElements);\n  const elementsToKeep = new Set();\n  const elementsToStop = new Set(avoidElements);\n  const hiddenElements = [];\n  if (!markerMap[markerName]) {\n    markerMap[markerName] = new WeakMap();\n  }\n  const markerCounter = markerMap[markerName];\n  avoidElements.forEach(keep);\n  deep(body);\n  elementsToKeep.clear();\n  function keep(el) {\n    if (!el || elementsToKeep.has(el)) {\n      return;\n    }\n    elementsToKeep.add(el);\n    el.parentNode && keep(el.parentNode);\n  }\n  function deep(parent) {\n    if (!parent || elementsToStop.has(parent)) {\n      return;\n    }\n    [].forEach.call(parent.children, node => {\n      if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.getNodeName)(node) === 'script') return;\n      if (elementsToKeep.has(node)) {\n        deep(node);\n      } else {\n        const attr = controlAttribute ? node.getAttribute(controlAttribute) : null;\n        const alreadyHidden = attr !== null && attr !== 'false';\n        const counterValue = (counterMap.get(node) || 0) + 1;\n        const markerValue = (markerCounter.get(node) || 0) + 1;\n        counterMap.set(node, counterValue);\n        markerCounter.set(node, markerValue);\n        hiddenElements.push(node);\n        if (counterValue === 1 && alreadyHidden) {\n          uncontrolledElementsSet.add(node);\n        }\n        if (markerValue === 1) {\n          node.setAttribute(markerName, '');\n        }\n        if (!alreadyHidden && controlAttribute) {\n          node.setAttribute(controlAttribute, 'true');\n        }\n      }\n    });\n  }\n  lockCount$1++;\n  return () => {\n    hiddenElements.forEach(element => {\n      const counterValue = (counterMap.get(element) || 0) - 1;\n      const markerValue = (markerCounter.get(element) || 0) - 1;\n      counterMap.set(element, counterValue);\n      markerCounter.set(element, markerValue);\n      if (!counterValue) {\n        if (!uncontrolledElementsSet.has(element) && controlAttribute) {\n          element.removeAttribute(controlAttribute);\n        }\n        uncontrolledElementsSet.delete(element);\n      }\n      if (!markerValue) {\n        element.removeAttribute(markerName);\n      }\n    });\n    lockCount$1--;\n    if (!lockCount$1) {\n      counterMap = new WeakMap();\n      counterMap = new WeakMap();\n      uncontrolledElementsSet = new WeakSet();\n      markerMap = {};\n    }\n  };\n}\nfunction markOthers(avoidElements, ariaHidden, inert) {\n  if (ariaHidden === void 0) {\n    ariaHidden = false;\n  }\n  if (inert === void 0) {\n    inert = false;\n  }\n  const body = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(avoidElements[0]).body;\n  return applyAttributeToOthers(avoidElements.concat(Array.from(body.querySelectorAll('[aria-live]'))), body, ariaHidden, inert);\n}\n\nconst getTabbableOptions = () => ({\n  getShadowRoot: true,\n  displayCheck:\n  // JSDOM does not support the `tabbable` library. To solve this we can\n  // check if `ResizeObserver` is a real function (not polyfilled), which\n  // determines if the current environment is JSDOM-like.\n  typeof ResizeObserver === 'function' && ResizeObserver.toString().includes('[native code]') ? 'full' : 'none'\n});\nfunction getTabbableIn(container, direction) {\n  const allTabbable = (0,tabbable__WEBPACK_IMPORTED_MODULE_7__.tabbable)(container, getTabbableOptions());\n  if (direction === 'prev') {\n    allTabbable.reverse();\n  }\n  const activeIndex = allTabbable.indexOf((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.activeElement)((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(container)));\n  const nextTabbableElements = allTabbable.slice(activeIndex + 1);\n  return nextTabbableElements[0];\n}\nfunction getNextTabbable() {\n  return getTabbableIn(document.body, 'next');\n}\nfunction getPreviousTabbable() {\n  return getTabbableIn(document.body, 'prev');\n}\nfunction isOutsideEvent(event, container) {\n  const containerElement = container || event.currentTarget;\n  const relatedTarget = event.relatedTarget;\n  return !relatedTarget || !(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(containerElement, relatedTarget);\n}\nfunction disableFocusInside(container) {\n  const tabbableElements = (0,tabbable__WEBPACK_IMPORTED_MODULE_7__.tabbable)(container, getTabbableOptions());\n  tabbableElements.forEach(element => {\n    element.dataset.tabindex = element.getAttribute('tabindex') || '';\n    element.setAttribute('tabindex', '-1');\n  });\n}\nfunction enableFocusInside(container) {\n  const elements = container.querySelectorAll('[data-tabindex]');\n  elements.forEach(element => {\n    const tabindex = element.dataset.tabindex;\n    delete element.dataset.tabindex;\n    if (tabindex) {\n      element.setAttribute('tabindex', tabindex);\n    } else {\n      element.removeAttribute('tabindex');\n    }\n  });\n}\n\n// See Diego Haz's Sandbox for making this logic work well on Safari/iOS:\n// https://codesandbox.io/s/tabbable-portal-f4tng?file=/src/FocusTrap.tsx\n\nconst HIDDEN_STYLES = {\n  border: 0,\n  clip: 'rect(0 0 0 0)',\n  height: '1px',\n  margin: '-1px',\n  overflow: 'hidden',\n  padding: 0,\n  position: 'fixed',\n  whiteSpace: 'nowrap',\n  width: '1px',\n  top: 0,\n  left: 0\n};\nlet timeoutId;\nfunction setActiveElementOnTab(event) {\n  if (event.key === 'Tab') {\n    event.target;\n    clearTimeout(timeoutId);\n  }\n}\nconst FocusGuard = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function FocusGuard(props, ref) {\n  const [role, setRole] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n  index(() => {\n    if ((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isSafari)()) {\n      // Unlike other screen readers such as NVDA and JAWS, the virtual cursor\n      // on VoiceOver does trigger the onFocus event, so we can use the focus\n      // trap element. On Safari, only buttons trigger the onFocus event.\n      // NB: \"group\" role in the Sandbox no longer appears to work, must be a\n      // button role.\n      setRole('button');\n    }\n    document.addEventListener('keydown', setActiveElementOnTab);\n    return () => {\n      document.removeEventListener('keydown', setActiveElementOnTab);\n    };\n  }, []);\n  const restProps = {\n    ref,\n    tabIndex: 0,\n    // Role is only for VoiceOver\n    role,\n    'aria-hidden': role ? undefined : true,\n    [createAttribute('focus-guard')]: '',\n    style: HIDDEN_STYLES\n  };\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", _extends({}, props, restProps));\n});\n\nconst PortalContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\nconst attr = /*#__PURE__*/createAttribute('portal');\n/**\n * @see https://floating-ui.com/docs/FloatingPortal#usefloatingportalnode\n */\nfunction useFloatingPortalNode(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  const {\n    id,\n    root\n  } = props;\n  const uniqueId = useId();\n  const portalContext = usePortalContext();\n  const [portalNode, setPortalNode] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n  const portalNodeRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  index(() => {\n    return () => {\n      portalNode == null || portalNode.remove();\n      // Allow the subsequent layout effects to create a new node on updates.\n      // The portal node will still be cleaned up on unmount.\n      // https://github.com/floating-ui/floating-ui/issues/2454\n      queueMicrotask(() => {\n        portalNodeRef.current = null;\n      });\n    };\n  }, [portalNode]);\n  index(() => {\n    // Wait for the uniqueId to be generated before creating the portal node in\n    // React <18 (using `useFloatingId` instead of the native `useId`).\n    // https://github.com/floating-ui/floating-ui/issues/2778\n    if (!uniqueId) return;\n    if (portalNodeRef.current) return;\n    const existingIdRoot = id ? document.getElementById(id) : null;\n    if (!existingIdRoot) return;\n    const subRoot = document.createElement('div');\n    subRoot.id = uniqueId;\n    subRoot.setAttribute(attr, '');\n    existingIdRoot.appendChild(subRoot);\n    portalNodeRef.current = subRoot;\n    setPortalNode(subRoot);\n  }, [id, uniqueId]);\n  index(() => {\n    // Wait for the root to exist before creating the portal node. The root must\n    // be stored in state, not a ref, for this to work reactively.\n    if (root === null) return;\n    if (!uniqueId) return;\n    if (portalNodeRef.current) return;\n    let container = root || (portalContext == null ? void 0 : portalContext.portalNode);\n    if (container && !(0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.isElement)(container)) container = container.current;\n    container = container || document.body;\n    let idWrapper = null;\n    if (id) {\n      idWrapper = document.createElement('div');\n      idWrapper.id = id;\n      container.appendChild(idWrapper);\n    }\n    const subRoot = document.createElement('div');\n    subRoot.id = uniqueId;\n    subRoot.setAttribute(attr, '');\n    container = idWrapper || container;\n    container.appendChild(subRoot);\n    portalNodeRef.current = subRoot;\n    setPortalNode(subRoot);\n  }, [id, root, uniqueId, portalContext]);\n  return portalNode;\n}\n/**\n * Portals the floating element into a given container element — by default,\n * outside of the app root and into the body.\n * This is necessary to ensure the floating element can appear outside any\n * potential parent containers that cause clipping (such as `overflow: hidden`),\n * while retaining its location in the React tree.\n * @see https://floating-ui.com/docs/FloatingPortal\n */\nfunction FloatingPortal(props) {\n  const {\n    children,\n    id,\n    root,\n    preserveTabOrder = true\n  } = props;\n  const portalNode = useFloatingPortalNode({\n    id,\n    root\n  });\n  const [focusManagerState, setFocusManagerState] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n  const beforeOutsideRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const afterOutsideRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const beforeInsideRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const afterInsideRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const modal = focusManagerState == null ? void 0 : focusManagerState.modal;\n  const open = focusManagerState == null ? void 0 : focusManagerState.open;\n  const shouldRenderGuards =\n  // The FocusManager and therefore floating element are currently open/\n  // rendered.\n  !!focusManagerState &&\n  // Guards are only for non-modal focus management.\n  !focusManagerState.modal &&\n  // Don't render if unmount is transitioning.\n  focusManagerState.open && preserveTabOrder && !!(root || portalNode);\n\n  // https://codesandbox.io/s/tabbable-portal-f4tng?file=/src/TabbablePortal.tsx\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!portalNode || !preserveTabOrder || modal) {\n      return;\n    }\n\n    // Make sure elements inside the portal element are tabbable only when the\n    // portal has already been focused, either by tabbing into a focus trap\n    // element outside or using the mouse.\n    function onFocus(event) {\n      if (portalNode && isOutsideEvent(event)) {\n        const focusing = event.type === 'focusin';\n        const manageFocus = focusing ? enableFocusInside : disableFocusInside;\n        manageFocus(portalNode);\n      }\n    }\n    // Listen to the event on the capture phase so they run before the focus\n    // trap elements onFocus prop is called.\n    portalNode.addEventListener('focusin', onFocus, true);\n    portalNode.addEventListener('focusout', onFocus, true);\n    return () => {\n      portalNode.removeEventListener('focusin', onFocus, true);\n      portalNode.removeEventListener('focusout', onFocus, true);\n    };\n  }, [portalNode, preserveTabOrder, modal]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!portalNode) return;\n    if (open) return;\n    enableFocusInside(portalNode);\n  }, [open, portalNode]);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(PortalContext.Provider, {\n    value: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\n      preserveTabOrder,\n      beforeOutsideRef,\n      afterOutsideRef,\n      beforeInsideRef,\n      afterInsideRef,\n      portalNode,\n      setFocusManagerState\n    }), [preserveTabOrder, portalNode])\n  }, shouldRenderGuards && portalNode && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(FocusGuard, {\n    \"data-type\": \"outside\",\n    ref: beforeOutsideRef,\n    onFocus: event => {\n      if (isOutsideEvent(event, portalNode)) {\n        var _beforeInsideRef$curr;\n        (_beforeInsideRef$curr = beforeInsideRef.current) == null || _beforeInsideRef$curr.focus();\n      } else {\n        const prevTabbable = getPreviousTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);\n        prevTabbable == null || prevTabbable.focus();\n      }\n    }\n  }), shouldRenderGuards && portalNode && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n    \"aria-owns\": portalNode.id,\n    style: HIDDEN_STYLES\n  }), portalNode && /*#__PURE__*/react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal(children, portalNode), shouldRenderGuards && portalNode && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(FocusGuard, {\n    \"data-type\": \"outside\",\n    ref: afterOutsideRef,\n    onFocus: event => {\n      if (isOutsideEvent(event, portalNode)) {\n        var _afterInsideRef$curre;\n        (_afterInsideRef$curre = afterInsideRef.current) == null || _afterInsideRef$curre.focus();\n      } else {\n        const nextTabbable = getNextTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);\n        nextTabbable == null || nextTabbable.focus();\n        (focusManagerState == null ? void 0 : focusManagerState.closeOnFocusOut) && (focusManagerState == null ? void 0 : focusManagerState.onOpenChange(false, event.nativeEvent, 'focus-out'));\n      }\n    }\n  }));\n}\nconst usePortalContext = () => react__WEBPACK_IMPORTED_MODULE_0__.useContext(PortalContext);\n\nconst FOCUSABLE_ATTRIBUTE = 'data-floating-ui-focusable';\nfunction getFloatingFocusElement(floatingElement) {\n  if (!floatingElement) {\n    return null;\n  }\n  // Try to find the element that has `{...getFloatingProps()}` spread on it.\n  // This indicates the floating element is acting as a positioning wrapper, and\n  // so focus should be managed on the child element with the event handlers and\n  // aria props.\n  return floatingElement.hasAttribute(FOCUSABLE_ATTRIBUTE) ? floatingElement : floatingElement.querySelector(\"[\" + FOCUSABLE_ATTRIBUTE + \"]\") || floatingElement;\n}\n\nconst LIST_LIMIT = 20;\nlet previouslyFocusedElements = [];\nfunction addPreviouslyFocusedElement(element) {\n  previouslyFocusedElements = previouslyFocusedElements.filter(el => el.isConnected);\n  let tabbableEl = element;\n  if (!tabbableEl || (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.getNodeName)(tabbableEl) === 'body') return;\n  if (!(0,tabbable__WEBPACK_IMPORTED_MODULE_7__.isTabbable)(tabbableEl, getTabbableOptions())) {\n    const tabbableChild = (0,tabbable__WEBPACK_IMPORTED_MODULE_7__.tabbable)(tabbableEl, getTabbableOptions())[0];\n    if (tabbableChild) {\n      tabbableEl = tabbableChild;\n    }\n  }\n  previouslyFocusedElements.push(tabbableEl);\n  if (previouslyFocusedElements.length > LIST_LIMIT) {\n    previouslyFocusedElements = previouslyFocusedElements.slice(-LIST_LIMIT);\n  }\n}\nfunction getPreviouslyFocusedElement() {\n  return previouslyFocusedElements.slice().reverse().find(el => el.isConnected);\n}\nconst VisuallyHiddenDismiss = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function VisuallyHiddenDismiss(props, ref) {\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", _extends({}, props, {\n    type: \"button\",\n    ref: ref,\n    tabIndex: -1,\n    style: HIDDEN_STYLES\n  }));\n});\n/**\n * Provides focus management for the floating element.\n * @see https://floating-ui.com/docs/FloatingFocusManager\n */\nfunction FloatingFocusManager(props) {\n  const {\n    context,\n    children,\n    disabled = false,\n    order = ['content'],\n    guards: _guards = true,\n    initialFocus = 0,\n    returnFocus = true,\n    restoreFocus = false,\n    modal = true,\n    visuallyHiddenDismiss = false,\n    closeOnFocusOut = true\n  } = props;\n  const {\n    open,\n    refs,\n    nodeId,\n    onOpenChange,\n    events,\n    dataRef,\n    floatingId,\n    elements: {\n      domReference,\n      floating\n    }\n  } = context;\n  const ignoreInitialFocus = typeof initialFocus === 'number' && initialFocus < 0;\n  // If the reference is a combobox and is typeable (e.g. input/textarea),\n  // there are different focus semantics. The guards should not be rendered, but\n  // aria-hidden should be applied to all nodes still. Further, the visually\n  // hidden dismiss button should only appear at the end of the list, not the\n  // start.\n  const isUntrappedTypeableCombobox = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isTypeableCombobox)(domReference) && ignoreInitialFocus;\n\n  // Force the guards to be rendered if the `inert` attribute is not supported.\n  const guards = supportsInert() ? _guards : true;\n  const orderRef = useLatestRef(order);\n  const initialFocusRef = useLatestRef(initialFocus);\n  const returnFocusRef = useLatestRef(returnFocus);\n  const tree = useFloatingTree();\n  const portalContext = usePortalContext();\n  const startDismissButtonRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const endDismissButtonRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const preventReturnFocusRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n  const isPointerDownRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n  const tabbableIndexRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(-1);\n  const isInsidePortal = portalContext != null;\n  const floatingFocusElement = getFloatingFocusElement(floating);\n  const getTabbableContent = useEffectEvent(function (container) {\n    if (container === void 0) {\n      container = floatingFocusElement;\n    }\n    return container ? (0,tabbable__WEBPACK_IMPORTED_MODULE_7__.tabbable)(container, getTabbableOptions()) : [];\n  });\n  const getTabbableElements = useEffectEvent(container => {\n    const content = getTabbableContent(container);\n    return orderRef.current.map(type => {\n      if (domReference && type === 'reference') {\n        return domReference;\n      }\n      if (floatingFocusElement && type === 'floating') {\n        return floatingFocusElement;\n      }\n      return content;\n    }).filter(Boolean).flat();\n  });\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (disabled) return;\n    if (!modal) return;\n    function onKeyDown(event) {\n      if (event.key === 'Tab') {\n        // The focus guards have nothing to focus, so we need to stop the event.\n        if ((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(floatingFocusElement, (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.activeElement)((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(floatingFocusElement))) && getTabbableContent().length === 0 && !isUntrappedTypeableCombobox) {\n          (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\n        }\n        const els = getTabbableElements();\n        const target = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getTarget)(event);\n        if (orderRef.current[0] === 'reference' && target === domReference) {\n          (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\n          if (event.shiftKey) {\n            enqueueFocus(els[els.length - 1]);\n          } else {\n            enqueueFocus(els[1]);\n          }\n        }\n        if (orderRef.current[1] === 'floating' && target === floatingFocusElement && event.shiftKey) {\n          (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\n          enqueueFocus(els[0]);\n        }\n      }\n    }\n    const doc = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(floatingFocusElement);\n    doc.addEventListener('keydown', onKeyDown);\n    return () => {\n      doc.removeEventListener('keydown', onKeyDown);\n    };\n  }, [disabled, domReference, floatingFocusElement, modal, orderRef, isUntrappedTypeableCombobox, getTabbableContent, getTabbableElements]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (disabled) return;\n    if (!floating) return;\n    function handleFocusIn(event) {\n      const target = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getTarget)(event);\n      const tabbableContent = getTabbableContent();\n      const tabbableIndex = tabbableContent.indexOf(target);\n      if (tabbableIndex !== -1) {\n        tabbableIndexRef.current = tabbableIndex;\n      }\n    }\n    floating.addEventListener('focusin', handleFocusIn);\n    return () => {\n      floating.removeEventListener('focusin', handleFocusIn);\n    };\n  }, [disabled, floating, getTabbableContent]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (disabled) return;\n    if (!closeOnFocusOut) return;\n\n    // In Safari, buttons lose focus when pressing them.\n    function handlePointerDown() {\n      isPointerDownRef.current = true;\n      setTimeout(() => {\n        isPointerDownRef.current = false;\n      });\n    }\n    function handleFocusOutside(event) {\n      const relatedTarget = event.relatedTarget;\n      queueMicrotask(() => {\n        const movedToUnrelatedNode = !((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(domReference, relatedTarget) || (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(floating, relatedTarget) || (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(relatedTarget, floating) || (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(portalContext == null ? void 0 : portalContext.portalNode, relatedTarget) || relatedTarget != null && relatedTarget.hasAttribute(createAttribute('focus-guard')) || tree && (getChildren(tree.nodesRef.current, nodeId).find(node => {\n          var _node$context, _node$context2;\n          return (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)((_node$context = node.context) == null ? void 0 : _node$context.elements.floating, relatedTarget) || (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)((_node$context2 = node.context) == null ? void 0 : _node$context2.elements.domReference, relatedTarget);\n        }) || getAncestors(tree.nodesRef.current, nodeId).find(node => {\n          var _node$context3, _node$context4;\n          return ((_node$context3 = node.context) == null ? void 0 : _node$context3.elements.floating) === relatedTarget || ((_node$context4 = node.context) == null ? void 0 : _node$context4.elements.domReference) === relatedTarget;\n        })));\n\n        // Restore focus to the previous tabbable element index to prevent\n        // focus from being lost outside the floating tree.\n        if (restoreFocus && movedToUnrelatedNode && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.activeElement)((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(floatingFocusElement)) === (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(floatingFocusElement).body) {\n          // Let `FloatingPortal` effect knows that focus is still inside the\n          // floating tree.\n          if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.isHTMLElement)(floatingFocusElement)) {\n            floatingFocusElement.focus();\n          }\n          const prevTabbableIndex = tabbableIndexRef.current;\n          const tabbableContent = getTabbableContent();\n          const nodeToFocus = tabbableContent[prevTabbableIndex] || tabbableContent[tabbableContent.length - 1] || floatingFocusElement;\n          if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.isHTMLElement)(nodeToFocus)) {\n            nodeToFocus.focus();\n          }\n        }\n\n        // Focus did not move inside the floating tree, and there are no tabbable\n        // portal guards to handle closing.\n        if ((isUntrappedTypeableCombobox ? true : !modal) && relatedTarget && movedToUnrelatedNode && !isPointerDownRef.current &&\n        // Fix React 18 Strict Mode returnFocus due to double rendering.\n        relatedTarget !== getPreviouslyFocusedElement()) {\n          preventReturnFocusRef.current = true;\n          onOpenChange(false, event, 'focus-out');\n        }\n      });\n    }\n    if (floating && (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.isHTMLElement)(domReference)) {\n      domReference.addEventListener('focusout', handleFocusOutside);\n      domReference.addEventListener('pointerdown', handlePointerDown);\n      floating.addEventListener('focusout', handleFocusOutside);\n      return () => {\n        domReference.removeEventListener('focusout', handleFocusOutside);\n        domReference.removeEventListener('pointerdown', handlePointerDown);\n        floating.removeEventListener('focusout', handleFocusOutside);\n      };\n    }\n  }, [disabled, domReference, floating, floatingFocusElement, modal, nodeId, tree, portalContext, onOpenChange, closeOnFocusOut, restoreFocus, getTabbableContent, isUntrappedTypeableCombobox]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    var _portalContext$portal;\n    if (disabled) return;\n\n    // Don't hide portals nested within the parent portal.\n    const portalNodes = Array.from((portalContext == null || (_portalContext$portal = portalContext.portalNode) == null ? void 0 : _portalContext$portal.querySelectorAll(\"[\" + createAttribute('portal') + \"]\")) || []);\n    if (floating) {\n      const insideElements = [floating, ...portalNodes, startDismissButtonRef.current, endDismissButtonRef.current, orderRef.current.includes('reference') || isUntrappedTypeableCombobox ? domReference : null].filter(x => x != null);\n      const cleanup = modal || isUntrappedTypeableCombobox ? markOthers(insideElements, guards, !guards) : markOthers(insideElements);\n      return () => {\n        cleanup();\n      };\n    }\n  }, [disabled, domReference, floating, modal, orderRef, portalContext, isUntrappedTypeableCombobox, guards]);\n  index(() => {\n    if (disabled || !(0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.isHTMLElement)(floatingFocusElement)) return;\n    const doc = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(floatingFocusElement);\n    const previouslyFocusedElement = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.activeElement)(doc);\n\n    // Wait for any layout effect state setters to execute to set `tabIndex`.\n    queueMicrotask(() => {\n      const focusableElements = getTabbableElements(floatingFocusElement);\n      const initialFocusValue = initialFocusRef.current;\n      const elToFocus = (typeof initialFocusValue === 'number' ? focusableElements[initialFocusValue] : initialFocusValue.current) || floatingFocusElement;\n      const focusAlreadyInsideFloatingEl = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(floatingFocusElement, previouslyFocusedElement);\n      if (!ignoreInitialFocus && !focusAlreadyInsideFloatingEl && open) {\n        enqueueFocus(elToFocus, {\n          preventScroll: elToFocus === floatingFocusElement\n        });\n      }\n    });\n  }, [disabled, open, floatingFocusElement, ignoreInitialFocus, getTabbableElements, initialFocusRef]);\n  index(() => {\n    if (disabled || !floatingFocusElement) return;\n    let preventReturnFocusScroll = false;\n    const doc = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(floatingFocusElement);\n    const previouslyFocusedElement = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.activeElement)(doc);\n    const contextData = dataRef.current;\n    let openEvent = contextData.openEvent;\n    addPreviouslyFocusedElement(previouslyFocusedElement);\n\n    // Dismissing via outside press should always ignore `returnFocus` to\n    // prevent unwanted scrolling.\n    function onOpenChange(_ref) {\n      let {\n        open,\n        reason,\n        event,\n        nested\n      } = _ref;\n      if (open) {\n        openEvent = event;\n      }\n      if (reason === 'escape-key' && refs.domReference.current) {\n        addPreviouslyFocusedElement(refs.domReference.current);\n      }\n      if (reason === 'hover' && event.type === 'mouseleave') {\n        preventReturnFocusRef.current = true;\n      }\n      if (reason !== 'outside-press') return;\n      if (nested) {\n        preventReturnFocusRef.current = false;\n        preventReturnFocusScroll = true;\n      } else {\n        preventReturnFocusRef.current = !((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isVirtualClick)(event) || (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isVirtualPointerEvent)(event));\n      }\n    }\n    events.on('openchange', onOpenChange);\n    const fallbackEl = doc.createElement('span');\n    fallbackEl.setAttribute('tabindex', '-1');\n    fallbackEl.setAttribute('aria-hidden', 'true');\n    Object.assign(fallbackEl.style, HIDDEN_STYLES);\n    if (isInsidePortal && domReference) {\n      domReference.insertAdjacentElement('afterend', fallbackEl);\n    }\n    function getReturnElement() {\n      if (typeof returnFocusRef.current === 'boolean') {\n        return getPreviouslyFocusedElement() || fallbackEl;\n      }\n      return returnFocusRef.current.current || fallbackEl;\n    }\n    return () => {\n      events.off('openchange', onOpenChange);\n      const activeEl = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.activeElement)(doc);\n      const isFocusInsideFloatingTree = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(floating, activeEl) || tree && getChildren(tree.nodesRef.current, nodeId).some(node => {\n        var _node$context5;\n        return (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)((_node$context5 = node.context) == null ? void 0 : _node$context5.elements.floating, activeEl);\n      });\n      const shouldFocusReference = isFocusInsideFloatingTree || openEvent && ['click', 'mousedown'].includes(openEvent.type);\n      if (shouldFocusReference && refs.domReference.current) {\n        addPreviouslyFocusedElement(refs.domReference.current);\n      }\n      const returnElement = getReturnElement();\n      queueMicrotask(() => {\n        if (\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        returnFocusRef.current && !preventReturnFocusRef.current && (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.isHTMLElement)(returnElement) && (\n        // If the focus moved somewhere else after mount, avoid returning focus\n        // since it likely entered a different element which should be\n        // respected: https://github.com/floating-ui/floating-ui/issues/2607\n        returnElement !== activeEl && activeEl !== doc.body ? isFocusInsideFloatingTree : true)) {\n          returnElement.focus({\n            preventScroll: preventReturnFocusScroll\n          });\n        }\n        fallbackEl.remove();\n      });\n    };\n  }, [disabled, floating, floatingFocusElement, returnFocusRef, dataRef, refs, events, tree, nodeId, isInsidePortal, domReference]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    // The `returnFocus` cleanup behavior is inside a microtask; ensure we\n    // wait for it to complete before resetting the flag.\n    queueMicrotask(() => {\n      preventReturnFocusRef.current = false;\n    });\n  }, [disabled]);\n\n  // Synchronize the `context` & `modal` value to the FloatingPortal context.\n  // It will decide whether or not it needs to render its own guards.\n  index(() => {\n    if (disabled) return;\n    if (!portalContext) return;\n    portalContext.setFocusManagerState({\n      modal,\n      closeOnFocusOut,\n      open,\n      onOpenChange,\n      refs\n    });\n    return () => {\n      portalContext.setFocusManagerState(null);\n    };\n  }, [disabled, portalContext, modal, open, onOpenChange, refs, closeOnFocusOut]);\n  index(() => {\n    if (disabled) return;\n    if (!floatingFocusElement) return;\n    if (typeof MutationObserver !== 'function') return;\n    if (ignoreInitialFocus) return;\n    const handleMutation = () => {\n      const tabIndex = floatingFocusElement.getAttribute('tabindex');\n      const tabbableContent = getTabbableContent();\n      const activeEl = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.activeElement)((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(floating));\n      const tabbableIndex = tabbableContent.indexOf(activeEl);\n      if (tabbableIndex !== -1) {\n        tabbableIndexRef.current = tabbableIndex;\n      }\n      if (orderRef.current.includes('floating') || activeEl !== refs.domReference.current && tabbableContent.length === 0) {\n        if (tabIndex !== '0') {\n          floatingFocusElement.setAttribute('tabindex', '0');\n        }\n      } else if (tabIndex !== '-1') {\n        floatingFocusElement.setAttribute('tabindex', '-1');\n      }\n    };\n    handleMutation();\n    const observer = new MutationObserver(handleMutation);\n    observer.observe(floatingFocusElement, {\n      childList: true,\n      subtree: true,\n      attributes: true\n    });\n    return () => {\n      observer.disconnect();\n    };\n  }, [disabled, floating, floatingFocusElement, refs, orderRef, getTabbableContent, ignoreInitialFocus]);\n  function renderDismissButton(location) {\n    if (disabled || !visuallyHiddenDismiss || !modal) {\n      return null;\n    }\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(VisuallyHiddenDismiss, {\n      ref: location === 'start' ? startDismissButtonRef : endDismissButtonRef,\n      onClick: event => onOpenChange(false, event.nativeEvent)\n    }, typeof visuallyHiddenDismiss === 'string' ? visuallyHiddenDismiss : 'Dismiss');\n  }\n  const shouldRenderGuards = !disabled && guards && (modal ? !isUntrappedTypeableCombobox : true) && (isInsidePortal || modal);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, shouldRenderGuards && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(FocusGuard, {\n    \"data-type\": \"inside\",\n    ref: portalContext == null ? void 0 : portalContext.beforeInsideRef,\n    onFocus: event => {\n      if (modal) {\n        const els = getTabbableElements();\n        enqueueFocus(order[0] === 'reference' ? els[0] : els[els.length - 1]);\n      } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {\n        preventReturnFocusRef.current = false;\n        if (isOutsideEvent(event, portalContext.portalNode)) {\n          const nextTabbable = getNextTabbable() || domReference;\n          nextTabbable == null || nextTabbable.focus();\n        } else {\n          var _portalContext$before;\n          (_portalContext$before = portalContext.beforeOutsideRef.current) == null || _portalContext$before.focus();\n        }\n      }\n    }\n  }), !isUntrappedTypeableCombobox && renderDismissButton('start'), children, renderDismissButton('end'), shouldRenderGuards && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(FocusGuard, {\n    \"data-type\": \"inside\",\n    ref: portalContext == null ? void 0 : portalContext.afterInsideRef,\n    onFocus: event => {\n      if (modal) {\n        enqueueFocus(getTabbableElements()[0]);\n      } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {\n        if (closeOnFocusOut) {\n          preventReturnFocusRef.current = true;\n        }\n        if (isOutsideEvent(event, portalContext.portalNode)) {\n          const prevTabbable = getPreviousTabbable() || domReference;\n          prevTabbable == null || prevTabbable.focus();\n        } else {\n          var _portalContext$afterO;\n          (_portalContext$afterO = portalContext.afterOutsideRef.current) == null || _portalContext$afterO.focus();\n        }\n      }\n    }\n  }));\n}\n\nlet lockCount = 0;\nfunction enableScrollLock() {\n  const isIOS = /iP(hone|ad|od)|iOS/.test((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getPlatform)());\n  const bodyStyle = document.body.style;\n  // RTL <body> scrollbar\n  const scrollbarX = Math.round(document.documentElement.getBoundingClientRect().left) + document.documentElement.scrollLeft;\n  const paddingProp = scrollbarX ? 'paddingLeft' : 'paddingRight';\n  const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;\n  const scrollX = bodyStyle.left ? parseFloat(bodyStyle.left) : window.scrollX;\n  const scrollY = bodyStyle.top ? parseFloat(bodyStyle.top) : window.scrollY;\n  bodyStyle.overflow = 'hidden';\n  if (scrollbarWidth) {\n    bodyStyle[paddingProp] = scrollbarWidth + \"px\";\n  }\n\n  // Only iOS doesn't respect `overflow: hidden` on document.body, and this\n  // technique has fewer side effects.\n  if (isIOS) {\n    var _window$visualViewpor, _window$visualViewpor2;\n    // iOS 12 does not support `visualViewport`.\n    const offsetLeft = ((_window$visualViewpor = window.visualViewport) == null ? void 0 : _window$visualViewpor.offsetLeft) || 0;\n    const offsetTop = ((_window$visualViewpor2 = window.visualViewport) == null ? void 0 : _window$visualViewpor2.offsetTop) || 0;\n    Object.assign(bodyStyle, {\n      position: 'fixed',\n      top: -(scrollY - Math.floor(offsetTop)) + \"px\",\n      left: -(scrollX - Math.floor(offsetLeft)) + \"px\",\n      right: '0'\n    });\n  }\n  return () => {\n    Object.assign(bodyStyle, {\n      overflow: '',\n      [paddingProp]: ''\n    });\n    if (isIOS) {\n      Object.assign(bodyStyle, {\n        position: '',\n        top: '',\n        left: '',\n        right: ''\n      });\n      window.scrollTo(scrollX, scrollY);\n    }\n  };\n}\nlet cleanup = () => {};\n\n/**\n * Provides base styling for a fixed overlay element to dim content or block\n * pointer events behind a floating element.\n * It's a regular `<div>`, so it can be styled via any CSS solution you prefer.\n * @see https://floating-ui.com/docs/FloatingOverlay\n */\nconst FloatingOverlay = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function FloatingOverlay(props, ref) {\n  const {\n    lockScroll = false,\n    ...rest\n  } = props;\n  index(() => {\n    if (!lockScroll) return;\n    lockCount++;\n    if (lockCount === 1) {\n      cleanup = enableScrollLock();\n    }\n    return () => {\n      lockCount--;\n      if (lockCount === 0) {\n        cleanup();\n      }\n    };\n  }, [lockScroll]);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", _extends({\n    ref: ref\n  }, rest, {\n    style: {\n      position: 'fixed',\n      overflow: 'auto',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      ...rest.style\n    }\n  }));\n});\n\nfunction isButtonTarget(event) {\n  return (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.isHTMLElement)(event.target) && event.target.tagName === 'BUTTON';\n}\nfunction isSpaceIgnored(element) {\n  return (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isTypeableElement)(element);\n}\n/**\n * Opens or closes the floating element when clicking the reference element.\n * @see https://floating-ui.com/docs/useClick\n */\nfunction useClick(context, props) {\n  if (props === void 0) {\n    props = {};\n  }\n  const {\n    open,\n    onOpenChange,\n    dataRef,\n    elements: {\n      domReference\n    }\n  } = context;\n  const {\n    enabled = true,\n    event: eventOption = 'click',\n    toggle = true,\n    ignoreMouse = false,\n    keyboardHandlers = true,\n    stickIfOpen = true\n  } = props;\n  const pointerTypeRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\n  const didKeyDownRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n  const reference = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\n    onPointerDown(event) {\n      pointerTypeRef.current = event.pointerType;\n    },\n    onMouseDown(event) {\n      const pointerType = pointerTypeRef.current;\n\n      // Ignore all buttons except for the \"main\" button.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\n      if (event.button !== 0) return;\n      if (eventOption === 'click') return;\n      if ((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isMouseLikePointerType)(pointerType, true) && ignoreMouse) return;\n      if (open && toggle && (dataRef.current.openEvent && stickIfOpen ? dataRef.current.openEvent.type === 'mousedown' : true)) {\n        onOpenChange(false, event.nativeEvent, 'click');\n      } else {\n        // Prevent stealing focus from the floating element\n        event.preventDefault();\n        onOpenChange(true, event.nativeEvent, 'click');\n      }\n    },\n    onClick(event) {\n      const pointerType = pointerTypeRef.current;\n      if (eventOption === 'mousedown' && pointerTypeRef.current) {\n        pointerTypeRef.current = undefined;\n        return;\n      }\n      if ((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isMouseLikePointerType)(pointerType, true) && ignoreMouse) return;\n      if (open && toggle && (dataRef.current.openEvent && stickIfOpen ? dataRef.current.openEvent.type === 'click' : true)) {\n        onOpenChange(false, event.nativeEvent, 'click');\n      } else {\n        onOpenChange(true, event.nativeEvent, 'click');\n      }\n    },\n    onKeyDown(event) {\n      pointerTypeRef.current = undefined;\n      if (event.defaultPrevented || !keyboardHandlers || isButtonTarget(event)) {\n        return;\n      }\n      if (event.key === ' ' && !isSpaceIgnored(domReference)) {\n        // Prevent scrolling\n        event.preventDefault();\n        didKeyDownRef.current = true;\n      }\n      if (event.key === 'Enter') {\n        if (open && toggle) {\n          onOpenChange(false, event.nativeEvent, 'click');\n        } else {\n          onOpenChange(true, event.nativeEvent, 'click');\n        }\n      }\n    },\n    onKeyUp(event) {\n      if (event.defaultPrevented || !keyboardHandlers || isButtonTarget(event) || isSpaceIgnored(domReference)) {\n        return;\n      }\n      if (event.key === ' ' && didKeyDownRef.current) {\n        didKeyDownRef.current = false;\n        if (open && toggle) {\n          onOpenChange(false, event.nativeEvent, 'click');\n        } else {\n          onOpenChange(true, event.nativeEvent, 'click');\n        }\n      }\n    }\n  }), [dataRef, domReference, eventOption, ignoreMouse, keyboardHandlers, onOpenChange, open, stickIfOpen, toggle]);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => enabled ? {\n    reference\n  } : {}, [enabled, reference]);\n}\n\nfunction createVirtualElement(domElement, data) {\n  let offsetX = null;\n  let offsetY = null;\n  let isAutoUpdateEvent = false;\n  return {\n    contextElement: domElement || undefined,\n    getBoundingClientRect() {\n      var _data$dataRef$current;\n      const domRect = (domElement == null ? void 0 : domElement.getBoundingClientRect()) || {\n        width: 0,\n        height: 0,\n        x: 0,\n        y: 0\n      };\n      const isXAxis = data.axis === 'x' || data.axis === 'both';\n      const isYAxis = data.axis === 'y' || data.axis === 'both';\n      const canTrackCursorOnAutoUpdate = ['mouseenter', 'mousemove'].includes(((_data$dataRef$current = data.dataRef.current.openEvent) == null ? void 0 : _data$dataRef$current.type) || '') && data.pointerType !== 'touch';\n      let width = domRect.width;\n      let height = domRect.height;\n      let x = domRect.x;\n      let y = domRect.y;\n      if (offsetX == null && data.x && isXAxis) {\n        offsetX = domRect.x - data.x;\n      }\n      if (offsetY == null && data.y && isYAxis) {\n        offsetY = domRect.y - data.y;\n      }\n      x -= offsetX || 0;\n      y -= offsetY || 0;\n      width = 0;\n      height = 0;\n      if (!isAutoUpdateEvent || canTrackCursorOnAutoUpdate) {\n        width = data.axis === 'y' ? domRect.width : 0;\n        height = data.axis === 'x' ? domRect.height : 0;\n        x = isXAxis && data.x != null ? data.x : x;\n        y = isYAxis && data.y != null ? data.y : y;\n      } else if (isAutoUpdateEvent && !canTrackCursorOnAutoUpdate) {\n        height = data.axis === 'x' ? domRect.height : height;\n        width = data.axis === 'y' ? domRect.width : width;\n      }\n      isAutoUpdateEvent = true;\n      return {\n        width,\n        height,\n        x,\n        y,\n        top: y,\n        right: x + width,\n        bottom: y + height,\n        left: x\n      };\n    }\n  };\n}\nfunction isMouseBasedEvent(event) {\n  return event != null && event.clientX != null;\n}\n/**\n * Positions the floating element relative to a client point (in the viewport),\n * such as the mouse position. By default, it follows the mouse cursor.\n * @see https://floating-ui.com/docs/useClientPoint\n */\nfunction useClientPoint(context, props) {\n  if (props === void 0) {\n    props = {};\n  }\n  const {\n    open,\n    dataRef,\n    elements: {\n      floating,\n      domReference\n    },\n    refs\n  } = context;\n  const {\n    enabled = true,\n    axis = 'both',\n    x = null,\n    y = null\n  } = props;\n  const initialRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n  const cleanupListenerRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const [pointerType, setPointerType] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n  const [reactive, setReactive] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\n  const setReference = useEffectEvent((x, y) => {\n    if (initialRef.current) return;\n\n    // Prevent setting if the open event was not a mouse-like one\n    // (e.g. focus to open, then hover over the reference element).\n    // Only apply if the event exists.\n    if (dataRef.current.openEvent && !isMouseBasedEvent(dataRef.current.openEvent)) {\n      return;\n    }\n    refs.setPositionReference(createVirtualElement(domReference, {\n      x,\n      y,\n      axis,\n      dataRef,\n      pointerType\n    }));\n  });\n  const handleReferenceEnterOrMove = useEffectEvent(event => {\n    if (x != null || y != null) return;\n    if (!open) {\n      setReference(event.clientX, event.clientY);\n    } else if (!cleanupListenerRef.current) {\n      // If there's no cleanup, there's no listener, but we want to ensure\n      // we add the listener if the cursor landed on the floating element and\n      // then back on the reference (i.e. it's interactive).\n      setReactive([]);\n    }\n  });\n\n  // If the pointer is a mouse-like pointer, we want to continue following the\n  // mouse even if the floating element is transitioning out. On touch\n  // devices, this is undesirable because the floating element will move to\n  // the dismissal touch point.\n  const openCheck = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isMouseLikePointerType)(pointerType) ? floating : open;\n  const addListener = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {\n    // Explicitly specified `x`/`y` coordinates shouldn't add a listener.\n    if (!openCheck || !enabled || x != null || y != null) return;\n    const win = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.getWindow)(floating);\n    function handleMouseMove(event) {\n      const target = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getTarget)(event);\n      if (!(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(floating, target)) {\n        setReference(event.clientX, event.clientY);\n      } else {\n        win.removeEventListener('mousemove', handleMouseMove);\n        cleanupListenerRef.current = null;\n      }\n    }\n    if (!dataRef.current.openEvent || isMouseBasedEvent(dataRef.current.openEvent)) {\n      win.addEventListener('mousemove', handleMouseMove);\n      const cleanup = () => {\n        win.removeEventListener('mousemove', handleMouseMove);\n        cleanupListenerRef.current = null;\n      };\n      cleanupListenerRef.current = cleanup;\n      return cleanup;\n    }\n    refs.setPositionReference(domReference);\n  }, [openCheck, enabled, x, y, floating, dataRef, refs, domReference, setReference]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    return addListener();\n  }, [addListener, reactive]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (enabled && !floating) {\n      initialRef.current = false;\n    }\n  }, [enabled, floating]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!enabled && open) {\n      initialRef.current = true;\n    }\n  }, [enabled, open]);\n  index(() => {\n    if (enabled && (x != null || y != null)) {\n      initialRef.current = false;\n      setReference(x, y);\n    }\n  }, [enabled, x, y, setReference]);\n  const reference = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    function setPointerTypeRef(_ref) {\n      let {\n        pointerType\n      } = _ref;\n      setPointerType(pointerType);\n    }\n    return {\n      onPointerDown: setPointerTypeRef,\n      onPointerEnter: setPointerTypeRef,\n      onMouseMove: handleReferenceEnterOrMove,\n      onMouseEnter: handleReferenceEnterOrMove\n    };\n  }, [handleReferenceEnterOrMove]);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => enabled ? {\n    reference\n  } : {}, [enabled, reference]);\n}\n\nconst bubbleHandlerKeys = {\n  pointerdown: 'onPointerDown',\n  mousedown: 'onMouseDown',\n  click: 'onClick'\n};\nconst captureHandlerKeys = {\n  pointerdown: 'onPointerDownCapture',\n  mousedown: 'onMouseDownCapture',\n  click: 'onClickCapture'\n};\nconst normalizeProp = normalizable => {\n  var _normalizable$escapeK, _normalizable$outside;\n  return {\n    escapeKey: typeof normalizable === 'boolean' ? normalizable : (_normalizable$escapeK = normalizable == null ? void 0 : normalizable.escapeKey) != null ? _normalizable$escapeK : false,\n    outsidePress: typeof normalizable === 'boolean' ? normalizable : (_normalizable$outside = normalizable == null ? void 0 : normalizable.outsidePress) != null ? _normalizable$outside : true\n  };\n};\n/**\n * Closes the floating element when a dismissal is requested — by default, when\n * the user presses the `escape` key or outside of the floating element.\n * @see https://floating-ui.com/docs/useDismiss\n */\nfunction useDismiss(context, props) {\n  if (props === void 0) {\n    props = {};\n  }\n  const {\n    open,\n    onOpenChange,\n    elements,\n    dataRef\n  } = context;\n  const {\n    enabled = true,\n    escapeKey = true,\n    outsidePress: unstable_outsidePress = true,\n    outsidePressEvent = 'pointerdown',\n    referencePress = false,\n    referencePressEvent = 'pointerdown',\n    ancestorScroll = false,\n    bubbles,\n    capture\n  } = props;\n  const tree = useFloatingTree();\n  const outsidePressFn = useEffectEvent(typeof unstable_outsidePress === 'function' ? unstable_outsidePress : () => false);\n  const outsidePress = typeof unstable_outsidePress === 'function' ? outsidePressFn : unstable_outsidePress;\n  const insideReactTreeRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n  const endedOrStartedInsideRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n  const {\n    escapeKey: escapeKeyBubbles,\n    outsidePress: outsidePressBubbles\n  } = normalizeProp(bubbles);\n  const {\n    escapeKey: escapeKeyCapture,\n    outsidePress: outsidePressCapture\n  } = normalizeProp(capture);\n  const isComposingRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n  const closeOnEscapeKeyDown = useEffectEvent(event => {\n    var _dataRef$current$floa;\n    if (!open || !enabled || !escapeKey || event.key !== 'Escape') {\n      return;\n    }\n\n    // Wait until IME is settled. Pressing `Escape` while composing should\n    // close the compose menu, but not the floating element.\n    if (isComposingRef.current) {\n      return;\n    }\n    const nodeId = (_dataRef$current$floa = dataRef.current.floatingContext) == null ? void 0 : _dataRef$current$floa.nodeId;\n    const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];\n    if (!escapeKeyBubbles) {\n      event.stopPropagation();\n      if (children.length > 0) {\n        let shouldDismiss = true;\n        children.forEach(child => {\n          var _child$context;\n          if ((_child$context = child.context) != null && _child$context.open && !child.context.dataRef.current.__escapeKeyBubbles) {\n            shouldDismiss = false;\n            return;\n          }\n        });\n        if (!shouldDismiss) {\n          return;\n        }\n      }\n    }\n    onOpenChange(false, (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isReactEvent)(event) ? event.nativeEvent : event, 'escape-key');\n  });\n  const closeOnEscapeKeyDownCapture = useEffectEvent(event => {\n    var _getTarget2;\n    const callback = () => {\n      var _getTarget;\n      closeOnEscapeKeyDown(event);\n      (_getTarget = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getTarget)(event)) == null || _getTarget.removeEventListener('keydown', callback);\n    };\n    (_getTarget2 = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getTarget)(event)) == null || _getTarget2.addEventListener('keydown', callback);\n  });\n  const closeOnPressOutside = useEffectEvent(event => {\n    var _dataRef$current$floa2;\n    // Given developers can stop the propagation of the synthetic event,\n    // we can only be confident with a positive value.\n    const insideReactTree = insideReactTreeRef.current;\n    insideReactTreeRef.current = false;\n\n    // When click outside is lazy (`click` event), handle dragging.\n    // Don't close if:\n    // - The click started inside the floating element.\n    // - The click ended inside the floating element.\n    const endedOrStartedInside = endedOrStartedInsideRef.current;\n    endedOrStartedInsideRef.current = false;\n    if (outsidePressEvent === 'click' && endedOrStartedInside) {\n      return;\n    }\n    if (insideReactTree) {\n      return;\n    }\n    if (typeof outsidePress === 'function' && !outsidePress(event)) {\n      return;\n    }\n    const target = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getTarget)(event);\n    const inertSelector = \"[\" + createAttribute('inert') + \"]\";\n    const markers = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(elements.floating).querySelectorAll(inertSelector);\n    let targetRootAncestor = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.isElement)(target) ? target : null;\n    while (targetRootAncestor && !(0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.isLastTraversableNode)(targetRootAncestor)) {\n      const nextParent = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.getParentNode)(targetRootAncestor);\n      if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.isLastTraversableNode)(nextParent) || !(0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.isElement)(nextParent)) {\n        break;\n      }\n      targetRootAncestor = nextParent;\n    }\n\n    // Check if the click occurred on a third-party element injected after the\n    // floating element rendered.\n    if (markers.length && (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.isElement)(target) && !(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isRootElement)(target) &&\n    // Clicked on a direct ancestor (e.g. FloatingOverlay).\n    !(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(target, elements.floating) &&\n    // If the target root element contains none of the markers, then the\n    // element was injected after the floating element rendered.\n    Array.from(markers).every(marker => !(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(targetRootAncestor, marker))) {\n      return;\n    }\n\n    // Check if the click occurred on the scrollbar\n    if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.isHTMLElement)(target) && floating) {\n      // In Firefox, `target.scrollWidth > target.clientWidth` for inline\n      // elements.\n      const canScrollX = target.clientWidth > 0 && target.scrollWidth > target.clientWidth;\n      const canScrollY = target.clientHeight > 0 && target.scrollHeight > target.clientHeight;\n      let xCond = canScrollY && event.offsetX > target.clientWidth;\n\n      // In some browsers it is possible to change the <body> (or window)\n      // scrollbar to the left side, but is very rare and is difficult to\n      // check for. Plus, for modal dialogs with backdrops, it is more\n      // important that the backdrop is checked but not so much the window.\n      if (canScrollY) {\n        const isRTL = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.getComputedStyle)(target).direction === 'rtl';\n        if (isRTL) {\n          xCond = event.offsetX <= target.offsetWidth - target.clientWidth;\n        }\n      }\n      if (xCond || canScrollX && event.offsetY > target.clientHeight) {\n        return;\n      }\n    }\n    const nodeId = (_dataRef$current$floa2 = dataRef.current.floatingContext) == null ? void 0 : _dataRef$current$floa2.nodeId;\n    const targetIsInsideChildren = tree && getChildren(tree.nodesRef.current, nodeId).some(node => {\n      var _node$context;\n      return (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isEventTargetWithin)(event, (_node$context = node.context) == null ? void 0 : _node$context.elements.floating);\n    });\n    if ((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isEventTargetWithin)(event, elements.floating) || (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isEventTargetWithin)(event, elements.domReference) || targetIsInsideChildren) {\n      return;\n    }\n    const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];\n    if (children.length > 0) {\n      let shouldDismiss = true;\n      children.forEach(child => {\n        var _child$context2;\n        if ((_child$context2 = child.context) != null && _child$context2.open && !child.context.dataRef.current.__outsidePressBubbles) {\n          shouldDismiss = false;\n          return;\n        }\n      });\n      if (!shouldDismiss) {\n        return;\n      }\n    }\n    onOpenChange(false, event, 'outside-press');\n  });\n  const closeOnPressOutsideCapture = useEffectEvent(event => {\n    var _getTarget4;\n    const callback = () => {\n      var _getTarget3;\n      closeOnPressOutside(event);\n      (_getTarget3 = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getTarget)(event)) == null || _getTarget3.removeEventListener(outsidePressEvent, callback);\n    };\n    (_getTarget4 = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getTarget)(event)) == null || _getTarget4.addEventListener(outsidePressEvent, callback);\n  });\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!open || !enabled) {\n      return;\n    }\n    dataRef.current.__escapeKeyBubbles = escapeKeyBubbles;\n    dataRef.current.__outsidePressBubbles = outsidePressBubbles;\n    let compositionTimeout = -1;\n    function onScroll(event) {\n      onOpenChange(false, event, 'ancestor-scroll');\n    }\n    function handleCompositionStart() {\n      window.clearTimeout(compositionTimeout);\n      isComposingRef.current = true;\n    }\n    function handleCompositionEnd() {\n      // Safari fires `compositionend` before `keydown`, so we need to wait\n      // until the next tick to set `isComposing` to `false`.\n      // https://bugs.webkit.org/show_bug.cgi?id=165004\n      compositionTimeout = window.setTimeout(() => {\n        isComposingRef.current = false;\n      },\n      // 0ms or 1ms don't work in Safari. 5ms appears to consistently work.\n      // Only apply to WebKit for the test to remain 0ms.\n      (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.isWebKit)() ? 5 : 0);\n    }\n    const doc = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(elements.floating);\n    if (escapeKey) {\n      doc.addEventListener('keydown', escapeKeyCapture ? closeOnEscapeKeyDownCapture : closeOnEscapeKeyDown, escapeKeyCapture);\n      doc.addEventListener('compositionstart', handleCompositionStart);\n      doc.addEventListener('compositionend', handleCompositionEnd);\n    }\n    outsidePress && doc.addEventListener(outsidePressEvent, outsidePressCapture ? closeOnPressOutsideCapture : closeOnPressOutside, outsidePressCapture);\n    let ancestors = [];\n    if (ancestorScroll) {\n      if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.isElement)(elements.domReference)) {\n        ancestors = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.getOverflowAncestors)(elements.domReference);\n      }\n      if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.isElement)(elements.floating)) {\n        ancestors = ancestors.concat((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.getOverflowAncestors)(elements.floating));\n      }\n      if (!(0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.isElement)(elements.reference) && elements.reference && elements.reference.contextElement) {\n        ancestors = ancestors.concat((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.getOverflowAncestors)(elements.reference.contextElement));\n      }\n    }\n\n    // Ignore the visual viewport for scrolling dismissal (allow pinch-zoom)\n    ancestors = ancestors.filter(ancestor => {\n      var _doc$defaultView;\n      return ancestor !== ((_doc$defaultView = doc.defaultView) == null ? void 0 : _doc$defaultView.visualViewport);\n    });\n    ancestors.forEach(ancestor => {\n      ancestor.addEventListener('scroll', onScroll, {\n        passive: true\n      });\n    });\n    return () => {\n      if (escapeKey) {\n        doc.removeEventListener('keydown', escapeKeyCapture ? closeOnEscapeKeyDownCapture : closeOnEscapeKeyDown, escapeKeyCapture);\n        doc.removeEventListener('compositionstart', handleCompositionStart);\n        doc.removeEventListener('compositionend', handleCompositionEnd);\n      }\n      outsidePress && doc.removeEventListener(outsidePressEvent, outsidePressCapture ? closeOnPressOutsideCapture : closeOnPressOutside, outsidePressCapture);\n      ancestors.forEach(ancestor => {\n        ancestor.removeEventListener('scroll', onScroll);\n      });\n      window.clearTimeout(compositionTimeout);\n    };\n  }, [dataRef, elements, escapeKey, outsidePress, outsidePressEvent, open, onOpenChange, ancestorScroll, enabled, escapeKeyBubbles, outsidePressBubbles, closeOnEscapeKeyDown, escapeKeyCapture, closeOnEscapeKeyDownCapture, closeOnPressOutside, outsidePressCapture, closeOnPressOutsideCapture]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    insideReactTreeRef.current = false;\n  }, [outsidePress, outsidePressEvent]);\n  const reference = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\n    onKeyDown: closeOnEscapeKeyDown,\n    [bubbleHandlerKeys[referencePressEvent]]: event => {\n      if (referencePress) {\n        onOpenChange(false, event.nativeEvent, 'reference-press');\n      }\n    }\n  }), [closeOnEscapeKeyDown, onOpenChange, referencePress, referencePressEvent]);\n  const floating = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\n    onKeyDown: closeOnEscapeKeyDown,\n    onMouseDown() {\n      endedOrStartedInsideRef.current = true;\n    },\n    onMouseUp() {\n      endedOrStartedInsideRef.current = true;\n    },\n    [captureHandlerKeys[outsidePressEvent]]: () => {\n      insideReactTreeRef.current = true;\n    }\n  }), [closeOnEscapeKeyDown, outsidePressEvent]);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => enabled ? {\n    reference,\n    floating\n  } : {}, [enabled, reference, floating]);\n}\n\nfunction useFloatingRootContext(options) {\n  const {\n    open = false,\n    onOpenChange: onOpenChangeProp,\n    elements: elementsProp\n  } = options;\n  const floatingId = useId();\n  const dataRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef({});\n  const [events] = react__WEBPACK_IMPORTED_MODULE_0__.useState(() => createPubSub());\n  const nested = useFloatingParentNodeId() != null;\n  if (true) {\n    const optionDomReference = elementsProp.reference;\n    if (optionDomReference && !(0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.isElement)(optionDomReference)) {\n      error('Cannot pass a virtual element to the `elements.reference` option,', 'as it must be a real DOM element. Use `refs.setPositionReference()`', 'instead.');\n    }\n  }\n  const [positionReference, setPositionReference] = react__WEBPACK_IMPORTED_MODULE_0__.useState(elementsProp.reference);\n  const onOpenChange = useEffectEvent((open, event, reason) => {\n    dataRef.current.openEvent = open ? event : undefined;\n    events.emit('openchange', {\n      open,\n      event,\n      reason,\n      nested\n    });\n    onOpenChangeProp == null || onOpenChangeProp(open, event, reason);\n  });\n  const refs = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\n    setPositionReference\n  }), []);\n  const elements = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\n    reference: positionReference || elementsProp.reference || null,\n    floating: elementsProp.floating || null,\n    domReference: elementsProp.reference\n  }), [positionReference, elementsProp.reference, elementsProp.floating]);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\n    dataRef,\n    open,\n    onOpenChange,\n    elements,\n    events,\n    floatingId,\n    refs\n  }), [open, onOpenChange, elements, events, floatingId, refs]);\n}\n\n/**\n * Provides data to position a floating element and context to add interactions.\n * @see https://floating-ui.com/docs/useFloating\n */\nfunction useFloating(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    nodeId\n  } = options;\n  const internalRootContext = useFloatingRootContext({\n    ...options,\n    elements: {\n      reference: null,\n      floating: null,\n      ...options.elements\n    }\n  });\n  const rootContext = options.rootContext || internalRootContext;\n  const computedElements = rootContext.elements;\n  const [_domReference, setDomReference] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n  const [positionReference, _setPositionReference] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n  const optionDomReference = computedElements == null ? void 0 : computedElements.domReference;\n  const domReference = optionDomReference || _domReference;\n  const domReferenceRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const tree = useFloatingTree();\n  index(() => {\n    if (domReference) {\n      domReferenceRef.current = domReference;\n    }\n  }, [domReference]);\n  const position = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__.useFloating)({\n    ...options,\n    elements: {\n      ...computedElements,\n      ...(positionReference && {\n        reference: positionReference\n      })\n    }\n  });\n  const setPositionReference = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(node => {\n    const computedPositionReference = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.isElement)(node) ? {\n      getBoundingClientRect: () => node.getBoundingClientRect(),\n      contextElement: node\n    } : node;\n    // Store the positionReference in state if the DOM reference is specified externally via the\n    // `elements.reference` option. This ensures that it won't be overridden on future renders.\n    _setPositionReference(computedPositionReference);\n    position.refs.setReference(computedPositionReference);\n  }, [position.refs]);\n  const setReference = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(node => {\n    if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.isElement)(node) || node === null) {\n      domReferenceRef.current = node;\n      setDomReference(node);\n    }\n\n    // Backwards-compatibility for passing a virtual element to `reference`\n    // after it has set the DOM reference.\n    if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.isElement)(position.refs.reference.current) || position.refs.reference.current === null ||\n    // Don't allow setting virtual elements using the old technique back to\n    // `null` to support `positionReference` + an unstable `reference`\n    // callback ref.\n    node !== null && !(0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.isElement)(node)) {\n      position.refs.setReference(node);\n    }\n  }, [position.refs]);\n  const refs = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\n    ...position.refs,\n    setReference,\n    setPositionReference,\n    domReference: domReferenceRef\n  }), [position.refs, setReference, setPositionReference]);\n  const elements = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\n    ...position.elements,\n    domReference: domReference\n  }), [position.elements, domReference]);\n  const context = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\n    ...position,\n    ...rootContext,\n    refs,\n    elements,\n    nodeId\n  }), [position, refs, elements, nodeId, rootContext]);\n  index(() => {\n    rootContext.dataRef.current.floatingContext = context;\n    const node = tree == null ? void 0 : tree.nodesRef.current.find(node => node.id === nodeId);\n    if (node) {\n      node.context = context;\n    }\n  });\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\n    ...position,\n    context,\n    refs,\n    elements\n  }), [position, refs, elements, context]);\n}\n\n/**\n * Opens the floating element while the reference element has focus, like CSS\n * `:focus`.\n * @see https://floating-ui.com/docs/useFocus\n */\nfunction useFocus(context, props) {\n  if (props === void 0) {\n    props = {};\n  }\n  const {\n    open,\n    onOpenChange,\n    events,\n    dataRef,\n    elements\n  } = context;\n  const {\n    enabled = true,\n    visibleOnly = true\n  } = props;\n  const blockFocusRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n  const timeoutRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\n  const keyboardModalityRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(true);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!enabled) return;\n    const win = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.getWindow)(elements.domReference);\n\n    // If the reference was focused and the user left the tab/window, and the\n    // floating element was not open, the focus should be blocked when they\n    // return to the tab/window.\n    function onBlur() {\n      if (!open && (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.isHTMLElement)(elements.domReference) && elements.domReference === (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.activeElement)((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(elements.domReference))) {\n        blockFocusRef.current = true;\n      }\n    }\n    function onKeyDown() {\n      keyboardModalityRef.current = true;\n    }\n    win.addEventListener('blur', onBlur);\n    win.addEventListener('keydown', onKeyDown, true);\n    return () => {\n      win.removeEventListener('blur', onBlur);\n      win.removeEventListener('keydown', onKeyDown, true);\n    };\n  }, [elements.domReference, open, enabled]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!enabled) return;\n    function onOpenChange(_ref) {\n      let {\n        reason\n      } = _ref;\n      if (reason === 'reference-press' || reason === 'escape-key') {\n        blockFocusRef.current = true;\n      }\n    }\n    events.on('openchange', onOpenChange);\n    return () => {\n      events.off('openchange', onOpenChange);\n    };\n  }, [events, enabled]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    return () => {\n      clearTimeout(timeoutRef.current);\n    };\n  }, []);\n  const reference = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\n    onPointerDown(event) {\n      if ((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isVirtualPointerEvent)(event.nativeEvent)) return;\n      keyboardModalityRef.current = false;\n    },\n    onMouseLeave() {\n      blockFocusRef.current = false;\n    },\n    onFocus(event) {\n      if (blockFocusRef.current) return;\n      const target = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getTarget)(event.nativeEvent);\n      if (visibleOnly && (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.isElement)(target)) {\n        try {\n          // Mac Safari unreliably matches `:focus-visible` on the reference\n          // if focus was outside the page initially - use the fallback\n          // instead.\n          if ((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isSafari)() && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isMac)()) throw Error();\n          if (!target.matches(':focus-visible')) return;\n        } catch (e) {\n          // Old browsers will throw an error when using `:focus-visible`.\n          if (!keyboardModalityRef.current && !(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isTypeableElement)(target)) {\n            return;\n          }\n        }\n      }\n      onOpenChange(true, event.nativeEvent, 'focus');\n    },\n    onBlur(event) {\n      blockFocusRef.current = false;\n      const relatedTarget = event.relatedTarget;\n      const nativeEvent = event.nativeEvent;\n\n      // Hit the non-modal focus management portal guard. Focus will be\n      // moved into the floating element immediately after.\n      const movedToFocusGuard = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.isElement)(relatedTarget) && relatedTarget.hasAttribute(createAttribute('focus-guard')) && relatedTarget.getAttribute('data-type') === 'outside';\n\n      // Wait for the window blur listener to fire.\n      timeoutRef.current = window.setTimeout(() => {\n        var _dataRef$current$floa;\n        const activeEl = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.activeElement)(elements.domReference ? elements.domReference.ownerDocument : document);\n\n        // Focus left the page, keep it open.\n        if (!relatedTarget && activeEl === elements.domReference) return;\n\n        // When focusing the reference element (e.g. regular click), then\n        // clicking into the floating element, prevent it from hiding.\n        // Note: it must be focusable, e.g. `tabindex=\"-1\"`.\n        // We can not rely on relatedTarget to point to the correct element\n        // as it will only point to the shadow host of the newly focused element\n        // and not the element that actually has received focus if it is located\n        // inside a shadow root.\n        if ((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)((_dataRef$current$floa = dataRef.current.floatingContext) == null ? void 0 : _dataRef$current$floa.refs.floating.current, activeEl) || (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(elements.domReference, activeEl) || movedToFocusGuard) {\n          return;\n        }\n        onOpenChange(false, nativeEvent, 'focus');\n      });\n    }\n  }), [dataRef, elements.domReference, onOpenChange, visibleOnly]);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => enabled ? {\n    reference\n  } : {}, [enabled, reference]);\n}\n\nconst ACTIVE_KEY = 'active';\nconst SELECTED_KEY = 'selected';\nfunction mergeProps(userProps, propsList, elementKey) {\n  const map = new Map();\n  const isItem = elementKey === 'item';\n  let domUserProps = userProps;\n  if (isItem && userProps) {\n    const {\n      [ACTIVE_KEY]: _,\n      [SELECTED_KEY]: __,\n      ...validProps\n    } = userProps;\n    domUserProps = validProps;\n  }\n  return {\n    ...(elementKey === 'floating' && {\n      tabIndex: -1,\n      [FOCUSABLE_ATTRIBUTE]: ''\n    }),\n    ...domUserProps,\n    ...propsList.map(value => {\n      const propsOrGetProps = value ? value[elementKey] : null;\n      if (typeof propsOrGetProps === 'function') {\n        return userProps ? propsOrGetProps(userProps) : null;\n      }\n      return propsOrGetProps;\n    }).concat(userProps).reduce((acc, props) => {\n      if (!props) {\n        return acc;\n      }\n      Object.entries(props).forEach(_ref => {\n        let [key, value] = _ref;\n        if (isItem && [ACTIVE_KEY, SELECTED_KEY].includes(key)) {\n          return;\n        }\n        if (key.indexOf('on') === 0) {\n          if (!map.has(key)) {\n            map.set(key, []);\n          }\n          if (typeof value === 'function') {\n            var _map$get;\n            (_map$get = map.get(key)) == null || _map$get.push(value);\n            acc[key] = function () {\n              var _map$get2;\n              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              }\n              return (_map$get2 = map.get(key)) == null ? void 0 : _map$get2.map(fn => fn(...args)).find(val => val !== undefined);\n            };\n          }\n        } else {\n          acc[key] = value;\n        }\n      });\n      return acc;\n    }, {})\n  };\n}\n/**\n * Merges an array of interaction hooks' props into prop getters, allowing\n * event handler functions to be composed together without overwriting one\n * another.\n * @see https://floating-ui.com/docs/useInteractions\n */\nfunction useInteractions(propsList) {\n  if (propsList === void 0) {\n    propsList = [];\n  }\n  const referenceDeps = propsList.map(key => key == null ? void 0 : key.reference);\n  const floatingDeps = propsList.map(key => key == null ? void 0 : key.floating);\n  const itemDeps = propsList.map(key => key == null ? void 0 : key.item);\n  const getReferenceProps = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(userProps => mergeProps(userProps, propsList, 'reference'),\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  referenceDeps);\n  const getFloatingProps = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(userProps => mergeProps(userProps, propsList, 'floating'),\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  floatingDeps);\n  const getItemProps = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(userProps => mergeProps(userProps, propsList, 'item'),\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  itemDeps);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\n    getReferenceProps,\n    getFloatingProps,\n    getItemProps\n  }), [getReferenceProps, getFloatingProps, getItemProps]);\n}\n\nlet isPreventScrollSupported = false;\nfunction doSwitch(orientation, vertical, horizontal) {\n  switch (orientation) {\n    case 'vertical':\n      return vertical;\n    case 'horizontal':\n      return horizontal;\n    default:\n      return vertical || horizontal;\n  }\n}\nfunction isMainOrientationKey(key, orientation) {\n  const vertical = key === ARROW_UP || key === ARROW_DOWN;\n  const horizontal = key === ARROW_LEFT || key === ARROW_RIGHT;\n  return doSwitch(orientation, vertical, horizontal);\n}\nfunction isMainOrientationToEndKey(key, orientation, rtl) {\n  const vertical = key === ARROW_DOWN;\n  const horizontal = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;\n  return doSwitch(orientation, vertical, horizontal) || key === 'Enter' || key === ' ' || key === '';\n}\nfunction isCrossOrientationOpenKey(key, orientation, rtl) {\n  const vertical = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;\n  const horizontal = key === ARROW_DOWN;\n  return doSwitch(orientation, vertical, horizontal);\n}\nfunction isCrossOrientationCloseKey(key, orientation, rtl) {\n  const vertical = rtl ? key === ARROW_RIGHT : key === ARROW_LEFT;\n  const horizontal = key === ARROW_UP;\n  return doSwitch(orientation, vertical, horizontal);\n}\n/**\n * Adds arrow key-based navigation of a list of items, either using real DOM\n * focus or virtual focus.\n * @see https://floating-ui.com/docs/useListNavigation\n */\nfunction useListNavigation(context, props) {\n  const {\n    open,\n    onOpenChange,\n    elements\n  } = context;\n  const {\n    listRef,\n    activeIndex,\n    onNavigate: unstable_onNavigate = () => {},\n    enabled = true,\n    selectedIndex = null,\n    allowEscape = false,\n    loop = false,\n    nested = false,\n    rtl = false,\n    virtual = false,\n    focusItemOnOpen = 'auto',\n    focusItemOnHover = true,\n    openOnArrowKeyDown = true,\n    disabledIndices = undefined,\n    orientation = 'vertical',\n    cols = 1,\n    scrollItemIntoView = true,\n    virtualItemRef,\n    itemSizes,\n    dense = false\n  } = props;\n  if (true) {\n    if (allowEscape) {\n      if (!loop) {\n        warn('`useListNavigation` looping must be enabled to allow escaping.');\n      }\n      if (!virtual) {\n        warn('`useListNavigation` must be virtual to allow escaping.');\n      }\n    }\n    if (orientation === 'vertical' && cols > 1) {\n      warn('In grid list navigation mode (`cols` > 1), the `orientation` should', 'be either \"horizontal\" or \"both\".');\n    }\n  }\n  const floatingFocusElement = getFloatingFocusElement(elements.floating);\n  const floatingFocusElementRef = useLatestRef(floatingFocusElement);\n  const parentId = useFloatingParentNodeId();\n  const tree = useFloatingTree();\n  const onNavigate = useEffectEvent(unstable_onNavigate);\n  const typeableComboboxReference = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isTypeableCombobox)(elements.domReference);\n  const focusItemOnOpenRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(focusItemOnOpen);\n  const indexRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(selectedIndex != null ? selectedIndex : -1);\n  const keyRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const isPointerModalityRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(true);\n  const previousOnNavigateRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(onNavigate);\n  const previousMountedRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(!!elements.floating);\n  const previousOpenRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(open);\n  const forceSyncFocus = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n  const forceScrollIntoViewRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n  const disabledIndicesRef = useLatestRef(disabledIndices);\n  const latestOpenRef = useLatestRef(open);\n  const scrollItemIntoViewRef = useLatestRef(scrollItemIntoView);\n  const selectedIndexRef = useLatestRef(selectedIndex);\n  const [activeId, setActiveId] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n  const [virtualId, setVirtualId] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n  const focusItem = useEffectEvent(function (listRef, indexRef, forceScrollIntoView) {\n    if (forceScrollIntoView === void 0) {\n      forceScrollIntoView = false;\n    }\n    function runFocus(item) {\n      if (virtual) {\n        setActiveId(item.id);\n        tree == null || tree.events.emit('virtualfocus', item);\n        if (virtualItemRef) {\n          virtualItemRef.current = item;\n        }\n      } else {\n        enqueueFocus(item, {\n          preventScroll: true,\n          // Mac Safari does not move the virtual cursor unless the focus call\n          // is sync. However, for the very first focus call, we need to wait\n          // for the position to be ready in order to prevent unwanted\n          // scrolling. This means the virtual cursor will not move to the first\n          // item when first opening the floating element, but will on\n          // subsequent calls. `preventScroll` is supported in modern Safari,\n          // so we can use that instead.\n          // iOS Safari must be async or the first item will not be focused.\n          sync: (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isMac)() && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isSafari)() ? isPreventScrollSupported || forceSyncFocus.current : false\n        });\n      }\n    }\n    const initialItem = listRef.current[indexRef.current];\n    if (initialItem) {\n      runFocus(initialItem);\n    }\n    requestAnimationFrame(() => {\n      const waitedItem = listRef.current[indexRef.current] || initialItem;\n      if (!waitedItem) return;\n      if (!initialItem) {\n        runFocus(waitedItem);\n      }\n      const scrollIntoViewOptions = scrollItemIntoViewRef.current;\n      const shouldScrollIntoView = scrollIntoViewOptions && item && (forceScrollIntoView || !isPointerModalityRef.current);\n      if (shouldScrollIntoView) {\n        // JSDOM doesn't support `.scrollIntoView()` but it's widely supported\n        // by all browsers.\n        waitedItem.scrollIntoView == null || waitedItem.scrollIntoView(typeof scrollIntoViewOptions === 'boolean' ? {\n          block: 'nearest',\n          inline: 'nearest'\n        } : scrollIntoViewOptions);\n      }\n    });\n  });\n  index(() => {\n    document.createElement('div').focus({\n      get preventScroll() {\n        isPreventScrollSupported = true;\n        return false;\n      }\n    });\n  }, []);\n\n  // Sync `selectedIndex` to be the `activeIndex` upon opening the floating\n  // element. Also, reset `activeIndex` upon closing the floating element.\n  index(() => {\n    if (!enabled) return;\n    if (open && elements.floating) {\n      if (focusItemOnOpenRef.current && selectedIndex != null) {\n        // Regardless of the pointer modality, we want to ensure the selected\n        // item comes into view when the floating element is opened.\n        forceScrollIntoViewRef.current = true;\n        indexRef.current = selectedIndex;\n        onNavigate(selectedIndex);\n      }\n    } else if (previousMountedRef.current) {\n      // Since the user can specify `onNavigate` conditionally\n      // (onNavigate: open ? setActiveIndex : setSelectedIndex),\n      // we store and call the previous function.\n      indexRef.current = -1;\n      previousOnNavigateRef.current(null);\n    }\n  }, [enabled, open, elements.floating, selectedIndex, onNavigate]);\n\n  // Sync `activeIndex` to be the focused item while the floating element is\n  // open.\n  index(() => {\n    if (!enabled) return;\n    if (open && elements.floating) {\n      if (activeIndex == null) {\n        forceSyncFocus.current = false;\n        if (selectedIndexRef.current != null) {\n          return;\n        }\n\n        // Reset while the floating element was open (e.g. the list changed).\n        if (previousMountedRef.current) {\n          indexRef.current = -1;\n          focusItem(listRef, indexRef);\n        }\n\n        // Initial sync.\n        if ((!previousOpenRef.current || !previousMountedRef.current) && focusItemOnOpenRef.current && (keyRef.current != null || focusItemOnOpenRef.current === true && keyRef.current == null)) {\n          let runs = 0;\n          const waitForListPopulated = () => {\n            if (listRef.current[0] == null) {\n              // Avoid letting the browser paint if possible on the first try,\n              // otherwise use rAF. Don't try more than twice, since something\n              // is wrong otherwise.\n              if (runs < 2) {\n                const scheduler = runs ? requestAnimationFrame : queueMicrotask;\n                scheduler(waitForListPopulated);\n              }\n              runs++;\n            } else {\n              indexRef.current = keyRef.current == null || isMainOrientationToEndKey(keyRef.current, orientation, rtl) || nested ? getMinIndex(listRef, disabledIndicesRef.current) : getMaxIndex(listRef, disabledIndicesRef.current);\n              keyRef.current = null;\n              onNavigate(indexRef.current);\n            }\n          };\n          waitForListPopulated();\n        }\n      } else if (!isIndexOutOfBounds(listRef, activeIndex)) {\n        indexRef.current = activeIndex;\n        focusItem(listRef, indexRef, forceScrollIntoViewRef.current);\n        forceScrollIntoViewRef.current = false;\n      }\n    }\n  }, [enabled, open, elements.floating, activeIndex, selectedIndexRef, nested, listRef, orientation, rtl, onNavigate, focusItem, disabledIndicesRef]);\n\n  // Ensure the parent floating element has focus when a nested child closes\n  // to allow arrow key navigation to work after the pointer leaves the child.\n  index(() => {\n    var _nodes$find;\n    if (!enabled || elements.floating || !tree || virtual || !previousMountedRef.current) {\n      return;\n    }\n    const nodes = tree.nodesRef.current;\n    const parent = (_nodes$find = nodes.find(node => node.id === parentId)) == null || (_nodes$find = _nodes$find.context) == null ? void 0 : _nodes$find.elements.floating;\n    const activeEl = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.activeElement)((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(elements.floating));\n    const treeContainsActiveEl = nodes.some(node => node.context && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(node.context.elements.floating, activeEl));\n    if (parent && !treeContainsActiveEl && isPointerModalityRef.current) {\n      parent.focus({\n        preventScroll: true\n      });\n    }\n  }, [enabled, elements.floating, tree, parentId, virtual]);\n  index(() => {\n    if (!enabled) return;\n    if (!tree) return;\n    if (!virtual) return;\n    if (parentId) return;\n    function handleVirtualFocus(item) {\n      setVirtualId(item.id);\n      if (virtualItemRef) {\n        virtualItemRef.current = item;\n      }\n    }\n    tree.events.on('virtualfocus', handleVirtualFocus);\n    return () => {\n      tree.events.off('virtualfocus', handleVirtualFocus);\n    };\n  }, [enabled, tree, virtual, parentId, virtualItemRef]);\n  index(() => {\n    previousOnNavigateRef.current = onNavigate;\n    previousMountedRef.current = !!elements.floating;\n  });\n  index(() => {\n    if (!open) {\n      keyRef.current = null;\n    }\n  }, [open]);\n  index(() => {\n    previousOpenRef.current = open;\n  }, [open]);\n  const hasActiveIndex = activeIndex != null;\n  const item = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    function syncCurrentTarget(currentTarget) {\n      if (!open) return;\n      const index = listRef.current.indexOf(currentTarget);\n      if (index !== -1) {\n        onNavigate(index);\n      }\n    }\n    const props = {\n      onFocus(_ref) {\n        let {\n          currentTarget\n        } = _ref;\n        syncCurrentTarget(currentTarget);\n      },\n      onClick: _ref2 => {\n        let {\n          currentTarget\n        } = _ref2;\n        return currentTarget.focus({\n          preventScroll: true\n        });\n      },\n      // Safari\n      ...(focusItemOnHover && {\n        onMouseMove(_ref3) {\n          let {\n            currentTarget\n          } = _ref3;\n          syncCurrentTarget(currentTarget);\n        },\n        onPointerLeave(_ref4) {\n          let {\n            pointerType\n          } = _ref4;\n          if (!isPointerModalityRef.current || pointerType === 'touch') {\n            return;\n          }\n          indexRef.current = -1;\n          focusItem(listRef, indexRef);\n          onNavigate(null);\n          if (!virtual) {\n            enqueueFocus(floatingFocusElementRef.current, {\n              preventScroll: true\n            });\n          }\n        }\n      })\n    };\n    return props;\n  }, [open, floatingFocusElementRef, focusItem, focusItemOnHover, listRef, onNavigate, virtual]);\n  const commonOnKeyDown = useEffectEvent(event => {\n    isPointerModalityRef.current = false;\n    forceSyncFocus.current = true;\n\n    // When composing a character, Chrome fires ArrowDown twice. Firefox/Safari\n    // don't appear to suffer from this. `event.isComposing` is avoided due to\n    // Safari not supporting it properly (although it's not needed in the first\n    // place for Safari, just avoiding any possible issues).\n    if (event.which === 229) {\n      return;\n    }\n\n    // If the floating element is animating out, ignore navigation. Otherwise,\n    // the `activeIndex` gets set to 0 despite not being open so the next time\n    // the user ArrowDowns, the first item won't be focused.\n    if (!latestOpenRef.current && event.currentTarget === floatingFocusElementRef.current) {\n      return;\n    }\n    if (nested && isCrossOrientationCloseKey(event.key, orientation, rtl)) {\n      (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\n      onOpenChange(false, event.nativeEvent, 'list-navigation');\n      if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.isHTMLElement)(elements.domReference)) {\n        if (virtual) {\n          tree == null || tree.events.emit('virtualfocus', elements.domReference);\n        } else {\n          elements.domReference.focus();\n        }\n      }\n      return;\n    }\n    const currentIndex = indexRef.current;\n    const minIndex = getMinIndex(listRef, disabledIndices);\n    const maxIndex = getMaxIndex(listRef, disabledIndices);\n    if (!typeableComboboxReference) {\n      if (event.key === 'Home') {\n        (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\n        indexRef.current = minIndex;\n        onNavigate(indexRef.current);\n      }\n      if (event.key === 'End') {\n        (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\n        indexRef.current = maxIndex;\n        onNavigate(indexRef.current);\n      }\n    }\n\n    // Grid navigation.\n    if (cols > 1) {\n      const sizes = itemSizes || Array.from({\n        length: listRef.current.length\n      }, () => ({\n        width: 1,\n        height: 1\n      }));\n      // To calculate movements on the grid, we use hypothetical cell indices\n      // as if every item was 1x1, then convert back to real indices.\n      const cellMap = buildCellMap(sizes, cols, dense);\n      const minGridIndex = cellMap.findIndex(index => index != null && !isDisabled(listRef.current, index, disabledIndices));\n      // last enabled index\n      const maxGridIndex = cellMap.reduce((foundIndex, index, cellIndex) => index != null && !isDisabled(listRef.current, index, disabledIndices) ? cellIndex : foundIndex, -1);\n      const index = cellMap[getGridNavigatedIndex({\n        current: cellMap.map(itemIndex => itemIndex != null ? listRef.current[itemIndex] : null)\n      }, {\n        event,\n        orientation,\n        loop,\n        rtl,\n        cols,\n        // treat undefined (empty grid spaces) as disabled indices so we\n        // don't end up in them\n        disabledIndices: getCellIndices([...(disabledIndices || listRef.current.map((_, index) => isDisabled(listRef.current, index) ? index : undefined)), undefined], cellMap),\n        minIndex: minGridIndex,\n        maxIndex: maxGridIndex,\n        prevIndex: getCellIndexOfCorner(indexRef.current > maxIndex ? minIndex : indexRef.current, sizes, cellMap, cols,\n        // use a corner matching the edge closest to the direction\n        // we're moving in so we don't end up in the same item. Prefer\n        // top/left over bottom/right.\n        event.key === ARROW_DOWN ? 'bl' : event.key === (rtl ? ARROW_LEFT : ARROW_RIGHT) ? 'tr' : 'tl'),\n        stopEvent: true\n      })];\n      if (index != null) {\n        indexRef.current = index;\n        onNavigate(indexRef.current);\n      }\n      if (orientation === 'both') {\n        return;\n      }\n    }\n    if (isMainOrientationKey(event.key, orientation)) {\n      (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\n\n      // Reset the index if no item is focused.\n      if (open && !virtual && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.activeElement)(event.currentTarget.ownerDocument) === event.currentTarget) {\n        indexRef.current = isMainOrientationToEndKey(event.key, orientation, rtl) ? minIndex : maxIndex;\n        onNavigate(indexRef.current);\n        return;\n      }\n      if (isMainOrientationToEndKey(event.key, orientation, rtl)) {\n        if (loop) {\n          indexRef.current = currentIndex >= maxIndex ? allowEscape && currentIndex !== listRef.current.length ? -1 : minIndex : findNonDisabledIndex(listRef, {\n            startingIndex: currentIndex,\n            disabledIndices\n          });\n        } else {\n          indexRef.current = Math.min(maxIndex, findNonDisabledIndex(listRef, {\n            startingIndex: currentIndex,\n            disabledIndices\n          }));\n        }\n      } else {\n        if (loop) {\n          indexRef.current = currentIndex <= minIndex ? allowEscape && currentIndex !== -1 ? listRef.current.length : maxIndex : findNonDisabledIndex(listRef, {\n            startingIndex: currentIndex,\n            decrement: true,\n            disabledIndices\n          });\n        } else {\n          indexRef.current = Math.max(minIndex, findNonDisabledIndex(listRef, {\n            startingIndex: currentIndex,\n            decrement: true,\n            disabledIndices\n          }));\n        }\n      }\n      if (isIndexOutOfBounds(listRef, indexRef.current)) {\n        onNavigate(null);\n      } else {\n        onNavigate(indexRef.current);\n      }\n    }\n  });\n  const ariaActiveDescendantProp = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    return virtual && open && hasActiveIndex && {\n      'aria-activedescendant': virtualId || activeId\n    };\n  }, [virtual, open, hasActiveIndex, virtualId, activeId]);\n  const floating = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    return {\n      'aria-orientation': orientation === 'both' ? undefined : orientation,\n      ...(!(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isTypeableCombobox)(elements.domReference) && ariaActiveDescendantProp),\n      onKeyDown: commonOnKeyDown,\n      onPointerMove() {\n        isPointerModalityRef.current = true;\n      }\n    };\n  }, [ariaActiveDescendantProp, commonOnKeyDown, elements.domReference, orientation]);\n  const reference = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    function checkVirtualMouse(event) {\n      if (focusItemOnOpen === 'auto' && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isVirtualClick)(event.nativeEvent)) {\n        focusItemOnOpenRef.current = true;\n      }\n    }\n    function checkVirtualPointer(event) {\n      // `pointerdown` fires first, reset the state then perform the checks.\n      focusItemOnOpenRef.current = focusItemOnOpen;\n      if (focusItemOnOpen === 'auto' && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isVirtualPointerEvent)(event.nativeEvent)) {\n        focusItemOnOpenRef.current = true;\n      }\n    }\n    return {\n      ...ariaActiveDescendantProp,\n      onKeyDown(event) {\n        isPointerModalityRef.current = false;\n        const isArrowKey = event.key.startsWith('Arrow');\n        const isHomeOrEndKey = ['Home', 'End'].includes(event.key);\n        const isMoveKey = isArrowKey || isHomeOrEndKey;\n        const isCrossOpenKey = isCrossOrientationOpenKey(event.key, orientation, rtl);\n        const isCrossCloseKey = isCrossOrientationCloseKey(event.key, orientation, rtl);\n        const isMainKey = isMainOrientationKey(event.key, orientation);\n        const isNavigationKey = (nested ? isCrossOpenKey : isMainKey) || event.key === 'Enter' || event.key.trim() === '';\n        if (virtual && open) {\n          const rootNode = tree == null ? void 0 : tree.nodesRef.current.find(node => node.parentId == null);\n          const deepestNode = tree && rootNode ? getDeepestNode(tree.nodesRef.current, rootNode.id) : null;\n          if (isMoveKey && deepestNode && virtualItemRef) {\n            const eventObject = new KeyboardEvent('keydown', {\n              key: event.key,\n              bubbles: true\n            });\n            if (isCrossOpenKey || isCrossCloseKey) {\n              var _deepestNode$context, _deepestNode$context2;\n              const isCurrentTarget = ((_deepestNode$context = deepestNode.context) == null ? void 0 : _deepestNode$context.elements.domReference) === event.currentTarget;\n              const dispatchItem = isCrossCloseKey && !isCurrentTarget ? (_deepestNode$context2 = deepestNode.context) == null ? void 0 : _deepestNode$context2.elements.domReference : isCrossOpenKey ? listRef.current.find(item => (item == null ? void 0 : item.id) === activeId) : null;\n              if (dispatchItem) {\n                (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\n                dispatchItem.dispatchEvent(eventObject);\n                setVirtualId(undefined);\n              }\n            }\n            if ((isMainKey || isHomeOrEndKey) && deepestNode.context) {\n              if (deepestNode.context.open && deepestNode.parentId && event.currentTarget !== deepestNode.context.elements.domReference) {\n                var _deepestNode$context$;\n                (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\n                (_deepestNode$context$ = deepestNode.context.elements.domReference) == null || _deepestNode$context$.dispatchEvent(eventObject);\n                return;\n              }\n            }\n          }\n          return commonOnKeyDown(event);\n        }\n\n        // If a floating element should not open on arrow key down, avoid\n        // setting `activeIndex` while it's closed.\n        if (!open && !openOnArrowKeyDown && isArrowKey) {\n          return;\n        }\n        if (isNavigationKey) {\n          keyRef.current = nested && isMainKey ? null : event.key;\n        }\n        if (nested) {\n          if (isCrossOpenKey) {\n            (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\n            if (open) {\n              indexRef.current = getMinIndex(listRef, disabledIndicesRef.current);\n              onNavigate(indexRef.current);\n            } else {\n              onOpenChange(true, event.nativeEvent, 'list-navigation');\n            }\n          }\n          return;\n        }\n        if (isMainKey) {\n          if (selectedIndex != null) {\n            indexRef.current = selectedIndex;\n          }\n          (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\n          if (!open && openOnArrowKeyDown) {\n            onOpenChange(true, event.nativeEvent, 'list-navigation');\n          } else {\n            commonOnKeyDown(event);\n          }\n          if (open) {\n            onNavigate(indexRef.current);\n          }\n        }\n      },\n      onFocus() {\n        if (open && !virtual) {\n          onNavigate(null);\n        }\n      },\n      onPointerDown: checkVirtualPointer,\n      onMouseDown: checkVirtualMouse,\n      onClick: checkVirtualMouse\n    };\n  }, [activeId, ariaActiveDescendantProp, commonOnKeyDown, disabledIndicesRef, focusItemOnOpen, listRef, nested, onNavigate, onOpenChange, open, openOnArrowKeyDown, orientation, rtl, selectedIndex, tree, virtual, virtualItemRef]);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => enabled ? {\n    reference,\n    floating,\n    item\n  } : {}, [enabled, reference, floating, item]);\n}\n\nconst componentRoleToAriaRoleMap = /*#__PURE__*/new Map([['select', 'listbox'], ['combobox', 'listbox'], ['label', false]]);\n\n/**\n * Adds base screen reader props to the reference and floating elements for a\n * given floating element `role`.\n * @see https://floating-ui.com/docs/useRole\n */\nfunction useRole(context, props) {\n  var _componentRoleToAriaR;\n  if (props === void 0) {\n    props = {};\n  }\n  const {\n    open,\n    floatingId\n  } = context;\n  const {\n    enabled = true,\n    role = 'dialog'\n  } = props;\n  const ariaRole = (_componentRoleToAriaR = componentRoleToAriaRoleMap.get(role)) != null ? _componentRoleToAriaR : role;\n  const referenceId = useId();\n  const parentId = useFloatingParentNodeId();\n  const isNested = parentId != null;\n  const reference = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    if (ariaRole === 'tooltip' || role === 'label') {\n      return {\n        [\"aria-\" + (role === 'label' ? 'labelledby' : 'describedby')]: open ? floatingId : undefined\n      };\n    }\n    return {\n      'aria-expanded': open ? 'true' : 'false',\n      'aria-haspopup': ariaRole === 'alertdialog' ? 'dialog' : ariaRole,\n      'aria-controls': open ? floatingId : undefined,\n      ...(ariaRole === 'listbox' && {\n        role: 'combobox'\n      }),\n      ...(ariaRole === 'menu' && {\n        id: referenceId\n      }),\n      ...(ariaRole === 'menu' && isNested && {\n        role: 'menuitem'\n      }),\n      ...(role === 'select' && {\n        'aria-autocomplete': 'none'\n      }),\n      ...(role === 'combobox' && {\n        'aria-autocomplete': 'list'\n      })\n    };\n  }, [ariaRole, floatingId, isNested, open, referenceId, role]);\n  const floating = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    const floatingProps = {\n      id: floatingId,\n      ...(ariaRole && {\n        role: ariaRole\n      })\n    };\n    if (ariaRole === 'tooltip' || role === 'label') {\n      return floatingProps;\n    }\n    return {\n      ...floatingProps,\n      ...(ariaRole === 'menu' && {\n        'aria-labelledby': referenceId\n      })\n    };\n  }, [ariaRole, floatingId, referenceId, role]);\n  const item = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(_ref => {\n    let {\n      active,\n      selected\n    } = _ref;\n    const commonProps = {\n      role: 'option',\n      ...(active && {\n        id: floatingId + \"-option\"\n      })\n    };\n\n    // For `menu`, we are unable to tell if the item is a `menuitemradio`\n    // or `menuitemcheckbox`. For backwards-compatibility reasons, also\n    // avoid defaulting to `menuitem` as it may overwrite custom role props.\n    switch (role) {\n      case 'select':\n        return {\n          ...commonProps,\n          'aria-selected': active && selected\n        };\n      case 'combobox':\n        {\n          return {\n            ...commonProps,\n            ...(active && {\n              'aria-selected': true\n            })\n          };\n        }\n    }\n    return {};\n  }, [floatingId, role]);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => enabled ? {\n    reference,\n    floating,\n    item\n  } : {}, [enabled, reference, floating, item]);\n}\n\n// Converts a JS style key like `backgroundColor` to a CSS transition-property\n// like `background-color`.\nconst camelCaseToKebabCase = str => str.replace(/[A-Z]+(?![a-z])|[A-Z]/g, ($, ofs) => (ofs ? '-' : '') + $.toLowerCase());\nfunction execWithArgsOrReturn(valueOrFn, args) {\n  return typeof valueOrFn === 'function' ? valueOrFn(args) : valueOrFn;\n}\nfunction useDelayUnmount(open, durationMs) {\n  const [isMounted, setIsMounted] = react__WEBPACK_IMPORTED_MODULE_0__.useState(open);\n  if (open && !isMounted) {\n    setIsMounted(true);\n  }\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!open && isMounted) {\n      const timeout = setTimeout(() => setIsMounted(false), durationMs);\n      return () => clearTimeout(timeout);\n    }\n  }, [open, isMounted, durationMs]);\n  return isMounted;\n}\n/**\n * Provides a status string to apply CSS transitions to a floating element,\n * correctly handling placement-aware transitions.\n * @see https://floating-ui.com/docs/useTransition#usetransitionstatus\n */\nfunction useTransitionStatus(context, props) {\n  if (props === void 0) {\n    props = {};\n  }\n  const {\n    open,\n    elements: {\n      floating\n    }\n  } = context;\n  const {\n    duration = 250\n  } = props;\n  const isNumberDuration = typeof duration === 'number';\n  const closeDuration = (isNumberDuration ? duration : duration.close) || 0;\n  const [status, setStatus] = react__WEBPACK_IMPORTED_MODULE_0__.useState('unmounted');\n  const isMounted = useDelayUnmount(open, closeDuration);\n  if (!isMounted && status === 'close') {\n    setStatus('unmounted');\n  }\n  index(() => {\n    if (!floating) return;\n    if (open) {\n      setStatus('initial');\n      const frame = requestAnimationFrame(() => {\n        setStatus('open');\n      });\n      return () => {\n        cancelAnimationFrame(frame);\n      };\n    }\n    setStatus('close');\n  }, [open, floating]);\n  return {\n    isMounted,\n    status\n  };\n}\n/**\n * Provides styles to apply CSS transitions to a floating element, correctly\n * handling placement-aware transitions. Wrapper around `useTransitionStatus`.\n * @see https://floating-ui.com/docs/useTransition#usetransitionstyles\n */\nfunction useTransitionStyles(context, props) {\n  if (props === void 0) {\n    props = {};\n  }\n  const {\n    initial: unstable_initial = {\n      opacity: 0\n    },\n    open: unstable_open,\n    close: unstable_close,\n    common: unstable_common,\n    duration = 250\n  } = props;\n  const placement = context.placement;\n  const side = placement.split('-')[0];\n  const fnArgs = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\n    side,\n    placement\n  }), [side, placement]);\n  const isNumberDuration = typeof duration === 'number';\n  const openDuration = (isNumberDuration ? duration : duration.open) || 0;\n  const closeDuration = (isNumberDuration ? duration : duration.close) || 0;\n  const [styles, setStyles] = react__WEBPACK_IMPORTED_MODULE_0__.useState(() => ({\n    ...execWithArgsOrReturn(unstable_common, fnArgs),\n    ...execWithArgsOrReturn(unstable_initial, fnArgs)\n  }));\n  const {\n    isMounted,\n    status\n  } = useTransitionStatus(context, {\n    duration\n  });\n  const initialRef = useLatestRef(unstable_initial);\n  const openRef = useLatestRef(unstable_open);\n  const closeRef = useLatestRef(unstable_close);\n  const commonRef = useLatestRef(unstable_common);\n  index(() => {\n    const initialStyles = execWithArgsOrReturn(initialRef.current, fnArgs);\n    const closeStyles = execWithArgsOrReturn(closeRef.current, fnArgs);\n    const commonStyles = execWithArgsOrReturn(commonRef.current, fnArgs);\n    const openStyles = execWithArgsOrReturn(openRef.current, fnArgs) || Object.keys(initialStyles).reduce((acc, key) => {\n      acc[key] = '';\n      return acc;\n    }, {});\n    if (status === 'initial') {\n      setStyles(styles => ({\n        transitionProperty: styles.transitionProperty,\n        ...commonStyles,\n        ...initialStyles\n      }));\n    }\n    if (status === 'open') {\n      setStyles({\n        transitionProperty: Object.keys(openStyles).map(camelCaseToKebabCase).join(','),\n        transitionDuration: openDuration + \"ms\",\n        ...commonStyles,\n        ...openStyles\n      });\n    }\n    if (status === 'close') {\n      const styles = closeStyles || initialStyles;\n      setStyles({\n        transitionProperty: Object.keys(styles).map(camelCaseToKebabCase).join(','),\n        transitionDuration: closeDuration + \"ms\",\n        ...commonStyles,\n        ...styles\n      });\n    }\n  }, [closeDuration, closeRef, initialRef, openRef, commonRef, openDuration, status, fnArgs]);\n  return {\n    isMounted,\n    styles\n  };\n}\n\n/**\n * Provides a matching callback that can be used to focus an item as the user\n * types, often used in tandem with `useListNavigation()`.\n * @see https://floating-ui.com/docs/useTypeahead\n */\nfunction useTypeahead(context, props) {\n  var _ref;\n  const {\n    open,\n    dataRef\n  } = context;\n  const {\n    listRef,\n    activeIndex,\n    onMatch: unstable_onMatch,\n    onTypingChange: unstable_onTypingChange,\n    enabled = true,\n    findMatch = null,\n    resetMs = 750,\n    ignoreKeys = [],\n    selectedIndex = null\n  } = props;\n  const timeoutIdRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\n  const stringRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef('');\n  const prevIndexRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef((_ref = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref : -1);\n  const matchIndexRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const onMatch = useEffectEvent(unstable_onMatch);\n  const onTypingChange = useEffectEvent(unstable_onTypingChange);\n  const findMatchRef = useLatestRef(findMatch);\n  const ignoreKeysRef = useLatestRef(ignoreKeys);\n  index(() => {\n    if (open) {\n      clearTimeout(timeoutIdRef.current);\n      matchIndexRef.current = null;\n      stringRef.current = '';\n    }\n  }, [open]);\n  index(() => {\n    // Sync arrow key navigation but not typeahead navigation.\n    if (open && stringRef.current === '') {\n      var _ref2;\n      prevIndexRef.current = (_ref2 = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref2 : -1;\n    }\n  }, [open, selectedIndex, activeIndex]);\n  const setTypingChange = useEffectEvent(value => {\n    if (value) {\n      if (!dataRef.current.typing) {\n        dataRef.current.typing = value;\n        onTypingChange(value);\n      }\n    } else {\n      if (dataRef.current.typing) {\n        dataRef.current.typing = value;\n        onTypingChange(value);\n      }\n    }\n  });\n  const onKeyDown = useEffectEvent(event => {\n    function getMatchingIndex(list, orderedList, string) {\n      const str = findMatchRef.current ? findMatchRef.current(orderedList, string) : orderedList.find(text => (text == null ? void 0 : text.toLocaleLowerCase().indexOf(string.toLocaleLowerCase())) === 0);\n      return str ? list.indexOf(str) : -1;\n    }\n    const listContent = listRef.current;\n    if (stringRef.current.length > 0 && stringRef.current[0] !== ' ') {\n      if (getMatchingIndex(listContent, listContent, stringRef.current) === -1) {\n        setTypingChange(false);\n      } else if (event.key === ' ') {\n        (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\n      }\n    }\n    if (listContent == null || ignoreKeysRef.current.includes(event.key) ||\n    // Character key.\n    event.key.length !== 1 ||\n    // Modifier key.\n    event.ctrlKey || event.metaKey || event.altKey) {\n      return;\n    }\n    if (open && event.key !== ' ') {\n      (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\n      setTypingChange(true);\n    }\n\n    // Bail out if the list contains a word like \"llama\" or \"aaron\". TODO:\n    // allow it in this case, too.\n    const allowRapidSuccessionOfFirstLetter = listContent.every(text => {\n      var _text$, _text$2;\n      return text ? ((_text$ = text[0]) == null ? void 0 : _text$.toLocaleLowerCase()) !== ((_text$2 = text[1]) == null ? void 0 : _text$2.toLocaleLowerCase()) : true;\n    });\n\n    // Allows the user to cycle through items that start with the same letter\n    // in rapid succession.\n    if (allowRapidSuccessionOfFirstLetter && stringRef.current === event.key) {\n      stringRef.current = '';\n      prevIndexRef.current = matchIndexRef.current;\n    }\n    stringRef.current += event.key;\n    clearTimeout(timeoutIdRef.current);\n    timeoutIdRef.current = setTimeout(() => {\n      stringRef.current = '';\n      prevIndexRef.current = matchIndexRef.current;\n      setTypingChange(false);\n    }, resetMs);\n    const prevIndex = prevIndexRef.current;\n    const index = getMatchingIndex(listContent, [...listContent.slice((prevIndex || 0) + 1), ...listContent.slice(0, (prevIndex || 0) + 1)], stringRef.current);\n    if (index !== -1) {\n      onMatch(index);\n      matchIndexRef.current = index;\n    } else if (event.key !== ' ') {\n      stringRef.current = '';\n      setTypingChange(false);\n    }\n  });\n  const reference = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\n    onKeyDown\n  }), [onKeyDown]);\n  const floating = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    return {\n      onKeyDown,\n      onKeyUp(event) {\n        if (event.key === ' ') {\n          setTypingChange(false);\n        }\n      }\n    };\n  }, [onKeyDown, setTypingChange]);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => enabled ? {\n    reference,\n    floating\n  } : {}, [enabled, reference, floating]);\n}\n\nfunction getArgsWithCustomFloatingHeight(state, height) {\n  return {\n    ...state,\n    rects: {\n      ...state.rects,\n      floating: {\n        ...state.rects.floating,\n        height\n      }\n    }\n  };\n}\n/**\n * Positions the floating element such that an inner element inside of it is\n * anchored to the reference element.\n * @see https://floating-ui.com/docs/inner\n */\nconst inner = props => ({\n  name: 'inner',\n  options: props,\n  async fn(state) {\n    const {\n      listRef,\n      overflowRef,\n      onFallbackChange,\n      offset: innerOffset = 0,\n      index = 0,\n      minItemsVisible = 4,\n      referenceOverflowThreshold = 0,\n      scrollRef,\n      ...detectOverflowOptions\n    } = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_6__.evaluate)(props, state);\n    const {\n      rects,\n      elements: {\n        floating\n      }\n    } = state;\n    const item = listRef.current[index];\n    const scrollEl = (scrollRef == null ? void 0 : scrollRef.current) || floating;\n\n    // Valid combinations:\n    // 1. Floating element is the scrollRef and has a border (default)\n    // 2. Floating element is not the scrollRef, floating element has a border\n    // 3. Floating element is not the scrollRef, scrollRef has a border\n    // Floating > {...getFloatingProps()} wrapper > scrollRef > items is not\n    // allowed as VoiceOver doesn't work.\n    const clientTop = floating.clientTop || scrollEl.clientTop;\n    const floatingIsBordered = floating.clientTop !== 0;\n    const scrollElIsBordered = scrollEl.clientTop !== 0;\n    const floatingIsScrollEl = floating === scrollEl;\n    if (true) {\n      if (!state.placement.startsWith('bottom')) {\n        warn('`placement` side must be \"bottom\" when using the `inner`', 'middleware.');\n      }\n    }\n    if (!item) {\n      return {};\n    }\n    const nextArgs = {\n      ...state,\n      ...(await (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__.offset)(-item.offsetTop - floating.clientTop - rects.reference.height / 2 - item.offsetHeight / 2 - innerOffset).fn(state))\n    };\n    const overflow = await (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.detectOverflow)(getArgsWithCustomFloatingHeight(nextArgs, scrollEl.scrollHeight + clientTop + floating.clientTop), detectOverflowOptions);\n    const refOverflow = await (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.detectOverflow)(nextArgs, {\n      ...detectOverflowOptions,\n      elementContext: 'reference'\n    });\n    const diffY = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_6__.max)(0, overflow.top);\n    const nextY = nextArgs.y + diffY;\n    const isScrollable = scrollEl.scrollHeight > scrollEl.clientHeight;\n    const rounder = isScrollable ? v => v : _floating_ui_utils__WEBPACK_IMPORTED_MODULE_6__.round;\n    const maxHeight = rounder((0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_6__.max)(0, scrollEl.scrollHeight + (floatingIsBordered && floatingIsScrollEl || scrollElIsBordered ? clientTop * 2 : 0) - diffY - (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_6__.max)(0, overflow.bottom)));\n    scrollEl.style.maxHeight = maxHeight + \"px\";\n    scrollEl.scrollTop = diffY;\n\n    // There is not enough space, fallback to standard anchored positioning\n    if (onFallbackChange) {\n      const shouldFallback = scrollEl.offsetHeight < item.offsetHeight * (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_6__.min)(minItemsVisible, listRef.current.length) - 1 || refOverflow.top >= -referenceOverflowThreshold || refOverflow.bottom >= -referenceOverflowThreshold;\n      react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync(() => onFallbackChange(shouldFallback));\n    }\n    if (overflowRef) {\n      overflowRef.current = await (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.detectOverflow)(getArgsWithCustomFloatingHeight({\n        ...nextArgs,\n        y: nextY\n      }, scrollEl.offsetHeight + clientTop + floating.clientTop), detectOverflowOptions);\n    }\n    return {\n      y: nextY\n    };\n  }\n});\n/**\n * Changes the `inner` middleware's `offset` upon a `wheel` event to\n * expand the floating element's height, revealing more list items.\n * @see https://floating-ui.com/docs/inner\n */\nfunction useInnerOffset(context, props) {\n  const {\n    open,\n    elements\n  } = context;\n  const {\n    enabled = true,\n    overflowRef,\n    scrollRef,\n    onChange: unstable_onChange\n  } = props;\n  const onChange = useEffectEvent(unstable_onChange);\n  const controlledScrollingRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n  const prevScrollTopRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  const initialOverflowRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!enabled) return;\n    function onWheel(e) {\n      if (e.ctrlKey || !el || overflowRef.current == null) {\n        return;\n      }\n      const dY = e.deltaY;\n      const isAtTop = overflowRef.current.top >= -0.5;\n      const isAtBottom = overflowRef.current.bottom >= -0.5;\n      const remainingScroll = el.scrollHeight - el.clientHeight;\n      const sign = dY < 0 ? -1 : 1;\n      const method = dY < 0 ? 'max' : 'min';\n      if (el.scrollHeight <= el.clientHeight) {\n        return;\n      }\n      if (!isAtTop && dY > 0 || !isAtBottom && dY < 0) {\n        e.preventDefault();\n        react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync(() => {\n          onChange(d => d + Math[method](dY, remainingScroll * sign));\n        });\n      } else if (/firefox/i.test((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getUserAgent)())) {\n        // Needed to propagate scrolling during momentum scrolling phase once\n        // it gets limited by the boundary. UX improvement, not critical.\n        el.scrollTop += dY;\n      }\n    }\n    const el = (scrollRef == null ? void 0 : scrollRef.current) || elements.floating;\n    if (open && el) {\n      el.addEventListener('wheel', onWheel);\n\n      // Wait for the position to be ready.\n      requestAnimationFrame(() => {\n        prevScrollTopRef.current = el.scrollTop;\n        if (overflowRef.current != null) {\n          initialOverflowRef.current = {\n            ...overflowRef.current\n          };\n        }\n      });\n      return () => {\n        prevScrollTopRef.current = null;\n        initialOverflowRef.current = null;\n        el.removeEventListener('wheel', onWheel);\n      };\n    }\n  }, [enabled, open, elements.floating, overflowRef, scrollRef, onChange]);\n  const floating = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\n    onKeyDown() {\n      controlledScrollingRef.current = true;\n    },\n    onWheel() {\n      controlledScrollingRef.current = false;\n    },\n    onPointerMove() {\n      controlledScrollingRef.current = false;\n    },\n    onScroll() {\n      const el = (scrollRef == null ? void 0 : scrollRef.current) || elements.floating;\n      if (!overflowRef.current || !el || !controlledScrollingRef.current) {\n        return;\n      }\n      if (prevScrollTopRef.current !== null) {\n        const scrollDiff = el.scrollTop - prevScrollTopRef.current;\n        if (overflowRef.current.bottom < -0.5 && scrollDiff < -1 || overflowRef.current.top < -0.5 && scrollDiff > 1) {\n          react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync(() => onChange(d => d + scrollDiff));\n        }\n      }\n\n      // [Firefox] Wait for the height change to have been applied.\n      requestAnimationFrame(() => {\n        prevScrollTopRef.current = el.scrollTop;\n      });\n    }\n  }), [elements.floating, onChange, overflowRef, scrollRef]);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => enabled ? {\n    floating\n  } : {}, [enabled, floating]);\n}\n\nfunction isPointInPolygon(point, polygon) {\n  const [x, y] = point;\n  let isInside = false;\n  const length = polygon.length;\n  for (let i = 0, j = length - 1; i < length; j = i++) {\n    const [xi, yi] = polygon[i] || [0, 0];\n    const [xj, yj] = polygon[j] || [0, 0];\n    const intersect = yi >= y !== yj >= y && x <= (xj - xi) * (y - yi) / (yj - yi) + xi;\n    if (intersect) {\n      isInside = !isInside;\n    }\n  }\n  return isInside;\n}\nfunction isInside(point, rect) {\n  return point[0] >= rect.x && point[0] <= rect.x + rect.width && point[1] >= rect.y && point[1] <= rect.y + rect.height;\n}\n/**\n * Generates a safe polygon area that the user can traverse without closing the\n * floating element once leaving the reference element.\n * @see https://floating-ui.com/docs/useHover#safepolygon\n */\nfunction safePolygon(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    buffer = 0.5,\n    blockPointerEvents = false,\n    requireIntent = true\n  } = options;\n  let timeoutId;\n  let hasLanded = false;\n  let lastX = null;\n  let lastY = null;\n  let lastCursorTime = performance.now();\n  function getCursorSpeed(x, y) {\n    const currentTime = performance.now();\n    const elapsedTime = currentTime - lastCursorTime;\n    if (lastX === null || lastY === null || elapsedTime === 0) {\n      lastX = x;\n      lastY = y;\n      lastCursorTime = currentTime;\n      return null;\n    }\n    const deltaX = x - lastX;\n    const deltaY = y - lastY;\n    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n    const speed = distance / elapsedTime; // px / ms\n\n    lastX = x;\n    lastY = y;\n    lastCursorTime = currentTime;\n    return speed;\n  }\n  const fn = _ref => {\n    let {\n      x,\n      y,\n      placement,\n      elements,\n      onClose,\n      nodeId,\n      tree\n    } = _ref;\n    return function onMouseMove(event) {\n      function close() {\n        clearTimeout(timeoutId);\n        onClose();\n      }\n      clearTimeout(timeoutId);\n      if (!elements.domReference || !elements.floating || placement == null || x == null || y == null) {\n        return;\n      }\n      const {\n        clientX,\n        clientY\n      } = event;\n      const clientPoint = [clientX, clientY];\n      const target = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getTarget)(event);\n      const isLeave = event.type === 'mouseleave';\n      const isOverFloatingEl = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(elements.floating, target);\n      const isOverReferenceEl = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(elements.domReference, target);\n      const refRect = elements.domReference.getBoundingClientRect();\n      const rect = elements.floating.getBoundingClientRect();\n      const side = placement.split('-')[0];\n      const cursorLeaveFromRight = x > rect.right - rect.width / 2;\n      const cursorLeaveFromBottom = y > rect.bottom - rect.height / 2;\n      const isOverReferenceRect = isInside(clientPoint, refRect);\n      const isFloatingWider = rect.width > refRect.width;\n      const isFloatingTaller = rect.height > refRect.height;\n      const left = (isFloatingWider ? refRect : rect).left;\n      const right = (isFloatingWider ? refRect : rect).right;\n      const top = (isFloatingTaller ? refRect : rect).top;\n      const bottom = (isFloatingTaller ? refRect : rect).bottom;\n      if (isOverFloatingEl) {\n        hasLanded = true;\n        if (!isLeave) {\n          return;\n        }\n      }\n      if (isOverReferenceEl) {\n        hasLanded = false;\n      }\n      if (isOverReferenceEl && !isLeave) {\n        hasLanded = true;\n        return;\n      }\n\n      // Prevent overlapping floating element from being stuck in an open-close\n      // loop: https://github.com/floating-ui/floating-ui/issues/1910\n      if (isLeave && (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_4__.isElement)(event.relatedTarget) && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(elements.floating, event.relatedTarget)) {\n        return;\n      }\n\n      // If any nested child is open, abort.\n      if (tree && getChildren(tree.nodesRef.current, nodeId).some(_ref2 => {\n        let {\n          context\n        } = _ref2;\n        return context == null ? void 0 : context.open;\n      })) {\n        return;\n      }\n\n      // If the pointer is leaving from the opposite side, the \"buffer\" logic\n      // creates a point where the floating element remains open, but should be\n      // ignored.\n      // A constant of 1 handles floating point rounding errors.\n      if (side === 'top' && y >= refRect.bottom - 1 || side === 'bottom' && y <= refRect.top + 1 || side === 'left' && x >= refRect.right - 1 || side === 'right' && x <= refRect.left + 1) {\n        return close();\n      }\n\n      // Ignore when the cursor is within the rectangular trough between the\n      // two elements. Since the triangle is created from the cursor point,\n      // which can start beyond the ref element's edge, traversing back and\n      // forth from the ref to the floating element can cause it to close. This\n      // ensures it always remains open in that case.\n      let rectPoly = [];\n      switch (side) {\n        case 'top':\n          rectPoly = [[left, refRect.top + 1], [left, rect.bottom - 1], [right, rect.bottom - 1], [right, refRect.top + 1]];\n          break;\n        case 'bottom':\n          rectPoly = [[left, rect.top + 1], [left, refRect.bottom - 1], [right, refRect.bottom - 1], [right, rect.top + 1]];\n          break;\n        case 'left':\n          rectPoly = [[rect.right - 1, bottom], [rect.right - 1, top], [refRect.left + 1, top], [refRect.left + 1, bottom]];\n          break;\n        case 'right':\n          rectPoly = [[refRect.right - 1, bottom], [refRect.right - 1, top], [rect.left + 1, top], [rect.left + 1, bottom]];\n          break;\n      }\n      function getPolygon(_ref3) {\n        let [x, y] = _ref3;\n        switch (side) {\n          case 'top':\n            {\n              const cursorPointOne = [isFloatingWider ? x + buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y + buffer + 1];\n              const cursorPointTwo = [isFloatingWider ? x - buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y + buffer + 1];\n              const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.bottom - buffer : isFloatingWider ? rect.bottom - buffer : rect.top], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.bottom - buffer : rect.top : rect.bottom - buffer]];\n              return [cursorPointOne, cursorPointTwo, ...commonPoints];\n            }\n          case 'bottom':\n            {\n              const cursorPointOne = [isFloatingWider ? x + buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y - buffer];\n              const cursorPointTwo = [isFloatingWider ? x - buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y - buffer];\n              const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.top + buffer : isFloatingWider ? rect.top + buffer : rect.bottom], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.top + buffer : rect.bottom : rect.top + buffer]];\n              return [cursorPointOne, cursorPointTwo, ...commonPoints];\n            }\n          case 'left':\n            {\n              const cursorPointOne = [x + buffer + 1, isFloatingTaller ? y + buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\n              const cursorPointTwo = [x + buffer + 1, isFloatingTaller ? y - buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\n              const commonPoints = [[cursorLeaveFromBottom ? rect.right - buffer : isFloatingTaller ? rect.right - buffer : rect.left, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.right - buffer : rect.left : rect.right - buffer, rect.bottom]];\n              return [...commonPoints, cursorPointOne, cursorPointTwo];\n            }\n          case 'right':\n            {\n              const cursorPointOne = [x - buffer, isFloatingTaller ? y + buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\n              const cursorPointTwo = [x - buffer, isFloatingTaller ? y - buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\n              const commonPoints = [[cursorLeaveFromBottom ? rect.left + buffer : isFloatingTaller ? rect.left + buffer : rect.right, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.left + buffer : rect.right : rect.left + buffer, rect.bottom]];\n              return [cursorPointOne, cursorPointTwo, ...commonPoints];\n            }\n        }\n      }\n      if (isPointInPolygon([clientX, clientY], rectPoly)) {\n        return;\n      }\n      if (hasLanded && !isOverReferenceRect) {\n        return close();\n      }\n      if (!isLeave && requireIntent) {\n        const cursorSpeed = getCursorSpeed(event.clientX, event.clientY);\n        const cursorSpeedThreshold = 0.1;\n        if (cursorSpeed !== null && cursorSpeed < cursorSpeedThreshold) {\n          return close();\n        }\n      }\n      if (!isPointInPolygon([clientX, clientY], getPolygon([x, y]))) {\n        close();\n      } else if (!hasLanded && requireIntent) {\n        timeoutId = window.setTimeout(close, 40);\n      }\n    };\n  };\n  fn.__options = {\n    blockPointerEvents\n  };\n  return fn;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@floating-ui/react/dist/floating-ui.react.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tiptap/core/dist/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@tiptap/core/dist/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CommandManager: () => (/* binding */ CommandManager),\n/* harmony export */   Editor: () => (/* binding */ Editor),\n/* harmony export */   Extension: () => (/* binding */ Extension),\n/* harmony export */   InputRule: () => (/* binding */ InputRule),\n/* harmony export */   Mark: () => (/* binding */ Mark),\n/* harmony export */   Node: () => (/* binding */ Node),\n/* harmony export */   NodePos: () => (/* binding */ NodePos),\n/* harmony export */   NodeView: () => (/* binding */ NodeView),\n/* harmony export */   PasteRule: () => (/* binding */ PasteRule),\n/* harmony export */   Tracker: () => (/* binding */ Tracker),\n/* harmony export */   callOrReturn: () => (/* binding */ callOrReturn),\n/* harmony export */   combineTransactionSteps: () => (/* binding */ combineTransactionSteps),\n/* harmony export */   createChainableState: () => (/* binding */ createChainableState),\n/* harmony export */   createDocument: () => (/* binding */ createDocument),\n/* harmony export */   createNodeFromContent: () => (/* binding */ createNodeFromContent),\n/* harmony export */   createStyleTag: () => (/* binding */ createStyleTag),\n/* harmony export */   defaultBlockAt: () => (/* binding */ defaultBlockAt),\n/* harmony export */   deleteProps: () => (/* binding */ deleteProps),\n/* harmony export */   elementFromString: () => (/* binding */ elementFromString),\n/* harmony export */   escapeForRegEx: () => (/* binding */ escapeForRegEx),\n/* harmony export */   extensions: () => (/* binding */ index),\n/* harmony export */   findChildren: () => (/* binding */ findChildren),\n/* harmony export */   findChildrenInRange: () => (/* binding */ findChildrenInRange),\n/* harmony export */   findDuplicates: () => (/* binding */ findDuplicates),\n/* harmony export */   findParentNode: () => (/* binding */ findParentNode),\n/* harmony export */   findParentNodeClosestToPos: () => (/* binding */ findParentNodeClosestToPos),\n/* harmony export */   fromString: () => (/* binding */ fromString),\n/* harmony export */   generateHTML: () => (/* binding */ generateHTML),\n/* harmony export */   generateJSON: () => (/* binding */ generateJSON),\n/* harmony export */   generateText: () => (/* binding */ generateText),\n/* harmony export */   getAttributes: () => (/* binding */ getAttributes),\n/* harmony export */   getAttributesFromExtensions: () => (/* binding */ getAttributesFromExtensions),\n/* harmony export */   getChangedRanges: () => (/* binding */ getChangedRanges),\n/* harmony export */   getDebugJSON: () => (/* binding */ getDebugJSON),\n/* harmony export */   getExtensionField: () => (/* binding */ getExtensionField),\n/* harmony export */   getHTMLFromFragment: () => (/* binding */ getHTMLFromFragment),\n/* harmony export */   getMarkAttributes: () => (/* binding */ getMarkAttributes),\n/* harmony export */   getMarkRange: () => (/* binding */ getMarkRange),\n/* harmony export */   getMarkType: () => (/* binding */ getMarkType),\n/* harmony export */   getMarksBetween: () => (/* binding */ getMarksBetween),\n/* harmony export */   getNodeAtPosition: () => (/* binding */ getNodeAtPosition),\n/* harmony export */   getNodeAttributes: () => (/* binding */ getNodeAttributes),\n/* harmony export */   getNodeType: () => (/* binding */ getNodeType),\n/* harmony export */   getRenderedAttributes: () => (/* binding */ getRenderedAttributes),\n/* harmony export */   getSchema: () => (/* binding */ getSchema),\n/* harmony export */   getSchemaByResolvedExtensions: () => (/* binding */ getSchemaByResolvedExtensions),\n/* harmony export */   getSchemaTypeByName: () => (/* binding */ getSchemaTypeByName),\n/* harmony export */   getSchemaTypeNameByName: () => (/* binding */ getSchemaTypeNameByName),\n/* harmony export */   getSplittedAttributes: () => (/* binding */ getSplittedAttributes),\n/* harmony export */   getText: () => (/* binding */ getText),\n/* harmony export */   getTextBetween: () => (/* binding */ getTextBetween),\n/* harmony export */   getTextContentFromNodes: () => (/* binding */ getTextContentFromNodes),\n/* harmony export */   getTextSerializersFromSchema: () => (/* binding */ getTextSerializersFromSchema),\n/* harmony export */   injectExtensionAttributesToParseRule: () => (/* binding */ injectExtensionAttributesToParseRule),\n/* harmony export */   inputRulesPlugin: () => (/* binding */ inputRulesPlugin),\n/* harmony export */   isActive: () => (/* binding */ isActive),\n/* harmony export */   isAtEndOfNode: () => (/* binding */ isAtEndOfNode),\n/* harmony export */   isAtStartOfNode: () => (/* binding */ isAtStartOfNode),\n/* harmony export */   isEmptyObject: () => (/* binding */ isEmptyObject),\n/* harmony export */   isExtensionRulesEnabled: () => (/* binding */ isExtensionRulesEnabled),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isList: () => (/* binding */ isList),\n/* harmony export */   isMacOS: () => (/* binding */ isMacOS),\n/* harmony export */   isMarkActive: () => (/* binding */ isMarkActive),\n/* harmony export */   isNodeActive: () => (/* binding */ isNodeActive),\n/* harmony export */   isNodeEmpty: () => (/* binding */ isNodeEmpty),\n/* harmony export */   isNodeSelection: () => (/* binding */ isNodeSelection),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   isRegExp: () => (/* binding */ isRegExp),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isTextSelection: () => (/* binding */ isTextSelection),\n/* harmony export */   isiOS: () => (/* binding */ isiOS),\n/* harmony export */   markInputRule: () => (/* binding */ markInputRule),\n/* harmony export */   markPasteRule: () => (/* binding */ markPasteRule),\n/* harmony export */   mergeAttributes: () => (/* binding */ mergeAttributes),\n/* harmony export */   mergeDeep: () => (/* binding */ mergeDeep),\n/* harmony export */   minMax: () => (/* binding */ minMax),\n/* harmony export */   nodeInputRule: () => (/* binding */ nodeInputRule),\n/* harmony export */   nodePasteRule: () => (/* binding */ nodePasteRule),\n/* harmony export */   objectIncludes: () => (/* binding */ objectIncludes),\n/* harmony export */   pasteRulesPlugin: () => (/* binding */ pasteRulesPlugin),\n/* harmony export */   posToDOMRect: () => (/* binding */ posToDOMRect),\n/* harmony export */   removeDuplicates: () => (/* binding */ removeDuplicates),\n/* harmony export */   resolveFocusPosition: () => (/* binding */ resolveFocusPosition),\n/* harmony export */   rewriteUnknownContent: () => (/* binding */ rewriteUnknownContent),\n/* harmony export */   selectionToInsertionEnd: () => (/* binding */ selectionToInsertionEnd),\n/* harmony export */   splitExtensions: () => (/* binding */ splitExtensions),\n/* harmony export */   textInputRule: () => (/* binding */ textInputRule),\n/* harmony export */   textPasteRule: () => (/* binding */ textPasteRule),\n/* harmony export */   textblockTypeInputRule: () => (/* binding */ textblockTypeInputRule),\n/* harmony export */   wrappingInputRule: () => (/* binding */ wrappingInputRule)\n/* harmony export */ });\n/* harmony import */ var _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/state */ \"(app-pages-browser)/./node_modules/@tiptap/pm/state/dist/index.js\");\n/* harmony import */ var _tiptap_pm_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/pm/view */ \"(app-pages-browser)/./node_modules/@tiptap/pm/view/dist/index.js\");\n/* harmony import */ var _tiptap_pm_keymap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tiptap/pm/keymap */ \"(app-pages-browser)/./node_modules/@tiptap/pm/keymap/dist/index.js\");\n/* harmony import */ var _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tiptap/pm/model */ \"(app-pages-browser)/./node_modules/@tiptap/pm/model/dist/index.js\");\n/* harmony import */ var _tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tiptap/pm/transform */ \"(app-pages-browser)/./node_modules/@tiptap/pm/transform/dist/index.js\");\n/* harmony import */ var _tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tiptap/pm/commands */ \"(app-pages-browser)/./node_modules/@tiptap/pm/commands/dist/index.js\");\n/* harmony import */ var _tiptap_pm_schema_list__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tiptap/pm/schema-list */ \"(app-pages-browser)/./node_modules/@tiptap/pm/schema-list/dist/index.js\");\n\n\n\n\n\n\n\n\n/**\n * Takes a Transaction & Editor State and turns it into a chainable state object\n * @param config The transaction and state to create the chainable state from\n * @returns A chainable Editor state object\n */\nfunction createChainableState(config) {\n    const { state, transaction } = config;\n    let { selection } = transaction;\n    let { doc } = transaction;\n    let { storedMarks } = transaction;\n    return {\n        ...state,\n        apply: state.apply.bind(state),\n        applyTransaction: state.applyTransaction.bind(state),\n        plugins: state.plugins,\n        schema: state.schema,\n        reconfigure: state.reconfigure.bind(state),\n        toJSON: state.toJSON.bind(state),\n        get storedMarks() {\n            return storedMarks;\n        },\n        get selection() {\n            return selection;\n        },\n        get doc() {\n            return doc;\n        },\n        get tr() {\n            selection = transaction.selection;\n            doc = transaction.doc;\n            storedMarks = transaction.storedMarks;\n            return transaction;\n        },\n    };\n}\n\nclass CommandManager {\n    constructor(props) {\n        this.editor = props.editor;\n        this.rawCommands = this.editor.extensionManager.commands;\n        this.customState = props.state;\n    }\n    get hasCustomState() {\n        return !!this.customState;\n    }\n    get state() {\n        return this.customState || this.editor.state;\n    }\n    get commands() {\n        const { rawCommands, editor, state } = this;\n        const { view } = editor;\n        const { tr } = state;\n        const props = this.buildProps(tr);\n        return Object.fromEntries(Object.entries(rawCommands).map(([name, command]) => {\n            const method = (...args) => {\n                const callback = command(...args)(props);\n                if (!tr.getMeta('preventDispatch') && !this.hasCustomState) {\n                    view.dispatch(tr);\n                }\n                return callback;\n            };\n            return [name, method];\n        }));\n    }\n    get chain() {\n        return () => this.createChain();\n    }\n    get can() {\n        return () => this.createCan();\n    }\n    createChain(startTr, shouldDispatch = true) {\n        const { rawCommands, editor, state } = this;\n        const { view } = editor;\n        const callbacks = [];\n        const hasStartTransaction = !!startTr;\n        const tr = startTr || state.tr;\n        const run = () => {\n            if (!hasStartTransaction\n                && shouldDispatch\n                && !tr.getMeta('preventDispatch')\n                && !this.hasCustomState) {\n                view.dispatch(tr);\n            }\n            return callbacks.every(callback => callback === true);\n        };\n        const chain = {\n            ...Object.fromEntries(Object.entries(rawCommands).map(([name, command]) => {\n                const chainedCommand = (...args) => {\n                    const props = this.buildProps(tr, shouldDispatch);\n                    const callback = command(...args)(props);\n                    callbacks.push(callback);\n                    return chain;\n                };\n                return [name, chainedCommand];\n            })),\n            run,\n        };\n        return chain;\n    }\n    createCan(startTr) {\n        const { rawCommands, state } = this;\n        const dispatch = false;\n        const tr = startTr || state.tr;\n        const props = this.buildProps(tr, dispatch);\n        const formattedCommands = Object.fromEntries(Object.entries(rawCommands).map(([name, command]) => {\n            return [name, (...args) => command(...args)({ ...props, dispatch: undefined })];\n        }));\n        return {\n            ...formattedCommands,\n            chain: () => this.createChain(tr, dispatch),\n        };\n    }\n    buildProps(tr, shouldDispatch = true) {\n        const { rawCommands, editor, state } = this;\n        const { view } = editor;\n        const props = {\n            tr,\n            editor,\n            view,\n            state: createChainableState({\n                state,\n                transaction: tr,\n            }),\n            dispatch: shouldDispatch ? () => undefined : undefined,\n            chain: () => this.createChain(tr, shouldDispatch),\n            can: () => this.createCan(tr),\n            get commands() {\n                return Object.fromEntries(Object.entries(rawCommands).map(([name, command]) => {\n                    return [name, (...args) => command(...args)(props)];\n                }));\n            },\n        };\n        return props;\n    }\n}\n\nclass EventEmitter {\n    constructor() {\n        this.callbacks = {};\n    }\n    on(event, fn) {\n        if (!this.callbacks[event]) {\n            this.callbacks[event] = [];\n        }\n        this.callbacks[event].push(fn);\n        return this;\n    }\n    emit(event, ...args) {\n        const callbacks = this.callbacks[event];\n        if (callbacks) {\n            callbacks.forEach(callback => callback.apply(this, args));\n        }\n        return this;\n    }\n    off(event, fn) {\n        const callbacks = this.callbacks[event];\n        if (callbacks) {\n            if (fn) {\n                this.callbacks[event] = callbacks.filter(callback => callback !== fn);\n            }\n            else {\n                delete this.callbacks[event];\n            }\n        }\n        return this;\n    }\n    once(event, fn) {\n        const onceFn = (...args) => {\n            this.off(event, onceFn);\n            fn.apply(this, args);\n        };\n        return this.on(event, onceFn);\n    }\n    removeAllListeners() {\n        this.callbacks = {};\n    }\n}\n\n/**\n * Returns a field from an extension\n * @param extension The Tiptap extension\n * @param field The field, for example `renderHTML` or `priority`\n * @param context The context object that should be passed as `this` into the function\n * @returns The field value\n */\nfunction getExtensionField(extension, field, context) {\n    if (extension.config[field] === undefined && extension.parent) {\n        return getExtensionField(extension.parent, field, context);\n    }\n    if (typeof extension.config[field] === 'function') {\n        const value = extension.config[field].bind({\n            ...context,\n            parent: extension.parent\n                ? getExtensionField(extension.parent, field, context)\n                : null,\n        });\n        return value;\n    }\n    return extension.config[field];\n}\n\nfunction splitExtensions(extensions) {\n    const baseExtensions = extensions.filter(extension => extension.type === 'extension');\n    const nodeExtensions = extensions.filter(extension => extension.type === 'node');\n    const markExtensions = extensions.filter(extension => extension.type === 'mark');\n    return {\n        baseExtensions,\n        nodeExtensions,\n        markExtensions,\n    };\n}\n\n/**\n * Get a list of all extension attributes defined in `addAttribute` and `addGlobalAttribute`.\n * @param extensions List of extensions\n */\nfunction getAttributesFromExtensions(extensions) {\n    const extensionAttributes = [];\n    const { nodeExtensions, markExtensions } = splitExtensions(extensions);\n    const nodeAndMarkExtensions = [...nodeExtensions, ...markExtensions];\n    const defaultAttribute = {\n        default: null,\n        rendered: true,\n        renderHTML: null,\n        parseHTML: null,\n        keepOnSplit: true,\n        isRequired: false,\n    };\n    extensions.forEach(extension => {\n        const context = {\n            name: extension.name,\n            options: extension.options,\n            storage: extension.storage,\n            extensions: nodeAndMarkExtensions,\n        };\n        const addGlobalAttributes = getExtensionField(extension, 'addGlobalAttributes', context);\n        if (!addGlobalAttributes) {\n            return;\n        }\n        const globalAttributes = addGlobalAttributes();\n        globalAttributes.forEach(globalAttribute => {\n            globalAttribute.types.forEach(type => {\n                Object\n                    .entries(globalAttribute.attributes)\n                    .forEach(([name, attribute]) => {\n                    extensionAttributes.push({\n                        type,\n                        name,\n                        attribute: {\n                            ...defaultAttribute,\n                            ...attribute,\n                        },\n                    });\n                });\n            });\n        });\n    });\n    nodeAndMarkExtensions.forEach(extension => {\n        const context = {\n            name: extension.name,\n            options: extension.options,\n            storage: extension.storage,\n        };\n        const addAttributes = getExtensionField(extension, 'addAttributes', context);\n        if (!addAttributes) {\n            return;\n        }\n        // TODO: remove `as Attributes`\n        const attributes = addAttributes();\n        Object\n            .entries(attributes)\n            .forEach(([name, attribute]) => {\n            const mergedAttr = {\n                ...defaultAttribute,\n                ...attribute,\n            };\n            if (typeof (mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr.default) === 'function') {\n                mergedAttr.default = mergedAttr.default();\n            }\n            if ((mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr.isRequired) && (mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr.default) === undefined) {\n                delete mergedAttr.default;\n            }\n            extensionAttributes.push({\n                type: extension.name,\n                name,\n                attribute: mergedAttr,\n            });\n        });\n    });\n    return extensionAttributes;\n}\n\nfunction getNodeType(nameOrType, schema) {\n    if (typeof nameOrType === 'string') {\n        if (!schema.nodes[nameOrType]) {\n            throw Error(`There is no node type named '${nameOrType}'. Maybe you forgot to add the extension?`);\n        }\n        return schema.nodes[nameOrType];\n    }\n    return nameOrType;\n}\n\nfunction mergeAttributes(...objects) {\n    return objects\n        .filter(item => !!item)\n        .reduce((items, item) => {\n        const mergedAttributes = { ...items };\n        Object.entries(item).forEach(([key, value]) => {\n            const exists = mergedAttributes[key];\n            if (!exists) {\n                mergedAttributes[key] = value;\n                return;\n            }\n            if (key === 'class') {\n                const valueClasses = value ? String(value).split(' ') : [];\n                const existingClasses = mergedAttributes[key] ? mergedAttributes[key].split(' ') : [];\n                const insertClasses = valueClasses.filter(valueClass => !existingClasses.includes(valueClass));\n                mergedAttributes[key] = [...existingClasses, ...insertClasses].join(' ');\n            }\n            else if (key === 'style') {\n                const newStyles = value ? value.split(';').map((style) => style.trim()).filter(Boolean) : [];\n                const existingStyles = mergedAttributes[key] ? mergedAttributes[key].split(';').map((style) => style.trim()).filter(Boolean) : [];\n                const styleMap = new Map();\n                existingStyles.forEach(style => {\n                    const [property, val] = style.split(':').map(part => part.trim());\n                    styleMap.set(property, val);\n                });\n                newStyles.forEach(style => {\n                    const [property, val] = style.split(':').map(part => part.trim());\n                    styleMap.set(property, val);\n                });\n                mergedAttributes[key] = Array.from(styleMap.entries()).map(([property, val]) => `${property}: ${val}`).join('; ');\n            }\n            else {\n                mergedAttributes[key] = value;\n            }\n        });\n        return mergedAttributes;\n    }, {});\n}\n\nfunction getRenderedAttributes(nodeOrMark, extensionAttributes) {\n    return extensionAttributes\n        .filter(attribute => attribute.type === nodeOrMark.type.name)\n        .filter(item => item.attribute.rendered)\n        .map(item => {\n        if (!item.attribute.renderHTML) {\n            return {\n                [item.name]: nodeOrMark.attrs[item.name],\n            };\n        }\n        return item.attribute.renderHTML(nodeOrMark.attrs) || {};\n    })\n        .reduce((attributes, attribute) => mergeAttributes(attributes, attribute), {});\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\n\n/**\n * Optionally calls `value` as a function.\n * Otherwise it is returned directly.\n * @param value Function or any value.\n * @param context Optional context to bind to function.\n * @param props Optional props to pass to function.\n */\nfunction callOrReturn(value, context = undefined, ...props) {\n    if (isFunction(value)) {\n        if (context) {\n            return value.bind(context)(...props);\n        }\n        return value(...props);\n    }\n    return value;\n}\n\nfunction isEmptyObject(value = {}) {\n    return Object.keys(value).length === 0 && value.constructor === Object;\n}\n\nfunction fromString(value) {\n    if (typeof value !== 'string') {\n        return value;\n    }\n    if (value.match(/^[+-]?(?:\\d*\\.)?\\d+$/)) {\n        return Number(value);\n    }\n    if (value === 'true') {\n        return true;\n    }\n    if (value === 'false') {\n        return false;\n    }\n    return value;\n}\n\n/**\n * This function merges extension attributes into parserule attributes (`attrs` or `getAttrs`).\n * Cancels when `getAttrs` returned `false`.\n * @param parseRule ProseMirror ParseRule\n * @param extensionAttributes List of attributes to inject\n */\nfunction injectExtensionAttributesToParseRule(parseRule, extensionAttributes) {\n    if ('style' in parseRule) {\n        return parseRule;\n    }\n    return {\n        ...parseRule,\n        getAttrs: (node) => {\n            const oldAttributes = parseRule.getAttrs ? parseRule.getAttrs(node) : parseRule.attrs;\n            if (oldAttributes === false) {\n                return false;\n            }\n            const newAttributes = extensionAttributes.reduce((items, item) => {\n                const value = item.attribute.parseHTML\n                    ? item.attribute.parseHTML(node)\n                    : fromString((node).getAttribute(item.name));\n                if (value === null || value === undefined) {\n                    return items;\n                }\n                return {\n                    ...items,\n                    [item.name]: value,\n                };\n            }, {});\n            return { ...oldAttributes, ...newAttributes };\n        },\n    };\n}\n\nfunction cleanUpSchemaItem(data) {\n    return Object.fromEntries(\n    // @ts-ignore\n    Object.entries(data).filter(([key, value]) => {\n        if (key === 'attrs' && isEmptyObject(value)) {\n            return false;\n        }\n        return value !== null && value !== undefined;\n    }));\n}\n/**\n * Creates a new Prosemirror schema based on the given extensions.\n * @param extensions An array of Tiptap extensions\n * @param editor The editor instance\n * @returns A Prosemirror schema\n */\nfunction getSchemaByResolvedExtensions(extensions, editor) {\n    var _a;\n    const allAttributes = getAttributesFromExtensions(extensions);\n    const { nodeExtensions, markExtensions } = splitExtensions(extensions);\n    const topNode = (_a = nodeExtensions.find(extension => getExtensionField(extension, 'topNode'))) === null || _a === void 0 ? void 0 : _a.name;\n    const nodes = Object.fromEntries(nodeExtensions.map(extension => {\n        const extensionAttributes = allAttributes.filter(attribute => attribute.type === extension.name);\n        const context = {\n            name: extension.name,\n            options: extension.options,\n            storage: extension.storage,\n            editor,\n        };\n        const extraNodeFields = extensions.reduce((fields, e) => {\n            const extendNodeSchema = getExtensionField(e, 'extendNodeSchema', context);\n            return {\n                ...fields,\n                ...(extendNodeSchema ? extendNodeSchema(extension) : {}),\n            };\n        }, {});\n        const schema = cleanUpSchemaItem({\n            ...extraNodeFields,\n            content: callOrReturn(getExtensionField(extension, 'content', context)),\n            marks: callOrReturn(getExtensionField(extension, 'marks', context)),\n            group: callOrReturn(getExtensionField(extension, 'group', context)),\n            inline: callOrReturn(getExtensionField(extension, 'inline', context)),\n            atom: callOrReturn(getExtensionField(extension, 'atom', context)),\n            selectable: callOrReturn(getExtensionField(extension, 'selectable', context)),\n            draggable: callOrReturn(getExtensionField(extension, 'draggable', context)),\n            code: callOrReturn(getExtensionField(extension, 'code', context)),\n            whitespace: callOrReturn(getExtensionField(extension, 'whitespace', context)),\n            linebreakReplacement: callOrReturn(getExtensionField(extension, 'linebreakReplacement', context)),\n            defining: callOrReturn(getExtensionField(extension, 'defining', context)),\n            isolating: callOrReturn(getExtensionField(extension, 'isolating', context)),\n            attrs: Object.fromEntries(extensionAttributes.map(extensionAttribute => {\n                var _a;\n                return [extensionAttribute.name, { default: (_a = extensionAttribute === null || extensionAttribute === void 0 ? void 0 : extensionAttribute.attribute) === null || _a === void 0 ? void 0 : _a.default }];\n            })),\n        });\n        const parseHTML = callOrReturn(getExtensionField(extension, 'parseHTML', context));\n        if (parseHTML) {\n            schema.parseDOM = parseHTML.map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes));\n        }\n        const renderHTML = getExtensionField(extension, 'renderHTML', context);\n        if (renderHTML) {\n            schema.toDOM = node => renderHTML({\n                node,\n                HTMLAttributes: getRenderedAttributes(node, extensionAttributes),\n            });\n        }\n        const renderText = getExtensionField(extension, 'renderText', context);\n        if (renderText) {\n            schema.toText = renderText;\n        }\n        return [extension.name, schema];\n    }));\n    const marks = Object.fromEntries(markExtensions.map(extension => {\n        const extensionAttributes = allAttributes.filter(attribute => attribute.type === extension.name);\n        const context = {\n            name: extension.name,\n            options: extension.options,\n            storage: extension.storage,\n            editor,\n        };\n        const extraMarkFields = extensions.reduce((fields, e) => {\n            const extendMarkSchema = getExtensionField(e, 'extendMarkSchema', context);\n            return {\n                ...fields,\n                ...(extendMarkSchema ? extendMarkSchema(extension) : {}),\n            };\n        }, {});\n        const schema = cleanUpSchemaItem({\n            ...extraMarkFields,\n            inclusive: callOrReturn(getExtensionField(extension, 'inclusive', context)),\n            excludes: callOrReturn(getExtensionField(extension, 'excludes', context)),\n            group: callOrReturn(getExtensionField(extension, 'group', context)),\n            spanning: callOrReturn(getExtensionField(extension, 'spanning', context)),\n            code: callOrReturn(getExtensionField(extension, 'code', context)),\n            attrs: Object.fromEntries(extensionAttributes.map(extensionAttribute => {\n                var _a;\n                return [extensionAttribute.name, { default: (_a = extensionAttribute === null || extensionAttribute === void 0 ? void 0 : extensionAttribute.attribute) === null || _a === void 0 ? void 0 : _a.default }];\n            })),\n        });\n        const parseHTML = callOrReturn(getExtensionField(extension, 'parseHTML', context));\n        if (parseHTML) {\n            schema.parseDOM = parseHTML.map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes));\n        }\n        const renderHTML = getExtensionField(extension, 'renderHTML', context);\n        if (renderHTML) {\n            schema.toDOM = mark => renderHTML({\n                mark,\n                HTMLAttributes: getRenderedAttributes(mark, extensionAttributes),\n            });\n        }\n        return [extension.name, schema];\n    }));\n    return new _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Schema({\n        topNode,\n        nodes,\n        marks,\n    });\n}\n\n/**\n * Tries to get a node or mark type by its name.\n * @param name The name of the node or mark type\n * @param schema The Prosemiror schema to search in\n * @returns The node or mark type, or null if it doesn't exist\n */\nfunction getSchemaTypeByName(name, schema) {\n    return schema.nodes[name] || schema.marks[name] || null;\n}\n\nfunction isExtensionRulesEnabled(extension, enabled) {\n    if (Array.isArray(enabled)) {\n        return enabled.some(enabledExtension => {\n            const name = typeof enabledExtension === 'string'\n                ? enabledExtension\n                : enabledExtension.name;\n            return name === extension.name;\n        });\n    }\n    return enabled;\n}\n\nfunction getHTMLFromFragment(fragment, schema) {\n    const documentFragment = _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.DOMSerializer.fromSchema(schema).serializeFragment(fragment);\n    const temporaryDocument = document.implementation.createHTMLDocument();\n    const container = temporaryDocument.createElement('div');\n    container.appendChild(documentFragment);\n    return container.innerHTML;\n}\n\n/**\n * Returns the text content of a resolved prosemirror position\n * @param $from The resolved position to get the text content from\n * @param maxMatch The maximum number of characters to match\n * @returns The text content\n */\nconst getTextContentFromNodes = ($from, maxMatch = 500) => {\n    let textBefore = '';\n    const sliceEndPos = $from.parentOffset;\n    $from.parent.nodesBetween(Math.max(0, sliceEndPos - maxMatch), sliceEndPos, (node, pos, parent, index) => {\n        var _a, _b;\n        const chunk = ((_b = (_a = node.type.spec).toText) === null || _b === void 0 ? void 0 : _b.call(_a, {\n            node,\n            pos,\n            parent,\n            index,\n        }))\n            || node.textContent\n            || '%leaf%';\n        textBefore += node.isAtom && !node.isText ? chunk : chunk.slice(0, Math.max(0, sliceEndPos - pos));\n    });\n    return textBefore;\n};\n\nfunction isRegExp(value) {\n    return Object.prototype.toString.call(value) === '[object RegExp]';\n}\n\nclass InputRule {\n    constructor(config) {\n        this.find = config.find;\n        this.handler = config.handler;\n    }\n}\nconst inputRuleMatcherHandler = (text, find) => {\n    if (isRegExp(find)) {\n        return find.exec(text);\n    }\n    const inputRuleMatch = find(text);\n    if (!inputRuleMatch) {\n        return null;\n    }\n    const result = [inputRuleMatch.text];\n    result.index = inputRuleMatch.index;\n    result.input = text;\n    result.data = inputRuleMatch.data;\n    if (inputRuleMatch.replaceWith) {\n        if (!inputRuleMatch.text.includes(inputRuleMatch.replaceWith)) {\n            console.warn('[tiptap warn]: \"inputRuleMatch.replaceWith\" must be part of \"inputRuleMatch.text\".');\n        }\n        result.push(inputRuleMatch.replaceWith);\n    }\n    return result;\n};\nfunction run$1(config) {\n    var _a;\n    const { editor, from, to, text, rules, plugin, } = config;\n    const { view } = editor;\n    if (view.composing) {\n        return false;\n    }\n    const $from = view.state.doc.resolve(from);\n    if (\n    // check for code node\n    $from.parent.type.spec.code\n        // check for code mark\n        || !!((_a = ($from.nodeBefore || $from.nodeAfter)) === null || _a === void 0 ? void 0 : _a.marks.find(mark => mark.type.spec.code))) {\n        return false;\n    }\n    let matched = false;\n    const textBefore = getTextContentFromNodes($from) + text;\n    rules.forEach(rule => {\n        if (matched) {\n            return;\n        }\n        const match = inputRuleMatcherHandler(textBefore, rule.find);\n        if (!match) {\n            return;\n        }\n        const tr = view.state.tr;\n        const state = createChainableState({\n            state: view.state,\n            transaction: tr,\n        });\n        const range = {\n            from: from - (match[0].length - text.length),\n            to,\n        };\n        const { commands, chain, can } = new CommandManager({\n            editor,\n            state,\n        });\n        const handler = rule.handler({\n            state,\n            range,\n            match,\n            commands,\n            chain,\n            can,\n        });\n        // stop if there are no changes\n        if (handler === null || !tr.steps.length) {\n            return;\n        }\n        // store transform as meta data\n        // so we can undo input rules within the `undoInputRules` command\n        tr.setMeta(plugin, {\n            transform: tr,\n            from,\n            to,\n            text,\n        });\n        view.dispatch(tr);\n        matched = true;\n    });\n    return matched;\n}\n/**\n * Create an input rules plugin. When enabled, it will cause text\n * input that matches any of the given rules to trigger the rule’s\n * action.\n */\nfunction inputRulesPlugin(props) {\n    const { editor, rules } = props;\n    const plugin = new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n        state: {\n            init() {\n                return null;\n            },\n            apply(tr, prev, state) {\n                const stored = tr.getMeta(plugin);\n                if (stored) {\n                    return stored;\n                }\n                // if InputRule is triggered by insertContent()\n                const simulatedInputMeta = tr.getMeta('applyInputRules');\n                const isSimulatedInput = !!simulatedInputMeta;\n                if (isSimulatedInput) {\n                    setTimeout(() => {\n                        let { text } = simulatedInputMeta;\n                        if (typeof text === 'string') {\n                            text = text;\n                        }\n                        else {\n                            text = getHTMLFromFragment(_tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Fragment.from(text), state.schema);\n                        }\n                        const { from } = simulatedInputMeta;\n                        const to = from + text.length;\n                        run$1({\n                            editor,\n                            from,\n                            to,\n                            text,\n                            rules,\n                            plugin,\n                        });\n                    });\n                }\n                return tr.selectionSet || tr.docChanged ? null : prev;\n            },\n        },\n        props: {\n            handleTextInput(view, from, to, text) {\n                return run$1({\n                    editor,\n                    from,\n                    to,\n                    text,\n                    rules,\n                    plugin,\n                });\n            },\n            handleDOMEvents: {\n                compositionend: view => {\n                    setTimeout(() => {\n                        const { $cursor } = view.state.selection;\n                        if ($cursor) {\n                            run$1({\n                                editor,\n                                from: $cursor.pos,\n                                to: $cursor.pos,\n                                text: '',\n                                rules,\n                                plugin,\n                            });\n                        }\n                    });\n                    return false;\n                },\n            },\n            // add support for input rules to trigger on enter\n            // this is useful for example for code blocks\n            handleKeyDown(view, event) {\n                if (event.key !== 'Enter') {\n                    return false;\n                }\n                const { $cursor } = view.state.selection;\n                if ($cursor) {\n                    return run$1({\n                        editor,\n                        from: $cursor.pos,\n                        to: $cursor.pos,\n                        text: '\\n',\n                        rules,\n                        plugin,\n                    });\n                }\n                return false;\n            },\n        },\n        // @ts-ignore\n        isInputRules: true,\n    });\n    return plugin;\n}\n\n// see: https://github.com/mesqueeb/is-what/blob/88d6e4ca92fb2baab6003c54e02eedf4e729e5ab/src/index.ts\nfunction getType(value) {\n    return Object.prototype.toString.call(value).slice(8, -1);\n}\nfunction isPlainObject(value) {\n    if (getType(value) !== 'Object') {\n        return false;\n    }\n    return value.constructor === Object && Object.getPrototypeOf(value) === Object.prototype;\n}\n\nfunction mergeDeep(target, source) {\n    const output = { ...target };\n    if (isPlainObject(target) && isPlainObject(source)) {\n        Object.keys(source).forEach(key => {\n            if (isPlainObject(source[key]) && isPlainObject(target[key])) {\n                output[key] = mergeDeep(target[key], source[key]);\n            }\n            else {\n                output[key] = source[key];\n            }\n        });\n    }\n    return output;\n}\n\n/**\n * The Mark class is used to create custom mark extensions.\n * @see https://tiptap.dev/api/extensions#create-a-new-extension\n */\nclass Mark {\n    constructor(config = {}) {\n        this.type = 'mark';\n        this.name = 'mark';\n        this.parent = null;\n        this.child = null;\n        this.config = {\n            name: this.name,\n            defaultOptions: {},\n        };\n        this.config = {\n            ...this.config,\n            ...config,\n        };\n        this.name = this.config.name;\n        if (config.defaultOptions && Object.keys(config.defaultOptions).length > 0) {\n            console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`);\n        }\n        // TODO: remove `addOptions` fallback\n        this.options = this.config.defaultOptions;\n        if (this.config.addOptions) {\n            this.options = callOrReturn(getExtensionField(this, 'addOptions', {\n                name: this.name,\n            }));\n        }\n        this.storage = callOrReturn(getExtensionField(this, 'addStorage', {\n            name: this.name,\n            options: this.options,\n        })) || {};\n    }\n    static create(config = {}) {\n        return new Mark(config);\n    }\n    configure(options = {}) {\n        // return a new instance so we can use the same extension\n        // with different calls of `configure`\n        const extension = this.extend({\n            ...this.config,\n            addOptions: () => {\n                return mergeDeep(this.options, options);\n            },\n        });\n        // Always preserve the current name\n        extension.name = this.name;\n        // Set the parent to be our parent\n        extension.parent = this.parent;\n        return extension;\n    }\n    extend(extendedConfig = {}) {\n        const extension = new Mark(extendedConfig);\n        extension.parent = this;\n        this.child = extension;\n        extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;\n        if (extendedConfig.defaultOptions && Object.keys(extendedConfig.defaultOptions).length > 0) {\n            console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`);\n        }\n        extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {\n            name: extension.name,\n        }));\n        extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\n            name: extension.name,\n            options: extension.options,\n        }));\n        return extension;\n    }\n    static handleExit({ editor, mark }) {\n        const { tr } = editor.state;\n        const currentPos = editor.state.selection.$from;\n        const isAtEnd = currentPos.pos === currentPos.end();\n        if (isAtEnd) {\n            const currentMarks = currentPos.marks();\n            const isInMark = !!currentMarks.find(m => (m === null || m === void 0 ? void 0 : m.type.name) === mark.name);\n            if (!isInMark) {\n                return false;\n            }\n            const removeMark = currentMarks.find(m => (m === null || m === void 0 ? void 0 : m.type.name) === mark.name);\n            if (removeMark) {\n                tr.removeStoredMark(removeMark);\n            }\n            tr.insertText(' ', currentPos.pos);\n            editor.view.dispatch(tr);\n            return true;\n        }\n        return false;\n    }\n}\n\nfunction isNumber(value) {\n    return typeof value === 'number';\n}\n\n/**\n * Paste rules are used to react to pasted content.\n * @see https://tiptap.dev/docs/editor/extensions/custom-extensions/extend-existing#paste-rules\n */\nclass PasteRule {\n    constructor(config) {\n        this.find = config.find;\n        this.handler = config.handler;\n    }\n}\nconst pasteRuleMatcherHandler = (text, find, event) => {\n    if (isRegExp(find)) {\n        return [...text.matchAll(find)];\n    }\n    const matches = find(text, event);\n    if (!matches) {\n        return [];\n    }\n    return matches.map(pasteRuleMatch => {\n        const result = [pasteRuleMatch.text];\n        result.index = pasteRuleMatch.index;\n        result.input = text;\n        result.data = pasteRuleMatch.data;\n        if (pasteRuleMatch.replaceWith) {\n            if (!pasteRuleMatch.text.includes(pasteRuleMatch.replaceWith)) {\n                console.warn('[tiptap warn]: \"pasteRuleMatch.replaceWith\" must be part of \"pasteRuleMatch.text\".');\n            }\n            result.push(pasteRuleMatch.replaceWith);\n        }\n        return result;\n    });\n};\nfunction run(config) {\n    const { editor, state, from, to, rule, pasteEvent, dropEvent, } = config;\n    const { commands, chain, can } = new CommandManager({\n        editor,\n        state,\n    });\n    const handlers = [];\n    state.doc.nodesBetween(from, to, (node, pos) => {\n        if (!node.isTextblock || node.type.spec.code) {\n            return;\n        }\n        const resolvedFrom = Math.max(from, pos);\n        const resolvedTo = Math.min(to, pos + node.content.size);\n        const textToMatch = node.textBetween(resolvedFrom - pos, resolvedTo - pos, undefined, '\\ufffc');\n        const matches = pasteRuleMatcherHandler(textToMatch, rule.find, pasteEvent);\n        matches.forEach(match => {\n            if (match.index === undefined) {\n                return;\n            }\n            const start = resolvedFrom + match.index + 1;\n            const end = start + match[0].length;\n            const range = {\n                from: state.tr.mapping.map(start),\n                to: state.tr.mapping.map(end),\n            };\n            const handler = rule.handler({\n                state,\n                range,\n                match,\n                commands,\n                chain,\n                can,\n                pasteEvent,\n                dropEvent,\n            });\n            handlers.push(handler);\n        });\n    });\n    const success = handlers.every(handler => handler !== null);\n    return success;\n}\n// When dragging across editors, must get another editor instance to delete selection content.\nlet tiptapDragFromOtherEditor = null;\nconst createClipboardPasteEvent = (text) => {\n    var _a;\n    const event = new ClipboardEvent('paste', {\n        clipboardData: new DataTransfer(),\n    });\n    (_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.setData('text/html', text);\n    return event;\n};\n/**\n * Create an paste rules plugin. When enabled, it will cause pasted\n * text that matches any of the given rules to trigger the rule’s\n * action.\n */\nfunction pasteRulesPlugin(props) {\n    const { editor, rules } = props;\n    let dragSourceElement = null;\n    let isPastedFromProseMirror = false;\n    let isDroppedFromProseMirror = false;\n    let pasteEvent = typeof ClipboardEvent !== 'undefined' ? new ClipboardEvent('paste') : null;\n    let dropEvent;\n    try {\n        dropEvent = typeof DragEvent !== 'undefined' ? new DragEvent('drop') : null;\n    }\n    catch {\n        dropEvent = null;\n    }\n    const processEvent = ({ state, from, to, rule, pasteEvt, }) => {\n        const tr = state.tr;\n        const chainableState = createChainableState({\n            state,\n            transaction: tr,\n        });\n        const handler = run({\n            editor,\n            state: chainableState,\n            from: Math.max(from - 1, 0),\n            to: to.b - 1,\n            rule,\n            pasteEvent: pasteEvt,\n            dropEvent,\n        });\n        if (!handler || !tr.steps.length) {\n            return;\n        }\n        try {\n            dropEvent = typeof DragEvent !== 'undefined' ? new DragEvent('drop') : null;\n        }\n        catch {\n            dropEvent = null;\n        }\n        pasteEvent = typeof ClipboardEvent !== 'undefined' ? new ClipboardEvent('paste') : null;\n        return tr;\n    };\n    const plugins = rules.map(rule => {\n        return new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n            // we register a global drag handler to track the current drag source element\n            view(view) {\n                const handleDragstart = (event) => {\n                    var _a;\n                    dragSourceElement = ((_a = view.dom.parentElement) === null || _a === void 0 ? void 0 : _a.contains(event.target))\n                        ? view.dom.parentElement\n                        : null;\n                    if (dragSourceElement) {\n                        tiptapDragFromOtherEditor = editor;\n                    }\n                };\n                const handleDragend = () => {\n                    if (tiptapDragFromOtherEditor) {\n                        tiptapDragFromOtherEditor = null;\n                    }\n                };\n                window.addEventListener('dragstart', handleDragstart);\n                window.addEventListener('dragend', handleDragend);\n                return {\n                    destroy() {\n                        window.removeEventListener('dragstart', handleDragstart);\n                        window.removeEventListener('dragend', handleDragend);\n                    },\n                };\n            },\n            props: {\n                handleDOMEvents: {\n                    drop: (view, event) => {\n                        isDroppedFromProseMirror = dragSourceElement === view.dom.parentElement;\n                        dropEvent = event;\n                        if (!isDroppedFromProseMirror) {\n                            const dragFromOtherEditor = tiptapDragFromOtherEditor;\n                            if (dragFromOtherEditor) {\n                                // setTimeout to avoid the wrong content after drop, timeout arg can't be empty or 0\n                                setTimeout(() => {\n                                    const selection = dragFromOtherEditor.state.selection;\n                                    if (selection) {\n                                        dragFromOtherEditor.commands.deleteRange({ from: selection.from, to: selection.to });\n                                    }\n                                }, 10);\n                            }\n                        }\n                        return false;\n                    },\n                    paste: (_view, event) => {\n                        var _a;\n                        const html = (_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.getData('text/html');\n                        pasteEvent = event;\n                        isPastedFromProseMirror = !!(html === null || html === void 0 ? void 0 : html.includes('data-pm-slice'));\n                        return false;\n                    },\n                },\n            },\n            appendTransaction: (transactions, oldState, state) => {\n                const transaction = transactions[0];\n                const isPaste = transaction.getMeta('uiEvent') === 'paste' && !isPastedFromProseMirror;\n                const isDrop = transaction.getMeta('uiEvent') === 'drop' && !isDroppedFromProseMirror;\n                // if PasteRule is triggered by insertContent()\n                const simulatedPasteMeta = transaction.getMeta('applyPasteRules');\n                const isSimulatedPaste = !!simulatedPasteMeta;\n                if (!isPaste && !isDrop && !isSimulatedPaste) {\n                    return;\n                }\n                // Handle simulated paste\n                if (isSimulatedPaste) {\n                    let { text } = simulatedPasteMeta;\n                    if (typeof text === 'string') {\n                        text = text;\n                    }\n                    else {\n                        text = getHTMLFromFragment(_tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Fragment.from(text), state.schema);\n                    }\n                    const { from } = simulatedPasteMeta;\n                    const to = from + text.length;\n                    const pasteEvt = createClipboardPasteEvent(text);\n                    return processEvent({\n                        rule,\n                        state,\n                        from,\n                        to: { b: to },\n                        pasteEvt,\n                    });\n                }\n                // handle actual paste/drop\n                const from = oldState.doc.content.findDiffStart(state.doc.content);\n                const to = oldState.doc.content.findDiffEnd(state.doc.content);\n                // stop if there is no changed range\n                if (!isNumber(from) || !to || from === to.b) {\n                    return;\n                }\n                return processEvent({\n                    rule,\n                    state,\n                    from,\n                    to,\n                    pasteEvt: pasteEvent,\n                });\n            },\n        });\n    });\n    return plugins;\n}\n\nfunction findDuplicates(items) {\n    const filtered = items.filter((el, index) => items.indexOf(el) !== index);\n    return Array.from(new Set(filtered));\n}\n\nclass ExtensionManager {\n    constructor(extensions, editor) {\n        this.splittableMarks = [];\n        this.editor = editor;\n        this.extensions = ExtensionManager.resolve(extensions);\n        this.schema = getSchemaByResolvedExtensions(this.extensions, editor);\n        this.setupExtensions();\n    }\n    /**\n     * Returns a flattened and sorted extension list while\n     * also checking for duplicated extensions and warns the user.\n     * @param extensions An array of Tiptap extensions\n     * @returns An flattened and sorted array of Tiptap extensions\n     */\n    static resolve(extensions) {\n        const resolvedExtensions = ExtensionManager.sort(ExtensionManager.flatten(extensions));\n        const duplicatedNames = findDuplicates(resolvedExtensions.map(extension => extension.name));\n        if (duplicatedNames.length) {\n            console.warn(`[tiptap warn]: Duplicate extension names found: [${duplicatedNames\n                .map(item => `'${item}'`)\n                .join(', ')}]. This can lead to issues.`);\n        }\n        return resolvedExtensions;\n    }\n    /**\n     * Create a flattened array of extensions by traversing the `addExtensions` field.\n     * @param extensions An array of Tiptap extensions\n     * @returns A flattened array of Tiptap extensions\n     */\n    static flatten(extensions) {\n        return (extensions\n            .map(extension => {\n            const context = {\n                name: extension.name,\n                options: extension.options,\n                storage: extension.storage,\n            };\n            const addExtensions = getExtensionField(extension, 'addExtensions', context);\n            if (addExtensions) {\n                return [extension, ...this.flatten(addExtensions())];\n            }\n            return extension;\n        })\n            // `Infinity` will break TypeScript so we set a number that is probably high enough\n            .flat(10));\n    }\n    /**\n     * Sort extensions by priority.\n     * @param extensions An array of Tiptap extensions\n     * @returns A sorted array of Tiptap extensions by priority\n     */\n    static sort(extensions) {\n        const defaultPriority = 100;\n        return extensions.sort((a, b) => {\n            const priorityA = getExtensionField(a, 'priority') || defaultPriority;\n            const priorityB = getExtensionField(b, 'priority') || defaultPriority;\n            if (priorityA > priorityB) {\n                return -1;\n            }\n            if (priorityA < priorityB) {\n                return 1;\n            }\n            return 0;\n        });\n    }\n    /**\n     * Get all commands from the extensions.\n     * @returns An object with all commands where the key is the command name and the value is the command function\n     */\n    get commands() {\n        return this.extensions.reduce((commands, extension) => {\n            const context = {\n                name: extension.name,\n                options: extension.options,\n                storage: extension.storage,\n                editor: this.editor,\n                type: getSchemaTypeByName(extension.name, this.schema),\n            };\n            const addCommands = getExtensionField(extension, 'addCommands', context);\n            if (!addCommands) {\n                return commands;\n            }\n            return {\n                ...commands,\n                ...addCommands(),\n            };\n        }, {});\n    }\n    /**\n     * Get all registered Prosemirror plugins from the extensions.\n     * @returns An array of Prosemirror plugins\n     */\n    get plugins() {\n        const { editor } = this;\n        // With ProseMirror, first plugins within an array are executed first.\n        // In Tiptap, we provide the ability to override plugins,\n        // so it feels more natural to run plugins at the end of an array first.\n        // That’s why we have to reverse the `extensions` array and sort again\n        // based on the `priority` option.\n        const extensions = ExtensionManager.sort([...this.extensions].reverse());\n        const inputRules = [];\n        const pasteRules = [];\n        const allPlugins = extensions\n            .map(extension => {\n            const context = {\n                name: extension.name,\n                options: extension.options,\n                storage: extension.storage,\n                editor,\n                type: getSchemaTypeByName(extension.name, this.schema),\n            };\n            const plugins = [];\n            const addKeyboardShortcuts = getExtensionField(extension, 'addKeyboardShortcuts', context);\n            let defaultBindings = {};\n            // bind exit handling\n            if (extension.type === 'mark' && getExtensionField(extension, 'exitable', context)) {\n                defaultBindings.ArrowRight = () => Mark.handleExit({ editor, mark: extension });\n            }\n            if (addKeyboardShortcuts) {\n                const bindings = Object.fromEntries(Object.entries(addKeyboardShortcuts()).map(([shortcut, method]) => {\n                    return [shortcut, () => method({ editor })];\n                }));\n                defaultBindings = { ...defaultBindings, ...bindings };\n            }\n            const keyMapPlugin = (0,_tiptap_pm_keymap__WEBPACK_IMPORTED_MODULE_2__.keymap)(defaultBindings);\n            plugins.push(keyMapPlugin);\n            const addInputRules = getExtensionField(extension, 'addInputRules', context);\n            if (isExtensionRulesEnabled(extension, editor.options.enableInputRules) && addInputRules) {\n                inputRules.push(...addInputRules());\n            }\n            const addPasteRules = getExtensionField(extension, 'addPasteRules', context);\n            if (isExtensionRulesEnabled(extension, editor.options.enablePasteRules) && addPasteRules) {\n                pasteRules.push(...addPasteRules());\n            }\n            const addProseMirrorPlugins = getExtensionField(extension, 'addProseMirrorPlugins', context);\n            if (addProseMirrorPlugins) {\n                const proseMirrorPlugins = addProseMirrorPlugins();\n                plugins.push(...proseMirrorPlugins);\n            }\n            return plugins;\n        })\n            .flat();\n        return [\n            inputRulesPlugin({\n                editor,\n                rules: inputRules,\n            }),\n            ...pasteRulesPlugin({\n                editor,\n                rules: pasteRules,\n            }),\n            ...allPlugins,\n        ];\n    }\n    /**\n     * Get all attributes from the extensions.\n     * @returns An array of attributes\n     */\n    get attributes() {\n        return getAttributesFromExtensions(this.extensions);\n    }\n    /**\n     * Get all node views from the extensions.\n     * @returns An object with all node views where the key is the node name and the value is the node view function\n     */\n    get nodeViews() {\n        const { editor } = this;\n        const { nodeExtensions } = splitExtensions(this.extensions);\n        return Object.fromEntries(nodeExtensions\n            .filter(extension => !!getExtensionField(extension, 'addNodeView'))\n            .map(extension => {\n            const extensionAttributes = this.attributes.filter(attribute => attribute.type === extension.name);\n            const context = {\n                name: extension.name,\n                options: extension.options,\n                storage: extension.storage,\n                editor,\n                type: getNodeType(extension.name, this.schema),\n            };\n            const addNodeView = getExtensionField(extension, 'addNodeView', context);\n            if (!addNodeView) {\n                return [];\n            }\n            const nodeview = (node, view, getPos, decorations, innerDecorations) => {\n                const HTMLAttributes = getRenderedAttributes(node, extensionAttributes);\n                return addNodeView()({\n                    // pass-through\n                    node,\n                    view,\n                    getPos: getPos,\n                    decorations,\n                    innerDecorations,\n                    // tiptap-specific\n                    editor,\n                    extension,\n                    HTMLAttributes,\n                });\n            };\n            return [extension.name, nodeview];\n        }));\n    }\n    /**\n     * Go through all extensions, create extension storages & setup marks\n     * & bind editor event listener.\n     */\n    setupExtensions() {\n        this.extensions.forEach(extension => {\n            var _a;\n            // store extension storage in editor\n            this.editor.extensionStorage[extension.name] = extension.storage;\n            const context = {\n                name: extension.name,\n                options: extension.options,\n                storage: extension.storage,\n                editor: this.editor,\n                type: getSchemaTypeByName(extension.name, this.schema),\n            };\n            if (extension.type === 'mark') {\n                const keepOnSplit = (_a = callOrReturn(getExtensionField(extension, 'keepOnSplit', context))) !== null && _a !== void 0 ? _a : true;\n                if (keepOnSplit) {\n                    this.splittableMarks.push(extension.name);\n                }\n            }\n            const onBeforeCreate = getExtensionField(extension, 'onBeforeCreate', context);\n            const onCreate = getExtensionField(extension, 'onCreate', context);\n            const onUpdate = getExtensionField(extension, 'onUpdate', context);\n            const onSelectionUpdate = getExtensionField(extension, 'onSelectionUpdate', context);\n            const onTransaction = getExtensionField(extension, 'onTransaction', context);\n            const onFocus = getExtensionField(extension, 'onFocus', context);\n            const onBlur = getExtensionField(extension, 'onBlur', context);\n            const onDestroy = getExtensionField(extension, 'onDestroy', context);\n            if (onBeforeCreate) {\n                this.editor.on('beforeCreate', onBeforeCreate);\n            }\n            if (onCreate) {\n                this.editor.on('create', onCreate);\n            }\n            if (onUpdate) {\n                this.editor.on('update', onUpdate);\n            }\n            if (onSelectionUpdate) {\n                this.editor.on('selectionUpdate', onSelectionUpdate);\n            }\n            if (onTransaction) {\n                this.editor.on('transaction', onTransaction);\n            }\n            if (onFocus) {\n                this.editor.on('focus', onFocus);\n            }\n            if (onBlur) {\n                this.editor.on('blur', onBlur);\n            }\n            if (onDestroy) {\n                this.editor.on('destroy', onDestroy);\n            }\n        });\n    }\n}\n\n/**\n * The Extension class is the base class for all extensions.\n * @see https://tiptap.dev/api/extensions#create-a-new-extension\n */\nclass Extension {\n    constructor(config = {}) {\n        this.type = 'extension';\n        this.name = 'extension';\n        this.parent = null;\n        this.child = null;\n        this.config = {\n            name: this.name,\n            defaultOptions: {},\n        };\n        this.config = {\n            ...this.config,\n            ...config,\n        };\n        this.name = this.config.name;\n        if (config.defaultOptions && Object.keys(config.defaultOptions).length > 0) {\n            console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`);\n        }\n        // TODO: remove `addOptions` fallback\n        this.options = this.config.defaultOptions;\n        if (this.config.addOptions) {\n            this.options = callOrReturn(getExtensionField(this, 'addOptions', {\n                name: this.name,\n            }));\n        }\n        this.storage = callOrReturn(getExtensionField(this, 'addStorage', {\n            name: this.name,\n            options: this.options,\n        })) || {};\n    }\n    static create(config = {}) {\n        return new Extension(config);\n    }\n    configure(options = {}) {\n        // return a new instance so we can use the same extension\n        // with different calls of `configure`\n        const extension = this.extend({\n            ...this.config,\n            addOptions: () => {\n                return mergeDeep(this.options, options);\n            },\n        });\n        // Always preserve the current name\n        extension.name = this.name;\n        // Set the parent to be our parent\n        extension.parent = this.parent;\n        return extension;\n    }\n    extend(extendedConfig = {}) {\n        const extension = new Extension({ ...this.config, ...extendedConfig });\n        extension.parent = this;\n        this.child = extension;\n        extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;\n        if (extendedConfig.defaultOptions && Object.keys(extendedConfig.defaultOptions).length > 0) {\n            console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`);\n        }\n        extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {\n            name: extension.name,\n        }));\n        extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\n            name: extension.name,\n            options: extension.options,\n        }));\n        return extension;\n    }\n}\n\n/**\n * Gets the text between two positions in a Prosemirror node\n * and serializes it using the given text serializers and block separator (see getText)\n * @param startNode The Prosemirror node to start from\n * @param range The range of the text to get\n * @param options Options for the text serializer & block separator\n * @returns The text between the two positions\n */\nfunction getTextBetween(startNode, range, options) {\n    const { from, to } = range;\n    const { blockSeparator = '\\n\\n', textSerializers = {} } = options || {};\n    let text = '';\n    startNode.nodesBetween(from, to, (node, pos, parent, index) => {\n        var _a;\n        if (node.isBlock && pos > from) {\n            text += blockSeparator;\n        }\n        const textSerializer = textSerializers === null || textSerializers === void 0 ? void 0 : textSerializers[node.type.name];\n        if (textSerializer) {\n            if (parent) {\n                text += textSerializer({\n                    node,\n                    pos,\n                    parent,\n                    index,\n                    range,\n                });\n            }\n            // do not descend into child nodes when there exists a serializer\n            return false;\n        }\n        if (node.isText) {\n            text += (_a = node === null || node === void 0 ? void 0 : node.text) === null || _a === void 0 ? void 0 : _a.slice(Math.max(from, pos) - pos, to - pos); // eslint-disable-line\n        }\n    });\n    return text;\n}\n\n/**\n * Find text serializers `toText` in a Prosemirror schema\n * @param schema The Prosemirror schema to search in\n * @returns A record of text serializers by node name\n */\nfunction getTextSerializersFromSchema(schema) {\n    return Object.fromEntries(Object.entries(schema.nodes)\n        .filter(([, node]) => node.spec.toText)\n        .map(([name, node]) => [name, node.spec.toText]));\n}\n\nconst ClipboardTextSerializer = Extension.create({\n    name: 'clipboardTextSerializer',\n    addOptions() {\n        return {\n            blockSeparator: undefined,\n        };\n    },\n    addProseMirrorPlugins() {\n        return [\n            new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n                key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey('clipboardTextSerializer'),\n                props: {\n                    clipboardTextSerializer: () => {\n                        const { editor } = this;\n                        const { state, schema } = editor;\n                        const { doc, selection } = state;\n                        const { ranges } = selection;\n                        const from = Math.min(...ranges.map(range => range.$from.pos));\n                        const to = Math.max(...ranges.map(range => range.$to.pos));\n                        const textSerializers = getTextSerializersFromSchema(schema);\n                        const range = { from, to };\n                        return getTextBetween(doc, range, {\n                            ...(this.options.blockSeparator !== undefined\n                                ? { blockSeparator: this.options.blockSeparator }\n                                : {}),\n                            textSerializers,\n                        });\n                    },\n                },\n            }),\n        ];\n    },\n});\n\nconst blur = () => ({ editor, view }) => {\n    requestAnimationFrame(() => {\n        var _a;\n        if (!editor.isDestroyed) {\n            view.dom.blur();\n            // Browsers should remove the caret on blur but safari does not.\n            // See: https://github.com/ueberdosis/tiptap/issues/2405\n            (_a = window === null || window === void 0 ? void 0 : window.getSelection()) === null || _a === void 0 ? void 0 : _a.removeAllRanges();\n        }\n    });\n    return true;\n};\n\nconst clearContent = (emitUpdate = false) => ({ commands }) => {\n    return commands.setContent('', emitUpdate);\n};\n\nconst clearNodes = () => ({ state, tr, dispatch }) => {\n    const { selection } = tr;\n    const { ranges } = selection;\n    if (!dispatch) {\n        return true;\n    }\n    ranges.forEach(({ $from, $to }) => {\n        state.doc.nodesBetween($from.pos, $to.pos, (node, pos) => {\n            if (node.type.isText) {\n                return;\n            }\n            const { doc, mapping } = tr;\n            const $mappedFrom = doc.resolve(mapping.map(pos));\n            const $mappedTo = doc.resolve(mapping.map(pos + node.nodeSize));\n            const nodeRange = $mappedFrom.blockRange($mappedTo);\n            if (!nodeRange) {\n                return;\n            }\n            const targetLiftDepth = (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.liftTarget)(nodeRange);\n            if (node.type.isTextblock) {\n                const { defaultType } = $mappedFrom.parent.contentMatchAt($mappedFrom.index());\n                tr.setNodeMarkup(nodeRange.start, defaultType);\n            }\n            if (targetLiftDepth || targetLiftDepth === 0) {\n                tr.lift(nodeRange, targetLiftDepth);\n            }\n        });\n    });\n    return true;\n};\n\nconst command = fn => props => {\n    return fn(props);\n};\n\nconst createParagraphNear = () => ({ state, dispatch }) => {\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.createParagraphNear)(state, dispatch);\n};\n\nconst cut = (originRange, targetPos) => ({ editor, tr }) => {\n    const { state } = editor;\n    const contentSlice = state.doc.slice(originRange.from, originRange.to);\n    tr.deleteRange(originRange.from, originRange.to);\n    const newPos = tr.mapping.map(targetPos);\n    tr.insert(newPos, contentSlice.content);\n    tr.setSelection(new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection(tr.doc.resolve(newPos - 1)));\n    return true;\n};\n\nconst deleteCurrentNode = () => ({ tr, dispatch }) => {\n    const { selection } = tr;\n    const currentNode = selection.$anchor.node();\n    // if there is content inside the current node, break out of this command\n    if (currentNode.content.size > 0) {\n        return false;\n    }\n    const $pos = tr.selection.$anchor;\n    for (let depth = $pos.depth; depth > 0; depth -= 1) {\n        const node = $pos.node(depth);\n        if (node.type === currentNode.type) {\n            if (dispatch) {\n                const from = $pos.before(depth);\n                const to = $pos.after(depth);\n                tr.delete(from, to).scrollIntoView();\n            }\n            return true;\n        }\n    }\n    return false;\n};\n\nconst deleteNode = typeOrName => ({ tr, state, dispatch }) => {\n    const type = getNodeType(typeOrName, state.schema);\n    const $pos = tr.selection.$anchor;\n    for (let depth = $pos.depth; depth > 0; depth -= 1) {\n        const node = $pos.node(depth);\n        if (node.type === type) {\n            if (dispatch) {\n                const from = $pos.before(depth);\n                const to = $pos.after(depth);\n                tr.delete(from, to).scrollIntoView();\n            }\n            return true;\n        }\n    }\n    return false;\n};\n\nconst deleteRange = range => ({ tr, dispatch }) => {\n    const { from, to } = range;\n    if (dispatch) {\n        tr.delete(from, to);\n    }\n    return true;\n};\n\nconst deleteSelection = () => ({ state, dispatch }) => {\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.deleteSelection)(state, dispatch);\n};\n\nconst enter = () => ({ commands }) => {\n    return commands.keyboardShortcut('Enter');\n};\n\nconst exitCode = () => ({ state, dispatch }) => {\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.exitCode)(state, dispatch);\n};\n\n/**\n * Check if object1 includes object2\n * @param object1 Object\n * @param object2 Object\n */\nfunction objectIncludes(object1, object2, options = { strict: true }) {\n    const keys = Object.keys(object2);\n    if (!keys.length) {\n        return true;\n    }\n    return keys.every(key => {\n        if (options.strict) {\n            return object2[key] === object1[key];\n        }\n        if (isRegExp(object2[key])) {\n            return object2[key].test(object1[key]);\n        }\n        return object2[key] === object1[key];\n    });\n}\n\nfunction findMarkInSet(marks, type, attributes = {}) {\n    return marks.find(item => {\n        return (item.type === type\n            && objectIncludes(\n            // Only check equality for the attributes that are provided\n            Object.fromEntries(Object.keys(attributes).map(k => [k, item.attrs[k]])), attributes));\n    });\n}\nfunction isMarkInSet(marks, type, attributes = {}) {\n    return !!findMarkInSet(marks, type, attributes);\n}\n/**\n * Get the range of a mark at a resolved position.\n */\nfunction getMarkRange(\n/**\n * The position to get the mark range for.\n */\n$pos, \n/**\n * The mark type to get the range for.\n */\ntype, \n/**\n * The attributes to match against.\n * If not provided, only the first mark at the position will be matched.\n */\nattributes) {\n    var _a;\n    if (!$pos || !type) {\n        return;\n    }\n    let start = $pos.parent.childAfter($pos.parentOffset);\n    // If the cursor is at the start of a text node that does not have the mark, look backward\n    if (!start.node || !start.node.marks.some(mark => mark.type === type)) {\n        start = $pos.parent.childBefore($pos.parentOffset);\n    }\n    // If there is no text node with the mark even backward, return undefined\n    if (!start.node || !start.node.marks.some(mark => mark.type === type)) {\n        return;\n    }\n    // Default to only matching against the first mark's attributes\n    attributes = attributes || ((_a = start.node.marks[0]) === null || _a === void 0 ? void 0 : _a.attrs);\n    // We now know that the cursor is either at the start, middle or end of a text node with the specified mark\n    // so we can look it up on the targeted mark\n    const mark = findMarkInSet([...start.node.marks], type, attributes);\n    if (!mark) {\n        return;\n    }\n    let startIndex = start.index;\n    let startPos = $pos.start() + start.offset;\n    let endIndex = startIndex + 1;\n    let endPos = startPos + start.node.nodeSize;\n    while (startIndex > 0\n        && isMarkInSet([...$pos.parent.child(startIndex - 1).marks], type, attributes)) {\n        startIndex -= 1;\n        startPos -= $pos.parent.child(startIndex).nodeSize;\n    }\n    while (endIndex < $pos.parent.childCount\n        && isMarkInSet([...$pos.parent.child(endIndex).marks], type, attributes)) {\n        endPos += $pos.parent.child(endIndex).nodeSize;\n        endIndex += 1;\n    }\n    return {\n        from: startPos,\n        to: endPos,\n    };\n}\n\nfunction getMarkType(nameOrType, schema) {\n    if (typeof nameOrType === 'string') {\n        if (!schema.marks[nameOrType]) {\n            throw Error(`There is no mark type named '${nameOrType}'. Maybe you forgot to add the extension?`);\n        }\n        return schema.marks[nameOrType];\n    }\n    return nameOrType;\n}\n\nconst extendMarkRange = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\n    const type = getMarkType(typeOrName, state.schema);\n    const { doc, selection } = tr;\n    const { $from, from, to } = selection;\n    if (dispatch) {\n        const range = getMarkRange($from, type, attributes);\n        if (range && range.from <= from && range.to >= to) {\n            const newSelection = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(doc, range.from, range.to);\n            tr.setSelection(newSelection);\n        }\n    }\n    return true;\n};\n\nconst first = commands => props => {\n    const items = typeof commands === 'function'\n        ? commands(props)\n        : commands;\n    for (let i = 0; i < items.length; i += 1) {\n        if (items[i](props)) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction isTextSelection(value) {\n    return value instanceof _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection;\n}\n\nfunction minMax(value = 0, min = 0, max = 0) {\n    return Math.min(Math.max(value, min), max);\n}\n\nfunction resolveFocusPosition(doc, position = null) {\n    if (!position) {\n        return null;\n    }\n    const selectionAtStart = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Selection.atStart(doc);\n    const selectionAtEnd = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Selection.atEnd(doc);\n    if (position === 'start' || position === true) {\n        return selectionAtStart;\n    }\n    if (position === 'end') {\n        return selectionAtEnd;\n    }\n    const minPos = selectionAtStart.from;\n    const maxPos = selectionAtEnd.to;\n    if (position === 'all') {\n        return _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(doc, minMax(0, minPos, maxPos), minMax(doc.content.size, minPos, maxPos));\n    }\n    return _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(doc, minMax(position, minPos, maxPos), minMax(position, minPos, maxPos));\n}\n\nfunction isAndroid() {\n    return navigator.platform === 'Android' || /android/i.test(navigator.userAgent);\n}\n\nfunction isiOS() {\n    return [\n        'iPad Simulator',\n        'iPhone Simulator',\n        'iPod Simulator',\n        'iPad',\n        'iPhone',\n        'iPod',\n    ].includes(navigator.platform)\n        // iPad on iOS 13 detection\n        || (navigator.userAgent.includes('Mac') && 'ontouchend' in document);\n}\n\nconst focus = (position = null, options = {}) => ({ editor, view, tr, dispatch, }) => {\n    options = {\n        scrollIntoView: true,\n        ...options,\n    };\n    const delayedFocus = () => {\n        // focus within `requestAnimationFrame` breaks focus on iOS and Android\n        // so we have to call this\n        if (isiOS() || isAndroid()) {\n            view.dom.focus();\n        }\n        // For React we have to focus asynchronously. Otherwise wild things happen.\n        // see: https://github.com/ueberdosis/tiptap/issues/1520\n        requestAnimationFrame(() => {\n            if (!editor.isDestroyed) {\n                view.focus();\n                if (options === null || options === void 0 ? void 0 : options.scrollIntoView) {\n                    editor.commands.scrollIntoView();\n                }\n            }\n        });\n    };\n    if ((view.hasFocus() && position === null) || position === false) {\n        return true;\n    }\n    // we don’t try to resolve a NodeSelection or CellSelection\n    if (dispatch && position === null && !isTextSelection(editor.state.selection)) {\n        delayedFocus();\n        return true;\n    }\n    // pass through tr.doc instead of editor.state.doc\n    // since transactions could change the editors state before this command has been run\n    const selection = resolveFocusPosition(tr.doc, position) || editor.state.selection;\n    const isSameSelection = editor.state.selection.eq(selection);\n    if (dispatch) {\n        if (!isSameSelection) {\n            tr.setSelection(selection);\n        }\n        // `tr.setSelection` resets the stored marks\n        // so we’ll restore them if the selection is the same as before\n        if (isSameSelection && tr.storedMarks) {\n            tr.setStoredMarks(tr.storedMarks);\n        }\n        delayedFocus();\n    }\n    return true;\n};\n\nconst forEach = (items, fn) => props => {\n    return items.every((item, index) => fn(item, { ...props, index }));\n};\n\nconst insertContent = (value, options) => ({ tr, commands }) => {\n    return commands.insertContentAt({ from: tr.selection.from, to: tr.selection.to }, value, options);\n};\n\nconst removeWhitespaces = (node) => {\n    const children = node.childNodes;\n    for (let i = children.length - 1; i >= 0; i -= 1) {\n        const child = children[i];\n        if (child.nodeType === 3 && child.nodeValue && /^(\\n\\s\\s|\\n)$/.test(child.nodeValue)) {\n            node.removeChild(child);\n        }\n        else if (child.nodeType === 1) {\n            removeWhitespaces(child);\n        }\n    }\n    return node;\n};\nfunction elementFromString(value) {\n    // add a wrapper to preserve leading and trailing whitespace\n    const wrappedValue = `<body>${value}</body>`;\n    const html = new window.DOMParser().parseFromString(wrappedValue, 'text/html').body;\n    return removeWhitespaces(html);\n}\n\n/**\n * Takes a JSON or HTML content and creates a Prosemirror node or fragment from it.\n * @param content The JSON or HTML content to create the node from\n * @param schema The Prosemirror schema to use for the node\n * @param options Options for the parser\n * @returns The created Prosemirror node or fragment\n */\nfunction createNodeFromContent(content, schema, options) {\n    if (content instanceof _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Node || content instanceof _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Fragment) {\n        return content;\n    }\n    options = {\n        slice: true,\n        parseOptions: {},\n        ...options,\n    };\n    const isJSONContent = typeof content === 'object' && content !== null;\n    const isTextContent = typeof content === 'string';\n    if (isJSONContent) {\n        try {\n            const isArrayContent = Array.isArray(content) && content.length > 0;\n            // if the JSON Content is an array of nodes, create a fragment for each node\n            if (isArrayContent) {\n                return _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Fragment.fromArray(content.map(item => schema.nodeFromJSON(item)));\n            }\n            const node = schema.nodeFromJSON(content);\n            if (options.errorOnInvalidContent) {\n                node.check();\n            }\n            return node;\n        }\n        catch (error) {\n            if (options.errorOnInvalidContent) {\n                throw new Error('[tiptap error]: Invalid JSON content', { cause: error });\n            }\n            console.warn('[tiptap warn]: Invalid content.', 'Passed value:', content, 'Error:', error);\n            return createNodeFromContent('', schema, options);\n        }\n    }\n    if (isTextContent) {\n        // Check for invalid content\n        if (options.errorOnInvalidContent) {\n            let hasInvalidContent = false;\n            let invalidContent = '';\n            // A copy of the current schema with a catch-all node at the end\n            const contentCheckSchema = new _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Schema({\n                topNode: schema.spec.topNode,\n                marks: schema.spec.marks,\n                // Prosemirror's schemas are executed such that: the last to execute, matches last\n                // This means that we can add a catch-all node at the end of the schema to catch any content that we don't know how to handle\n                nodes: schema.spec.nodes.append({\n                    __tiptap__private__unknown__catch__all__node: {\n                        content: 'inline*',\n                        group: 'block',\n                        parseDOM: [\n                            {\n                                tag: '*',\n                                getAttrs: e => {\n                                    // If this is ever called, we know that the content has something that we don't know how to handle in the schema\n                                    hasInvalidContent = true;\n                                    // Try to stringify the element for a more helpful error message\n                                    invalidContent = typeof e === 'string' ? e : e.outerHTML;\n                                    return null;\n                                },\n                            },\n                        ],\n                    },\n                }),\n            });\n            if (options.slice) {\n                _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.DOMParser.fromSchema(contentCheckSchema).parseSlice(elementFromString(content), options.parseOptions);\n            }\n            else {\n                _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.DOMParser.fromSchema(contentCheckSchema).parse(elementFromString(content), options.parseOptions);\n            }\n            if (options.errorOnInvalidContent && hasInvalidContent) {\n                throw new Error('[tiptap error]: Invalid HTML content', { cause: new Error(`Invalid element found: ${invalidContent}`) });\n            }\n        }\n        const parser = _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.DOMParser.fromSchema(schema);\n        if (options.slice) {\n            return parser.parseSlice(elementFromString(content), options.parseOptions).content;\n        }\n        return parser.parse(elementFromString(content), options.parseOptions);\n    }\n    return createNodeFromContent('', schema, options);\n}\n\n// source: https://github.com/ProseMirror/prosemirror-state/blob/master/src/selection.js#L466\nfunction selectionToInsertionEnd(tr, startLen, bias) {\n    const last = tr.steps.length - 1;\n    if (last < startLen) {\n        return;\n    }\n    const step = tr.steps[last];\n    if (!(step instanceof _tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.ReplaceStep || step instanceof _tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.ReplaceAroundStep)) {\n        return;\n    }\n    const map = tr.mapping.maps[last];\n    let end = 0;\n    map.forEach((_from, _to, _newFrom, newTo) => {\n        if (end === 0) {\n            end = newTo;\n        }\n    });\n    tr.setSelection(_tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Selection.near(tr.doc.resolve(end), bias));\n}\n\nconst isFragment = (nodeOrFragment) => {\n    return !('type' in nodeOrFragment);\n};\nconst insertContentAt = (position, value, options) => ({ tr, dispatch, editor }) => {\n    var _a;\n    if (dispatch) {\n        options = {\n            parseOptions: editor.options.parseOptions,\n            updateSelection: true,\n            applyInputRules: false,\n            applyPasteRules: false,\n            ...options,\n        };\n        let content;\n        try {\n            content = createNodeFromContent(value, editor.schema, {\n                parseOptions: {\n                    preserveWhitespace: 'full',\n                    ...options.parseOptions,\n                },\n                errorOnInvalidContent: (_a = options.errorOnInvalidContent) !== null && _a !== void 0 ? _a : editor.options.enableContentCheck,\n            });\n        }\n        catch (e) {\n            editor.emit('contentError', {\n                editor,\n                error: e,\n                disableCollaboration: () => {\n                    if (editor.storage.collaboration) {\n                        editor.storage.collaboration.isDisabled = true;\n                    }\n                },\n            });\n            return false;\n        }\n        let { from, to } = typeof position === 'number' ? { from: position, to: position } : { from: position.from, to: position.to };\n        let isOnlyTextContent = true;\n        let isOnlyBlockContent = true;\n        const nodes = isFragment(content) ? content : [content];\n        nodes.forEach(node => {\n            // check if added node is valid\n            node.check();\n            isOnlyTextContent = isOnlyTextContent ? node.isText && node.marks.length === 0 : false;\n            isOnlyBlockContent = isOnlyBlockContent ? node.isBlock : false;\n        });\n        // check if we can replace the wrapping node by\n        // the newly inserted content\n        // example:\n        // replace an empty paragraph by an inserted image\n        // instead of inserting the image below the paragraph\n        if (from === to && isOnlyBlockContent) {\n            const { parent } = tr.doc.resolve(from);\n            const isEmptyTextBlock = parent.isTextblock && !parent.type.spec.code && !parent.childCount;\n            if (isEmptyTextBlock) {\n                from -= 1;\n                to += 1;\n            }\n        }\n        let newContent;\n        // if there is only plain text we have to use `insertText`\n        // because this will keep the current marks\n        if (isOnlyTextContent) {\n            // if value is string, we can use it directly\n            // otherwise if it is an array, we have to join it\n            if (Array.isArray(value)) {\n                newContent = value.map(v => v.text || '').join('');\n            }\n            else if (value instanceof _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Fragment) {\n                let text = '';\n                value.forEach(node => {\n                    if (node.text) {\n                        text += node.text;\n                    }\n                });\n                newContent = text;\n            }\n            else if (typeof value === 'object' && !!value && !!value.text) {\n                newContent = value.text;\n            }\n            else {\n                newContent = value;\n            }\n            tr.insertText(newContent, from, to);\n        }\n        else {\n            newContent = content;\n            tr.replaceWith(from, to, newContent);\n        }\n        // set cursor at end of inserted content\n        if (options.updateSelection) {\n            selectionToInsertionEnd(tr, tr.steps.length - 1, -1);\n        }\n        if (options.applyInputRules) {\n            tr.setMeta('applyInputRules', { from, text: newContent });\n        }\n        if (options.applyPasteRules) {\n            tr.setMeta('applyPasteRules', { from, text: newContent });\n        }\n    }\n    return true;\n};\n\nconst joinUp = () => ({ state, dispatch }) => {\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.joinUp)(state, dispatch);\n};\nconst joinDown = () => ({ state, dispatch }) => {\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.joinDown)(state, dispatch);\n};\nconst joinBackward = () => ({ state, dispatch }) => {\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.joinBackward)(state, dispatch);\n};\nconst joinForward = () => ({ state, dispatch }) => {\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.joinForward)(state, dispatch);\n};\n\nconst joinItemBackward = () => ({ state, dispatch, tr, }) => {\n    try {\n        const point = (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.joinPoint)(state.doc, state.selection.$from.pos, -1);\n        if (point === null || point === undefined) {\n            return false;\n        }\n        tr.join(point, 2);\n        if (dispatch) {\n            dispatch(tr);\n        }\n        return true;\n    }\n    catch {\n        return false;\n    }\n};\n\nconst joinItemForward = () => ({ state, dispatch, tr, }) => {\n    try {\n        const point = (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.joinPoint)(state.doc, state.selection.$from.pos, +1);\n        if (point === null || point === undefined) {\n            return false;\n        }\n        tr.join(point, 2);\n        if (dispatch) {\n            dispatch(tr);\n        }\n        return true;\n    }\n    catch {\n        return false;\n    }\n};\n\nconst joinTextblockBackward = () => ({ state, dispatch }) => {\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.joinTextblockBackward)(state, dispatch);\n};\n\nconst joinTextblockForward = () => ({ state, dispatch }) => {\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.joinTextblockForward)(state, dispatch);\n};\n\nfunction isMacOS() {\n    return typeof navigator !== 'undefined'\n        ? /Mac/.test(navigator.platform)\n        : false;\n}\n\nfunction normalizeKeyName(name) {\n    const parts = name.split(/-(?!$)/);\n    let result = parts[parts.length - 1];\n    if (result === 'Space') {\n        result = ' ';\n    }\n    let alt;\n    let ctrl;\n    let shift;\n    let meta;\n    for (let i = 0; i < parts.length - 1; i += 1) {\n        const mod = parts[i];\n        if (/^(cmd|meta|m)$/i.test(mod)) {\n            meta = true;\n        }\n        else if (/^a(lt)?$/i.test(mod)) {\n            alt = true;\n        }\n        else if (/^(c|ctrl|control)$/i.test(mod)) {\n            ctrl = true;\n        }\n        else if (/^s(hift)?$/i.test(mod)) {\n            shift = true;\n        }\n        else if (/^mod$/i.test(mod)) {\n            if (isiOS() || isMacOS()) {\n                meta = true;\n            }\n            else {\n                ctrl = true;\n            }\n        }\n        else {\n            throw new Error(`Unrecognized modifier name: ${mod}`);\n        }\n    }\n    if (alt) {\n        result = `Alt-${result}`;\n    }\n    if (ctrl) {\n        result = `Ctrl-${result}`;\n    }\n    if (meta) {\n        result = `Meta-${result}`;\n    }\n    if (shift) {\n        result = `Shift-${result}`;\n    }\n    return result;\n}\nconst keyboardShortcut = name => ({ editor, view, tr, dispatch, }) => {\n    const keys = normalizeKeyName(name).split(/-(?!$)/);\n    const key = keys.find(item => !['Alt', 'Ctrl', 'Meta', 'Shift'].includes(item));\n    const event = new KeyboardEvent('keydown', {\n        key: key === 'Space'\n            ? ' '\n            : key,\n        altKey: keys.includes('Alt'),\n        ctrlKey: keys.includes('Ctrl'),\n        metaKey: keys.includes('Meta'),\n        shiftKey: keys.includes('Shift'),\n        bubbles: true,\n        cancelable: true,\n    });\n    const capturedTransaction = editor.captureTransaction(() => {\n        view.someProp('handleKeyDown', f => f(view, event));\n    });\n    capturedTransaction === null || capturedTransaction === void 0 ? void 0 : capturedTransaction.steps.forEach(step => {\n        const newStep = step.map(tr.mapping);\n        if (newStep && dispatch) {\n            tr.maybeStep(newStep);\n        }\n    });\n    return true;\n};\n\nfunction isNodeActive(state, typeOrName, attributes = {}) {\n    const { from, to, empty } = state.selection;\n    const type = typeOrName ? getNodeType(typeOrName, state.schema) : null;\n    const nodeRanges = [];\n    state.doc.nodesBetween(from, to, (node, pos) => {\n        if (node.isText) {\n            return;\n        }\n        const relativeFrom = Math.max(from, pos);\n        const relativeTo = Math.min(to, pos + node.nodeSize);\n        nodeRanges.push({\n            node,\n            from: relativeFrom,\n            to: relativeTo,\n        });\n    });\n    const selectionRange = to - from;\n    const matchedNodeRanges = nodeRanges\n        .filter(nodeRange => {\n        if (!type) {\n            return true;\n        }\n        return type.name === nodeRange.node.type.name;\n    })\n        .filter(nodeRange => objectIncludes(nodeRange.node.attrs, attributes, { strict: false }));\n    if (empty) {\n        return !!matchedNodeRanges.length;\n    }\n    const range = matchedNodeRanges.reduce((sum, nodeRange) => sum + nodeRange.to - nodeRange.from, 0);\n    return range >= selectionRange;\n}\n\nconst lift = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n    const type = getNodeType(typeOrName, state.schema);\n    const isActive = isNodeActive(state, type, attributes);\n    if (!isActive) {\n        return false;\n    }\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.lift)(state, dispatch);\n};\n\nconst liftEmptyBlock = () => ({ state, dispatch }) => {\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.liftEmptyBlock)(state, dispatch);\n};\n\nconst liftListItem = typeOrName => ({ state, dispatch }) => {\n    const type = getNodeType(typeOrName, state.schema);\n    return (0,_tiptap_pm_schema_list__WEBPACK_IMPORTED_MODULE_6__.liftListItem)(type)(state, dispatch);\n};\n\nconst newlineInCode = () => ({ state, dispatch }) => {\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.newlineInCode)(state, dispatch);\n};\n\n/**\n * Get the type of a schema item by its name.\n * @param name The name of the schema item\n * @param schema The Prosemiror schema to search in\n * @returns The type of the schema item (`node` or `mark`), or null if it doesn't exist\n */\nfunction getSchemaTypeNameByName(name, schema) {\n    if (schema.nodes[name]) {\n        return 'node';\n    }\n    if (schema.marks[name]) {\n        return 'mark';\n    }\n    return null;\n}\n\n/**\n * Remove a property or an array of properties from an object\n * @param obj Object\n * @param key Key to remove\n */\nfunction deleteProps(obj, propOrProps) {\n    const props = typeof propOrProps === 'string'\n        ? [propOrProps]\n        : propOrProps;\n    return Object\n        .keys(obj)\n        .reduce((newObj, prop) => {\n        if (!props.includes(prop)) {\n            newObj[prop] = obj[prop];\n        }\n        return newObj;\n    }, {});\n}\n\nconst resetAttributes = (typeOrName, attributes) => ({ tr, state, dispatch }) => {\n    let nodeType = null;\n    let markType = null;\n    const schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string' ? typeOrName : typeOrName.name, state.schema);\n    if (!schemaType) {\n        return false;\n    }\n    if (schemaType === 'node') {\n        nodeType = getNodeType(typeOrName, state.schema);\n    }\n    if (schemaType === 'mark') {\n        markType = getMarkType(typeOrName, state.schema);\n    }\n    if (dispatch) {\n        tr.selection.ranges.forEach(range => {\n            state.doc.nodesBetween(range.$from.pos, range.$to.pos, (node, pos) => {\n                if (nodeType && nodeType === node.type) {\n                    tr.setNodeMarkup(pos, undefined, deleteProps(node.attrs, attributes));\n                }\n                if (markType && node.marks.length) {\n                    node.marks.forEach(mark => {\n                        if (markType === mark.type) {\n                            tr.addMark(pos, pos + node.nodeSize, markType.create(deleteProps(mark.attrs, attributes)));\n                        }\n                    });\n                }\n            });\n        });\n    }\n    return true;\n};\n\nconst scrollIntoView = () => ({ tr, dispatch }) => {\n    if (dispatch) {\n        tr.scrollIntoView();\n    }\n    return true;\n};\n\nconst selectAll = () => ({ tr, dispatch }) => {\n    if (dispatch) {\n        const selection = new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.AllSelection(tr.doc);\n        tr.setSelection(selection);\n    }\n    return true;\n};\n\nconst selectNodeBackward = () => ({ state, dispatch }) => {\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.selectNodeBackward)(state, dispatch);\n};\n\nconst selectNodeForward = () => ({ state, dispatch }) => {\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.selectNodeForward)(state, dispatch);\n};\n\nconst selectParentNode = () => ({ state, dispatch }) => {\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.selectParentNode)(state, dispatch);\n};\n\n// @ts-ignore\n// TODO: add types to @types/prosemirror-commands\nconst selectTextblockEnd = () => ({ state, dispatch }) => {\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.selectTextblockEnd)(state, dispatch);\n};\n\n// @ts-ignore\n// TODO: add types to @types/prosemirror-commands\nconst selectTextblockStart = () => ({ state, dispatch }) => {\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.selectTextblockStart)(state, dispatch);\n};\n\n/**\n * Create a new Prosemirror document node from content.\n * @param content The JSON or HTML content to create the document from\n * @param schema The Prosemirror schema to use for the document\n * @param parseOptions Options for the parser\n * @returns The created Prosemirror document node\n */\nfunction createDocument(content, schema, parseOptions = {}, options = {}) {\n    return createNodeFromContent(content, schema, {\n        slice: false,\n        parseOptions,\n        errorOnInvalidContent: options.errorOnInvalidContent,\n    });\n}\n\nconst setContent = (content, emitUpdate = false, parseOptions = {}, options = {}) => ({ editor, tr, dispatch, commands, }) => {\n    var _a, _b;\n    const { doc } = tr;\n    // This is to keep backward compatibility with the previous behavior\n    // TODO remove this in the next major version\n    if (parseOptions.preserveWhitespace !== 'full') {\n        const document = createDocument(content, editor.schema, parseOptions, {\n            errorOnInvalidContent: (_a = options.errorOnInvalidContent) !== null && _a !== void 0 ? _a : editor.options.enableContentCheck,\n        });\n        if (dispatch) {\n            tr.replaceWith(0, doc.content.size, document).setMeta('preventUpdate', !emitUpdate);\n        }\n        return true;\n    }\n    if (dispatch) {\n        tr.setMeta('preventUpdate', !emitUpdate);\n    }\n    return commands.insertContentAt({ from: 0, to: doc.content.size }, content, {\n        parseOptions,\n        errorOnInvalidContent: (_b = options.errorOnInvalidContent) !== null && _b !== void 0 ? _b : editor.options.enableContentCheck,\n    });\n};\n\nfunction getMarkAttributes(state, typeOrName) {\n    const type = getMarkType(typeOrName, state.schema);\n    const { from, to, empty } = state.selection;\n    const marks = [];\n    if (empty) {\n        if (state.storedMarks) {\n            marks.push(...state.storedMarks);\n        }\n        marks.push(...state.selection.$head.marks());\n    }\n    else {\n        state.doc.nodesBetween(from, to, node => {\n            marks.push(...node.marks);\n        });\n    }\n    const mark = marks.find(markItem => markItem.type.name === type.name);\n    if (!mark) {\n        return {};\n    }\n    return { ...mark.attrs };\n}\n\n/**\n * Returns a new `Transform` based on all steps of the passed transactions.\n * @param oldDoc The Prosemirror node to start from\n * @param transactions The transactions to combine\n * @returns A new `Transform` with all steps of the passed transactions\n */\nfunction combineTransactionSteps(oldDoc, transactions) {\n    const transform = new _tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.Transform(oldDoc);\n    transactions.forEach(transaction => {\n        transaction.steps.forEach(step => {\n            transform.step(step);\n        });\n    });\n    return transform;\n}\n\n/**\n * Gets the default block type at a given match\n * @param match The content match to get the default block type from\n * @returns The default block type or null\n */\nfunction defaultBlockAt(match) {\n    for (let i = 0; i < match.edgeCount; i += 1) {\n        const { type } = match.edge(i);\n        if (type.isTextblock && !type.hasRequiredAttrs()) {\n            return type;\n        }\n    }\n    return null;\n}\n\n/**\n * Find children inside a Prosemirror node that match a predicate.\n * @param node The Prosemirror node to search in\n * @param predicate The predicate to match\n * @returns An array of nodes with their positions\n */\nfunction findChildren(node, predicate) {\n    const nodesWithPos = [];\n    node.descendants((child, pos) => {\n        if (predicate(child)) {\n            nodesWithPos.push({\n                node: child,\n                pos,\n            });\n        }\n    });\n    return nodesWithPos;\n}\n\n/**\n * Same as `findChildren` but searches only within a `range`.\n * @param node The Prosemirror node to search in\n * @param range The range to search in\n * @param predicate The predicate to match\n * @returns An array of nodes with their positions\n */\nfunction findChildrenInRange(node, range, predicate) {\n    const nodesWithPos = [];\n    // if (range.from === range.to) {\n    //   const nodeAt = node.nodeAt(range.from)\n    //   if (nodeAt) {\n    //     nodesWithPos.push({\n    //       node: nodeAt,\n    //       pos: range.from,\n    //     })\n    //   }\n    // }\n    node.nodesBetween(range.from, range.to, (child, pos) => {\n        if (predicate(child)) {\n            nodesWithPos.push({\n                node: child,\n                pos,\n            });\n        }\n    });\n    return nodesWithPos;\n}\n\n/**\n * Finds the closest parent node to a resolved position that matches a predicate.\n * @param $pos The resolved position to search from\n * @param predicate The predicate to match\n * @returns The closest parent node to the resolved position that matches the predicate\n * @example ```js\n * findParentNodeClosestToPos($from, node => node.type.name === 'paragraph')\n * ```\n */\nfunction findParentNodeClosestToPos($pos, predicate) {\n    for (let i = $pos.depth; i > 0; i -= 1) {\n        const node = $pos.node(i);\n        if (predicate(node)) {\n            return {\n                pos: i > 0 ? $pos.before(i) : 0,\n                start: $pos.start(i),\n                depth: i,\n                node,\n            };\n        }\n    }\n}\n\n/**\n * Finds the closest parent node to the current selection that matches a predicate.\n * @param predicate The predicate to match\n * @returns A command that finds the closest parent node to the current selection that matches the predicate\n * @example ```js\n * findParentNode(node => node.type.name === 'paragraph')\n * ```\n */\nfunction findParentNode(predicate) {\n    return (selection) => findParentNodeClosestToPos(selection.$from, predicate);\n}\n\nfunction getSchema(extensions, editor) {\n    const resolvedExtensions = ExtensionManager.resolve(extensions);\n    return getSchemaByResolvedExtensions(resolvedExtensions, editor);\n}\n\n/**\n * Generate HTML from a JSONContent\n * @param doc The JSONContent to generate HTML from\n * @param extensions The extensions to use for the schema\n * @returns The generated HTML\n */\nfunction generateHTML(doc, extensions) {\n    const schema = getSchema(extensions);\n    const contentNode = _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Node.fromJSON(schema, doc);\n    return getHTMLFromFragment(contentNode.content, schema);\n}\n\n/**\n * Generate JSONContent from HTML\n * @param html The HTML to generate JSONContent from\n * @param extensions The extensions to use for the schema\n * @returns The generated JSONContent\n */\nfunction generateJSON(html, extensions) {\n    const schema = getSchema(extensions);\n    const dom = elementFromString(html);\n    return _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.DOMParser.fromSchema(schema).parse(dom).toJSON();\n}\n\n/**\n * Gets the text of a Prosemirror node\n * @param node The Prosemirror node\n * @param options Options for the text serializer & block separator\n * @returns The text of the node\n * @example ```js\n * const text = getText(node, { blockSeparator: '\\n' })\n * ```\n */\nfunction getText(node, options) {\n    const range = {\n        from: 0,\n        to: node.content.size,\n    };\n    return getTextBetween(node, range, options);\n}\n\n/**\n * Generate raw text from a JSONContent\n * @param doc The JSONContent to generate text from\n * @param extensions The extensions to use for the schema\n * @param options Options for the text generation f.e. blockSeparator or textSerializers\n * @returns The generated text\n */\nfunction generateText(doc, extensions, options) {\n    const { blockSeparator = '\\n\\n', textSerializers = {} } = options || {};\n    const schema = getSchema(extensions);\n    const contentNode = _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Node.fromJSON(schema, doc);\n    return getText(contentNode, {\n        blockSeparator,\n        textSerializers: {\n            ...getTextSerializersFromSchema(schema),\n            ...textSerializers,\n        },\n    });\n}\n\nfunction getNodeAttributes(state, typeOrName) {\n    const type = getNodeType(typeOrName, state.schema);\n    const { from, to } = state.selection;\n    const nodes = [];\n    state.doc.nodesBetween(from, to, node => {\n        nodes.push(node);\n    });\n    const node = nodes.reverse().find(nodeItem => nodeItem.type.name === type.name);\n    if (!node) {\n        return {};\n    }\n    return { ...node.attrs };\n}\n\n/**\n * Get node or mark attributes by type or name on the current editor state\n * @param state The current editor state\n * @param typeOrName The node or mark type or name\n * @returns The attributes of the node or mark or an empty object\n */\nfunction getAttributes(state, typeOrName) {\n    const schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string' ? typeOrName : typeOrName.name, state.schema);\n    if (schemaType === 'node') {\n        return getNodeAttributes(state, typeOrName);\n    }\n    if (schemaType === 'mark') {\n        return getMarkAttributes(state, typeOrName);\n    }\n    return {};\n}\n\n/**\n * Removes duplicated values within an array.\n * Supports numbers, strings and objects.\n */\nfunction removeDuplicates(array, by = JSON.stringify) {\n    const seen = {};\n    return array.filter(item => {\n        const key = by(item);\n        return Object.prototype.hasOwnProperty.call(seen, key)\n            ? false\n            : (seen[key] = true);\n    });\n}\n\n/**\n * Removes duplicated ranges and ranges that are\n * fully captured by other ranges.\n */\nfunction simplifyChangedRanges(changes) {\n    const uniqueChanges = removeDuplicates(changes);\n    return uniqueChanges.length === 1\n        ? uniqueChanges\n        : uniqueChanges.filter((change, index) => {\n            const rest = uniqueChanges.filter((_, i) => i !== index);\n            return !rest.some(otherChange => {\n                return change.oldRange.from >= otherChange.oldRange.from\n                    && change.oldRange.to <= otherChange.oldRange.to\n                    && change.newRange.from >= otherChange.newRange.from\n                    && change.newRange.to <= otherChange.newRange.to;\n            });\n        });\n}\n/**\n * Returns a list of changed ranges\n * based on the first and last state of all steps.\n */\nfunction getChangedRanges(transform) {\n    const { mapping, steps } = transform;\n    const changes = [];\n    mapping.maps.forEach((stepMap, index) => {\n        const ranges = [];\n        // This accounts for step changes where no range was actually altered\n        // e.g. when setting a mark, node attribute, etc.\n        // @ts-ignore\n        if (!stepMap.ranges.length) {\n            const { from, to } = steps[index];\n            if (from === undefined || to === undefined) {\n                return;\n            }\n            ranges.push({ from, to });\n        }\n        else {\n            stepMap.forEach((from, to) => {\n                ranges.push({ from, to });\n            });\n        }\n        ranges.forEach(({ from, to }) => {\n            const newStart = mapping.slice(index).map(from, -1);\n            const newEnd = mapping.slice(index).map(to);\n            const oldStart = mapping.invert().map(newStart, -1);\n            const oldEnd = mapping.invert().map(newEnd);\n            changes.push({\n                oldRange: {\n                    from: oldStart,\n                    to: oldEnd,\n                },\n                newRange: {\n                    from: newStart,\n                    to: newEnd,\n                },\n            });\n        });\n    });\n    return simplifyChangedRanges(changes);\n}\n\nfunction getDebugJSON(node, startOffset = 0) {\n    const isTopNode = node.type === node.type.schema.topNodeType;\n    const increment = isTopNode ? 0 : 1;\n    const from = startOffset;\n    const to = from + node.nodeSize;\n    const marks = node.marks.map(mark => {\n        const output = {\n            type: mark.type.name,\n        };\n        if (Object.keys(mark.attrs).length) {\n            output.attrs = { ...mark.attrs };\n        }\n        return output;\n    });\n    const attrs = { ...node.attrs };\n    const output = {\n        type: node.type.name,\n        from,\n        to,\n    };\n    if (Object.keys(attrs).length) {\n        output.attrs = attrs;\n    }\n    if (marks.length) {\n        output.marks = marks;\n    }\n    if (node.content.childCount) {\n        output.content = [];\n        node.forEach((child, offset) => {\n            var _a;\n            (_a = output.content) === null || _a === void 0 ? void 0 : _a.push(getDebugJSON(child, startOffset + offset + increment));\n        });\n    }\n    if (node.text) {\n        output.text = node.text;\n    }\n    return output;\n}\n\nfunction getMarksBetween(from, to, doc) {\n    const marks = [];\n    // get all inclusive marks on empty selection\n    if (from === to) {\n        doc\n            .resolve(from)\n            .marks()\n            .forEach(mark => {\n            const $pos = doc.resolve(from);\n            const range = getMarkRange($pos, mark.type);\n            if (!range) {\n                return;\n            }\n            marks.push({\n                mark,\n                ...range,\n            });\n        });\n    }\n    else {\n        doc.nodesBetween(from, to, (node, pos) => {\n            if (!node || (node === null || node === void 0 ? void 0 : node.nodeSize) === undefined) {\n                return;\n            }\n            marks.push(...node.marks.map(mark => ({\n                from: pos,\n                to: pos + node.nodeSize,\n                mark,\n            })));\n        });\n    }\n    return marks;\n}\n\n/**\n * Finds the first node of a given type or name in the current selection.\n * @param state The editor state.\n * @param typeOrName The node type or name.\n * @param pos The position to start searching from.\n * @param maxDepth The maximum depth to search.\n * @returns The node and the depth as an array.\n */\nconst getNodeAtPosition = (state, typeOrName, pos, maxDepth = 20) => {\n    const $pos = state.doc.resolve(pos);\n    let currentDepth = maxDepth;\n    let node = null;\n    while (currentDepth > 0 && node === null) {\n        const currentNode = $pos.node(currentDepth);\n        if ((currentNode === null || currentNode === void 0 ? void 0 : currentNode.type.name) === typeOrName) {\n            node = currentNode;\n        }\n        else {\n            currentDepth -= 1;\n        }\n    }\n    return [node, currentDepth];\n};\n\n/**\n * Return attributes of an extension that should be splitted by keepOnSplit flag\n * @param extensionAttributes Array of extension attributes\n * @param typeName The type of the extension\n * @param attributes The attributes of the extension\n * @returns The splitted attributes\n */\nfunction getSplittedAttributes(extensionAttributes, typeName, attributes) {\n    return Object.fromEntries(Object\n        .entries(attributes)\n        .filter(([name]) => {\n        const extensionAttribute = extensionAttributes.find(item => {\n            return item.type === typeName && item.name === name;\n        });\n        if (!extensionAttribute) {\n            return false;\n        }\n        return extensionAttribute.attribute.keepOnSplit;\n    }));\n}\n\nfunction isMarkActive(state, typeOrName, attributes = {}) {\n    const { empty, ranges } = state.selection;\n    const type = typeOrName ? getMarkType(typeOrName, state.schema) : null;\n    if (empty) {\n        return !!(state.storedMarks || state.selection.$from.marks())\n            .filter(mark => {\n            if (!type) {\n                return true;\n            }\n            return type.name === mark.type.name;\n        })\n            .find(mark => objectIncludes(mark.attrs, attributes, { strict: false }));\n    }\n    let selectionRange = 0;\n    const markRanges = [];\n    ranges.forEach(({ $from, $to }) => {\n        const from = $from.pos;\n        const to = $to.pos;\n        state.doc.nodesBetween(from, to, (node, pos) => {\n            if (!node.isText && !node.marks.length) {\n                return;\n            }\n            const relativeFrom = Math.max(from, pos);\n            const relativeTo = Math.min(to, pos + node.nodeSize);\n            const range = relativeTo - relativeFrom;\n            selectionRange += range;\n            markRanges.push(...node.marks.map(mark => ({\n                mark,\n                from: relativeFrom,\n                to: relativeTo,\n            })));\n        });\n    });\n    if (selectionRange === 0) {\n        return false;\n    }\n    // calculate range of matched mark\n    const matchedRange = markRanges\n        .filter(markRange => {\n        if (!type) {\n            return true;\n        }\n        return type.name === markRange.mark.type.name;\n    })\n        .filter(markRange => objectIncludes(markRange.mark.attrs, attributes, { strict: false }))\n        .reduce((sum, markRange) => sum + markRange.to - markRange.from, 0);\n    // calculate range of marks that excludes the searched mark\n    // for example `code` doesn’t allow any other marks\n    const excludedRange = markRanges\n        .filter(markRange => {\n        if (!type) {\n            return true;\n        }\n        return markRange.mark.type !== type && markRange.mark.type.excludes(type);\n    })\n        .reduce((sum, markRange) => sum + markRange.to - markRange.from, 0);\n    // we only include the result of `excludedRange`\n    // if there is a match at all\n    const range = matchedRange > 0 ? matchedRange + excludedRange : matchedRange;\n    return range >= selectionRange;\n}\n\nfunction isActive(state, name, attributes = {}) {\n    if (!name) {\n        return isNodeActive(state, null, attributes) || isMarkActive(state, null, attributes);\n    }\n    const schemaType = getSchemaTypeNameByName(name, state.schema);\n    if (schemaType === 'node') {\n        return isNodeActive(state, name, attributes);\n    }\n    if (schemaType === 'mark') {\n        return isMarkActive(state, name, attributes);\n    }\n    return false;\n}\n\nconst isAtEndOfNode = (state, nodeType) => {\n    const { $from, $to, $anchor } = state.selection;\n    if (nodeType) {\n        const parentNode = findParentNode(node => node.type.name === nodeType)(state.selection);\n        if (!parentNode) {\n            return false;\n        }\n        const $parentPos = state.doc.resolve(parentNode.pos + 1);\n        if ($anchor.pos + 1 === $parentPos.end()) {\n            return true;\n        }\n        return false;\n    }\n    if ($to.parentOffset < $to.parent.nodeSize - 2 || $from.pos !== $to.pos) {\n        return false;\n    }\n    return true;\n};\n\nconst isAtStartOfNode = (state) => {\n    const { $from, $to } = state.selection;\n    if ($from.parentOffset > 0 || $from.pos !== $to.pos) {\n        return false;\n    }\n    return true;\n};\n\nfunction isList(name, extensions) {\n    const { nodeExtensions } = splitExtensions(extensions);\n    const extension = nodeExtensions.find(item => item.name === name);\n    if (!extension) {\n        return false;\n    }\n    const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n    };\n    const group = callOrReturn(getExtensionField(extension, 'group', context));\n    if (typeof group !== 'string') {\n        return false;\n    }\n    return group.split(' ').includes('list');\n}\n\n/**\n * Returns true if the given prosemirror node is empty.\n */\nfunction isNodeEmpty(node, { checkChildren = true, ignoreWhitespace = false, } = {}) {\n    var _a;\n    if (ignoreWhitespace) {\n        if (node.type.name === 'hardBreak') {\n            // Hard breaks are considered empty\n            return true;\n        }\n        if (node.isText) {\n            return /^\\s*$/m.test((_a = node.text) !== null && _a !== void 0 ? _a : '');\n        }\n    }\n    if (node.isText) {\n        return !node.text;\n    }\n    if (node.isAtom || node.isLeaf) {\n        return false;\n    }\n    if (node.content.childCount === 0) {\n        return true;\n    }\n    if (checkChildren) {\n        let isContentEmpty = true;\n        node.content.forEach(childNode => {\n            if (isContentEmpty === false) {\n                // Exit early for perf\n                return;\n            }\n            if (!isNodeEmpty(childNode, { ignoreWhitespace, checkChildren })) {\n                isContentEmpty = false;\n            }\n        });\n        return isContentEmpty;\n    }\n    return false;\n}\n\nfunction isNodeSelection(value) {\n    return value instanceof _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection;\n}\n\nfunction posToDOMRect(view, from, to) {\n    const minPos = 0;\n    const maxPos = view.state.doc.content.size;\n    const resolvedFrom = minMax(from, minPos, maxPos);\n    const resolvedEnd = minMax(to, minPos, maxPos);\n    const start = view.coordsAtPos(resolvedFrom);\n    const end = view.coordsAtPos(resolvedEnd, -1);\n    const top = Math.min(start.top, end.top);\n    const bottom = Math.max(start.bottom, end.bottom);\n    const left = Math.min(start.left, end.left);\n    const right = Math.max(start.right, end.right);\n    const width = right - left;\n    const height = bottom - top;\n    const x = left;\n    const y = top;\n    const data = {\n        top,\n        bottom,\n        left,\n        right,\n        width,\n        height,\n        x,\n        y,\n    };\n    return {\n        ...data,\n        toJSON: () => data,\n    };\n}\n\n/**\n * The actual implementation of the rewriteUnknownContent function\n */\nfunction rewriteUnknownContentInner({ json, validMarks, validNodes, options, rewrittenContent = [], }) {\n    if (json.marks && Array.isArray(json.marks)) {\n        json.marks = json.marks.filter(mark => {\n            const name = typeof mark === 'string' ? mark : mark.type;\n            if (validMarks.has(name)) {\n                return true;\n            }\n            rewrittenContent.push({\n                original: JSON.parse(JSON.stringify(mark)),\n                unsupported: name,\n            });\n            // Just ignore any unknown marks\n            return false;\n        });\n    }\n    if (json.content && Array.isArray(json.content)) {\n        json.content = json.content\n            .map(value => rewriteUnknownContentInner({\n            json: value,\n            validMarks,\n            validNodes,\n            options,\n            rewrittenContent,\n        }).json)\n            .filter(a => a !== null && a !== undefined);\n    }\n    if (json.type && !validNodes.has(json.type)) {\n        rewrittenContent.push({\n            original: JSON.parse(JSON.stringify(json)),\n            unsupported: json.type,\n        });\n        if (json.content && Array.isArray(json.content) && ((options === null || options === void 0 ? void 0 : options.fallbackToParagraph) !== false)) {\n            // Just treat it like a paragraph and hope for the best\n            json.type = 'paragraph';\n            return {\n                json,\n                rewrittenContent,\n            };\n        }\n        // or just omit it entirely\n        return {\n            json: null,\n            rewrittenContent,\n        };\n    }\n    return { json, rewrittenContent };\n}\n/**\n * Rewrite unknown nodes and marks within JSON content\n * Allowing for user within the editor\n */\nfunction rewriteUnknownContent(\n/**\n * The JSON content to clean of unknown nodes and marks\n */\njson, \n/**\n * The schema to use for validation\n */\nschema, \n/**\n * Options for the cleaning process\n */\noptions) {\n    return rewriteUnknownContentInner({\n        json,\n        validNodes: new Set(Object.keys(schema.nodes)),\n        validMarks: new Set(Object.keys(schema.marks)),\n        options,\n    });\n}\n\nfunction canSetMark(state, tr, newMarkType) {\n    var _a;\n    const { selection } = tr;\n    let cursor = null;\n    if (isTextSelection(selection)) {\n        cursor = selection.$cursor;\n    }\n    if (cursor) {\n        const currentMarks = (_a = state.storedMarks) !== null && _a !== void 0 ? _a : cursor.marks();\n        // There can be no current marks that exclude the new mark\n        return (!!newMarkType.isInSet(currentMarks)\n            || !currentMarks.some(mark => mark.type.excludes(newMarkType)));\n    }\n    const { ranges } = selection;\n    return ranges.some(({ $from, $to }) => {\n        let someNodeSupportsMark = $from.depth === 0\n            ? state.doc.inlineContent && state.doc.type.allowsMarkType(newMarkType)\n            : false;\n        state.doc.nodesBetween($from.pos, $to.pos, (node, _pos, parent) => {\n            // If we already found a mark that we can enable, return false to bypass the remaining search\n            if (someNodeSupportsMark) {\n                return false;\n            }\n            if (node.isInline) {\n                const parentAllowsMarkType = !parent || parent.type.allowsMarkType(newMarkType);\n                const currentMarksAllowMarkType = !!newMarkType.isInSet(node.marks)\n                    || !node.marks.some(otherMark => otherMark.type.excludes(newMarkType));\n                someNodeSupportsMark = parentAllowsMarkType && currentMarksAllowMarkType;\n            }\n            return !someNodeSupportsMark;\n        });\n        return someNodeSupportsMark;\n    });\n}\nconst setMark = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\n    const { selection } = tr;\n    const { empty, ranges } = selection;\n    const type = getMarkType(typeOrName, state.schema);\n    if (dispatch) {\n        if (empty) {\n            const oldAttributes = getMarkAttributes(state, type);\n            tr.addStoredMark(type.create({\n                ...oldAttributes,\n                ...attributes,\n            }));\n        }\n        else {\n            ranges.forEach(range => {\n                const from = range.$from.pos;\n                const to = range.$to.pos;\n                state.doc.nodesBetween(from, to, (node, pos) => {\n                    const trimmedFrom = Math.max(pos, from);\n                    const trimmedTo = Math.min(pos + node.nodeSize, to);\n                    const someHasMark = node.marks.find(mark => mark.type === type);\n                    // if there is already a mark of this type\n                    // we know that we have to merge its attributes\n                    // otherwise we add a fresh new mark\n                    if (someHasMark) {\n                        node.marks.forEach(mark => {\n                            if (type === mark.type) {\n                                tr.addMark(trimmedFrom, trimmedTo, type.create({\n                                    ...mark.attrs,\n                                    ...attributes,\n                                }));\n                            }\n                        });\n                    }\n                    else {\n                        tr.addMark(trimmedFrom, trimmedTo, type.create(attributes));\n                    }\n                });\n            });\n        }\n    }\n    return canSetMark(state, tr, type);\n};\n\nconst setMeta = (key, value) => ({ tr }) => {\n    tr.setMeta(key, value);\n    return true;\n};\n\nconst setNode = (typeOrName, attributes = {}) => ({ state, dispatch, chain }) => {\n    const type = getNodeType(typeOrName, state.schema);\n    let attributesToCopy;\n    if (state.selection.$anchor.sameParent(state.selection.$head)) {\n        // only copy attributes if the selection is pointing to a node of the same type\n        attributesToCopy = state.selection.$anchor.parent.attrs;\n    }\n    // TODO: use a fallback like insertContent?\n    if (!type.isTextblock) {\n        console.warn('[tiptap warn]: Currently \"setNode()\" only supports text block nodes.');\n        return false;\n    }\n    return (chain()\n        // try to convert node to default node if needed\n        .command(({ commands }) => {\n        const canSetBlock = (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.setBlockType)(type, { ...attributesToCopy, ...attributes })(state);\n        if (canSetBlock) {\n            return true;\n        }\n        return commands.clearNodes();\n    })\n        .command(({ state: updatedState }) => {\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.setBlockType)(type, { ...attributesToCopy, ...attributes })(updatedState, dispatch);\n    })\n        .run());\n};\n\nconst setNodeSelection = position => ({ tr, dispatch }) => {\n    if (dispatch) {\n        const { doc } = tr;\n        const from = minMax(position, 0, doc.content.size);\n        const selection = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection.create(doc, from);\n        tr.setSelection(selection);\n    }\n    return true;\n};\n\nconst setTextSelection = position => ({ tr, dispatch }) => {\n    if (dispatch) {\n        const { doc } = tr;\n        const { from, to } = typeof position === 'number' ? { from: position, to: position } : position;\n        const minPos = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.atStart(doc).from;\n        const maxPos = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.atEnd(doc).to;\n        const resolvedFrom = minMax(from, minPos, maxPos);\n        const resolvedEnd = minMax(to, minPos, maxPos);\n        const selection = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(doc, resolvedFrom, resolvedEnd);\n        tr.setSelection(selection);\n    }\n    return true;\n};\n\nconst sinkListItem = typeOrName => ({ state, dispatch }) => {\n    const type = getNodeType(typeOrName, state.schema);\n    return (0,_tiptap_pm_schema_list__WEBPACK_IMPORTED_MODULE_6__.sinkListItem)(type)(state, dispatch);\n};\n\nfunction ensureMarks(state, splittableMarks) {\n    const marks = state.storedMarks || (state.selection.$to.parentOffset && state.selection.$from.marks());\n    if (marks) {\n        const filteredMarks = marks.filter(mark => splittableMarks === null || splittableMarks === void 0 ? void 0 : splittableMarks.includes(mark.type.name));\n        state.tr.ensureMarks(filteredMarks);\n    }\n}\nconst splitBlock = ({ keepMarks = true } = {}) => ({ tr, state, dispatch, editor, }) => {\n    const { selection, doc } = tr;\n    const { $from, $to } = selection;\n    const extensionAttributes = editor.extensionManager.attributes;\n    const newAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);\n    if (selection instanceof _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection && selection.node.isBlock) {\n        if (!$from.parentOffset || !(0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canSplit)(doc, $from.pos)) {\n            return false;\n        }\n        if (dispatch) {\n            if (keepMarks) {\n                ensureMarks(state, editor.extensionManager.splittableMarks);\n            }\n            tr.split($from.pos).scrollIntoView();\n        }\n        return true;\n    }\n    if (!$from.parent.isBlock) {\n        return false;\n    }\n    const atEnd = $to.parentOffset === $to.parent.content.size;\n    const deflt = $from.depth === 0\n        ? undefined\n        : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)));\n    let types = atEnd && deflt\n        ? [\n            {\n                type: deflt,\n                attrs: newAttributes,\n            },\n        ]\n        : undefined;\n    let can = (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canSplit)(tr.doc, tr.mapping.map($from.pos), 1, types);\n    if (!types\n        && !can\n        && (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canSplit)(tr.doc, tr.mapping.map($from.pos), 1, deflt ? [{ type: deflt }] : undefined)) {\n        can = true;\n        types = deflt\n            ? [\n                {\n                    type: deflt,\n                    attrs: newAttributes,\n                },\n            ]\n            : undefined;\n    }\n    if (dispatch) {\n        if (can) {\n            if (selection instanceof _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection) {\n                tr.deleteSelection();\n            }\n            tr.split(tr.mapping.map($from.pos), 1, types);\n            if (deflt && !atEnd && !$from.parentOffset && $from.parent.type !== deflt) {\n                const first = tr.mapping.map($from.before());\n                const $first = tr.doc.resolve(first);\n                if ($from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt)) {\n                    tr.setNodeMarkup(tr.mapping.map($from.before()), deflt);\n                }\n            }\n        }\n        if (keepMarks) {\n            ensureMarks(state, editor.extensionManager.splittableMarks);\n        }\n        tr.scrollIntoView();\n    }\n    return can;\n};\n\nconst splitListItem = (typeOrName, overrideAttrs = {}) => ({ tr, state, dispatch, editor, }) => {\n    var _a;\n    const type = getNodeType(typeOrName, state.schema);\n    const { $from, $to } = state.selection;\n    // @ts-ignore\n    // eslint-disable-next-line\n    const node = state.selection.node;\n    if ((node && node.isBlock) || $from.depth < 2 || !$from.sameParent($to)) {\n        return false;\n    }\n    const grandParent = $from.node(-1);\n    if (grandParent.type !== type) {\n        return false;\n    }\n    const extensionAttributes = editor.extensionManager.attributes;\n    if ($from.parent.content.size === 0 && $from.node(-1).childCount === $from.indexAfter(-1)) {\n        // In an empty block. If this is a nested list, the wrapping\n        // list item should be split. Otherwise, bail out and let next\n        // command handle lifting.\n        if ($from.depth === 2\n            || $from.node(-3).type !== type\n            || $from.index(-2) !== $from.node(-2).childCount - 1) {\n            return false;\n        }\n        if (dispatch) {\n            let wrap = _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Fragment.empty;\n            // eslint-disable-next-line\n            const depthBefore = $from.index(-1) ? 1 : $from.index(-2) ? 2 : 3;\n            // Build a fragment containing empty versions of the structure\n            // from the outer list item to the parent node of the cursor\n            for (let d = $from.depth - depthBefore; d >= $from.depth - 3; d -= 1) {\n                wrap = _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Fragment.from($from.node(d).copy(wrap));\n            }\n            // eslint-disable-next-line\n            const depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount ? 1 : $from.indexAfter(-2) < $from.node(-3).childCount ? 2 : 3;\n            // Add a second list item with an empty default start node\n            const newNextTypeAttributes = {\n                ...getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs),\n                ...overrideAttrs,\n            };\n            const nextType = ((_a = type.contentMatch.defaultType) === null || _a === void 0 ? void 0 : _a.createAndFill(newNextTypeAttributes)) || undefined;\n            wrap = wrap.append(_tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Fragment.from(type.createAndFill(null, nextType) || undefined));\n            const start = $from.before($from.depth - (depthBefore - 1));\n            tr.replace(start, $from.after(-depthAfter), new _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Slice(wrap, 4 - depthBefore, 0));\n            let sel = -1;\n            tr.doc.nodesBetween(start, tr.doc.content.size, (n, pos) => {\n                if (sel > -1) {\n                    return false;\n                }\n                if (n.isTextblock && n.content.size === 0) {\n                    sel = pos + 1;\n                }\n            });\n            if (sel > -1) {\n                tr.setSelection(_tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.near(tr.doc.resolve(sel)));\n            }\n            tr.scrollIntoView();\n        }\n        return true;\n    }\n    const nextType = $to.pos === $from.end() ? grandParent.contentMatchAt(0).defaultType : null;\n    const newTypeAttributes = {\n        ...getSplittedAttributes(extensionAttributes, grandParent.type.name, grandParent.attrs),\n        ...overrideAttrs,\n    };\n    const newNextTypeAttributes = {\n        ...getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs),\n        ...overrideAttrs,\n    };\n    tr.delete($from.pos, $to.pos);\n    const types = nextType\n        ? [\n            { type, attrs: newTypeAttributes },\n            { type: nextType, attrs: newNextTypeAttributes },\n        ]\n        : [{ type, attrs: newTypeAttributes }];\n    if (!(0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canSplit)(tr.doc, $from.pos, 2)) {\n        return false;\n    }\n    if (dispatch) {\n        const { selection, storedMarks } = state;\n        const { splittableMarks } = editor.extensionManager;\n        const marks = storedMarks || (selection.$to.parentOffset && selection.$from.marks());\n        tr.split($from.pos, 2, types).scrollIntoView();\n        if (!marks || !dispatch) {\n            return true;\n        }\n        const filteredMarks = marks.filter(mark => splittableMarks.includes(mark.type.name));\n        tr.ensureMarks(filteredMarks);\n    }\n    return true;\n};\n\nconst joinListBackwards = (tr, listType) => {\n    const list = findParentNode(node => node.type === listType)(tr.selection);\n    if (!list) {\n        return true;\n    }\n    const before = tr.doc.resolve(Math.max(0, list.pos - 1)).before(list.depth);\n    if (before === undefined) {\n        return true;\n    }\n    const nodeBefore = tr.doc.nodeAt(before);\n    const canJoinBackwards = list.node.type === (nodeBefore === null || nodeBefore === void 0 ? void 0 : nodeBefore.type) && (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canJoin)(tr.doc, list.pos);\n    if (!canJoinBackwards) {\n        return true;\n    }\n    tr.join(list.pos);\n    return true;\n};\nconst joinListForwards = (tr, listType) => {\n    const list = findParentNode(node => node.type === listType)(tr.selection);\n    if (!list) {\n        return true;\n    }\n    const after = tr.doc.resolve(list.start).after(list.depth);\n    if (after === undefined) {\n        return true;\n    }\n    const nodeAfter = tr.doc.nodeAt(after);\n    const canJoinForwards = list.node.type === (nodeAfter === null || nodeAfter === void 0 ? void 0 : nodeAfter.type) && (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canJoin)(tr.doc, after);\n    if (!canJoinForwards) {\n        return true;\n    }\n    tr.join(after);\n    return true;\n};\nconst toggleList = (listTypeOrName, itemTypeOrName, keepMarks, attributes = {}) => ({ editor, tr, state, dispatch, chain, commands, can, }) => {\n    const { extensions, splittableMarks } = editor.extensionManager;\n    const listType = getNodeType(listTypeOrName, state.schema);\n    const itemType = getNodeType(itemTypeOrName, state.schema);\n    const { selection, storedMarks } = state;\n    const { $from, $to } = selection;\n    const range = $from.blockRange($to);\n    const marks = storedMarks || (selection.$to.parentOffset && selection.$from.marks());\n    if (!range) {\n        return false;\n    }\n    const parentList = findParentNode(node => isList(node.type.name, extensions))(selection);\n    if (range.depth >= 1 && parentList && range.depth - parentList.depth <= 1) {\n        // remove list\n        if (parentList.node.type === listType) {\n            return commands.liftListItem(itemType);\n        }\n        // change list type\n        if (isList(parentList.node.type.name, extensions)\n            && listType.validContent(parentList.node.content)\n            && dispatch) {\n            return chain()\n                .command(() => {\n                tr.setNodeMarkup(parentList.pos, listType);\n                return true;\n            })\n                .command(() => joinListBackwards(tr, listType))\n                .command(() => joinListForwards(tr, listType))\n                .run();\n        }\n    }\n    if (!keepMarks || !marks || !dispatch) {\n        return chain()\n            // try to convert node to default node if needed\n            .command(() => {\n            const canWrapInList = can().wrapInList(listType, attributes);\n            if (canWrapInList) {\n                return true;\n            }\n            return commands.clearNodes();\n        })\n            .wrapInList(listType, attributes)\n            .command(() => joinListBackwards(tr, listType))\n            .command(() => joinListForwards(tr, listType))\n            .run();\n    }\n    return (chain()\n        // try to convert node to default node if needed\n        .command(() => {\n        const canWrapInList = can().wrapInList(listType, attributes);\n        const filteredMarks = marks.filter(mark => splittableMarks.includes(mark.type.name));\n        tr.ensureMarks(filteredMarks);\n        if (canWrapInList) {\n            return true;\n        }\n        return commands.clearNodes();\n    })\n        .wrapInList(listType, attributes)\n        .command(() => joinListBackwards(tr, listType))\n        .command(() => joinListForwards(tr, listType))\n        .run());\n};\n\nconst toggleMark = (typeOrName, attributes = {}, options = {}) => ({ state, commands }) => {\n    const { extendEmptyMarkRange = false } = options;\n    const type = getMarkType(typeOrName, state.schema);\n    const isActive = isMarkActive(state, type, attributes);\n    if (isActive) {\n        return commands.unsetMark(type, { extendEmptyMarkRange });\n    }\n    return commands.setMark(type, attributes);\n};\n\nconst toggleNode = (typeOrName, toggleTypeOrName, attributes = {}) => ({ state, commands }) => {\n    const type = getNodeType(typeOrName, state.schema);\n    const toggleType = getNodeType(toggleTypeOrName, state.schema);\n    const isActive = isNodeActive(state, type, attributes);\n    let attributesToCopy;\n    if (state.selection.$anchor.sameParent(state.selection.$head)) {\n        // only copy attributes if the selection is pointing to a node of the same type\n        attributesToCopy = state.selection.$anchor.parent.attrs;\n    }\n    if (isActive) {\n        return commands.setNode(toggleType, attributesToCopy);\n    }\n    // If the node is not active, we want to set the new node type with the given attributes\n    // Copying over the attributes from the current node if the selection is pointing to a node of the same type\n    return commands.setNode(type, { ...attributesToCopy, ...attributes });\n};\n\nconst toggleWrap = (typeOrName, attributes = {}) => ({ state, commands }) => {\n    const type = getNodeType(typeOrName, state.schema);\n    const isActive = isNodeActive(state, type, attributes);\n    if (isActive) {\n        return commands.lift(type);\n    }\n    return commands.wrapIn(type, attributes);\n};\n\nconst undoInputRule = () => ({ state, dispatch }) => {\n    const plugins = state.plugins;\n    for (let i = 0; i < plugins.length; i += 1) {\n        const plugin = plugins[i];\n        let undoable;\n        // @ts-ignore\n        // eslint-disable-next-line\n        if (plugin.spec.isInputRules && (undoable = plugin.getState(state))) {\n            if (dispatch) {\n                const tr = state.tr;\n                const toUndo = undoable.transform;\n                for (let j = toUndo.steps.length - 1; j >= 0; j -= 1) {\n                    tr.step(toUndo.steps[j].invert(toUndo.docs[j]));\n                }\n                if (undoable.text) {\n                    const marks = tr.doc.resolve(undoable.from).marks();\n                    tr.replaceWith(undoable.from, undoable.to, state.schema.text(undoable.text, marks));\n                }\n                else {\n                    tr.delete(undoable.from, undoable.to);\n                }\n            }\n            return true;\n        }\n    }\n    return false;\n};\n\nconst unsetAllMarks = () => ({ tr, dispatch }) => {\n    const { selection } = tr;\n    const { empty, ranges } = selection;\n    if (empty) {\n        return true;\n    }\n    if (dispatch) {\n        ranges.forEach(range => {\n            tr.removeMark(range.$from.pos, range.$to.pos);\n        });\n    }\n    return true;\n};\n\nconst unsetMark = (typeOrName, options = {}) => ({ tr, state, dispatch }) => {\n    var _a;\n    const { extendEmptyMarkRange = false } = options;\n    const { selection } = tr;\n    const type = getMarkType(typeOrName, state.schema);\n    const { $from, empty, ranges } = selection;\n    if (!dispatch) {\n        return true;\n    }\n    if (empty && extendEmptyMarkRange) {\n        let { from, to } = selection;\n        const attrs = (_a = $from.marks().find(mark => mark.type === type)) === null || _a === void 0 ? void 0 : _a.attrs;\n        const range = getMarkRange($from, type, attrs);\n        if (range) {\n            from = range.from;\n            to = range.to;\n        }\n        tr.removeMark(from, to, type);\n    }\n    else {\n        ranges.forEach(range => {\n            tr.removeMark(range.$from.pos, range.$to.pos, type);\n        });\n    }\n    tr.removeStoredMark(type);\n    return true;\n};\n\nconst updateAttributes = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\n    let nodeType = null;\n    let markType = null;\n    const schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string' ? typeOrName : typeOrName.name, state.schema);\n    if (!schemaType) {\n        return false;\n    }\n    if (schemaType === 'node') {\n        nodeType = getNodeType(typeOrName, state.schema);\n    }\n    if (schemaType === 'mark') {\n        markType = getMarkType(typeOrName, state.schema);\n    }\n    if (dispatch) {\n        tr.selection.ranges.forEach((range) => {\n            const from = range.$from.pos;\n            const to = range.$to.pos;\n            let lastPos;\n            let lastNode;\n            let trimmedFrom;\n            let trimmedTo;\n            if (tr.selection.empty) {\n                state.doc.nodesBetween(from, to, (node, pos) => {\n                    if (nodeType && nodeType === node.type) {\n                        trimmedFrom = Math.max(pos, from);\n                        trimmedTo = Math.min(pos + node.nodeSize, to);\n                        lastPos = pos;\n                        lastNode = node;\n                    }\n                });\n            }\n            else {\n                state.doc.nodesBetween(from, to, (node, pos) => {\n                    if (pos < from && nodeType && nodeType === node.type) {\n                        trimmedFrom = Math.max(pos, from);\n                        trimmedTo = Math.min(pos + node.nodeSize, to);\n                        lastPos = pos;\n                        lastNode = node;\n                    }\n                    if (pos >= from && pos <= to) {\n                        if (nodeType && nodeType === node.type) {\n                            tr.setNodeMarkup(pos, undefined, {\n                                ...node.attrs,\n                                ...attributes,\n                            });\n                        }\n                        if (markType && node.marks.length) {\n                            node.marks.forEach((mark) => {\n                                if (markType === mark.type) {\n                                    const trimmedFrom2 = Math.max(pos, from);\n                                    const trimmedTo2 = Math.min(pos + node.nodeSize, to);\n                                    tr.addMark(trimmedFrom2, trimmedTo2, markType.create({\n                                        ...mark.attrs,\n                                        ...attributes,\n                                    }));\n                                }\n                            });\n                        }\n                    }\n                });\n            }\n            if (lastNode) {\n                if (lastPos !== undefined) {\n                    tr.setNodeMarkup(lastPos, undefined, {\n                        ...lastNode.attrs,\n                        ...attributes,\n                    });\n                }\n                if (markType && lastNode.marks.length) {\n                    lastNode.marks.forEach((mark) => {\n                        if (markType === mark.type) {\n                            tr.addMark(trimmedFrom, trimmedTo, markType.create({\n                                ...mark.attrs,\n                                ...attributes,\n                            }));\n                        }\n                    });\n                }\n            }\n        });\n    }\n    return true;\n};\n\nconst wrapIn = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n    const type = getNodeType(typeOrName, state.schema);\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.wrapIn)(type, attributes)(state, dispatch);\n};\n\nconst wrapInList = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n    const type = getNodeType(typeOrName, state.schema);\n    return (0,_tiptap_pm_schema_list__WEBPACK_IMPORTED_MODULE_6__.wrapInList)(type, attributes)(state, dispatch);\n};\n\nvar commands = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  blur: blur,\n  clearContent: clearContent,\n  clearNodes: clearNodes,\n  command: command,\n  createParagraphNear: createParagraphNear,\n  cut: cut,\n  deleteCurrentNode: deleteCurrentNode,\n  deleteNode: deleteNode,\n  deleteRange: deleteRange,\n  deleteSelection: deleteSelection,\n  enter: enter,\n  exitCode: exitCode,\n  extendMarkRange: extendMarkRange,\n  first: first,\n  focus: focus,\n  forEach: forEach,\n  insertContent: insertContent,\n  insertContentAt: insertContentAt,\n  joinBackward: joinBackward,\n  joinDown: joinDown,\n  joinForward: joinForward,\n  joinItemBackward: joinItemBackward,\n  joinItemForward: joinItemForward,\n  joinTextblockBackward: joinTextblockBackward,\n  joinTextblockForward: joinTextblockForward,\n  joinUp: joinUp,\n  keyboardShortcut: keyboardShortcut,\n  lift: lift,\n  liftEmptyBlock: liftEmptyBlock,\n  liftListItem: liftListItem,\n  newlineInCode: newlineInCode,\n  resetAttributes: resetAttributes,\n  scrollIntoView: scrollIntoView,\n  selectAll: selectAll,\n  selectNodeBackward: selectNodeBackward,\n  selectNodeForward: selectNodeForward,\n  selectParentNode: selectParentNode,\n  selectTextblockEnd: selectTextblockEnd,\n  selectTextblockStart: selectTextblockStart,\n  setContent: setContent,\n  setMark: setMark,\n  setMeta: setMeta,\n  setNode: setNode,\n  setNodeSelection: setNodeSelection,\n  setTextSelection: setTextSelection,\n  sinkListItem: sinkListItem,\n  splitBlock: splitBlock,\n  splitListItem: splitListItem,\n  toggleList: toggleList,\n  toggleMark: toggleMark,\n  toggleNode: toggleNode,\n  toggleWrap: toggleWrap,\n  undoInputRule: undoInputRule,\n  unsetAllMarks: unsetAllMarks,\n  unsetMark: unsetMark,\n  updateAttributes: updateAttributes,\n  wrapIn: wrapIn,\n  wrapInList: wrapInList\n});\n\nconst Commands = Extension.create({\n    name: 'commands',\n    addCommands() {\n        return {\n            ...commands,\n        };\n    },\n});\n\nconst Drop = Extension.create({\n    name: 'drop',\n    addProseMirrorPlugins() {\n        return [\n            new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n                key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey('tiptapDrop'),\n                props: {\n                    handleDrop: (_, e, slice, moved) => {\n                        this.editor.emit('drop', {\n                            editor: this.editor,\n                            event: e,\n                            slice,\n                            moved,\n                        });\n                    },\n                },\n            }),\n        ];\n    },\n});\n\nconst Editable = Extension.create({\n    name: 'editable',\n    addProseMirrorPlugins() {\n        return [\n            new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n                key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey('editable'),\n                props: {\n                    editable: () => this.editor.options.editable,\n                },\n            }),\n        ];\n    },\n});\n\nconst focusEventsPluginKey = new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey('focusEvents');\nconst FocusEvents = Extension.create({\n    name: 'focusEvents',\n    addProseMirrorPlugins() {\n        const { editor } = this;\n        return [\n            new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n                key: focusEventsPluginKey,\n                props: {\n                    handleDOMEvents: {\n                        focus: (view, event) => {\n                            editor.isFocused = true;\n                            const transaction = editor.state.tr\n                                .setMeta('focus', { event })\n                                .setMeta('addToHistory', false);\n                            view.dispatch(transaction);\n                            return false;\n                        },\n                        blur: (view, event) => {\n                            editor.isFocused = false;\n                            const transaction = editor.state.tr\n                                .setMeta('blur', { event })\n                                .setMeta('addToHistory', false);\n                            view.dispatch(transaction);\n                            return false;\n                        },\n                    },\n                },\n            }),\n        ];\n    },\n});\n\nconst Keymap = Extension.create({\n    name: 'keymap',\n    addKeyboardShortcuts() {\n        const handleBackspace = () => this.editor.commands.first(({ commands }) => [\n            () => commands.undoInputRule(),\n            // maybe convert first text block node to default node\n            () => commands.command(({ tr }) => {\n                const { selection, doc } = tr;\n                const { empty, $anchor } = selection;\n                const { pos, parent } = $anchor;\n                const $parentPos = $anchor.parent.isTextblock && pos > 0 ? tr.doc.resolve(pos - 1) : $anchor;\n                const parentIsIsolating = $parentPos.parent.type.spec.isolating;\n                const parentPos = $anchor.pos - $anchor.parentOffset;\n                const isAtStart = (parentIsIsolating && $parentPos.parent.childCount === 1)\n                    ? parentPos === $anchor.pos\n                    : _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Selection.atStart(doc).from === pos;\n                if (!empty\n                    || !parent.type.isTextblock\n                    || parent.textContent.length\n                    || !isAtStart\n                    || (isAtStart && $anchor.parent.type.name === 'paragraph') // prevent clearNodes when no nodes to clear, otherwise history stack is appended\n                ) {\n                    return false;\n                }\n                return commands.clearNodes();\n            }),\n            () => commands.deleteSelection(),\n            () => commands.joinBackward(),\n            () => commands.selectNodeBackward(),\n        ]);\n        const handleDelete = () => this.editor.commands.first(({ commands }) => [\n            () => commands.deleteSelection(),\n            () => commands.deleteCurrentNode(),\n            () => commands.joinForward(),\n            () => commands.selectNodeForward(),\n        ]);\n        const handleEnter = () => this.editor.commands.first(({ commands }) => [\n            () => commands.newlineInCode(),\n            () => commands.createParagraphNear(),\n            () => commands.liftEmptyBlock(),\n            () => commands.splitBlock(),\n        ]);\n        const baseKeymap = {\n            Enter: handleEnter,\n            'Mod-Enter': () => this.editor.commands.exitCode(),\n            Backspace: handleBackspace,\n            'Mod-Backspace': handleBackspace,\n            'Shift-Backspace': handleBackspace,\n            Delete: handleDelete,\n            'Mod-Delete': handleDelete,\n            'Mod-a': () => this.editor.commands.selectAll(),\n        };\n        const pcKeymap = {\n            ...baseKeymap,\n        };\n        const macKeymap = {\n            ...baseKeymap,\n            'Ctrl-h': handleBackspace,\n            'Alt-Backspace': handleBackspace,\n            'Ctrl-d': handleDelete,\n            'Ctrl-Alt-Backspace': handleDelete,\n            'Alt-Delete': handleDelete,\n            'Alt-d': handleDelete,\n            'Ctrl-a': () => this.editor.commands.selectTextblockStart(),\n            'Ctrl-e': () => this.editor.commands.selectTextblockEnd(),\n        };\n        if (isiOS() || isMacOS()) {\n            return macKeymap;\n        }\n        return pcKeymap;\n    },\n    addProseMirrorPlugins() {\n        return [\n            // With this plugin we check if the whole document was selected and deleted.\n            // In this case we will additionally call `clearNodes()` to convert e.g. a heading\n            // to a paragraph if necessary.\n            // This is an alternative to ProseMirror's `AllSelection`, which doesn’t work well\n            // with many other commands.\n            new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n                key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey('clearDocument'),\n                appendTransaction: (transactions, oldState, newState) => {\n                    if (transactions.some(tr => tr.getMeta('composition'))) {\n                        return;\n                    }\n                    const docChanges = transactions.some(transaction => transaction.docChanged)\n                        && !oldState.doc.eq(newState.doc);\n                    const ignoreTr = transactions.some(transaction => transaction.getMeta('preventClearDocument'));\n                    if (!docChanges || ignoreTr) {\n                        return;\n                    }\n                    const { empty, from, to } = oldState.selection;\n                    const allFrom = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Selection.atStart(oldState.doc).from;\n                    const allEnd = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Selection.atEnd(oldState.doc).to;\n                    const allWasSelected = from === allFrom && to === allEnd;\n                    if (empty || !allWasSelected) {\n                        return;\n                    }\n                    const isEmpty = isNodeEmpty(newState.doc);\n                    if (!isEmpty) {\n                        return;\n                    }\n                    const tr = newState.tr;\n                    const state = createChainableState({\n                        state: newState,\n                        transaction: tr,\n                    });\n                    const { commands } = new CommandManager({\n                        editor: this.editor,\n                        state,\n                    });\n                    commands.clearNodes();\n                    if (!tr.steps.length) {\n                        return;\n                    }\n                    return tr;\n                },\n            }),\n        ];\n    },\n});\n\nconst Paste = Extension.create({\n    name: 'paste',\n    addProseMirrorPlugins() {\n        return [\n            new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n                key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey('tiptapPaste'),\n                props: {\n                    handlePaste: (_view, e, slice) => {\n                        this.editor.emit('paste', {\n                            editor: this.editor,\n                            event: e,\n                            slice,\n                        });\n                    },\n                },\n            }),\n        ];\n    },\n});\n\nconst Tabindex = Extension.create({\n    name: 'tabindex',\n    addProseMirrorPlugins() {\n        return [\n            new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n                key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey('tabindex'),\n                props: {\n                    attributes: () => (this.editor.isEditable ? { tabindex: '0' } : {}),\n                },\n            }),\n        ];\n    },\n});\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ClipboardTextSerializer: ClipboardTextSerializer,\n  Commands: Commands,\n  Drop: Drop,\n  Editable: Editable,\n  FocusEvents: FocusEvents,\n  Keymap: Keymap,\n  Paste: Paste,\n  Tabindex: Tabindex,\n  focusEventsPluginKey: focusEventsPluginKey\n});\n\nclass NodePos {\n    get name() {\n        return this.node.type.name;\n    }\n    constructor(pos, editor, isBlock = false, node = null) {\n        this.currentNode = null;\n        this.actualDepth = null;\n        this.isBlock = isBlock;\n        this.resolvedPos = pos;\n        this.editor = editor;\n        this.currentNode = node;\n    }\n    get node() {\n        return this.currentNode || this.resolvedPos.node();\n    }\n    get element() {\n        return this.editor.view.domAtPos(this.pos).node;\n    }\n    get depth() {\n        var _a;\n        return (_a = this.actualDepth) !== null && _a !== void 0 ? _a : this.resolvedPos.depth;\n    }\n    get pos() {\n        return this.resolvedPos.pos;\n    }\n    get content() {\n        return this.node.content;\n    }\n    set content(content) {\n        let from = this.from;\n        let to = this.to;\n        if (this.isBlock) {\n            if (this.content.size === 0) {\n                console.error(`You can’t set content on a block node. Tried to set content on ${this.name} at ${this.pos}`);\n                return;\n            }\n            from = this.from + 1;\n            to = this.to - 1;\n        }\n        this.editor.commands.insertContentAt({ from, to }, content);\n    }\n    get attributes() {\n        return this.node.attrs;\n    }\n    get textContent() {\n        return this.node.textContent;\n    }\n    get size() {\n        return this.node.nodeSize;\n    }\n    get from() {\n        if (this.isBlock) {\n            return this.pos;\n        }\n        return this.resolvedPos.start(this.resolvedPos.depth);\n    }\n    get range() {\n        return {\n            from: this.from,\n            to: this.to,\n        };\n    }\n    get to() {\n        if (this.isBlock) {\n            return this.pos + this.size;\n        }\n        return this.resolvedPos.end(this.resolvedPos.depth) + (this.node.isText ? 0 : 1);\n    }\n    get parent() {\n        if (this.depth === 0) {\n            return null;\n        }\n        const parentPos = this.resolvedPos.start(this.resolvedPos.depth - 1);\n        const $pos = this.resolvedPos.doc.resolve(parentPos);\n        return new NodePos($pos, this.editor);\n    }\n    get before() {\n        let $pos = this.resolvedPos.doc.resolve(this.from - (this.isBlock ? 1 : 2));\n        if ($pos.depth !== this.depth) {\n            $pos = this.resolvedPos.doc.resolve(this.from - 3);\n        }\n        return new NodePos($pos, this.editor);\n    }\n    get after() {\n        let $pos = this.resolvedPos.doc.resolve(this.to + (this.isBlock ? 2 : 1));\n        if ($pos.depth !== this.depth) {\n            $pos = this.resolvedPos.doc.resolve(this.to + 3);\n        }\n        return new NodePos($pos, this.editor);\n    }\n    get children() {\n        const children = [];\n        this.node.content.forEach((node, offset) => {\n            const isBlock = node.isBlock && !node.isTextblock;\n            const isNonTextAtom = node.isAtom && !node.isText;\n            const targetPos = this.pos + offset + (isNonTextAtom ? 0 : 1);\n            const $pos = this.resolvedPos.doc.resolve(targetPos);\n            if (!isBlock && $pos.depth <= this.depth) {\n                return;\n            }\n            const childNodePos = new NodePos($pos, this.editor, isBlock, isBlock ? node : null);\n            if (isBlock) {\n                childNodePos.actualDepth = this.depth + 1;\n            }\n            children.push(new NodePos($pos, this.editor, isBlock, isBlock ? node : null));\n        });\n        return children;\n    }\n    get firstChild() {\n        return this.children[0] || null;\n    }\n    get lastChild() {\n        const children = this.children;\n        return children[children.length - 1] || null;\n    }\n    closest(selector, attributes = {}) {\n        let node = null;\n        let currentNode = this.parent;\n        while (currentNode && !node) {\n            if (currentNode.node.type.name === selector) {\n                if (Object.keys(attributes).length > 0) {\n                    const nodeAttributes = currentNode.node.attrs;\n                    const attrKeys = Object.keys(attributes);\n                    for (let index = 0; index < attrKeys.length; index += 1) {\n                        const key = attrKeys[index];\n                        if (nodeAttributes[key] !== attributes[key]) {\n                            break;\n                        }\n                    }\n                }\n                else {\n                    node = currentNode;\n                }\n            }\n            currentNode = currentNode.parent;\n        }\n        return node;\n    }\n    querySelector(selector, attributes = {}) {\n        return this.querySelectorAll(selector, attributes, true)[0] || null;\n    }\n    querySelectorAll(selector, attributes = {}, firstItemOnly = false) {\n        let nodes = [];\n        if (!this.children || this.children.length === 0) {\n            return nodes;\n        }\n        const attrKeys = Object.keys(attributes);\n        /**\n         * Finds all children recursively that match the selector and attributes\n         * If firstItemOnly is true, it will return the first item found\n         */\n        this.children.forEach(childPos => {\n            // If we already found a node and we only want the first item, we dont need to keep going\n            if (firstItemOnly && nodes.length > 0) {\n                return;\n            }\n            if (childPos.node.type.name === selector) {\n                const doesAllAttributesMatch = attrKeys.every(key => attributes[key] === childPos.node.attrs[key]);\n                if (doesAllAttributesMatch) {\n                    nodes.push(childPos);\n                }\n            }\n            // If we already found a node and we only want the first item, we can stop here and skip the recursion\n            if (firstItemOnly && nodes.length > 0) {\n                return;\n            }\n            nodes = nodes.concat(childPos.querySelectorAll(selector, attributes, firstItemOnly));\n        });\n        return nodes;\n    }\n    setAttribute(attributes) {\n        const { tr } = this.editor.state;\n        tr.setNodeMarkup(this.from, undefined, {\n            ...this.node.attrs,\n            ...attributes,\n        });\n        this.editor.view.dispatch(tr);\n    }\n}\n\nconst style = `.ProseMirror {\n  position: relative;\n}\n\n.ProseMirror {\n  word-wrap: break-word;\n  white-space: pre-wrap;\n  white-space: break-spaces;\n  -webkit-font-variant-ligatures: none;\n  font-variant-ligatures: none;\n  font-feature-settings: \"liga\" 0; /* the above doesn't seem to work in Edge */\n}\n\n.ProseMirror [contenteditable=\"false\"] {\n  white-space: normal;\n}\n\n.ProseMirror [contenteditable=\"false\"] [contenteditable=\"true\"] {\n  white-space: pre-wrap;\n}\n\n.ProseMirror pre {\n  white-space: pre-wrap;\n}\n\nimg.ProseMirror-separator {\n  display: inline !important;\n  border: none !important;\n  margin: 0 !important;\n  width: 0 !important;\n  height: 0 !important;\n}\n\n.ProseMirror-gapcursor {\n  display: none;\n  pointer-events: none;\n  position: absolute;\n  margin: 0;\n}\n\n.ProseMirror-gapcursor:after {\n  content: \"\";\n  display: block;\n  position: absolute;\n  top: -2px;\n  width: 20px;\n  border-top: 1px solid black;\n  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;\n}\n\n@keyframes ProseMirror-cursor-blink {\n  to {\n    visibility: hidden;\n  }\n}\n\n.ProseMirror-hideselection *::selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection *::-moz-selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection * {\n  caret-color: transparent;\n}\n\n.ProseMirror-focused .ProseMirror-gapcursor {\n  display: block;\n}\n\n.tippy-box[data-animation=fade][data-state=hidden] {\n  opacity: 0\n}`;\n\nfunction createStyleTag(style, nonce, suffix) {\n    const tiptapStyleTag = document.querySelector(`style[data-tiptap-style${suffix ? `-${suffix}` : ''}]`);\n    if (tiptapStyleTag !== null) {\n        return tiptapStyleTag;\n    }\n    const styleNode = document.createElement('style');\n    if (nonce) {\n        styleNode.setAttribute('nonce', nonce);\n    }\n    styleNode.setAttribute(`data-tiptap-style${suffix ? `-${suffix}` : ''}`, '');\n    styleNode.innerHTML = style;\n    document.getElementsByTagName('head')[0].appendChild(styleNode);\n    return styleNode;\n}\n\nclass Editor extends EventEmitter {\n    constructor(options = {}) {\n        super();\n        this.isFocused = false;\n        /**\n         * The editor is considered initialized after the `create` event has been emitted.\n         */\n        this.isInitialized = false;\n        this.extensionStorage = {};\n        this.options = {\n            element: document.createElement('div'),\n            content: '',\n            injectCSS: true,\n            injectNonce: undefined,\n            extensions: [],\n            autofocus: false,\n            editable: true,\n            editorProps: {},\n            parseOptions: {},\n            coreExtensionOptions: {},\n            enableInputRules: true,\n            enablePasteRules: true,\n            enableCoreExtensions: true,\n            enableContentCheck: false,\n            onBeforeCreate: () => null,\n            onCreate: () => null,\n            onUpdate: () => null,\n            onSelectionUpdate: () => null,\n            onTransaction: () => null,\n            onFocus: () => null,\n            onBlur: () => null,\n            onDestroy: () => null,\n            onContentError: ({ error }) => { throw error; },\n            onPaste: () => null,\n            onDrop: () => null,\n        };\n        this.isCapturingTransaction = false;\n        this.capturedTransaction = null;\n        this.setOptions(options);\n        this.createExtensionManager();\n        this.createCommandManager();\n        this.createSchema();\n        this.on('beforeCreate', this.options.onBeforeCreate);\n        this.emit('beforeCreate', { editor: this });\n        this.on('contentError', this.options.onContentError);\n        this.createView();\n        this.injectCSS();\n        this.on('create', this.options.onCreate);\n        this.on('update', this.options.onUpdate);\n        this.on('selectionUpdate', this.options.onSelectionUpdate);\n        this.on('transaction', this.options.onTransaction);\n        this.on('focus', this.options.onFocus);\n        this.on('blur', this.options.onBlur);\n        this.on('destroy', this.options.onDestroy);\n        this.on('drop', ({ event, slice, moved }) => this.options.onDrop(event, slice, moved));\n        this.on('paste', ({ event, slice }) => this.options.onPaste(event, slice));\n        window.setTimeout(() => {\n            if (this.isDestroyed) {\n                return;\n            }\n            this.commands.focus(this.options.autofocus);\n            this.emit('create', { editor: this });\n            this.isInitialized = true;\n        }, 0);\n    }\n    /**\n     * Returns the editor storage.\n     */\n    get storage() {\n        return this.extensionStorage;\n    }\n    /**\n     * An object of all registered commands.\n     */\n    get commands() {\n        return this.commandManager.commands;\n    }\n    /**\n     * Create a command chain to call multiple commands at once.\n     */\n    chain() {\n        return this.commandManager.chain();\n    }\n    /**\n     * Check if a command or a command chain can be executed. Without executing it.\n     */\n    can() {\n        return this.commandManager.can();\n    }\n    /**\n     * Inject CSS styles.\n     */\n    injectCSS() {\n        if (this.options.injectCSS && document) {\n            this.css = createStyleTag(style, this.options.injectNonce);\n        }\n    }\n    /**\n     * Update editor options.\n     *\n     * @param options A list of options\n     */\n    setOptions(options = {}) {\n        this.options = {\n            ...this.options,\n            ...options,\n        };\n        if (!this.view || !this.state || this.isDestroyed) {\n            return;\n        }\n        if (this.options.editorProps) {\n            this.view.setProps(this.options.editorProps);\n        }\n        this.view.updateState(this.state);\n    }\n    /**\n     * Update editable state of the editor.\n     */\n    setEditable(editable, emitUpdate = true) {\n        this.setOptions({ editable });\n        if (emitUpdate) {\n            this.emit('update', { editor: this, transaction: this.state.tr });\n        }\n    }\n    /**\n     * Returns whether the editor is editable.\n     */\n    get isEditable() {\n        // since plugins are applied after creating the view\n        // `editable` is always `true` for one tick.\n        // that’s why we also have to check for `options.editable`\n        return this.options.editable && this.view && this.view.editable;\n    }\n    /**\n     * Returns the editor state.\n     */\n    get state() {\n        return this.view.state;\n    }\n    /**\n     * Register a ProseMirror plugin.\n     *\n     * @param plugin A ProseMirror plugin\n     * @param handlePlugins Control how to merge the plugin into the existing plugins.\n     * @returns The new editor state\n     */\n    registerPlugin(plugin, handlePlugins) {\n        const plugins = isFunction(handlePlugins)\n            ? handlePlugins(plugin, [...this.state.plugins])\n            : [...this.state.plugins, plugin];\n        const state = this.state.reconfigure({ plugins });\n        this.view.updateState(state);\n        return state;\n    }\n    /**\n     * Unregister a ProseMirror plugin.\n     *\n     * @param nameOrPluginKeyToRemove The plugins name\n     * @returns The new editor state or undefined if the editor is destroyed\n     */\n    unregisterPlugin(nameOrPluginKeyToRemove) {\n        if (this.isDestroyed) {\n            return undefined;\n        }\n        const prevPlugins = this.state.plugins;\n        let plugins = prevPlugins;\n        [].concat(nameOrPluginKeyToRemove).forEach(nameOrPluginKey => {\n            // @ts-ignore\n            const name = typeof nameOrPluginKey === 'string' ? `${nameOrPluginKey}$` : nameOrPluginKey.key;\n            // @ts-ignore\n            plugins = prevPlugins.filter(plugin => !plugin.key.startsWith(name));\n        });\n        if (prevPlugins.length === plugins.length) {\n            // No plugin was removed, so we don’t need to update the state\n            return undefined;\n        }\n        const state = this.state.reconfigure({\n            plugins,\n        });\n        this.view.updateState(state);\n        return state;\n    }\n    /**\n     * Creates an extension manager.\n     */\n    createExtensionManager() {\n        var _a, _b;\n        const coreExtensions = this.options.enableCoreExtensions ? [\n            Editable,\n            ClipboardTextSerializer.configure({\n                blockSeparator: (_b = (_a = this.options.coreExtensionOptions) === null || _a === void 0 ? void 0 : _a.clipboardTextSerializer) === null || _b === void 0 ? void 0 : _b.blockSeparator,\n            }),\n            Commands,\n            FocusEvents,\n            Keymap,\n            Tabindex,\n            Drop,\n            Paste,\n        ].filter(ext => {\n            if (typeof this.options.enableCoreExtensions === 'object') {\n                return this.options.enableCoreExtensions[ext.name] !== false;\n            }\n            return true;\n        }) : [];\n        const allExtensions = [...coreExtensions, ...this.options.extensions].filter(extension => {\n            return ['extension', 'node', 'mark'].includes(extension === null || extension === void 0 ? void 0 : extension.type);\n        });\n        this.extensionManager = new ExtensionManager(allExtensions, this);\n    }\n    /**\n     * Creates an command manager.\n     */\n    createCommandManager() {\n        this.commandManager = new CommandManager({\n            editor: this,\n        });\n    }\n    /**\n     * Creates a ProseMirror schema.\n     */\n    createSchema() {\n        this.schema = this.extensionManager.schema;\n    }\n    /**\n     * Creates a ProseMirror view.\n     */\n    createView() {\n        var _a;\n        let doc;\n        try {\n            doc = createDocument(this.options.content, this.schema, this.options.parseOptions, { errorOnInvalidContent: this.options.enableContentCheck });\n        }\n        catch (e) {\n            if (!(e instanceof Error) || !['[tiptap error]: Invalid JSON content', '[tiptap error]: Invalid HTML content'].includes(e.message)) {\n                // Not the content error we were expecting\n                throw e;\n            }\n            this.emit('contentError', {\n                editor: this,\n                error: e,\n                disableCollaboration: () => {\n                    if (this.storage.collaboration) {\n                        this.storage.collaboration.isDisabled = true;\n                    }\n                    // To avoid syncing back invalid content, reinitialize the extensions without the collaboration extension\n                    this.options.extensions = this.options.extensions.filter(extension => extension.name !== 'collaboration');\n                    // Restart the initialization process by recreating the extension manager with the new set of extensions\n                    this.createExtensionManager();\n                },\n            });\n            // Content is invalid, but attempt to create it anyway, stripping out the invalid parts\n            doc = createDocument(this.options.content, this.schema, this.options.parseOptions, { errorOnInvalidContent: false });\n        }\n        const selection = resolveFocusPosition(doc, this.options.autofocus);\n        this.view = new _tiptap_pm_view__WEBPACK_IMPORTED_MODULE_1__.EditorView(this.options.element, {\n            ...this.options.editorProps,\n            attributes: {\n                // add `role=\"textbox\"` to the editor element\n                role: 'textbox',\n                ...(_a = this.options.editorProps) === null || _a === void 0 ? void 0 : _a.attributes,\n            },\n            dispatchTransaction: this.dispatchTransaction.bind(this),\n            state: _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.EditorState.create({\n                doc,\n                selection: selection || undefined,\n            }),\n        });\n        // `editor.view` is not yet available at this time.\n        // Therefore we will add all plugins and node views directly afterwards.\n        const newState = this.state.reconfigure({\n            plugins: this.extensionManager.plugins,\n        });\n        this.view.updateState(newState);\n        this.createNodeViews();\n        this.prependClass();\n        // Let’s store the editor instance in the DOM element.\n        // So we’ll have access to it for tests.\n        // @ts-ignore\n        const dom = this.view.dom;\n        dom.editor = this;\n    }\n    /**\n     * Creates all node views.\n     */\n    createNodeViews() {\n        if (this.view.isDestroyed) {\n            return;\n        }\n        this.view.setProps({\n            nodeViews: this.extensionManager.nodeViews,\n        });\n    }\n    /**\n     * Prepend class name to element.\n     */\n    prependClass() {\n        this.view.dom.className = `tiptap ${this.view.dom.className}`;\n    }\n    captureTransaction(fn) {\n        this.isCapturingTransaction = true;\n        fn();\n        this.isCapturingTransaction = false;\n        const tr = this.capturedTransaction;\n        this.capturedTransaction = null;\n        return tr;\n    }\n    /**\n     * The callback over which to send transactions (state updates) produced by the view.\n     *\n     * @param transaction An editor state transaction\n     */\n    dispatchTransaction(transaction) {\n        // if the editor / the view of the editor was destroyed\n        // the transaction should not be dispatched as there is no view anymore.\n        if (this.view.isDestroyed) {\n            return;\n        }\n        if (this.isCapturingTransaction) {\n            if (!this.capturedTransaction) {\n                this.capturedTransaction = transaction;\n                return;\n            }\n            transaction.steps.forEach(step => { var _a; return (_a = this.capturedTransaction) === null || _a === void 0 ? void 0 : _a.step(step); });\n            return;\n        }\n        const state = this.state.apply(transaction);\n        const selectionHasChanged = !this.state.selection.eq(state.selection);\n        this.emit('beforeTransaction', {\n            editor: this,\n            transaction,\n            nextState: state,\n        });\n        this.view.updateState(state);\n        this.emit('transaction', {\n            editor: this,\n            transaction,\n        });\n        if (selectionHasChanged) {\n            this.emit('selectionUpdate', {\n                editor: this,\n                transaction,\n            });\n        }\n        const focus = transaction.getMeta('focus');\n        const blur = transaction.getMeta('blur');\n        if (focus) {\n            this.emit('focus', {\n                editor: this,\n                event: focus.event,\n                transaction,\n            });\n        }\n        if (blur) {\n            this.emit('blur', {\n                editor: this,\n                event: blur.event,\n                transaction,\n            });\n        }\n        if (!transaction.docChanged || transaction.getMeta('preventUpdate')) {\n            return;\n        }\n        this.emit('update', {\n            editor: this,\n            transaction,\n        });\n    }\n    /**\n     * Get attributes of the currently selected node or mark.\n     */\n    getAttributes(nameOrType) {\n        return getAttributes(this.state, nameOrType);\n    }\n    isActive(nameOrAttributes, attributesOrUndefined) {\n        const name = typeof nameOrAttributes === 'string' ? nameOrAttributes : null;\n        const attributes = typeof nameOrAttributes === 'string' ? attributesOrUndefined : nameOrAttributes;\n        return isActive(this.state, name, attributes);\n    }\n    /**\n     * Get the document as JSON.\n     */\n    getJSON() {\n        return this.state.doc.toJSON();\n    }\n    /**\n     * Get the document as HTML.\n     */\n    getHTML() {\n        return getHTMLFromFragment(this.state.doc.content, this.schema);\n    }\n    /**\n     * Get the document as text.\n     */\n    getText(options) {\n        const { blockSeparator = '\\n\\n', textSerializers = {} } = options || {};\n        return getText(this.state.doc, {\n            blockSeparator,\n            textSerializers: {\n                ...getTextSerializersFromSchema(this.schema),\n                ...textSerializers,\n            },\n        });\n    }\n    /**\n     * Check if there is no content.\n     */\n    get isEmpty() {\n        return isNodeEmpty(this.state.doc);\n    }\n    /**\n     * Get the number of characters for the current document.\n     *\n     * @deprecated\n     */\n    getCharacterCount() {\n        console.warn('[tiptap warn]: \"editor.getCharacterCount()\" is deprecated. Please use \"editor.storage.characterCount.characters()\" instead.');\n        return this.state.doc.content.size - 2;\n    }\n    /**\n     * Destroy the editor.\n     */\n    destroy() {\n        this.emit('destroy');\n        if (this.view) {\n            // Cleanup our reference to prevent circular references which caused memory leaks\n            // @ts-ignore\n            const dom = this.view.dom;\n            if (dom && dom.editor) {\n                delete dom.editor;\n            }\n            this.view.destroy();\n        }\n        this.removeAllListeners();\n    }\n    /**\n     * Check if the editor is already destroyed.\n     */\n    get isDestroyed() {\n        var _a;\n        // @ts-ignore\n        return !((_a = this.view) === null || _a === void 0 ? void 0 : _a.docView);\n    }\n    $node(selector, attributes) {\n        var _a;\n        return ((_a = this.$doc) === null || _a === void 0 ? void 0 : _a.querySelector(selector, attributes)) || null;\n    }\n    $nodes(selector, attributes) {\n        var _a;\n        return ((_a = this.$doc) === null || _a === void 0 ? void 0 : _a.querySelectorAll(selector, attributes)) || null;\n    }\n    $pos(pos) {\n        const $pos = this.state.doc.resolve(pos);\n        return new NodePos($pos, this);\n    }\n    get $doc() {\n        return this.$pos(0);\n    }\n}\n\n/**\n * Build an input rule that adds a mark when the\n * matched text is typed into it.\n * @see https://tiptap.dev/docs/editor/extensions/custom-extensions/extend-existing#input-rules\n */\nfunction markInputRule(config) {\n    return new InputRule({\n        find: config.find,\n        handler: ({ state, range, match }) => {\n            const attributes = callOrReturn(config.getAttributes, undefined, match);\n            if (attributes === false || attributes === null) {\n                return null;\n            }\n            const { tr } = state;\n            const captureGroup = match[match.length - 1];\n            const fullMatch = match[0];\n            if (captureGroup) {\n                const startSpaces = fullMatch.search(/\\S/);\n                const textStart = range.from + fullMatch.indexOf(captureGroup);\n                const textEnd = textStart + captureGroup.length;\n                const excludedMarks = getMarksBetween(range.from, range.to, state.doc)\n                    .filter(item => {\n                    // @ts-ignore\n                    const excluded = item.mark.type.excluded;\n                    return excluded.find(type => type === config.type && type !== item.mark.type);\n                })\n                    .filter(item => item.to > textStart);\n                if (excludedMarks.length) {\n                    return null;\n                }\n                if (textEnd < range.to) {\n                    tr.delete(textEnd, range.to);\n                }\n                if (textStart > range.from) {\n                    tr.delete(range.from + startSpaces, textStart);\n                }\n                const markEnd = range.from + startSpaces + captureGroup.length;\n                tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}));\n                tr.removeStoredMark(config.type);\n            }\n        },\n    });\n}\n\n/**\n * Build an input rule that adds a node when the\n * matched text is typed into it.\n * @see https://tiptap.dev/docs/editor/extensions/custom-extensions/extend-existing#input-rules\n */\nfunction nodeInputRule(config) {\n    return new InputRule({\n        find: config.find,\n        handler: ({ state, range, match }) => {\n            const attributes = callOrReturn(config.getAttributes, undefined, match) || {};\n            const { tr } = state;\n            const start = range.from;\n            let end = range.to;\n            const newNode = config.type.create(attributes);\n            if (match[1]) {\n                const offset = match[0].lastIndexOf(match[1]);\n                let matchStart = start + offset;\n                if (matchStart > end) {\n                    matchStart = end;\n                }\n                else {\n                    end = matchStart + match[1].length;\n                }\n                // insert last typed character\n                const lastChar = match[0][match[0].length - 1];\n                tr.insertText(lastChar, start + match[0].length - 1);\n                // insert node from input rule\n                tr.replaceWith(matchStart, end, newNode);\n            }\n            else if (match[0]) {\n                const insertionStart = config.type.isInline ? start : start - 1;\n                tr.insert(insertionStart, config.type.create(attributes)).delete(tr.mapping.map(start), tr.mapping.map(end));\n            }\n            tr.scrollIntoView();\n        },\n    });\n}\n\n/**\n * Build an input rule that changes the type of a textblock when the\n * matched text is typed into it. When using a regular expresion you’ll\n * probably want the regexp to start with `^`, so that the pattern can\n * only occur at the start of a textblock.\n * @see https://tiptap.dev/docs/editor/extensions/custom-extensions/extend-existing#input-rules\n */\nfunction textblockTypeInputRule(config) {\n    return new InputRule({\n        find: config.find,\n        handler: ({ state, range, match }) => {\n            const $start = state.doc.resolve(range.from);\n            const attributes = callOrReturn(config.getAttributes, undefined, match) || {};\n            if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), config.type)) {\n                return null;\n            }\n            state.tr\n                .delete(range.from, range.to)\n                .setBlockType(range.from, range.from, config.type, attributes);\n        },\n    });\n}\n\n/**\n * Build an input rule that replaces text when the\n * matched text is typed into it.\n * @see https://tiptap.dev/docs/editor/extensions/custom-extensions/extend-existing#input-rules\n */\nfunction textInputRule(config) {\n    return new InputRule({\n        find: config.find,\n        handler: ({ state, range, match }) => {\n            let insert = config.replace;\n            let start = range.from;\n            const end = range.to;\n            if (match[1]) {\n                const offset = match[0].lastIndexOf(match[1]);\n                insert += match[0].slice(offset + match[1].length);\n                start += offset;\n                const cutOff = start - end;\n                if (cutOff > 0) {\n                    insert = match[0].slice(offset - cutOff, offset) + insert;\n                    start = end;\n                }\n            }\n            state.tr.insertText(insert, start, end);\n        },\n    });\n}\n\n/**\n * Build an input rule for automatically wrapping a textblock when a\n * given string is typed. When using a regular expresion you’ll\n * probably want the regexp to start with `^`, so that the pattern can\n * only occur at the start of a textblock.\n *\n * `type` is the type of node to wrap in.\n *\n * By default, if there’s a node with the same type above the newly\n * wrapped node, the rule will try to join those\n * two nodes. You can pass a join predicate, which takes a regular\n * expression match and the node before the wrapped node, and can\n * return a boolean to indicate whether a join should happen.\n * @see https://tiptap.dev/docs/editor/extensions/custom-extensions/extend-existing#input-rules\n */\nfunction wrappingInputRule(config) {\n    return new InputRule({\n        find: config.find,\n        handler: ({ state, range, match, chain, }) => {\n            const attributes = callOrReturn(config.getAttributes, undefined, match) || {};\n            const tr = state.tr.delete(range.from, range.to);\n            const $start = tr.doc.resolve(range.from);\n            const blockRange = $start.blockRange();\n            const wrapping = blockRange && (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.findWrapping)(blockRange, config.type, attributes);\n            if (!wrapping) {\n                return null;\n            }\n            tr.wrap(blockRange, wrapping);\n            if (config.keepMarks && config.editor) {\n                const { selection, storedMarks } = state;\n                const { splittableMarks } = config.editor.extensionManager;\n                const marks = storedMarks || (selection.$to.parentOffset && selection.$from.marks());\n                if (marks) {\n                    const filteredMarks = marks.filter(mark => splittableMarks.includes(mark.type.name));\n                    tr.ensureMarks(filteredMarks);\n                }\n            }\n            if (config.keepAttributes) {\n                /** If the nodeType is `bulletList` or `orderedList` set the `nodeType` as `listItem` */\n                const nodeType = config.type.name === 'bulletList' || config.type.name === 'orderedList' ? 'listItem' : 'taskList';\n                chain().updateAttributes(nodeType, attributes).run();\n            }\n            const before = tr.doc.resolve(range.from - 1).nodeBefore;\n            if (before\n                && before.type === config.type\n                && (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canJoin)(tr.doc, range.from - 1)\n                && (!config.joinPredicate || config.joinPredicate(match, before))) {\n                tr.join(range.from - 1);\n            }\n        },\n    });\n}\n\n/**\n * The Node class is used to create custom node extensions.\n * @see https://tiptap.dev/api/extensions#create-a-new-extension\n */\nclass Node {\n    constructor(config = {}) {\n        this.type = 'node';\n        this.name = 'node';\n        this.parent = null;\n        this.child = null;\n        this.config = {\n            name: this.name,\n            defaultOptions: {},\n        };\n        this.config = {\n            ...this.config,\n            ...config,\n        };\n        this.name = this.config.name;\n        if (config.defaultOptions && Object.keys(config.defaultOptions).length > 0) {\n            console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`);\n        }\n        // TODO: remove `addOptions` fallback\n        this.options = this.config.defaultOptions;\n        if (this.config.addOptions) {\n            this.options = callOrReturn(getExtensionField(this, 'addOptions', {\n                name: this.name,\n            }));\n        }\n        this.storage = callOrReturn(getExtensionField(this, 'addStorage', {\n            name: this.name,\n            options: this.options,\n        })) || {};\n    }\n    static create(config = {}) {\n        return new Node(config);\n    }\n    configure(options = {}) {\n        // return a new instance so we can use the same extension\n        // with different calls of `configure`\n        const extension = this.extend({\n            ...this.config,\n            addOptions: () => {\n                return mergeDeep(this.options, options);\n            },\n        });\n        // Always preserve the current name\n        extension.name = this.name;\n        // Set the parent to be our parent\n        extension.parent = this.parent;\n        return extension;\n    }\n    extend(extendedConfig = {}) {\n        const extension = new Node(extendedConfig);\n        extension.parent = this;\n        this.child = extension;\n        extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;\n        if (extendedConfig.defaultOptions && Object.keys(extendedConfig.defaultOptions).length > 0) {\n            console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`);\n        }\n        extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {\n            name: extension.name,\n        }));\n        extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\n            name: extension.name,\n            options: extension.options,\n        }));\n        return extension;\n    }\n}\n\n/**\n * Node views are used to customize the rendered DOM structure of a node.\n * @see https://tiptap.dev/guide/node-views\n */\nclass NodeView {\n    constructor(component, props, options) {\n        this.isDragging = false;\n        this.component = component;\n        this.editor = props.editor;\n        this.options = {\n            stopEvent: null,\n            ignoreMutation: null,\n            ...options,\n        };\n        this.extension = props.extension;\n        this.node = props.node;\n        this.decorations = props.decorations;\n        this.innerDecorations = props.innerDecorations;\n        this.view = props.view;\n        this.HTMLAttributes = props.HTMLAttributes;\n        this.getPos = props.getPos;\n        this.mount();\n    }\n    mount() {\n        // eslint-disable-next-line\n        return;\n    }\n    get dom() {\n        return this.editor.view.dom;\n    }\n    get contentDOM() {\n        return null;\n    }\n    onDragStart(event) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const { view } = this.editor;\n        const target = event.target;\n        // get the drag handle element\n        // `closest` is not available for text nodes so we may have to use its parent\n        const dragHandle = target.nodeType === 3\n            ? (_a = target.parentElement) === null || _a === void 0 ? void 0 : _a.closest('[data-drag-handle]')\n            : target.closest('[data-drag-handle]');\n        if (!this.dom || ((_b = this.contentDOM) === null || _b === void 0 ? void 0 : _b.contains(target)) || !dragHandle) {\n            return;\n        }\n        let x = 0;\n        let y = 0;\n        // calculate offset for drag element if we use a different drag handle element\n        if (this.dom !== dragHandle) {\n            const domBox = this.dom.getBoundingClientRect();\n            const handleBox = dragHandle.getBoundingClientRect();\n            // In React, we have to go through nativeEvent to reach offsetX/offsetY.\n            const offsetX = (_c = event.offsetX) !== null && _c !== void 0 ? _c : (_d = event.nativeEvent) === null || _d === void 0 ? void 0 : _d.offsetX;\n            const offsetY = (_e = event.offsetY) !== null && _e !== void 0 ? _e : (_f = event.nativeEvent) === null || _f === void 0 ? void 0 : _f.offsetY;\n            x = handleBox.x - domBox.x + offsetX;\n            y = handleBox.y - domBox.y + offsetY;\n        }\n        const clonedNode = this.dom.cloneNode(true);\n        (_g = event.dataTransfer) === null || _g === void 0 ? void 0 : _g.setDragImage(clonedNode, x, y);\n        const pos = this.getPos();\n        if (typeof pos !== 'number') {\n            return;\n        }\n        // we need to tell ProseMirror that we want to move the whole node\n        // so we create a NodeSelection\n        const selection = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection.create(view.state.doc, pos);\n        const transaction = view.state.tr.setSelection(selection);\n        view.dispatch(transaction);\n    }\n    stopEvent(event) {\n        var _a;\n        if (!this.dom) {\n            return false;\n        }\n        if (typeof this.options.stopEvent === 'function') {\n            return this.options.stopEvent({ event });\n        }\n        const target = event.target;\n        const isInElement = this.dom.contains(target) && !((_a = this.contentDOM) === null || _a === void 0 ? void 0 : _a.contains(target));\n        // any event from child nodes should be handled by ProseMirror\n        if (!isInElement) {\n            return false;\n        }\n        const isDragEvent = event.type.startsWith('drag');\n        const isDropEvent = event.type === 'drop';\n        const isInput = ['INPUT', 'BUTTON', 'SELECT', 'TEXTAREA'].includes(target.tagName) || target.isContentEditable;\n        // any input event within node views should be ignored by ProseMirror\n        if (isInput && !isDropEvent && !isDragEvent) {\n            return true;\n        }\n        const { isEditable } = this.editor;\n        const { isDragging } = this;\n        const isDraggable = !!this.node.type.spec.draggable;\n        const isSelectable = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection.isSelectable(this.node);\n        const isCopyEvent = event.type === 'copy';\n        const isPasteEvent = event.type === 'paste';\n        const isCutEvent = event.type === 'cut';\n        const isClickEvent = event.type === 'mousedown';\n        // ProseMirror tries to drag selectable nodes\n        // even if `draggable` is set to `false`\n        // this fix prevents that\n        if (!isDraggable && isSelectable && isDragEvent && event.target === this.dom) {\n            event.preventDefault();\n        }\n        if (isDraggable && isDragEvent && !isDragging && event.target === this.dom) {\n            event.preventDefault();\n            return false;\n        }\n        // we have to store that dragging started\n        if (isDraggable && isEditable && !isDragging && isClickEvent) {\n            const dragHandle = target.closest('[data-drag-handle]');\n            const isValidDragHandle = dragHandle && (this.dom === dragHandle || this.dom.contains(dragHandle));\n            if (isValidDragHandle) {\n                this.isDragging = true;\n                document.addEventListener('dragend', () => {\n                    this.isDragging = false;\n                }, { once: true });\n                document.addEventListener('drop', () => {\n                    this.isDragging = false;\n                }, { once: true });\n                document.addEventListener('mouseup', () => {\n                    this.isDragging = false;\n                }, { once: true });\n            }\n        }\n        // these events are handled by prosemirror\n        if (isDragging\n            || isDropEvent\n            || isCopyEvent\n            || isPasteEvent\n            || isCutEvent\n            || (isClickEvent && isSelectable)) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Called when a DOM [mutation](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver) or a selection change happens within the view.\n     * @return `false` if the editor should re-read the selection or re-parse the range around the mutation\n     * @return `true` if it can safely be ignored.\n     */\n    ignoreMutation(mutation) {\n        if (!this.dom || !this.contentDOM) {\n            return true;\n        }\n        if (typeof this.options.ignoreMutation === 'function') {\n            return this.options.ignoreMutation({ mutation });\n        }\n        // a leaf/atom node is like a black box for ProseMirror\n        // and should be fully handled by the node view\n        if (this.node.isLeaf || this.node.isAtom) {\n            return true;\n        }\n        // ProseMirror should handle any selections\n        if (mutation.type === 'selection') {\n            return false;\n        }\n        // try to prevent a bug on iOS and Android that will break node views on enter\n        // this is because ProseMirror can’t preventDispatch on enter\n        // this will lead to a re-render of the node view on enter\n        // see: https://github.com/ueberdosis/tiptap/issues/1214\n        // see: https://github.com/ueberdosis/tiptap/issues/2534\n        if (this.dom.contains(mutation.target)\n            && mutation.type === 'childList'\n            && (isiOS() || isAndroid())\n            && this.editor.isFocused) {\n            const changedNodes = [\n                ...Array.from(mutation.addedNodes),\n                ...Array.from(mutation.removedNodes),\n            ];\n            // we’ll check if every changed node is contentEditable\n            // to make sure it’s probably mutated by ProseMirror\n            if (changedNodes.every(node => node.isContentEditable)) {\n                return false;\n            }\n        }\n        // we will allow mutation contentDOM with attributes\n        // so we can for example adding classes within our node view\n        if (this.contentDOM === mutation.target && mutation.type === 'attributes') {\n            return true;\n        }\n        // ProseMirror should handle any changes within contentDOM\n        if (this.contentDOM.contains(mutation.target)) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Update the attributes of the prosemirror node.\n     */\n    updateAttributes(attributes) {\n        this.editor.commands.command(({ tr }) => {\n            const pos = this.getPos();\n            if (typeof pos !== 'number') {\n                return false;\n            }\n            tr.setNodeMarkup(pos, undefined, {\n                ...this.node.attrs,\n                ...attributes,\n            });\n            return true;\n        });\n    }\n    /**\n     * Delete the node.\n     */\n    deleteNode() {\n        const from = this.getPos();\n        if (typeof from !== 'number') {\n            return;\n        }\n        const to = from + this.node.nodeSize;\n        this.editor.commands.deleteRange({ from, to });\n    }\n}\n\n/**\n * Build an paste rule that adds a mark when the\n * matched text is pasted into it.\n * @see https://tiptap.dev/docs/editor/extensions/custom-extensions/extend-existing#paste-rules\n */\nfunction markPasteRule(config) {\n    return new PasteRule({\n        find: config.find,\n        handler: ({ state, range, match, pasteEvent, }) => {\n            const attributes = callOrReturn(config.getAttributes, undefined, match, pasteEvent);\n            if (attributes === false || attributes === null) {\n                return null;\n            }\n            const { tr } = state;\n            const captureGroup = match[match.length - 1];\n            const fullMatch = match[0];\n            let markEnd = range.to;\n            if (captureGroup) {\n                const startSpaces = fullMatch.search(/\\S/);\n                const textStart = range.from + fullMatch.indexOf(captureGroup);\n                const textEnd = textStart + captureGroup.length;\n                const excludedMarks = getMarksBetween(range.from, range.to, state.doc)\n                    .filter(item => {\n                    // @ts-ignore\n                    const excluded = item.mark.type.excluded;\n                    return excluded.find(type => type === config.type && type !== item.mark.type);\n                })\n                    .filter(item => item.to > textStart);\n                if (excludedMarks.length) {\n                    return null;\n                }\n                if (textEnd < range.to) {\n                    tr.delete(textEnd, range.to);\n                }\n                if (textStart > range.from) {\n                    tr.delete(range.from + startSpaces, textStart);\n                }\n                markEnd = range.from + startSpaces + captureGroup.length;\n                tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}));\n                tr.removeStoredMark(config.type);\n            }\n        },\n    });\n}\n\n// source: https://stackoverflow.com/a/6969486\nfunction escapeForRegEx(string) {\n    return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n\nfunction isString(value) {\n    return typeof value === 'string';\n}\n\n/**\n * Build an paste rule that adds a node when the\n * matched text is pasted into it.\n * @see https://tiptap.dev/docs/editor/extensions/custom-extensions/extend-existing#paste-rules\n */\nfunction nodePasteRule(config) {\n    return new PasteRule({\n        find: config.find,\n        handler({ match, chain, range, pasteEvent, }) {\n            const attributes = callOrReturn(config.getAttributes, undefined, match, pasteEvent);\n            const content = callOrReturn(config.getContent, undefined, attributes);\n            if (attributes === false || attributes === null) {\n                return null;\n            }\n            const node = { type: config.type.name, attrs: attributes };\n            if (content) {\n                node.content = content;\n            }\n            if (match.input) {\n                chain().deleteRange(range).insertContentAt(range.from, node);\n            }\n        },\n    });\n}\n\n/**\n * Build an paste rule that replaces text when the\n * matched text is pasted into it.\n * @see https://tiptap.dev/docs/editor/extensions/custom-extensions/extend-existing#paste-rules\n */\nfunction textPasteRule(config) {\n    return new PasteRule({\n        find: config.find,\n        handler: ({ state, range, match }) => {\n            let insert = config.replace;\n            let start = range.from;\n            const end = range.to;\n            if (match[1]) {\n                const offset = match[0].lastIndexOf(match[1]);\n                insert += match[0].slice(offset + match[1].length);\n                start += offset;\n                const cutOff = start - end;\n                if (cutOff > 0) {\n                    insert = match[0].slice(offset - cutOff, offset) + insert;\n                    start = end;\n                }\n            }\n            state.tr.insertText(insert, start, end);\n        },\n    });\n}\n\nclass Tracker {\n    constructor(transaction) {\n        this.transaction = transaction;\n        this.currentStep = this.transaction.steps.length;\n    }\n    map(position) {\n        let deleted = false;\n        const mappedPosition = this.transaction.steps\n            .slice(this.currentStep)\n            .reduce((newPosition, step) => {\n            const mapResult = step.getMap().mapResult(newPosition);\n            if (mapResult.deleted) {\n                deleted = true;\n            }\n            return mapResult.pos;\n        }, position);\n        return {\n            position: mappedPosition,\n            deleted,\n        };\n    }\n}\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tiptap/core/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tiptap/extension-bold/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@tiptap/extension-bold/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Bold: () => (/* binding */ Bold),\n/* harmony export */   \"default\": () => (/* binding */ Bold),\n/* harmony export */   starInputRegex: () => (/* binding */ starInputRegex),\n/* harmony export */   starPasteRegex: () => (/* binding */ starPasteRegex),\n/* harmony export */   underscoreInputRegex: () => (/* binding */ underscoreInputRegex),\n/* harmony export */   underscorePasteRegex: () => (/* binding */ underscorePasteRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(app-pages-browser)/./node_modules/@tiptap/core/dist/index.js\");\n\n\n/**\n * Matches bold text via `**` as input.\n */\nconst starInputRegex = /(?:^|\\s)(\\*\\*(?!\\s+\\*\\*)((?:[^*]+))\\*\\*(?!\\s+\\*\\*))$/;\n/**\n * Matches bold text via `**` while pasting.\n */\nconst starPasteRegex = /(?:^|\\s)(\\*\\*(?!\\s+\\*\\*)((?:[^*]+))\\*\\*(?!\\s+\\*\\*))/g;\n/**\n * Matches bold text via `__` as input.\n */\nconst underscoreInputRegex = /(?:^|\\s)(__(?!\\s+__)((?:[^_]+))__(?!\\s+__))$/;\n/**\n * Matches bold text via `__` while pasting.\n */\nconst underscorePasteRegex = /(?:^|\\s)(__(?!\\s+__)((?:[^_]+))__(?!\\s+__))/g;\n/**\n * This extension allows you to mark text as bold.\n * @see https://tiptap.dev/api/marks/bold\n */\nconst Bold = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({\n    name: 'bold',\n    addOptions() {\n        return {\n            HTMLAttributes: {},\n        };\n    },\n    parseHTML() {\n        return [\n            {\n                tag: 'strong',\n            },\n            {\n                tag: 'b',\n                getAttrs: node => node.style.fontWeight !== 'normal' && null,\n            },\n            {\n                style: 'font-weight=400',\n                clearMark: mark => mark.type.name === this.name,\n            },\n            {\n                style: 'font-weight',\n                getAttrs: value => /^(bold(er)?|[5-9]\\d{2,})$/.test(value) && null,\n            },\n        ];\n    },\n    renderHTML({ HTMLAttributes }) {\n        return ['strong', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\n    },\n    addCommands() {\n        return {\n            setBold: () => ({ commands }) => {\n                return commands.setMark(this.name);\n            },\n            toggleBold: () => ({ commands }) => {\n                return commands.toggleMark(this.name);\n            },\n            unsetBold: () => ({ commands }) => {\n                return commands.unsetMark(this.name);\n            },\n        };\n    },\n    addKeyboardShortcuts() {\n        return {\n            'Mod-b': () => this.editor.commands.toggleBold(),\n            'Mod-B': () => this.editor.commands.toggleBold(),\n        };\n    },\n    addInputRules() {\n        return [\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({\n                find: starInputRegex,\n                type: this.type,\n            }),\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({\n                find: underscoreInputRegex,\n                type: this.type,\n            }),\n        ];\n    },\n    addPasteRules() {\n        return [\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({\n                find: starPasteRegex,\n                type: this.type,\n            }),\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({\n                find: underscorePasteRegex,\n                type: this.type,\n            }),\n        ];\n    },\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL2V4dGVuc2lvbi1ib2xkL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFtRjs7QUFFbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsOENBQUk7QUFDakI7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLHdEQUF3RCxHQUFHO0FBQzNELGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTCxpQkFBaUIsZ0JBQWdCO0FBQ2pDLDBCQUEwQiw2REFBZTtBQUN6QyxLQUFLO0FBQ0w7QUFDQTtBQUNBLDhCQUE4QixVQUFVO0FBQ3hDO0FBQ0EsYUFBYTtBQUNiLGlDQUFpQyxVQUFVO0FBQzNDO0FBQ0EsYUFBYTtBQUNiLGdDQUFnQyxVQUFVO0FBQzFDO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVksMkRBQWE7QUFDekI7QUFDQTtBQUNBLGFBQWE7QUFDYixZQUFZLDJEQUFhO0FBQ3pCO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVksMkRBQWE7QUFDekI7QUFDQTtBQUNBLGFBQWE7QUFDYixZQUFZLDJEQUFhO0FBQ3pCO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0wsQ0FBQzs7QUFFNEc7QUFDN0ciLCJzb3VyY2VzIjpbIkM6XFxQcm9qZWN0c1xcdHVvbi1pby12MVxcbm9kZV9tb2R1bGVzXFxAdGlwdGFwXFxleHRlbnNpb24tYm9sZFxcZGlzdFxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFyaywgbWVyZ2VBdHRyaWJ1dGVzLCBtYXJrSW5wdXRSdWxlLCBtYXJrUGFzdGVSdWxlIH0gZnJvbSAnQHRpcHRhcC9jb3JlJztcblxuLyoqXG4gKiBNYXRjaGVzIGJvbGQgdGV4dCB2aWEgYCoqYCBhcyBpbnB1dC5cbiAqL1xuY29uc3Qgc3RhcklucHV0UmVnZXggPSAvKD86XnxcXHMpKFxcKlxcKig/IVxccytcXCpcXCopKCg/OlteKl0rKSlcXCpcXCooPyFcXHMrXFwqXFwqKSkkLztcbi8qKlxuICogTWF0Y2hlcyBib2xkIHRleHQgdmlhIGAqKmAgd2hpbGUgcGFzdGluZy5cbiAqL1xuY29uc3Qgc3RhclBhc3RlUmVnZXggPSAvKD86XnxcXHMpKFxcKlxcKig/IVxccytcXCpcXCopKCg/OlteKl0rKSlcXCpcXCooPyFcXHMrXFwqXFwqKSkvZztcbi8qKlxuICogTWF0Y2hlcyBib2xkIHRleHQgdmlhIGBfX2AgYXMgaW5wdXQuXG4gKi9cbmNvbnN0IHVuZGVyc2NvcmVJbnB1dFJlZ2V4ID0gLyg/Ol58XFxzKShfXyg/IVxccytfXykoKD86W15fXSspKV9fKD8hXFxzK19fKSkkLztcbi8qKlxuICogTWF0Y2hlcyBib2xkIHRleHQgdmlhIGBfX2Agd2hpbGUgcGFzdGluZy5cbiAqL1xuY29uc3QgdW5kZXJzY29yZVBhc3RlUmVnZXggPSAvKD86XnxcXHMpKF9fKD8hXFxzK19fKSgoPzpbXl9dKykpX18oPyFcXHMrX18pKS9nO1xuLyoqXG4gKiBUaGlzIGV4dGVuc2lvbiBhbGxvd3MgeW91IHRvIG1hcmsgdGV4dCBhcyBib2xkLlxuICogQHNlZSBodHRwczovL3RpcHRhcC5kZXYvYXBpL21hcmtzL2JvbGRcbiAqL1xuY29uc3QgQm9sZCA9IE1hcmsuY3JlYXRlKHtcbiAgICBuYW1lOiAnYm9sZCcsXG4gICAgYWRkT3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIEhUTUxBdHRyaWJ1dGVzOiB7fSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHBhcnNlSFRNTCgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0YWc6ICdzdHJvbmcnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0YWc6ICdiJyxcbiAgICAgICAgICAgICAgICBnZXRBdHRyczogbm9kZSA9PiBub2RlLnN0eWxlLmZvbnRXZWlnaHQgIT09ICdub3JtYWwnICYmIG51bGwsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0eWxlOiAnZm9udC13ZWlnaHQ9NDAwJyxcbiAgICAgICAgICAgICAgICBjbGVhck1hcms6IG1hcmsgPT4gbWFyay50eXBlLm5hbWUgPT09IHRoaXMubmFtZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3R5bGU6ICdmb250LXdlaWdodCcsXG4gICAgICAgICAgICAgICAgZ2V0QXR0cnM6IHZhbHVlID0+IC9eKGJvbGQoZXIpP3xbNS05XVxcZHsyLH0pJC8udGVzdCh2YWx1ZSkgJiYgbnVsbCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF07XG4gICAgfSxcbiAgICByZW5kZXJIVE1MKHsgSFRNTEF0dHJpYnV0ZXMgfSkge1xuICAgICAgICByZXR1cm4gWydzdHJvbmcnLCBtZXJnZUF0dHJpYnV0ZXModGhpcy5vcHRpb25zLkhUTUxBdHRyaWJ1dGVzLCBIVE1MQXR0cmlidXRlcyksIDBdO1xuICAgIH0sXG4gICAgYWRkQ29tbWFuZHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZXRCb2xkOiAoKSA9PiAoeyBjb21tYW5kcyB9KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnNldE1hcmsodGhpcy5uYW1lKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0b2dnbGVCb2xkOiAoKSA9PiAoeyBjb21tYW5kcyB9KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnRvZ2dsZU1hcmsodGhpcy5uYW1lKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1bnNldEJvbGQ6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZHMudW5zZXRNYXJrKHRoaXMubmFtZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgYWRkS2V5Ym9hcmRTaG9ydGN1dHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnTW9kLWInOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy50b2dnbGVCb2xkKCksXG4gICAgICAgICAgICAnTW9kLUInOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy50b2dnbGVCb2xkKCksXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBhZGRJbnB1dFJ1bGVzKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgbWFya0lucHV0UnVsZSh7XG4gICAgICAgICAgICAgICAgZmluZDogc3RhcklucHV0UmVnZXgsXG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBtYXJrSW5wdXRSdWxlKHtcbiAgICAgICAgICAgICAgICBmaW5kOiB1bmRlcnNjb3JlSW5wdXRSZWdleCxcbiAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgXTtcbiAgICB9LFxuICAgIGFkZFBhc3RlUnVsZXMoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBtYXJrUGFzdGVSdWxlKHtcbiAgICAgICAgICAgICAgICBmaW5kOiBzdGFyUGFzdGVSZWdleCxcbiAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG1hcmtQYXN0ZVJ1bGUoe1xuICAgICAgICAgICAgICAgIGZpbmQ6IHVuZGVyc2NvcmVQYXN0ZVJlZ2V4LFxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICBdO1xuICAgIH0sXG59KTtcblxuZXhwb3J0IHsgQm9sZCwgQm9sZCBhcyBkZWZhdWx0LCBzdGFySW5wdXRSZWdleCwgc3RhclBhc3RlUmVnZXgsIHVuZGVyc2NvcmVJbnB1dFJlZ2V4LCB1bmRlcnNjb3JlUGFzdGVSZWdleCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tiptap/extension-bold/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tiptap/extension-bubble-menu/dist/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tiptap/extension-bubble-menu/dist/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BubbleMenu: () => (/* binding */ BubbleMenu),\n/* harmony export */   BubbleMenuPlugin: () => (/* binding */ BubbleMenuPlugin),\n/* harmony export */   BubbleMenuView: () => (/* binding */ BubbleMenuView),\n/* harmony export */   \"default\": () => (/* binding */ BubbleMenu)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/core */ \"(app-pages-browser)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/state */ \"(app-pages-browser)/./node_modules/@tiptap/pm/state/dist/index.js\");\n/* harmony import */ var tippy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tippy.js */ \"(app-pages-browser)/./node_modules/tippy.js/dist/tippy.esm.js\");\n\n\n\n\nclass BubbleMenuView {\n    constructor({ editor, element, view, tippyOptions = {}, updateDelay = 250, shouldShow, }) {\n        this.preventHide = false;\n        this.shouldShow = ({ view, state, from, to, }) => {\n            const { doc, selection } = state;\n            const { empty } = selection;\n            // Sometime check for `empty` is not enough.\n            // Doubleclick an empty paragraph returns a node size of 2.\n            // So we check also for an empty text size.\n            const isEmptyTextBlock = !doc.textBetween(from, to).length && (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.isTextSelection)(state.selection);\n            // When clicking on a element inside the bubble menu the editor \"blur\" event\n            // is called and the bubble menu item is focussed. In this case we should\n            // consider the menu as part of the editor and keep showing the menu\n            const isChildOfMenu = this.element.contains(document.activeElement);\n            const hasEditorFocus = view.hasFocus() || isChildOfMenu;\n            if (!hasEditorFocus || empty || isEmptyTextBlock || !this.editor.isEditable) {\n                return false;\n            }\n            return true;\n        };\n        this.mousedownHandler = () => {\n            this.preventHide = true;\n        };\n        this.dragstartHandler = () => {\n            this.hide();\n        };\n        this.focusHandler = () => {\n            // we use `setTimeout` to make sure `selection` is already updated\n            setTimeout(() => this.update(this.editor.view));\n        };\n        this.blurHandler = ({ event }) => {\n            var _a;\n            if (this.preventHide) {\n                this.preventHide = false;\n                return;\n            }\n            if ((event === null || event === void 0 ? void 0 : event.relatedTarget) && ((_a = this.element.parentNode) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget))) {\n                return;\n            }\n            if ((event === null || event === void 0 ? void 0 : event.relatedTarget) === this.editor.view.dom) {\n                return;\n            }\n            this.hide();\n        };\n        this.tippyBlurHandler = (event) => {\n            this.blurHandler({ event });\n        };\n        this.handleDebouncedUpdate = (view, oldState) => {\n            const selectionChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.selection.eq(view.state.selection));\n            const docChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.doc.eq(view.state.doc));\n            if (!selectionChanged && !docChanged) {\n                return;\n            }\n            if (this.updateDebounceTimer) {\n                clearTimeout(this.updateDebounceTimer);\n            }\n            this.updateDebounceTimer = window.setTimeout(() => {\n                this.updateHandler(view, selectionChanged, docChanged, oldState);\n            }, this.updateDelay);\n        };\n        this.updateHandler = (view, selectionChanged, docChanged, oldState) => {\n            var _a, _b, _c;\n            const { state, composing } = view;\n            const { selection } = state;\n            const isSame = !selectionChanged && !docChanged;\n            if (composing || isSame) {\n                return;\n            }\n            this.createTooltip();\n            // support for CellSelections\n            const { ranges } = selection;\n            const from = Math.min(...ranges.map(range => range.$from.pos));\n            const to = Math.max(...ranges.map(range => range.$to.pos));\n            const shouldShow = (_a = this.shouldShow) === null || _a === void 0 ? void 0 : _a.call(this, {\n                editor: this.editor,\n                element: this.element,\n                view,\n                state,\n                oldState,\n                from,\n                to,\n            });\n            if (!shouldShow) {\n                this.hide();\n                return;\n            }\n            (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.setProps({\n                getReferenceClientRect: ((_c = this.tippyOptions) === null || _c === void 0 ? void 0 : _c.getReferenceClientRect)\n                    || (() => {\n                        if ((0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.isNodeSelection)(state.selection)) {\n                            let node = view.nodeDOM(from);\n                            if (node) {\n                                const nodeViewWrapper = node.dataset.nodeViewWrapper ? node : node.querySelector('[data-node-view-wrapper]');\n                                if (nodeViewWrapper) {\n                                    node = nodeViewWrapper.firstChild;\n                                }\n                                if (node) {\n                                    return node.getBoundingClientRect();\n                                }\n                            }\n                        }\n                        return (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.posToDOMRect)(view, from, to);\n                    }),\n            });\n            this.show();\n        };\n        this.editor = editor;\n        this.element = element;\n        this.view = view;\n        this.updateDelay = updateDelay;\n        if (shouldShow) {\n            this.shouldShow = shouldShow;\n        }\n        this.element.addEventListener('mousedown', this.mousedownHandler, { capture: true });\n        this.view.dom.addEventListener('dragstart', this.dragstartHandler);\n        this.editor.on('focus', this.focusHandler);\n        this.editor.on('blur', this.blurHandler);\n        this.tippyOptions = tippyOptions;\n        // Detaches menu content from its current parent\n        this.element.remove();\n        this.element.style.visibility = 'visible';\n    }\n    createTooltip() {\n        const { element: editorElement } = this.editor.options;\n        const editorIsAttached = !!editorElement.parentElement;\n        if (this.tippy || !editorIsAttached) {\n            return;\n        }\n        this.tippy = (0,tippy_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(editorElement, {\n            duration: 0,\n            getReferenceClientRect: null,\n            content: this.element,\n            interactive: true,\n            trigger: 'manual',\n            placement: 'top',\n            hideOnClick: 'toggle',\n            ...this.tippyOptions,\n        });\n        // maybe we have to hide tippy on its own blur event as well\n        if (this.tippy.popper.firstChild) {\n            this.tippy.popper.firstChild.addEventListener('blur', this.tippyBlurHandler);\n        }\n    }\n    update(view, oldState) {\n        const { state } = view;\n        const hasValidSelection = state.selection.from !== state.selection.to;\n        if (this.updateDelay > 0 && hasValidSelection) {\n            this.handleDebouncedUpdate(view, oldState);\n            return;\n        }\n        const selectionChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.selection.eq(view.state.selection));\n        const docChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.doc.eq(view.state.doc));\n        this.updateHandler(view, selectionChanged, docChanged, oldState);\n    }\n    show() {\n        var _a;\n        (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.show();\n    }\n    hide() {\n        var _a;\n        (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.hide();\n    }\n    destroy() {\n        var _a, _b;\n        if ((_a = this.tippy) === null || _a === void 0 ? void 0 : _a.popper.firstChild) {\n            this.tippy.popper.firstChild.removeEventListener('blur', this.tippyBlurHandler);\n        }\n        (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.destroy();\n        this.element.removeEventListener('mousedown', this.mousedownHandler, { capture: true });\n        this.view.dom.removeEventListener('dragstart', this.dragstartHandler);\n        this.editor.off('focus', this.focusHandler);\n        this.editor.off('blur', this.blurHandler);\n    }\n}\nconst BubbleMenuPlugin = (options) => {\n    return new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n        key: typeof options.pluginKey === 'string' ? new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(options.pluginKey) : options.pluginKey,\n        view: view => new BubbleMenuView({ view, ...options }),\n    });\n};\n\n/**\n * This extension allows you to create a bubble menu.\n * @see https://tiptap.dev/api/extensions/bubble-menu\n */\nconst BubbleMenu = _tiptap_core__WEBPACK_IMPORTED_MODULE_1__.Extension.create({\n    name: 'bubbleMenu',\n    addOptions() {\n        return {\n            element: null,\n            tippyOptions: {},\n            pluginKey: 'bubbleMenu',\n            updateDelay: undefined,\n            shouldShow: null,\n        };\n    },\n    addProseMirrorPlugins() {\n        if (!this.options.element) {\n            return [];\n        }\n        return [\n            BubbleMenuPlugin({\n                pluginKey: this.options.pluginKey,\n                editor: this.editor,\n                element: this.options.element,\n                tippyOptions: this.options.tippyOptions,\n                updateDelay: this.options.updateDelay,\n                shouldShow: this.options.shouldShow,\n            }),\n        ];\n    },\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tiptap/extension-bubble-menu/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tiptap/extension-code/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@tiptap/extension-code/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Code: () => (/* binding */ Code),\n/* harmony export */   \"default\": () => (/* binding */ Code),\n/* harmony export */   inputRegex: () => (/* binding */ inputRegex),\n/* harmony export */   pasteRegex: () => (/* binding */ pasteRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(app-pages-browser)/./node_modules/@tiptap/core/dist/index.js\");\n\n\n/**\n * Regular expressions to match inline code blocks enclosed in backticks.\n *  It matches:\n *     - An opening backtick, followed by\n *     - Any text that doesn't include a backtick (captured for marking), followed by\n *     - A closing backtick.\n *  This ensures that any text between backticks is formatted as code,\n *  regardless of the surrounding characters (exception being another backtick).\n */\nconst inputRegex = /(^|[^`])`([^`]+)`(?!`)/;\n/**\n * Matches inline code while pasting.\n */\nconst pasteRegex = /(^|[^`])`([^`]+)`(?!`)/g;\n/**\n * This extension allows you to mark text as inline code.\n * @see https://tiptap.dev/api/marks/code\n */\nconst Code = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({\n    name: 'code',\n    addOptions() {\n        return {\n            HTMLAttributes: {},\n        };\n    },\n    excludes: '_',\n    code: true,\n    exitable: true,\n    parseHTML() {\n        return [\n            { tag: 'code' },\n        ];\n    },\n    renderHTML({ HTMLAttributes }) {\n        return ['code', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\n    },\n    addCommands() {\n        return {\n            setCode: () => ({ commands }) => {\n                return commands.setMark(this.name);\n            },\n            toggleCode: () => ({ commands }) => {\n                return commands.toggleMark(this.name);\n            },\n            unsetCode: () => ({ commands }) => {\n                return commands.unsetMark(this.name);\n            },\n        };\n    },\n    addKeyboardShortcuts() {\n        return {\n            'Mod-e': () => this.editor.commands.toggleCode(),\n        };\n    },\n    addInputRules() {\n        return [\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({\n                find: inputRegex,\n                type: this.type,\n            }),\n        ];\n    },\n    addPasteRules() {\n        return [\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({\n                find: pasteRegex,\n                type: this.type,\n            }),\n        ];\n    },\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL2V4dGVuc2lvbi1jb2RlL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBbUY7O0FBRW5GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsOENBQUk7QUFDakI7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLGFBQWE7QUFDM0I7QUFDQSxLQUFLO0FBQ0wsaUJBQWlCLGdCQUFnQjtBQUNqQyx3QkFBd0IsNkRBQWU7QUFDdkMsS0FBSztBQUNMO0FBQ0E7QUFDQSw4QkFBOEIsVUFBVTtBQUN4QztBQUNBLGFBQWE7QUFDYixpQ0FBaUMsVUFBVTtBQUMzQztBQUNBLGFBQWE7QUFDYixnQ0FBZ0MsVUFBVTtBQUMxQztBQUNBLGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWSwyREFBYTtBQUN6QjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZLDJEQUFhO0FBQ3pCO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0wsQ0FBQzs7QUFFd0Q7QUFDekQiLCJzb3VyY2VzIjpbIkM6XFxQcm9qZWN0c1xcdHVvbi1pby12MVxcbm9kZV9tb2R1bGVzXFxAdGlwdGFwXFxleHRlbnNpb24tY29kZVxcZGlzdFxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFyaywgbWVyZ2VBdHRyaWJ1dGVzLCBtYXJrSW5wdXRSdWxlLCBtYXJrUGFzdGVSdWxlIH0gZnJvbSAnQHRpcHRhcC9jb3JlJztcblxuLyoqXG4gKiBSZWd1bGFyIGV4cHJlc3Npb25zIHRvIG1hdGNoIGlubGluZSBjb2RlIGJsb2NrcyBlbmNsb3NlZCBpbiBiYWNrdGlja3MuXG4gKiAgSXQgbWF0Y2hlczpcbiAqICAgICAtIEFuIG9wZW5pbmcgYmFja3RpY2ssIGZvbGxvd2VkIGJ5XG4gKiAgICAgLSBBbnkgdGV4dCB0aGF0IGRvZXNuJ3QgaW5jbHVkZSBhIGJhY2t0aWNrIChjYXB0dXJlZCBmb3IgbWFya2luZyksIGZvbGxvd2VkIGJ5XG4gKiAgICAgLSBBIGNsb3NpbmcgYmFja3RpY2suXG4gKiAgVGhpcyBlbnN1cmVzIHRoYXQgYW55IHRleHQgYmV0d2VlbiBiYWNrdGlja3MgaXMgZm9ybWF0dGVkIGFzIGNvZGUsXG4gKiAgcmVnYXJkbGVzcyBvZiB0aGUgc3Vycm91bmRpbmcgY2hhcmFjdGVycyAoZXhjZXB0aW9uIGJlaW5nIGFub3RoZXIgYmFja3RpY2spLlxuICovXG5jb25zdCBpbnB1dFJlZ2V4ID0gLyhefFteYF0pYChbXmBdKylgKD8hYCkvO1xuLyoqXG4gKiBNYXRjaGVzIGlubGluZSBjb2RlIHdoaWxlIHBhc3RpbmcuXG4gKi9cbmNvbnN0IHBhc3RlUmVnZXggPSAvKF58W15gXSlgKFteYF0rKWAoPyFgKS9nO1xuLyoqXG4gKiBUaGlzIGV4dGVuc2lvbiBhbGxvd3MgeW91IHRvIG1hcmsgdGV4dCBhcyBpbmxpbmUgY29kZS5cbiAqIEBzZWUgaHR0cHM6Ly90aXB0YXAuZGV2L2FwaS9tYXJrcy9jb2RlXG4gKi9cbmNvbnN0IENvZGUgPSBNYXJrLmNyZWF0ZSh7XG4gICAgbmFtZTogJ2NvZGUnLFxuICAgIGFkZE9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBIVE1MQXR0cmlidXRlczoge30sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBleGNsdWRlczogJ18nLFxuICAgIGNvZGU6IHRydWUsXG4gICAgZXhpdGFibGU6IHRydWUsXG4gICAgcGFyc2VIVE1MKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgeyB0YWc6ICdjb2RlJyB9LFxuICAgICAgICBdO1xuICAgIH0sXG4gICAgcmVuZGVySFRNTCh7IEhUTUxBdHRyaWJ1dGVzIH0pIHtcbiAgICAgICAgcmV0dXJuIFsnY29kZScsIG1lcmdlQXR0cmlidXRlcyh0aGlzLm9wdGlvbnMuSFRNTEF0dHJpYnV0ZXMsIEhUTUxBdHRyaWJ1dGVzKSwgMF07XG4gICAgfSxcbiAgICBhZGRDb21tYW5kcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNldENvZGU6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZHMuc2V0TWFyayh0aGlzLm5hbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvZ2dsZUNvZGU6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZHMudG9nZ2xlTWFyayh0aGlzLm5hbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHVuc2V0Q29kZTogKCkgPT4gKHsgY29tbWFuZHMgfSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy51bnNldE1hcmsodGhpcy5uYW1lKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBhZGRLZXlib2FyZFNob3J0Y3V0cygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdNb2QtZSc6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnRvZ2dsZUNvZGUoKSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGFkZElucHV0UnVsZXMoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBtYXJrSW5wdXRSdWxlKHtcbiAgICAgICAgICAgICAgICBmaW5kOiBpbnB1dFJlZ2V4LFxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICBdO1xuICAgIH0sXG4gICAgYWRkUGFzdGVSdWxlcygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG1hcmtQYXN0ZVJ1bGUoe1xuICAgICAgICAgICAgICAgIGZpbmQ6IHBhc3RlUmVnZXgsXG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIF07XG4gICAgfSxcbn0pO1xuXG5leHBvcnQgeyBDb2RlLCBDb2RlIGFzIGRlZmF1bHQsIGlucHV0UmVnZXgsIHBhc3RlUmVnZXggfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tiptap/extension-code/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tiptap/extension-collaboration-cursor/dist/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tiptap/extension-collaboration-cursor/dist/index.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CollaborationCursor: () => (/* binding */ CollaborationCursor),\n/* harmony export */   \"default\": () => (/* binding */ CollaborationCursor)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(app-pages-browser)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var y_prosemirror__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! y-prosemirror */ \"(app-pages-browser)/./node_modules/y-prosemirror/src/plugins/cursor-plugin.js\");\n\n\n\nconst awarenessStatesToArray = (states) => {\n    return Array.from(states.entries()).map(([key, value]) => {\n        return {\n            clientId: key,\n            ...value.user,\n        };\n    });\n};\nconst defaultOnUpdate = () => null;\n/**\n * This extension allows you to add collaboration cursors to your editor.\n * @see https://tiptap.dev/api/extensions/collaboration-cursor\n */\nconst CollaborationCursor = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Extension.create({\n    name: 'collaborationCursor',\n    priority: 999,\n    addOptions() {\n        return {\n            provider: null,\n            user: {\n                name: null,\n                color: null,\n            },\n            render: user => {\n                const cursor = document.createElement('span');\n                cursor.classList.add('collaboration-cursor__caret');\n                cursor.setAttribute('style', `border-color: ${user.color}`);\n                const label = document.createElement('div');\n                label.classList.add('collaboration-cursor__label');\n                label.setAttribute('style', `background-color: ${user.color}`);\n                label.insertBefore(document.createTextNode(user.name), null);\n                cursor.insertBefore(label, null);\n                return cursor;\n            },\n            selectionRender: y_prosemirror__WEBPACK_IMPORTED_MODULE_1__.defaultSelectionBuilder,\n            onUpdate: defaultOnUpdate,\n        };\n    },\n    onCreate() {\n        if (this.options.onUpdate !== defaultOnUpdate) {\n            console.warn('[tiptap warn]: DEPRECATED: The \"onUpdate\" option is deprecated. Please use `editor.storage.collaborationCursor.users` instead. Read more: https://tiptap.dev/api/extensions/collaboration-cursor');\n        }\n        if (!this.options.provider) {\n            throw new Error('The \"provider\" option is required for the CollaborationCursor extension');\n        }\n    },\n    addStorage() {\n        return {\n            users: [],\n        };\n    },\n    addCommands() {\n        return {\n            updateUser: attributes => () => {\n                this.options.user = attributes;\n                this.options.provider.awareness.setLocalStateField('user', this.options.user);\n                return true;\n            },\n            user: attributes => ({ editor }) => {\n                console.warn('[tiptap warn]: DEPRECATED: The \"user\" command is deprecated. Please use \"updateUser\" instead. Read more: https://tiptap.dev/api/extensions/collaboration-cursor');\n                return editor.commands.updateUser(attributes);\n            },\n        };\n    },\n    addProseMirrorPlugins() {\n        return [\n            (0,y_prosemirror__WEBPACK_IMPORTED_MODULE_1__.yCursorPlugin)((() => {\n                this.options.provider.awareness.setLocalStateField('user', this.options.user);\n                this.storage.users = awarenessStatesToArray(this.options.provider.awareness.states);\n                this.options.provider.awareness.on('update', () => {\n                    this.storage.users = awarenessStatesToArray(this.options.provider.awareness.states);\n                });\n                return this.options.provider.awareness;\n            })(), \n            // @ts-ignore\n            {\n                cursorBuilder: this.options.render,\n                selectionBuilder: this.options.selectionRender,\n            }),\n        ];\n    },\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL2V4dGVuc2lvbi1jb2xsYWJvcmF0aW9uLWN1cnNvci9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBeUM7QUFDOEI7O0FBRXZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsbURBQVM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsV0FBVztBQUN6RTtBQUNBO0FBQ0EsaUVBQWlFLFdBQVc7QUFDNUU7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLDZCQUE2QixrRUFBdUI7QUFDcEQ7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsbUNBQW1DLFFBQVE7QUFDM0M7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWSw0REFBYTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTCxDQUFDOztBQUU4RDtBQUMvRCIsInNvdXJjZXMiOlsiQzpcXFByb2plY3RzXFx0dW9uLWlvLXYxXFxub2RlX21vZHVsZXNcXEB0aXB0YXBcXGV4dGVuc2lvbi1jb2xsYWJvcmF0aW9uLWN1cnNvclxcZGlzdFxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXh0ZW5zaW9uIH0gZnJvbSAnQHRpcHRhcC9jb3JlJztcbmltcG9ydCB7IGRlZmF1bHRTZWxlY3Rpb25CdWlsZGVyLCB5Q3Vyc29yUGx1Z2luIH0gZnJvbSAneS1wcm9zZW1pcnJvcic7XG5cbmNvbnN0IGF3YXJlbmVzc1N0YXRlc1RvQXJyYXkgPSAoc3RhdGVzKSA9PiB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20oc3RhdGVzLmVudHJpZXMoKSkubWFwKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNsaWVudElkOiBrZXksXG4gICAgICAgICAgICAuLi52YWx1ZS51c2VyLFxuICAgICAgICB9O1xuICAgIH0pO1xufTtcbmNvbnN0IGRlZmF1bHRPblVwZGF0ZSA9ICgpID0+IG51bGw7XG4vKipcbiAqIFRoaXMgZXh0ZW5zaW9uIGFsbG93cyB5b3UgdG8gYWRkIGNvbGxhYm9yYXRpb24gY3Vyc29ycyB0byB5b3VyIGVkaXRvci5cbiAqIEBzZWUgaHR0cHM6Ly90aXB0YXAuZGV2L2FwaS9leHRlbnNpb25zL2NvbGxhYm9yYXRpb24tY3Vyc29yXG4gKi9cbmNvbnN0IENvbGxhYm9yYXRpb25DdXJzb3IgPSBFeHRlbnNpb24uY3JlYXRlKHtcbiAgICBuYW1lOiAnY29sbGFib3JhdGlvbkN1cnNvcicsXG4gICAgcHJpb3JpdHk6IDk5OSxcbiAgICBhZGRPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcHJvdmlkZXI6IG51bGwsXG4gICAgICAgICAgICB1c2VyOiB7XG4gICAgICAgICAgICAgICAgbmFtZTogbnVsbCxcbiAgICAgICAgICAgICAgICBjb2xvcjogbnVsbCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZW5kZXI6IHVzZXIgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnNvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgICAgICAgICBjdXJzb3IuY2xhc3NMaXN0LmFkZCgnY29sbGFib3JhdGlvbi1jdXJzb3JfX2NhcmV0Jyk7XG4gICAgICAgICAgICAgICAgY3Vyc29yLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBgYm9yZGVyLWNvbG9yOiAke3VzZXIuY29sb3J9YCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICBsYWJlbC5jbGFzc0xpc3QuYWRkKCdjb2xsYWJvcmF0aW9uLWN1cnNvcl9fbGFiZWwnKTtcbiAgICAgICAgICAgICAgICBsYWJlbC5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgYGJhY2tncm91bmQtY29sb3I6ICR7dXNlci5jb2xvcn1gKTtcbiAgICAgICAgICAgICAgICBsYWJlbC5pbnNlcnRCZWZvcmUoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodXNlci5uYW1lKSwgbnVsbCk7XG4gICAgICAgICAgICAgICAgY3Vyc29yLmluc2VydEJlZm9yZShsYWJlbCwgbnVsbCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnNvcjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZWxlY3Rpb25SZW5kZXI6IGRlZmF1bHRTZWxlY3Rpb25CdWlsZGVyLFxuICAgICAgICAgICAgb25VcGRhdGU6IGRlZmF1bHRPblVwZGF0ZSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIG9uQ3JlYXRlKCkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLm9uVXBkYXRlICE9PSBkZWZhdWx0T25VcGRhdGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignW3RpcHRhcCB3YXJuXTogREVQUkVDQVRFRDogVGhlIFwib25VcGRhdGVcIiBvcHRpb24gaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBgZWRpdG9yLnN0b3JhZ2UuY29sbGFib3JhdGlvbkN1cnNvci51c2Vyc2AgaW5zdGVhZC4gUmVhZCBtb3JlOiBodHRwczovL3RpcHRhcC5kZXYvYXBpL2V4dGVuc2lvbnMvY29sbGFib3JhdGlvbi1jdXJzb3InKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5wcm92aWRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgXCJwcm92aWRlclwiIG9wdGlvbiBpcyByZXF1aXJlZCBmb3IgdGhlIENvbGxhYm9yYXRpb25DdXJzb3IgZXh0ZW5zaW9uJyk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGFkZFN0b3JhZ2UoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB1c2VyczogW10sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBhZGRDb21tYW5kcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHVwZGF0ZVVzZXI6IGF0dHJpYnV0ZXMgPT4gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy51c2VyID0gYXR0cmlidXRlcztcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMucHJvdmlkZXIuYXdhcmVuZXNzLnNldExvY2FsU3RhdGVGaWVsZCgndXNlcicsIHRoaXMub3B0aW9ucy51c2VyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1c2VyOiBhdHRyaWJ1dGVzID0+ICh7IGVkaXRvciB9KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdbdGlwdGFwIHdhcm5dOiBERVBSRUNBVEVEOiBUaGUgXCJ1c2VyXCIgY29tbWFuZCBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIFwidXBkYXRlVXNlclwiIGluc3RlYWQuIFJlYWQgbW9yZTogaHR0cHM6Ly90aXB0YXAuZGV2L2FwaS9leHRlbnNpb25zL2NvbGxhYm9yYXRpb24tY3Vyc29yJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVkaXRvci5jb21tYW5kcy51cGRhdGVVc2VyKGF0dHJpYnV0ZXMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGFkZFByb3NlTWlycm9yUGx1Z2lucygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHlDdXJzb3JQbHVnaW4oKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMucHJvdmlkZXIuYXdhcmVuZXNzLnNldExvY2FsU3RhdGVGaWVsZCgndXNlcicsIHRoaXMub3B0aW9ucy51c2VyKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3JhZ2UudXNlcnMgPSBhd2FyZW5lc3NTdGF0ZXNUb0FycmF5KHRoaXMub3B0aW9ucy5wcm92aWRlci5hd2FyZW5lc3Muc3RhdGVzKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMucHJvdmlkZXIuYXdhcmVuZXNzLm9uKCd1cGRhdGUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcmFnZS51c2VycyA9IGF3YXJlbmVzc1N0YXRlc1RvQXJyYXkodGhpcy5vcHRpb25zLnByb3ZpZGVyLmF3YXJlbmVzcy5zdGF0ZXMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMucHJvdmlkZXIuYXdhcmVuZXNzO1xuICAgICAgICAgICAgfSkoKSwgXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY3Vyc29yQnVpbGRlcjogdGhpcy5vcHRpb25zLnJlbmRlcixcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb25CdWlsZGVyOiB0aGlzLm9wdGlvbnMuc2VsZWN0aW9uUmVuZGVyLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIF07XG4gICAgfSxcbn0pO1xuXG5leHBvcnQgeyBDb2xsYWJvcmF0aW9uQ3Vyc29yLCBDb2xsYWJvcmF0aW9uQ3Vyc29yIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tiptap/extension-collaboration-cursor/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tiptap/extension-collaboration/dist/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tiptap/extension-collaboration/dist/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Collaboration: () => (/* binding */ Collaboration),\n/* harmony export */   \"default\": () => (/* binding */ Collaboration),\n/* harmony export */   isChangeOrigin: () => (/* binding */ isChangeOrigin)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/core */ \"(app-pages-browser)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/state */ \"(app-pages-browser)/./node_modules/@tiptap/pm/state/dist/index.js\");\n/* harmony import */ var y_prosemirror__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! y-prosemirror */ \"(app-pages-browser)/./node_modules/y-prosemirror/src/plugins/keys.js\");\n/* harmony import */ var y_prosemirror__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! y-prosemirror */ \"(app-pages-browser)/./node_modules/y-prosemirror/src/plugins/undo-plugin.js\");\n/* harmony import */ var y_prosemirror__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! y-prosemirror */ \"(app-pages-browser)/./node_modules/y-prosemirror/src/plugins/sync-plugin.js\");\n/* harmony import */ var y_prosemirror__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! y-prosemirror */ \"(app-pages-browser)/./node_modules/y-prosemirror/src/lib.js\");\n\n\n\n\n/**\n * This extension allows you to collaborate with others in real-time.\n * @see https://tiptap.dev/api/extensions/collaboration\n */\nconst Collaboration = _tiptap_core__WEBPACK_IMPORTED_MODULE_1__.Extension.create({\n    name: 'collaboration',\n    priority: 1000,\n    addOptions() {\n        return {\n            document: null,\n            field: 'default',\n            fragment: null,\n        };\n    },\n    addStorage() {\n        return {\n            isDisabled: false,\n        };\n    },\n    onCreate() {\n        if (this.editor.extensionManager.extensions.find(extension => extension.name === 'history')) {\n            console.warn('[tiptap warn]: \"@tiptap/extension-collaboration\" comes with its own history support and is not compatible with \"@tiptap/extension-history\".');\n        }\n    },\n    addCommands() {\n        return {\n            undo: () => ({ tr, state, dispatch }) => {\n                tr.setMeta('preventDispatch', true);\n                const undoManager = y_prosemirror__WEBPACK_IMPORTED_MODULE_2__.yUndoPluginKey.getState(state).undoManager;\n                if (undoManager.undoStack.length === 0) {\n                    return false;\n                }\n                if (!dispatch) {\n                    return true;\n                }\n                return (0,y_prosemirror__WEBPACK_IMPORTED_MODULE_3__.undo)(state);\n            },\n            redo: () => ({ tr, state, dispatch }) => {\n                tr.setMeta('preventDispatch', true);\n                const undoManager = y_prosemirror__WEBPACK_IMPORTED_MODULE_2__.yUndoPluginKey.getState(state).undoManager;\n                if (undoManager.redoStack.length === 0) {\n                    return false;\n                }\n                if (!dispatch) {\n                    return true;\n                }\n                return (0,y_prosemirror__WEBPACK_IMPORTED_MODULE_3__.redo)(state);\n            },\n        };\n    },\n    addKeyboardShortcuts() {\n        return {\n            'Mod-z': () => this.editor.commands.undo(),\n            'Mod-y': () => this.editor.commands.redo(),\n            'Shift-Mod-z': () => this.editor.commands.redo(),\n        };\n    },\n    addProseMirrorPlugins() {\n        var _a;\n        const fragment = this.options.fragment\n            ? this.options.fragment\n            : this.options.document.getXmlFragment(this.options.field);\n        // Quick fix until there is an official implementation (thanks to @hamflx).\n        // See https://github.com/yjs/y-prosemirror/issues/114 and https://github.com/yjs/y-prosemirror/issues/102\n        const yUndoPluginInstance = (0,y_prosemirror__WEBPACK_IMPORTED_MODULE_3__.yUndoPlugin)(this.options.yUndoOptions);\n        const originalUndoPluginView = yUndoPluginInstance.spec.view;\n        yUndoPluginInstance.spec.view = (view) => {\n            const { undoManager } = y_prosemirror__WEBPACK_IMPORTED_MODULE_2__.yUndoPluginKey.getState(view.state);\n            if (undoManager.restore) {\n                undoManager.restore();\n                undoManager.restore = () => {\n                    // noop\n                };\n            }\n            const viewRet = originalUndoPluginView ? originalUndoPluginView(view) : undefined;\n            return {\n                destroy: () => {\n                    const hasUndoManSelf = undoManager.trackedOrigins.has(undoManager);\n                    // eslint-disable-next-line no-underscore-dangle\n                    const observers = undoManager._observers;\n                    undoManager.restore = () => {\n                        if (hasUndoManSelf) {\n                            undoManager.trackedOrigins.add(undoManager);\n                        }\n                        undoManager.doc.on('afterTransaction', undoManager.afterTransactionHandler);\n                        // eslint-disable-next-line no-underscore-dangle\n                        undoManager._observers = observers;\n                    };\n                    if (viewRet === null || viewRet === void 0 ? void 0 : viewRet.destroy) {\n                        viewRet.destroy();\n                    }\n                },\n            };\n        };\n        const ySyncPluginOptions = {\n            ...this.options.ySyncOptions,\n            onFirstRender: this.options.onFirstRender,\n        };\n        const ySyncPluginInstance = (0,y_prosemirror__WEBPACK_IMPORTED_MODULE_4__.ySyncPlugin)(fragment, ySyncPluginOptions);\n        if (this.editor.options.enableContentCheck) {\n            (_a = fragment.doc) === null || _a === void 0 ? void 0 : _a.on('beforeTransaction', () => {\n                try {\n                    const jsonContent = ((0,y_prosemirror__WEBPACK_IMPORTED_MODULE_5__.yXmlFragmentToProsemirrorJSON)(fragment));\n                    if (jsonContent.content.length === 0) {\n                        return;\n                    }\n                    this.editor.schema.nodeFromJSON(jsonContent).check();\n                }\n                catch (error) {\n                    this.editor.emit('contentError', {\n                        error: error,\n                        editor: this.editor,\n                        disableCollaboration: () => {\n                            var _a;\n                            (_a = fragment.doc) === null || _a === void 0 ? void 0 : _a.destroy();\n                            this.storage.isDisabled = true;\n                        },\n                    });\n                    // If the content is invalid, return false to prevent the transaction from being applied\n                    return false;\n                }\n            });\n        }\n        return [\n            ySyncPluginInstance,\n            yUndoPluginInstance,\n            // Only add the filterInvalidContent plugin if content checking is enabled\n            this.editor.options.enableContentCheck\n                && new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n                    key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey('filterInvalidContent'),\n                    filterTransaction: () => {\n                        var _a;\n                        // When collaboration is disabled, prevent any sync transactions from being applied\n                        if (this.storage.isDisabled) {\n                            // Destroy the Yjs document to prevent any further sync transactions\n                            (_a = fragment.doc) === null || _a === void 0 ? void 0 : _a.destroy();\n                            return true;\n                        }\n                        return true;\n                    },\n                }),\n        ].filter(Boolean);\n    },\n});\n\n/**\n * Checks if a transaction was originated from a Yjs change.\n * @param {Transaction} transaction - The transaction to check.\n * @returns {boolean} - True if the transaction was originated from a Yjs change, false otherwise.\n * @example\n * const transaction = new Transaction(doc)\n * const isOrigin = isChangeOrigin(transaction) // returns false\n */\nfunction isChangeOrigin(transaction) {\n    return !!transaction.getMeta(y_prosemirror__WEBPACK_IMPORTED_MODULE_2__.ySyncPluginKey);\n}\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tiptap/extension-collaboration/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tiptap/extension-floating-menu/dist/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tiptap/extension-floating-menu/dist/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FloatingMenu: () => (/* binding */ FloatingMenu),\n/* harmony export */   FloatingMenuPlugin: () => (/* binding */ FloatingMenuPlugin),\n/* harmony export */   FloatingMenuView: () => (/* binding */ FloatingMenuView),\n/* harmony export */   \"default\": () => (/* binding */ FloatingMenu)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/core */ \"(app-pages-browser)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/state */ \"(app-pages-browser)/./node_modules/@tiptap/pm/state/dist/index.js\");\n/* harmony import */ var tippy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tippy.js */ \"(app-pages-browser)/./node_modules/tippy.js/dist/tippy.esm.js\");\n\n\n\n\nclass FloatingMenuView {\n    getTextContent(node) {\n        return (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.getText)(node, { textSerializers: (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.getTextSerializersFromSchema)(this.editor.schema) });\n    }\n    constructor({ editor, element, view, tippyOptions = {}, shouldShow, }) {\n        this.preventHide = false;\n        this.shouldShow = ({ view, state }) => {\n            const { selection } = state;\n            const { $anchor, empty } = selection;\n            const isRootDepth = $anchor.depth === 1;\n            const isEmptyTextBlock = $anchor.parent.isTextblock && !$anchor.parent.type.spec.code && !$anchor.parent.textContent && $anchor.parent.childCount === 0 && !this.getTextContent($anchor.parent);\n            if (!view.hasFocus()\n                || !empty\n                || !isRootDepth\n                || !isEmptyTextBlock\n                || !this.editor.isEditable) {\n                return false;\n            }\n            return true;\n        };\n        this.mousedownHandler = () => {\n            this.preventHide = true;\n        };\n        this.focusHandler = () => {\n            // we use `setTimeout` to make sure `selection` is already updated\n            setTimeout(() => this.update(this.editor.view));\n        };\n        this.blurHandler = ({ event }) => {\n            var _a;\n            if (this.preventHide) {\n                this.preventHide = false;\n                return;\n            }\n            if ((event === null || event === void 0 ? void 0 : event.relatedTarget) && ((_a = this.element.parentNode) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget))) {\n                return;\n            }\n            if ((event === null || event === void 0 ? void 0 : event.relatedTarget) === this.editor.view.dom) {\n                return;\n            }\n            this.hide();\n        };\n        this.tippyBlurHandler = (event) => {\n            this.blurHandler({ event });\n        };\n        this.editor = editor;\n        this.element = element;\n        this.view = view;\n        if (shouldShow) {\n            this.shouldShow = shouldShow;\n        }\n        this.element.addEventListener('mousedown', this.mousedownHandler, { capture: true });\n        this.editor.on('focus', this.focusHandler);\n        this.editor.on('blur', this.blurHandler);\n        this.tippyOptions = tippyOptions;\n        // Detaches menu content from its current parent\n        this.element.remove();\n        this.element.style.visibility = 'visible';\n    }\n    createTooltip() {\n        const { element: editorElement } = this.editor.options;\n        const editorIsAttached = !!editorElement.parentElement;\n        if (this.tippy || !editorIsAttached) {\n            return;\n        }\n        this.tippy = (0,tippy_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(editorElement, {\n            duration: 0,\n            getReferenceClientRect: null,\n            content: this.element,\n            interactive: true,\n            trigger: 'manual',\n            placement: 'right',\n            hideOnClick: 'toggle',\n            ...this.tippyOptions,\n        });\n        // maybe we have to hide tippy on its own blur event as well\n        if (this.tippy.popper.firstChild) {\n            this.tippy.popper.firstChild.addEventListener('blur', this.tippyBlurHandler);\n        }\n    }\n    update(view, oldState) {\n        var _a, _b, _c;\n        const { state } = view;\n        const { doc, selection } = state;\n        const { from, to } = selection;\n        const isSame = oldState && oldState.doc.eq(doc) && oldState.selection.eq(selection);\n        if (isSame) {\n            return;\n        }\n        this.createTooltip();\n        const shouldShow = (_a = this.shouldShow) === null || _a === void 0 ? void 0 : _a.call(this, {\n            editor: this.editor,\n            view,\n            state,\n            oldState,\n        });\n        if (!shouldShow) {\n            this.hide();\n            return;\n        }\n        (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.setProps({\n            getReferenceClientRect: ((_c = this.tippyOptions) === null || _c === void 0 ? void 0 : _c.getReferenceClientRect) || (() => (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.posToDOMRect)(view, from, to)),\n        });\n        this.show();\n    }\n    show() {\n        var _a;\n        (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.show();\n    }\n    hide() {\n        var _a;\n        (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.hide();\n    }\n    destroy() {\n        var _a, _b;\n        if ((_a = this.tippy) === null || _a === void 0 ? void 0 : _a.popper.firstChild) {\n            this.tippy.popper.firstChild.removeEventListener('blur', this.tippyBlurHandler);\n        }\n        (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.destroy();\n        this.element.removeEventListener('mousedown', this.mousedownHandler, { capture: true });\n        this.editor.off('focus', this.focusHandler);\n        this.editor.off('blur', this.blurHandler);\n    }\n}\nconst FloatingMenuPlugin = (options) => {\n    return new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n        key: typeof options.pluginKey === 'string' ? new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(options.pluginKey) : options.pluginKey,\n        view: view => new FloatingMenuView({ view, ...options }),\n    });\n};\n\n/**\n * This extension allows you to create a floating menu.\n * @see https://tiptap.dev/api/extensions/floating-menu\n */\nconst FloatingMenu = _tiptap_core__WEBPACK_IMPORTED_MODULE_1__.Extension.create({\n    name: 'floatingMenu',\n    addOptions() {\n        return {\n            element: null,\n            tippyOptions: {},\n            pluginKey: 'floatingMenu',\n            shouldShow: null,\n        };\n    },\n    addProseMirrorPlugins() {\n        if (!this.options.element) {\n            return [];\n        }\n        return [\n            FloatingMenuPlugin({\n                pluginKey: this.options.pluginKey,\n                editor: this.editor,\n                element: this.options.element,\n                tippyOptions: this.options.tippyOptions,\n                shouldShow: this.options.shouldShow,\n            }),\n        ];\n    },\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tiptap/extension-floating-menu/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tiptap/extension-gapcursor/dist/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-gapcursor/dist/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Gapcursor: () => (/* binding */ Gapcursor),\n/* harmony export */   \"default\": () => (/* binding */ Gapcursor)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/core */ \"(app-pages-browser)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_gapcursor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/gapcursor */ \"(app-pages-browser)/./node_modules/@tiptap/pm/gapcursor/dist/index.js\");\n\n\n\n/**\n * This extension allows you to add a gap cursor to your editor.\n * A gap cursor is a cursor that appears when you click on a place\n * where no content is present, for example inbetween nodes.\n * @see https://tiptap.dev/api/extensions/gapcursor\n */\nconst Gapcursor = _tiptap_core__WEBPACK_IMPORTED_MODULE_1__.Extension.create({\n    name: 'gapCursor',\n    addProseMirrorPlugins() {\n        return [\n            (0,_tiptap_pm_gapcursor__WEBPACK_IMPORTED_MODULE_0__.gapCursor)(),\n        ];\n    },\n    extendNodeSchema(extension) {\n        var _a;\n        const context = {\n            name: extension.name,\n            options: extension.options,\n            storage: extension.storage,\n        };\n        return {\n            allowGapCursor: (_a = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.callOrReturn)((0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.getExtensionField)(extension, 'allowGapCursor', context))) !== null && _a !== void 0 ? _a : null,\n        };\n    },\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL2V4dGVuc2lvbi1nYXBjdXJzb3IvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTBFO0FBQ3pCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsbURBQVM7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsWUFBWSwrREFBUztBQUNyQjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLDBEQUFZLENBQUMsK0RBQWlCO0FBQ2hFO0FBQ0EsS0FBSztBQUNMLENBQUM7O0FBRTBDO0FBQzNDIiwic291cmNlcyI6WyJDOlxcUHJvamVjdHNcXHR1b24taW8tdjFcXG5vZGVfbW9kdWxlc1xcQHRpcHRhcFxcZXh0ZW5zaW9uLWdhcGN1cnNvclxcZGlzdFxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXh0ZW5zaW9uLCBjYWxsT3JSZXR1cm4sIGdldEV4dGVuc2lvbkZpZWxkIH0gZnJvbSAnQHRpcHRhcC9jb3JlJztcbmltcG9ydCB7IGdhcEN1cnNvciB9IGZyb20gJ0B0aXB0YXAvcG0vZ2FwY3Vyc29yJztcblxuLyoqXG4gKiBUaGlzIGV4dGVuc2lvbiBhbGxvd3MgeW91IHRvIGFkZCBhIGdhcCBjdXJzb3IgdG8geW91ciBlZGl0b3IuXG4gKiBBIGdhcCBjdXJzb3IgaXMgYSBjdXJzb3IgdGhhdCBhcHBlYXJzIHdoZW4geW91IGNsaWNrIG9uIGEgcGxhY2VcbiAqIHdoZXJlIG5vIGNvbnRlbnQgaXMgcHJlc2VudCwgZm9yIGV4YW1wbGUgaW5iZXR3ZWVuIG5vZGVzLlxuICogQHNlZSBodHRwczovL3RpcHRhcC5kZXYvYXBpL2V4dGVuc2lvbnMvZ2FwY3Vyc29yXG4gKi9cbmNvbnN0IEdhcGN1cnNvciA9IEV4dGVuc2lvbi5jcmVhdGUoe1xuICAgIG5hbWU6ICdnYXBDdXJzb3InLFxuICAgIGFkZFByb3NlTWlycm9yUGx1Z2lucygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIGdhcEN1cnNvcigpLFxuICAgICAgICBdO1xuICAgIH0sXG4gICAgZXh0ZW5kTm9kZVNjaGVtYShleHRlbnNpb24pIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBjb250ZXh0ID0ge1xuICAgICAgICAgICAgbmFtZTogZXh0ZW5zaW9uLm5hbWUsXG4gICAgICAgICAgICBvcHRpb25zOiBleHRlbnNpb24ub3B0aW9ucyxcbiAgICAgICAgICAgIHN0b3JhZ2U6IGV4dGVuc2lvbi5zdG9yYWdlLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWxsb3dHYXBDdXJzb3I6IChfYSA9IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sICdhbGxvd0dhcEN1cnNvcicsIGNvbnRleHQpKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbnVsbCxcbiAgICAgICAgfTtcbiAgICB9LFxufSk7XG5cbmV4cG9ydCB7IEdhcGN1cnNvciwgR2FwY3Vyc29yIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tiptap/extension-gapcursor/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tiptap/extension-history/dist/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tiptap/extension-history/dist/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   History: () => (/* binding */ History),\n/* harmony export */   \"default\": () => (/* binding */ History)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/core */ \"(app-pages-browser)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_history__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/history */ \"(app-pages-browser)/./node_modules/@tiptap/pm/history/dist/index.js\");\n\n\n\n/**\n * This extension allows you to undo and redo recent changes.\n * @see https://www.tiptap.dev/api/extensions/history\n *\n * **Important**: If the `@tiptap/extension-collaboration` package is used, make sure to remove\n * the `history` extension, as it is not compatible with the `collaboration` extension.\n *\n * `@tiptap/extension-collaboration` uses its own history implementation.\n */\nconst History = _tiptap_core__WEBPACK_IMPORTED_MODULE_1__.Extension.create({\n    name: 'history',\n    addOptions() {\n        return {\n            depth: 100,\n            newGroupDelay: 500,\n        };\n    },\n    addCommands() {\n        return {\n            undo: () => ({ state, dispatch }) => {\n                return (0,_tiptap_pm_history__WEBPACK_IMPORTED_MODULE_0__.undo)(state, dispatch);\n            },\n            redo: () => ({ state, dispatch }) => {\n                return (0,_tiptap_pm_history__WEBPACK_IMPORTED_MODULE_0__.redo)(state, dispatch);\n            },\n        };\n    },\n    addProseMirrorPlugins() {\n        return [\n            (0,_tiptap_pm_history__WEBPACK_IMPORTED_MODULE_0__.history)(this.options),\n        ];\n    },\n    addKeyboardShortcuts() {\n        return {\n            'Mod-z': () => this.editor.commands.undo(),\n            'Shift-Mod-z': () => this.editor.commands.redo(),\n            'Mod-y': () => this.editor.commands.redo(),\n            // Russian keyboard layouts\n            'Mod-я': () => this.editor.commands.undo(),\n            'Shift-Mod-я': () => this.editor.commands.redo(),\n        };\n    },\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL2V4dGVuc2lvbi1oaXN0b3J5L2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF5QztBQUNnQjs7QUFFekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG1EQUFTO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsMkJBQTJCLGlCQUFpQjtBQUM1Qyx1QkFBdUIsd0RBQUk7QUFDM0IsYUFBYTtBQUNiLDJCQUEyQixpQkFBaUI7QUFDNUMsdUJBQXVCLHdEQUFJO0FBQzNCLGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWSwyREFBTztBQUNuQjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsQ0FBQzs7QUFFc0M7QUFDdkMiLCJzb3VyY2VzIjpbIkM6XFxQcm9qZWN0c1xcdHVvbi1pby12MVxcbm9kZV9tb2R1bGVzXFxAdGlwdGFwXFxleHRlbnNpb24taGlzdG9yeVxcZGlzdFxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXh0ZW5zaW9uIH0gZnJvbSAnQHRpcHRhcC9jb3JlJztcbmltcG9ydCB7IHVuZG8sIHJlZG8sIGhpc3RvcnkgfSBmcm9tICdAdGlwdGFwL3BtL2hpc3RvcnknO1xuXG4vKipcbiAqIFRoaXMgZXh0ZW5zaW9uIGFsbG93cyB5b3UgdG8gdW5kbyBhbmQgcmVkbyByZWNlbnQgY2hhbmdlcy5cbiAqIEBzZWUgaHR0cHM6Ly93d3cudGlwdGFwLmRldi9hcGkvZXh0ZW5zaW9ucy9oaXN0b3J5XG4gKlxuICogKipJbXBvcnRhbnQqKjogSWYgdGhlIGBAdGlwdGFwL2V4dGVuc2lvbi1jb2xsYWJvcmF0aW9uYCBwYWNrYWdlIGlzIHVzZWQsIG1ha2Ugc3VyZSB0byByZW1vdmVcbiAqIHRoZSBgaGlzdG9yeWAgZXh0ZW5zaW9uLCBhcyBpdCBpcyBub3QgY29tcGF0aWJsZSB3aXRoIHRoZSBgY29sbGFib3JhdGlvbmAgZXh0ZW5zaW9uLlxuICpcbiAqIGBAdGlwdGFwL2V4dGVuc2lvbi1jb2xsYWJvcmF0aW9uYCB1c2VzIGl0cyBvd24gaGlzdG9yeSBpbXBsZW1lbnRhdGlvbi5cbiAqL1xuY29uc3QgSGlzdG9yeSA9IEV4dGVuc2lvbi5jcmVhdGUoe1xuICAgIG5hbWU6ICdoaXN0b3J5JyxcbiAgICBhZGRPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGVwdGg6IDEwMCxcbiAgICAgICAgICAgIG5ld0dyb3VwRGVsYXk6IDUwMCxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGFkZENvbW1hbmRzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdW5kbzogKCkgPT4gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kbyhzdGF0ZSwgZGlzcGF0Y2gpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlZG86ICgpID0+ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlZG8oc3RhdGUsIGRpc3BhdGNoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBhZGRQcm9zZU1pcnJvclBsdWdpbnMoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBoaXN0b3J5KHRoaXMub3B0aW9ucyksXG4gICAgICAgIF07XG4gICAgfSxcbiAgICBhZGRLZXlib2FyZFNob3J0Y3V0cygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdNb2Qteic6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnVuZG8oKSxcbiAgICAgICAgICAgICdTaGlmdC1Nb2Qteic6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnJlZG8oKSxcbiAgICAgICAgICAgICdNb2QteSc6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnJlZG8oKSxcbiAgICAgICAgICAgIC8vIFJ1c3NpYW4ga2V5Ym9hcmQgbGF5b3V0c1xuICAgICAgICAgICAgJ01vZC3Rjyc6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnVuZG8oKSxcbiAgICAgICAgICAgICdTaGlmdC1Nb2Qt0Y8nOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy5yZWRvKCksXG4gICAgICAgIH07XG4gICAgfSxcbn0pO1xuXG5leHBvcnQgeyBIaXN0b3J5LCBIaXN0b3J5IGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tiptap/extension-history/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tiptap/extension-italic/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tiptap/extension-italic/dist/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Italic: () => (/* binding */ Italic),\n/* harmony export */   \"default\": () => (/* binding */ Italic),\n/* harmony export */   starInputRegex: () => (/* binding */ starInputRegex),\n/* harmony export */   starPasteRegex: () => (/* binding */ starPasteRegex),\n/* harmony export */   underscoreInputRegex: () => (/* binding */ underscoreInputRegex),\n/* harmony export */   underscorePasteRegex: () => (/* binding */ underscorePasteRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(app-pages-browser)/./node_modules/@tiptap/core/dist/index.js\");\n\n\n/**\n * Matches an italic to a *italic* on input.\n */\nconst starInputRegex = /(?:^|\\s)(\\*(?!\\s+\\*)((?:[^*]+))\\*(?!\\s+\\*))$/;\n/**\n * Matches an italic to a *italic* on paste.\n */\nconst starPasteRegex = /(?:^|\\s)(\\*(?!\\s+\\*)((?:[^*]+))\\*(?!\\s+\\*))/g;\n/**\n * Matches an italic to a _italic_ on input.\n */\nconst underscoreInputRegex = /(?:^|\\s)(_(?!\\s+_)((?:[^_]+))_(?!\\s+_))$/;\n/**\n * Matches an italic to a _italic_ on paste.\n */\nconst underscorePasteRegex = /(?:^|\\s)(_(?!\\s+_)((?:[^_]+))_(?!\\s+_))/g;\n/**\n * This extension allows you to create italic text.\n * @see https://www.tiptap.dev/api/marks/italic\n */\nconst Italic = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({\n    name: 'italic',\n    addOptions() {\n        return {\n            HTMLAttributes: {},\n        };\n    },\n    parseHTML() {\n        return [\n            {\n                tag: 'em',\n            },\n            {\n                tag: 'i',\n                getAttrs: node => node.style.fontStyle !== 'normal' && null,\n            },\n            {\n                style: 'font-style=normal',\n                clearMark: mark => mark.type.name === this.name,\n            },\n            {\n                style: 'font-style=italic',\n            },\n        ];\n    },\n    renderHTML({ HTMLAttributes }) {\n        return ['em', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\n    },\n    addCommands() {\n        return {\n            setItalic: () => ({ commands }) => {\n                return commands.setMark(this.name);\n            },\n            toggleItalic: () => ({ commands }) => {\n                return commands.toggleMark(this.name);\n            },\n            unsetItalic: () => ({ commands }) => {\n                return commands.unsetMark(this.name);\n            },\n        };\n    },\n    addKeyboardShortcuts() {\n        return {\n            'Mod-i': () => this.editor.commands.toggleItalic(),\n            'Mod-I': () => this.editor.commands.toggleItalic(),\n        };\n    },\n    addInputRules() {\n        return [\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({\n                find: starInputRegex,\n                type: this.type,\n            }),\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({\n                find: underscoreInputRegex,\n                type: this.type,\n            }),\n        ];\n    },\n    addPasteRules() {\n        return [\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({\n                find: starPasteRegex,\n                type: this.type,\n            }),\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({\n                find: underscorePasteRegex,\n                type: this.type,\n            }),\n        ];\n    },\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL2V4dGVuc2lvbi1pdGFsaWMvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQW1GOztBQUVuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSw4Q0FBSTtBQUNuQjtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsS0FBSztBQUNMLGlCQUFpQixnQkFBZ0I7QUFDakMsc0JBQXNCLDZEQUFlO0FBQ3JDLEtBQUs7QUFDTDtBQUNBO0FBQ0EsZ0NBQWdDLFVBQVU7QUFDMUM7QUFDQSxhQUFhO0FBQ2IsbUNBQW1DLFVBQVU7QUFDN0M7QUFDQSxhQUFhO0FBQ2Isa0NBQWtDLFVBQVU7QUFDNUM7QUFDQSxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWSwyREFBYTtBQUN6QjtBQUNBO0FBQ0EsYUFBYTtBQUNiLFlBQVksMkRBQWE7QUFDekI7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWSwyREFBYTtBQUN6QjtBQUNBO0FBQ0EsYUFBYTtBQUNiLFlBQVksMkRBQWE7QUFDekI7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTCxDQUFDOztBQUVnSDtBQUNqSCIsInNvdXJjZXMiOlsiQzpcXFByb2plY3RzXFx0dW9uLWlvLXYxXFxub2RlX21vZHVsZXNcXEB0aXB0YXBcXGV4dGVuc2lvbi1pdGFsaWNcXGRpc3RcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hcmssIG1lcmdlQXR0cmlidXRlcywgbWFya0lucHV0UnVsZSwgbWFya1Bhc3RlUnVsZSB9IGZyb20gJ0B0aXB0YXAvY29yZSc7XG5cbi8qKlxuICogTWF0Y2hlcyBhbiBpdGFsaWMgdG8gYSAqaXRhbGljKiBvbiBpbnB1dC5cbiAqL1xuY29uc3Qgc3RhcklucHV0UmVnZXggPSAvKD86XnxcXHMpKFxcKig/IVxccytcXCopKCg/OlteKl0rKSlcXCooPyFcXHMrXFwqKSkkLztcbi8qKlxuICogTWF0Y2hlcyBhbiBpdGFsaWMgdG8gYSAqaXRhbGljKiBvbiBwYXN0ZS5cbiAqL1xuY29uc3Qgc3RhclBhc3RlUmVnZXggPSAvKD86XnxcXHMpKFxcKig/IVxccytcXCopKCg/OlteKl0rKSlcXCooPyFcXHMrXFwqKSkvZztcbi8qKlxuICogTWF0Y2hlcyBhbiBpdGFsaWMgdG8gYSBfaXRhbGljXyBvbiBpbnB1dC5cbiAqL1xuY29uc3QgdW5kZXJzY29yZUlucHV0UmVnZXggPSAvKD86XnxcXHMpKF8oPyFcXHMrXykoKD86W15fXSspKV8oPyFcXHMrXykpJC87XG4vKipcbiAqIE1hdGNoZXMgYW4gaXRhbGljIHRvIGEgX2l0YWxpY18gb24gcGFzdGUuXG4gKi9cbmNvbnN0IHVuZGVyc2NvcmVQYXN0ZVJlZ2V4ID0gLyg/Ol58XFxzKShfKD8hXFxzK18pKCg/OlteX10rKSlfKD8hXFxzK18pKS9nO1xuLyoqXG4gKiBUaGlzIGV4dGVuc2lvbiBhbGxvd3MgeW91IHRvIGNyZWF0ZSBpdGFsaWMgdGV4dC5cbiAqIEBzZWUgaHR0cHM6Ly93d3cudGlwdGFwLmRldi9hcGkvbWFya3MvaXRhbGljXG4gKi9cbmNvbnN0IEl0YWxpYyA9IE1hcmsuY3JlYXRlKHtcbiAgICBuYW1lOiAnaXRhbGljJyxcbiAgICBhZGRPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgSFRNTEF0dHJpYnV0ZXM6IHt9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgcGFyc2VIVE1MKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRhZzogJ2VtJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGFnOiAnaScsXG4gICAgICAgICAgICAgICAgZ2V0QXR0cnM6IG5vZGUgPT4gbm9kZS5zdHlsZS5mb250U3R5bGUgIT09ICdub3JtYWwnICYmIG51bGwsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0eWxlOiAnZm9udC1zdHlsZT1ub3JtYWwnLFxuICAgICAgICAgICAgICAgIGNsZWFyTWFyazogbWFyayA9PiBtYXJrLnR5cGUubmFtZSA9PT0gdGhpcy5uYW1lLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdHlsZTogJ2ZvbnQtc3R5bGU9aXRhbGljJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF07XG4gICAgfSxcbiAgICByZW5kZXJIVE1MKHsgSFRNTEF0dHJpYnV0ZXMgfSkge1xuICAgICAgICByZXR1cm4gWydlbScsIG1lcmdlQXR0cmlidXRlcyh0aGlzLm9wdGlvbnMuSFRNTEF0dHJpYnV0ZXMsIEhUTUxBdHRyaWJ1dGVzKSwgMF07XG4gICAgfSxcbiAgICBhZGRDb21tYW5kcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNldEl0YWxpYzogKCkgPT4gKHsgY29tbWFuZHMgfSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy5zZXRNYXJrKHRoaXMubmFtZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9nZ2xlSXRhbGljOiAoKSA9PiAoeyBjb21tYW5kcyB9KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnRvZ2dsZU1hcmsodGhpcy5uYW1lKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1bnNldEl0YWxpYzogKCkgPT4gKHsgY29tbWFuZHMgfSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy51bnNldE1hcmsodGhpcy5uYW1lKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBhZGRLZXlib2FyZFNob3J0Y3V0cygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdNb2QtaSc6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnRvZ2dsZUl0YWxpYygpLFxuICAgICAgICAgICAgJ01vZC1JJzogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMudG9nZ2xlSXRhbGljKCksXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBhZGRJbnB1dFJ1bGVzKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgbWFya0lucHV0UnVsZSh7XG4gICAgICAgICAgICAgICAgZmluZDogc3RhcklucHV0UmVnZXgsXG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBtYXJrSW5wdXRSdWxlKHtcbiAgICAgICAgICAgICAgICBmaW5kOiB1bmRlcnNjb3JlSW5wdXRSZWdleCxcbiAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgXTtcbiAgICB9LFxuICAgIGFkZFBhc3RlUnVsZXMoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBtYXJrUGFzdGVSdWxlKHtcbiAgICAgICAgICAgICAgICBmaW5kOiBzdGFyUGFzdGVSZWdleCxcbiAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG1hcmtQYXN0ZVJ1bGUoe1xuICAgICAgICAgICAgICAgIGZpbmQ6IHVuZGVyc2NvcmVQYXN0ZVJlZ2V4LFxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICBdO1xuICAgIH0sXG59KTtcblxuZXhwb3J0IHsgSXRhbGljLCBJdGFsaWMgYXMgZGVmYXVsdCwgc3RhcklucHV0UmVnZXgsIHN0YXJQYXN0ZVJlZ2V4LCB1bmRlcnNjb3JlSW5wdXRSZWdleCwgdW5kZXJzY29yZVBhc3RlUmVnZXggfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tiptap/extension-italic/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tiptap/extension-link/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@tiptap/extension-link/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Link: () => (/* binding */ Link),\n/* harmony export */   \"default\": () => (/* binding */ Link),\n/* harmony export */   isAllowedUri: () => (/* binding */ isAllowedUri),\n/* harmony export */   pasteRegex: () => (/* binding */ pasteRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tiptap/core */ \"(app-pages-browser)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var linkifyjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! linkifyjs */ \"(app-pages-browser)/./node_modules/linkifyjs/dist/linkify.es.js\");\n/* harmony import */ var _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/pm/state */ \"(app-pages-browser)/./node_modules/@tiptap/pm/state/dist/index.js\");\n\n\n\n\n/**\n * Check if the provided tokens form a valid link structure, which can either be a single link token\n * or a link token surrounded by parentheses or square brackets.\n *\n * This ensures that only complete and valid text is hyperlinked, preventing cases where a valid\n * top-level domain (TLD) is immediately followed by an invalid character, like a number. For\n * example, with the `find` method from Linkify, entering `example.com1` would result in\n * `example.com` being linked and the trailing `1` left as plain text. By using the `tokenize`\n * method, we can perform more comprehensive validation on the input text.\n */\nfunction isValidLinkStructure(tokens) {\n    if (tokens.length === 1) {\n        return tokens[0].isLink;\n    }\n    if (tokens.length === 3 && tokens[1].isLink) {\n        return ['()', '[]'].includes(tokens[0].value + tokens[2].value);\n    }\n    return false;\n}\n/**\n * This plugin allows you to automatically add links to your editor.\n * @param options The plugin options\n * @returns The plugin instance\n */\nfunction autolink(options) {\n    return new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_1__.Plugin({\n        key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_1__.PluginKey('autolink'),\n        appendTransaction: (transactions, oldState, newState) => {\n            /**\n             * Does the transaction change the document?\n             */\n            const docChanges = transactions.some(transaction => transaction.docChanged) && !oldState.doc.eq(newState.doc);\n            /**\n             * Prevent autolink if the transaction is not a document change or if the transaction has the meta `preventAutolink`.\n             */\n            const preventAutolink = transactions.some(transaction => transaction.getMeta('preventAutolink'));\n            /**\n             * Prevent autolink if the transaction is not a document change\n             * or if the transaction has the meta `preventAutolink`.\n             */\n            if (!docChanges || preventAutolink) {\n                return;\n            }\n            const { tr } = newState;\n            const transform = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.combineTransactionSteps)(oldState.doc, [...transactions]);\n            const changes = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getChangedRanges)(transform);\n            changes.forEach(({ newRange }) => {\n                // Now let’s see if we can add new links.\n                const nodesInChangedRanges = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.findChildrenInRange)(newState.doc, newRange, node => node.isTextblock);\n                let textBlock;\n                let textBeforeWhitespace;\n                if (nodesInChangedRanges.length > 1) {\n                    // Grab the first node within the changed ranges (ex. the first of two paragraphs when hitting enter).\n                    textBlock = nodesInChangedRanges[0];\n                    textBeforeWhitespace = newState.doc.textBetween(textBlock.pos, textBlock.pos + textBlock.node.nodeSize, undefined, ' ');\n                }\n                else if (nodesInChangedRanges.length\n                    // We want to make sure to include the block seperator argument to treat hard breaks like spaces.\n                    && newState.doc.textBetween(newRange.from, newRange.to, ' ', ' ').endsWith(' ')) {\n                    textBlock = nodesInChangedRanges[0];\n                    textBeforeWhitespace = newState.doc.textBetween(textBlock.pos, newRange.to, undefined, ' ');\n                }\n                if (textBlock && textBeforeWhitespace) {\n                    const wordsBeforeWhitespace = textBeforeWhitespace.split(' ').filter(s => s !== '');\n                    if (wordsBeforeWhitespace.length <= 0) {\n                        return false;\n                    }\n                    const lastWordBeforeSpace = wordsBeforeWhitespace[wordsBeforeWhitespace.length - 1];\n                    const lastWordAndBlockOffset = textBlock.pos + textBeforeWhitespace.lastIndexOf(lastWordBeforeSpace);\n                    if (!lastWordBeforeSpace) {\n                        return false;\n                    }\n                    const linksBeforeSpace = (0,linkifyjs__WEBPACK_IMPORTED_MODULE_0__.tokenize)(lastWordBeforeSpace).map(t => t.toObject(options.defaultProtocol));\n                    if (!isValidLinkStructure(linksBeforeSpace)) {\n                        return false;\n                    }\n                    linksBeforeSpace\n                        .filter(link => link.isLink)\n                        // Calculate link position.\n                        .map(link => ({\n                        ...link,\n                        from: lastWordAndBlockOffset + link.start + 1,\n                        to: lastWordAndBlockOffset + link.end + 1,\n                    }))\n                        // ignore link inside code mark\n                        .filter(link => {\n                        if (!newState.schema.marks.code) {\n                            return true;\n                        }\n                        return !newState.doc.rangeHasMark(link.from, link.to, newState.schema.marks.code);\n                    })\n                        // validate link\n                        .filter(link => options.validate(link.value))\n                        // check whether should autolink\n                        .filter(link => options.shouldAutoLink(link.value))\n                        // Add link mark.\n                        .forEach(link => {\n                        if ((0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getMarksBetween)(link.from, link.to, newState.doc).some(item => item.mark.type === options.type)) {\n                            return;\n                        }\n                        tr.addMark(link.from, link.to, options.type.create({\n                            href: link.href,\n                        }));\n                    });\n                }\n            });\n            if (!tr.steps.length) {\n                return;\n            }\n            return tr;\n        },\n    });\n}\n\nfunction clickHandler(options) {\n    return new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_1__.Plugin({\n        key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_1__.PluginKey('handleClickLink'),\n        props: {\n            handleClick: (view, pos, event) => {\n                var _a, _b;\n                if (event.button !== 0) {\n                    return false;\n                }\n                if (!view.editable) {\n                    return false;\n                }\n                let a = event.target;\n                const els = [];\n                while (a.nodeName !== 'DIV') {\n                    els.push(a);\n                    a = a.parentNode;\n                }\n                if (!els.find(value => value.nodeName === 'A')) {\n                    return false;\n                }\n                const attrs = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getAttributes)(view.state, options.type.name);\n                const link = event.target;\n                const href = (_a = link === null || link === void 0 ? void 0 : link.href) !== null && _a !== void 0 ? _a : attrs.href;\n                const target = (_b = link === null || link === void 0 ? void 0 : link.target) !== null && _b !== void 0 ? _b : attrs.target;\n                if (link && href) {\n                    window.open(href, target);\n                    return true;\n                }\n                return false;\n            },\n        },\n    });\n}\n\nfunction pasteHandler(options) {\n    return new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_1__.Plugin({\n        key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_1__.PluginKey('handlePasteLink'),\n        props: {\n            handlePaste: (view, event, slice) => {\n                const { state } = view;\n                const { selection } = state;\n                const { empty } = selection;\n                if (empty) {\n                    return false;\n                }\n                let textContent = '';\n                slice.content.forEach(node => {\n                    textContent += node.textContent;\n                });\n                const link = (0,linkifyjs__WEBPACK_IMPORTED_MODULE_0__.find)(textContent, { defaultProtocol: options.defaultProtocol }).find(item => item.isLink && item.value === textContent);\n                if (!textContent || !link) {\n                    return false;\n                }\n                return options.editor.commands.setMark(options.type, {\n                    href: link.href,\n                });\n            },\n        },\n    });\n}\n\nconst pasteRegex = /https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z]{2,}\\b(?:[-a-zA-Z0-9@:%._+~#=?!&/]*)(?:[-a-zA-Z0-9@:%._+~#=?!&/]*)/gi;\n// From DOMPurify\n// https://github.com/cure53/DOMPurify/blob/main/src/regexp.js\n// eslint-disable-next-line no-control-regex\nconst ATTR_WHITESPACE = /[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205F\\u3000]/g;\nfunction isAllowedUri(uri, protocols) {\n    const allowedProtocols = [\n        'http',\n        'https',\n        'ftp',\n        'ftps',\n        'mailto',\n        'tel',\n        'callto',\n        'sms',\n        'cid',\n        'xmpp',\n    ];\n    if (protocols) {\n        protocols.forEach(protocol => {\n            const nextProtocol = typeof protocol === 'string' ? protocol : protocol.scheme;\n            if (nextProtocol) {\n                allowedProtocols.push(nextProtocol);\n            }\n        });\n    }\n    return (!uri\n        || uri\n            .replace(ATTR_WHITESPACE, '')\n            .match(new RegExp(\n        // eslint-disable-next-line no-useless-escape\n        `^(?:(?:${allowedProtocols.join('|')}):|[^a-z]|[a-z0-9+.\\-]+(?:[^a-z+.\\-:]|$))`, 'i')));\n}\n/**\n * This extension allows you to create links.\n * @see https://www.tiptap.dev/api/marks/link\n */\nconst Link = _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Mark.create({\n    name: 'link',\n    priority: 1000,\n    keepOnSplit: false,\n    exitable: true,\n    onCreate() {\n        if (this.options.validate && !this.options.shouldAutoLink) {\n            // Copy the validate function to the shouldAutoLink option\n            this.options.shouldAutoLink = this.options.validate;\n            console.warn('The `validate` option is deprecated. Rename to the `shouldAutoLink` option instead.');\n        }\n        this.options.protocols.forEach(protocol => {\n            if (typeof protocol === 'string') {\n                (0,linkifyjs__WEBPACK_IMPORTED_MODULE_0__.registerCustomProtocol)(protocol);\n                return;\n            }\n            (0,linkifyjs__WEBPACK_IMPORTED_MODULE_0__.registerCustomProtocol)(protocol.scheme, protocol.optionalSlashes);\n        });\n    },\n    onDestroy() {\n        (0,linkifyjs__WEBPACK_IMPORTED_MODULE_0__.reset)();\n    },\n    inclusive() {\n        return this.options.autolink;\n    },\n    addOptions() {\n        return {\n            openOnClick: true,\n            linkOnPaste: true,\n            autolink: true,\n            protocols: [],\n            defaultProtocol: 'http',\n            HTMLAttributes: {\n                target: '_blank',\n                rel: 'noopener noreferrer nofollow',\n                class: null,\n            },\n            isAllowedUri: (url, ctx) => !!isAllowedUri(url, ctx.protocols),\n            validate: url => !!url,\n            shouldAutoLink: url => !!url,\n        };\n    },\n    addAttributes() {\n        return {\n            href: {\n                default: null,\n                parseHTML(element) {\n                    return element.getAttribute('href');\n                },\n            },\n            target: {\n                default: this.options.HTMLAttributes.target,\n            },\n            rel: {\n                default: this.options.HTMLAttributes.rel,\n            },\n            class: {\n                default: this.options.HTMLAttributes.class,\n            },\n        };\n    },\n    parseHTML() {\n        return [\n            {\n                tag: 'a[href]',\n                getAttrs: dom => {\n                    const href = dom.getAttribute('href');\n                    // prevent XSS attacks\n                    if (!href\n                        || !this.options.isAllowedUri(href, {\n                            defaultValidate: url => !!isAllowedUri(url, this.options.protocols),\n                            protocols: this.options.protocols,\n                            defaultProtocol: this.options.defaultProtocol,\n                        })) {\n                        return false;\n                    }\n                    return null;\n                },\n            },\n        ];\n    },\n    renderHTML({ HTMLAttributes }) {\n        // prevent XSS attacks\n        if (!this.options.isAllowedUri(HTMLAttributes.href, {\n            defaultValidate: href => !!isAllowedUri(href, this.options.protocols),\n            protocols: this.options.protocols,\n            defaultProtocol: this.options.defaultProtocol,\n        })) {\n            // strip out the href\n            return [\n                'a',\n                (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.mergeAttributes)(this.options.HTMLAttributes, { ...HTMLAttributes, href: '' }),\n                0,\n            ];\n        }\n        return ['a', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\n    },\n    addCommands() {\n        return {\n            setLink: attributes => ({ chain }) => {\n                const { href } = attributes;\n                if (!this.options.isAllowedUri(href, {\n                    defaultValidate: url => !!isAllowedUri(url, this.options.protocols),\n                    protocols: this.options.protocols,\n                    defaultProtocol: this.options.defaultProtocol,\n                })) {\n                    return false;\n                }\n                return chain().setMark(this.name, attributes).setMeta('preventAutolink', true).run();\n            },\n            toggleLink: attributes => ({ chain }) => {\n                const { href } = attributes;\n                if (!this.options.isAllowedUri(href, {\n                    defaultValidate: url => !!isAllowedUri(url, this.options.protocols),\n                    protocols: this.options.protocols,\n                    defaultProtocol: this.options.defaultProtocol,\n                })) {\n                    return false;\n                }\n                return chain()\n                    .toggleMark(this.name, attributes, { extendEmptyMarkRange: true })\n                    .setMeta('preventAutolink', true)\n                    .run();\n            },\n            unsetLink: () => ({ chain }) => {\n                return chain()\n                    .unsetMark(this.name, { extendEmptyMarkRange: true })\n                    .setMeta('preventAutolink', true)\n                    .run();\n            },\n        };\n    },\n    addPasteRules() {\n        return [\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.markPasteRule)({\n                find: text => {\n                    const foundLinks = [];\n                    if (text) {\n                        const { protocols, defaultProtocol } = this.options;\n                        const links = (0,linkifyjs__WEBPACK_IMPORTED_MODULE_0__.find)(text).filter(item => item.isLink\n                            && this.options.isAllowedUri(item.value, {\n                                defaultValidate: href => !!isAllowedUri(href, protocols),\n                                protocols,\n                                defaultProtocol,\n                            }));\n                        if (links.length) {\n                            links.forEach(link => foundLinks.push({\n                                text: link.value,\n                                data: {\n                                    href: link.href,\n                                },\n                                index: link.start,\n                            }));\n                        }\n                    }\n                    return foundLinks;\n                },\n                type: this.type,\n                getAttributes: match => {\n                    var _a;\n                    return {\n                        href: (_a = match.data) === null || _a === void 0 ? void 0 : _a.href,\n                    };\n                },\n            }),\n        ];\n    },\n    addProseMirrorPlugins() {\n        const plugins = [];\n        const { protocols, defaultProtocol } = this.options;\n        if (this.options.autolink) {\n            plugins.push(autolink({\n                type: this.type,\n                defaultProtocol: this.options.defaultProtocol,\n                validate: url => this.options.isAllowedUri(url, {\n                    defaultValidate: href => !!isAllowedUri(href, protocols),\n                    protocols,\n                    defaultProtocol,\n                }),\n                shouldAutoLink: this.options.shouldAutoLink,\n            }));\n        }\n        if (this.options.openOnClick === true) {\n            plugins.push(clickHandler({\n                type: this.type,\n            }));\n        }\n        if (this.options.linkOnPaste) {\n            plugins.push(pasteHandler({\n                editor: this.editor,\n                defaultProtocol: this.options.defaultProtocol,\n                type: this.type,\n            }));\n        }\n        return plugins;\n    },\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tiptap/extension-link/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tiptap/extension-strike/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tiptap/extension-strike/dist/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Strike: () => (/* binding */ Strike),\n/* harmony export */   \"default\": () => (/* binding */ Strike),\n/* harmony export */   inputRegex: () => (/* binding */ inputRegex),\n/* harmony export */   pasteRegex: () => (/* binding */ pasteRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(app-pages-browser)/./node_modules/@tiptap/core/dist/index.js\");\n\n\n/**\n * Matches a strike to a ~~strike~~ on input.\n */\nconst inputRegex = /(?:^|\\s)(~~(?!\\s+~~)((?:[^~]+))~~(?!\\s+~~))$/;\n/**\n * Matches a strike to a ~~strike~~ on paste.\n */\nconst pasteRegex = /(?:^|\\s)(~~(?!\\s+~~)((?:[^~]+))~~(?!\\s+~~))/g;\n/**\n * This extension allows you to create strike text.\n * @see https://www.tiptap.dev/api/marks/strike\n */\nconst Strike = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({\n    name: 'strike',\n    addOptions() {\n        return {\n            HTMLAttributes: {},\n        };\n    },\n    parseHTML() {\n        return [\n            {\n                tag: 's',\n            },\n            {\n                tag: 'del',\n            },\n            {\n                tag: 'strike',\n            },\n            {\n                style: 'text-decoration',\n                consuming: false,\n                getAttrs: style => (style.includes('line-through') ? {} : false),\n            },\n        ];\n    },\n    renderHTML({ HTMLAttributes }) {\n        return ['s', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\n    },\n    addCommands() {\n        return {\n            setStrike: () => ({ commands }) => {\n                return commands.setMark(this.name);\n            },\n            toggleStrike: () => ({ commands }) => {\n                return commands.toggleMark(this.name);\n            },\n            unsetStrike: () => ({ commands }) => {\n                return commands.unsetMark(this.name);\n            },\n        };\n    },\n    addKeyboardShortcuts() {\n        return {\n            'Mod-Shift-s': () => this.editor.commands.toggleStrike(),\n        };\n    },\n    addInputRules() {\n        return [\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({\n                find: inputRegex,\n                type: this.type,\n            }),\n        ];\n    },\n    addPasteRules() {\n        return [\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({\n                find: pasteRegex,\n                type: this.type,\n            }),\n        ];\n    },\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL2V4dGVuc2lvbi1zdHJpa2UvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFtRjs7QUFFbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSw4Q0FBSTtBQUNuQjtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RTtBQUN4RSxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0wsaUJBQWlCLGdCQUFnQjtBQUNqQyxxQkFBcUIsNkRBQWU7QUFDcEMsS0FBSztBQUNMO0FBQ0E7QUFDQSxnQ0FBZ0MsVUFBVTtBQUMxQztBQUNBLGFBQWE7QUFDYixtQ0FBbUMsVUFBVTtBQUM3QztBQUNBLGFBQWE7QUFDYixrQ0FBa0MsVUFBVTtBQUM1QztBQUNBLGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWSwyREFBYTtBQUN6QjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZLDJEQUFhO0FBQ3pCO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0wsQ0FBQzs7QUFFNEQ7QUFDN0QiLCJzb3VyY2VzIjpbIkM6XFxQcm9qZWN0c1xcdHVvbi1pby12MVxcbm9kZV9tb2R1bGVzXFxAdGlwdGFwXFxleHRlbnNpb24tc3RyaWtlXFxkaXN0XFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYXJrLCBtZXJnZUF0dHJpYnV0ZXMsIG1hcmtJbnB1dFJ1bGUsIG1hcmtQYXN0ZVJ1bGUgfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuXG4vKipcbiAqIE1hdGNoZXMgYSBzdHJpa2UgdG8gYSB+fnN0cmlrZX5+IG9uIGlucHV0LlxuICovXG5jb25zdCBpbnB1dFJlZ2V4ID0gLyg/Ol58XFxzKSh+fig/IVxccyt+fikoKD86W15+XSspKX5+KD8hXFxzK35+KSkkLztcbi8qKlxuICogTWF0Y2hlcyBhIHN0cmlrZSB0byBhIH5+c3RyaWtlfn4gb24gcGFzdGUuXG4gKi9cbmNvbnN0IHBhc3RlUmVnZXggPSAvKD86XnxcXHMpKH5+KD8hXFxzK35+KSgoPzpbXn5dKykpfn4oPyFcXHMrfn4pKS9nO1xuLyoqXG4gKiBUaGlzIGV4dGVuc2lvbiBhbGxvd3MgeW91IHRvIGNyZWF0ZSBzdHJpa2UgdGV4dC5cbiAqIEBzZWUgaHR0cHM6Ly93d3cudGlwdGFwLmRldi9hcGkvbWFya3Mvc3RyaWtlXG4gKi9cbmNvbnN0IFN0cmlrZSA9IE1hcmsuY3JlYXRlKHtcbiAgICBuYW1lOiAnc3RyaWtlJyxcbiAgICBhZGRPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgSFRNTEF0dHJpYnV0ZXM6IHt9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgcGFyc2VIVE1MKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRhZzogJ3MnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0YWc6ICdkZWwnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0YWc6ICdzdHJpa2UnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdHlsZTogJ3RleHQtZGVjb3JhdGlvbicsXG4gICAgICAgICAgICAgICAgY29uc3VtaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBnZXRBdHRyczogc3R5bGUgPT4gKHN0eWxlLmluY2x1ZGVzKCdsaW5lLXRocm91Z2gnKSA/IHt9IDogZmFsc2UpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXTtcbiAgICB9LFxuICAgIHJlbmRlckhUTUwoeyBIVE1MQXR0cmlidXRlcyB9KSB7XG4gICAgICAgIHJldHVybiBbJ3MnLCBtZXJnZUF0dHJpYnV0ZXModGhpcy5vcHRpb25zLkhUTUxBdHRyaWJ1dGVzLCBIVE1MQXR0cmlidXRlcyksIDBdO1xuICAgIH0sXG4gICAgYWRkQ29tbWFuZHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZXRTdHJpa2U6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZHMuc2V0TWFyayh0aGlzLm5hbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvZ2dsZVN0cmlrZTogKCkgPT4gKHsgY29tbWFuZHMgfSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy50b2dnbGVNYXJrKHRoaXMubmFtZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdW5zZXRTdHJpa2U6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZHMudW5zZXRNYXJrKHRoaXMubmFtZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgYWRkS2V5Ym9hcmRTaG9ydGN1dHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnTW9kLVNoaWZ0LXMnOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy50b2dnbGVTdHJpa2UoKSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGFkZElucHV0UnVsZXMoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBtYXJrSW5wdXRSdWxlKHtcbiAgICAgICAgICAgICAgICBmaW5kOiBpbnB1dFJlZ2V4LFxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICBdO1xuICAgIH0sXG4gICAgYWRkUGFzdGVSdWxlcygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG1hcmtQYXN0ZVJ1bGUoe1xuICAgICAgICAgICAgICAgIGZpbmQ6IHBhc3RlUmVnZXgsXG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIF07XG4gICAgfSxcbn0pO1xuXG5leHBvcnQgeyBTdHJpa2UsIFN0cmlrZSBhcyBkZWZhdWx0LCBpbnB1dFJlZ2V4LCBwYXN0ZVJlZ2V4IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tiptap/extension-strike/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tiptap/extension-table-cell/dist/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-table-cell/dist/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TableCell: () => (/* binding */ TableCell),\n/* harmony export */   \"default\": () => (/* binding */ TableCell)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(app-pages-browser)/./node_modules/@tiptap/core/dist/index.js\");\n\n\n/**\n * This extension allows you to create table cells.\n * @see https://www.tiptap.dev/api/nodes/table-cell\n */\nconst TableCell = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n    name: 'tableCell',\n    addOptions() {\n        return {\n            HTMLAttributes: {},\n        };\n    },\n    content: 'block+',\n    addAttributes() {\n        return {\n            colspan: {\n                default: 1,\n            },\n            rowspan: {\n                default: 1,\n            },\n            colwidth: {\n                default: null,\n                parseHTML: element => {\n                    const colwidth = element.getAttribute('colwidth');\n                    const value = colwidth\n                        ? colwidth.split(',').map(width => parseInt(width, 10))\n                        : null;\n                    return value;\n                },\n            },\n        };\n    },\n    tableRole: 'cell',\n    isolating: true,\n    parseHTML() {\n        return [\n            { tag: 'td' },\n        ];\n    },\n    renderHTML({ HTMLAttributes }) {\n        return ['td', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\n    },\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL2V4dGVuc2lvbi10YWJsZS1jZWxsL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFEOztBQUVyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiw4Q0FBSTtBQUN0QjtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxXQUFXO0FBQ3pCO0FBQ0EsS0FBSztBQUNMLGlCQUFpQixnQkFBZ0I7QUFDakMsc0JBQXNCLDZEQUFlO0FBQ3JDLEtBQUs7QUFDTCxDQUFDOztBQUUwQztBQUMzQyIsInNvdXJjZXMiOlsiQzpcXFByb2plY3RzXFx0dW9uLWlvLXYxXFxub2RlX21vZHVsZXNcXEB0aXB0YXBcXGV4dGVuc2lvbi10YWJsZS1jZWxsXFxkaXN0XFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb2RlLCBtZXJnZUF0dHJpYnV0ZXMgfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuXG4vKipcbiAqIFRoaXMgZXh0ZW5zaW9uIGFsbG93cyB5b3UgdG8gY3JlYXRlIHRhYmxlIGNlbGxzLlxuICogQHNlZSBodHRwczovL3d3dy50aXB0YXAuZGV2L2FwaS9ub2Rlcy90YWJsZS1jZWxsXG4gKi9cbmNvbnN0IFRhYmxlQ2VsbCA9IE5vZGUuY3JlYXRlKHtcbiAgICBuYW1lOiAndGFibGVDZWxsJyxcbiAgICBhZGRPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgSFRNTEF0dHJpYnV0ZXM6IHt9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgY29udGVudDogJ2Jsb2NrKycsXG4gICAgYWRkQXR0cmlidXRlcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbHNwYW46IHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAxLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJvd3NwYW46IHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAxLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbHdpZHRoOiB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICAgICAgICAgICAgICBwYXJzZUhUTUw6IGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2x3aWR0aCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdjb2x3aWR0aCcpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGNvbHdpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGNvbHdpZHRoLnNwbGl0KCcsJykubWFwKHdpZHRoID0+IHBhcnNlSW50KHdpZHRoLCAxMCkpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRhYmxlUm9sZTogJ2NlbGwnLFxuICAgIGlzb2xhdGluZzogdHJ1ZSxcbiAgICBwYXJzZUhUTUwoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB7IHRhZzogJ3RkJyB9LFxuICAgICAgICBdO1xuICAgIH0sXG4gICAgcmVuZGVySFRNTCh7IEhUTUxBdHRyaWJ1dGVzIH0pIHtcbiAgICAgICAgcmV0dXJuIFsndGQnLCBtZXJnZUF0dHJpYnV0ZXModGhpcy5vcHRpb25zLkhUTUxBdHRyaWJ1dGVzLCBIVE1MQXR0cmlidXRlcyksIDBdO1xuICAgIH0sXG59KTtcblxuZXhwb3J0IHsgVGFibGVDZWxsLCBUYWJsZUNlbGwgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tiptap/extension-table-cell/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tiptap/extension-table-header/dist/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tiptap/extension-table-header/dist/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TableHeader: () => (/* binding */ TableHeader),\n/* harmony export */   \"default\": () => (/* binding */ TableHeader)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(app-pages-browser)/./node_modules/@tiptap/core/dist/index.js\");\n\n\n/**\n * This extension allows you to create table headers.\n * @see https://www.tiptap.dev/api/nodes/table-header\n */\nconst TableHeader = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n    name: 'tableHeader',\n    addOptions() {\n        return {\n            HTMLAttributes: {},\n        };\n    },\n    content: 'block+',\n    addAttributes() {\n        return {\n            colspan: {\n                default: 1,\n            },\n            rowspan: {\n                default: 1,\n            },\n            colwidth: {\n                default: null,\n                parseHTML: element => {\n                    const colwidth = element.getAttribute('colwidth');\n                    const value = colwidth\n                        ? colwidth.split(',').map(width => parseInt(width, 10))\n                        : null;\n                    return value;\n                },\n            },\n        };\n    },\n    tableRole: 'header_cell',\n    isolating: true,\n    parseHTML() {\n        return [\n            { tag: 'th' },\n        ];\n    },\n    renderHTML({ HTMLAttributes }) {\n        return ['th', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\n    },\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL2V4dGVuc2lvbi10YWJsZS1oZWFkZXIvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBcUQ7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDhDQUFJO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFdBQVc7QUFDekI7QUFDQSxLQUFLO0FBQ0wsaUJBQWlCLGdCQUFnQjtBQUNqQyxzQkFBc0IsNkRBQWU7QUFDckMsS0FBSztBQUNMLENBQUM7O0FBRThDO0FBQy9DIiwic291cmNlcyI6WyJDOlxcUHJvamVjdHNcXHR1b24taW8tdjFcXG5vZGVfbW9kdWxlc1xcQHRpcHRhcFxcZXh0ZW5zaW9uLXRhYmxlLWhlYWRlclxcZGlzdFxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTm9kZSwgbWVyZ2VBdHRyaWJ1dGVzIH0gZnJvbSAnQHRpcHRhcC9jb3JlJztcblxuLyoqXG4gKiBUaGlzIGV4dGVuc2lvbiBhbGxvd3MgeW91IHRvIGNyZWF0ZSB0YWJsZSBoZWFkZXJzLlxuICogQHNlZSBodHRwczovL3d3dy50aXB0YXAuZGV2L2FwaS9ub2Rlcy90YWJsZS1oZWFkZXJcbiAqL1xuY29uc3QgVGFibGVIZWFkZXIgPSBOb2RlLmNyZWF0ZSh7XG4gICAgbmFtZTogJ3RhYmxlSGVhZGVyJyxcbiAgICBhZGRPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgSFRNTEF0dHJpYnV0ZXM6IHt9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgY29udGVudDogJ2Jsb2NrKycsXG4gICAgYWRkQXR0cmlidXRlcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbHNwYW46IHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAxLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJvd3NwYW46IHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAxLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbHdpZHRoOiB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICAgICAgICAgICAgICBwYXJzZUhUTUw6IGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2x3aWR0aCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdjb2x3aWR0aCcpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGNvbHdpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGNvbHdpZHRoLnNwbGl0KCcsJykubWFwKHdpZHRoID0+IHBhcnNlSW50KHdpZHRoLCAxMCkpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRhYmxlUm9sZTogJ2hlYWRlcl9jZWxsJyxcbiAgICBpc29sYXRpbmc6IHRydWUsXG4gICAgcGFyc2VIVE1MKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgeyB0YWc6ICd0aCcgfSxcbiAgICAgICAgXTtcbiAgICB9LFxuICAgIHJlbmRlckhUTUwoeyBIVE1MQXR0cmlidXRlcyB9KSB7XG4gICAgICAgIHJldHVybiBbJ3RoJywgbWVyZ2VBdHRyaWJ1dGVzKHRoaXMub3B0aW9ucy5IVE1MQXR0cmlidXRlcywgSFRNTEF0dHJpYnV0ZXMpLCAwXTtcbiAgICB9LFxufSk7XG5cbmV4cG9ydCB7IFRhYmxlSGVhZGVyLCBUYWJsZUhlYWRlciBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tiptap/extension-table-header/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tiptap/extension-table-row/dist/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-table-row/dist/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TableRow: () => (/* binding */ TableRow),\n/* harmony export */   \"default\": () => (/* binding */ TableRow)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(app-pages-browser)/./node_modules/@tiptap/core/dist/index.js\");\n\n\n/**\n * This extension allows you to create table rows.\n * @see https://www.tiptap.dev/api/nodes/table-row\n */\nconst TableRow = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n    name: 'tableRow',\n    addOptions() {\n        return {\n            HTMLAttributes: {},\n        };\n    },\n    content: '(tableCell | tableHeader)*',\n    tableRole: 'row',\n    parseHTML() {\n        return [\n            { tag: 'tr' },\n        ];\n    },\n    renderHTML({ HTMLAttributes }) {\n        return ['tr', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\n    },\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL2V4dGVuc2lvbi10YWJsZS1yb3cvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBcUQ7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDhDQUFJO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsV0FBVztBQUN6QjtBQUNBLEtBQUs7QUFDTCxpQkFBaUIsZ0JBQWdCO0FBQ2pDLHNCQUFzQiw2REFBZTtBQUNyQyxLQUFLO0FBQ0wsQ0FBQzs7QUFFd0M7QUFDekMiLCJzb3VyY2VzIjpbIkM6XFxQcm9qZWN0c1xcdHVvbi1pby12MVxcbm9kZV9tb2R1bGVzXFxAdGlwdGFwXFxleHRlbnNpb24tdGFibGUtcm93XFxkaXN0XFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb2RlLCBtZXJnZUF0dHJpYnV0ZXMgfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuXG4vKipcbiAqIFRoaXMgZXh0ZW5zaW9uIGFsbG93cyB5b3UgdG8gY3JlYXRlIHRhYmxlIHJvd3MuXG4gKiBAc2VlIGh0dHBzOi8vd3d3LnRpcHRhcC5kZXYvYXBpL25vZGVzL3RhYmxlLXJvd1xuICovXG5jb25zdCBUYWJsZVJvdyA9IE5vZGUuY3JlYXRlKHtcbiAgICBuYW1lOiAndGFibGVSb3cnLFxuICAgIGFkZE9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBIVE1MQXR0cmlidXRlczoge30sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBjb250ZW50OiAnKHRhYmxlQ2VsbCB8IHRhYmxlSGVhZGVyKSonLFxuICAgIHRhYmxlUm9sZTogJ3JvdycsXG4gICAgcGFyc2VIVE1MKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgeyB0YWc6ICd0cicgfSxcbiAgICAgICAgXTtcbiAgICB9LFxuICAgIHJlbmRlckhUTUwoeyBIVE1MQXR0cmlidXRlcyB9KSB7XG4gICAgICAgIHJldHVybiBbJ3RyJywgbWVyZ2VBdHRyaWJ1dGVzKHRoaXMub3B0aW9ucy5IVE1MQXR0cmlidXRlcywgSFRNTEF0dHJpYnV0ZXMpLCAwXTtcbiAgICB9LFxufSk7XG5cbmV4cG9ydCB7IFRhYmxlUm93LCBUYWJsZVJvdyBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tiptap/extension-table-row/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tiptap/extension-text/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@tiptap/extension-text/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Text: () => (/* binding */ Text),\n/* harmony export */   \"default\": () => (/* binding */ Text)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(app-pages-browser)/./node_modules/@tiptap/core/dist/index.js\");\n\n\n/**\n * This extension allows you to create text nodes.\n * @see https://www.tiptap.dev/api/nodes/text\n */\nconst Text = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n    name: 'text',\n    group: 'inline',\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL2V4dGVuc2lvbi10ZXh0L2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW9DOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsOENBQUk7QUFDakI7QUFDQTtBQUNBLENBQUM7O0FBRWdDO0FBQ2pDIiwic291cmNlcyI6WyJDOlxcUHJvamVjdHNcXHR1b24taW8tdjFcXG5vZGVfbW9kdWxlc1xcQHRpcHRhcFxcZXh0ZW5zaW9uLXRleHRcXGRpc3RcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5vZGUgfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuXG4vKipcbiAqIFRoaXMgZXh0ZW5zaW9uIGFsbG93cyB5b3UgdG8gY3JlYXRlIHRleHQgbm9kZXMuXG4gKiBAc2VlIGh0dHBzOi8vd3d3LnRpcHRhcC5kZXYvYXBpL25vZGVzL3RleHRcbiAqL1xuY29uc3QgVGV4dCA9IE5vZGUuY3JlYXRlKHtcbiAgICBuYW1lOiAndGV4dCcsXG4gICAgZ3JvdXA6ICdpbmxpbmUnLFxufSk7XG5cbmV4cG9ydCB7IFRleHQsIFRleHQgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tiptap/extension-text/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tiptap/extension-underline/dist/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-underline/dist/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Underline: () => (/* binding */ Underline),\n/* harmony export */   \"default\": () => (/* binding */ Underline)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(app-pages-browser)/./node_modules/@tiptap/core/dist/index.js\");\n\n\n/**\n * This extension allows you to create underline text.\n * @see https://www.tiptap.dev/api/marks/underline\n */\nconst Underline = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({\n    name: 'underline',\n    addOptions() {\n        return {\n            HTMLAttributes: {},\n        };\n    },\n    parseHTML() {\n        return [\n            {\n                tag: 'u',\n            },\n            {\n                style: 'text-decoration',\n                consuming: false,\n                getAttrs: style => (style.includes('underline') ? {} : false),\n            },\n        ];\n    },\n    renderHTML({ HTMLAttributes }) {\n        return ['u', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\n    },\n    addCommands() {\n        return {\n            setUnderline: () => ({ commands }) => {\n                return commands.setMark(this.name);\n            },\n            toggleUnderline: () => ({ commands }) => {\n                return commands.toggleMark(this.name);\n            },\n            unsetUnderline: () => ({ commands }) => {\n                return commands.unsetMark(this.name);\n            },\n        };\n    },\n    addKeyboardShortcuts() {\n        return {\n            'Mod-u': () => this.editor.commands.toggleUnderline(),\n            'Mod-U': () => this.editor.commands.toggleUnderline(),\n        };\n    },\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL2V4dGVuc2lvbi11bmRlcmxpbmUvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBcUQ7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDhDQUFJO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxxRUFBcUU7QUFDckUsYUFBYTtBQUNiO0FBQ0EsS0FBSztBQUNMLGlCQUFpQixnQkFBZ0I7QUFDakMscUJBQXFCLDZEQUFlO0FBQ3BDLEtBQUs7QUFDTDtBQUNBO0FBQ0EsbUNBQW1DLFVBQVU7QUFDN0M7QUFDQSxhQUFhO0FBQ2Isc0NBQXNDLFVBQVU7QUFDaEQ7QUFDQSxhQUFhO0FBQ2IscUNBQXFDLFVBQVU7QUFDL0M7QUFDQSxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxDQUFDOztBQUUwQztBQUMzQyIsInNvdXJjZXMiOlsiQzpcXFByb2plY3RzXFx0dW9uLWlvLXYxXFxub2RlX21vZHVsZXNcXEB0aXB0YXBcXGV4dGVuc2lvbi11bmRlcmxpbmVcXGRpc3RcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hcmssIG1lcmdlQXR0cmlidXRlcyB9IGZyb20gJ0B0aXB0YXAvY29yZSc7XG5cbi8qKlxuICogVGhpcyBleHRlbnNpb24gYWxsb3dzIHlvdSB0byBjcmVhdGUgdW5kZXJsaW5lIHRleHQuXG4gKiBAc2VlIGh0dHBzOi8vd3d3LnRpcHRhcC5kZXYvYXBpL21hcmtzL3VuZGVybGluZVxuICovXG5jb25zdCBVbmRlcmxpbmUgPSBNYXJrLmNyZWF0ZSh7XG4gICAgbmFtZTogJ3VuZGVybGluZScsXG4gICAgYWRkT3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIEhUTUxBdHRyaWJ1dGVzOiB7fSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHBhcnNlSFRNTCgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0YWc6ICd1JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3R5bGU6ICd0ZXh0LWRlY29yYXRpb24nLFxuICAgICAgICAgICAgICAgIGNvbnN1bWluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgZ2V0QXR0cnM6IHN0eWxlID0+IChzdHlsZS5pbmNsdWRlcygndW5kZXJsaW5lJykgPyB7fSA6IGZhbHNlKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF07XG4gICAgfSxcbiAgICByZW5kZXJIVE1MKHsgSFRNTEF0dHJpYnV0ZXMgfSkge1xuICAgICAgICByZXR1cm4gWyd1JywgbWVyZ2VBdHRyaWJ1dGVzKHRoaXMub3B0aW9ucy5IVE1MQXR0cmlidXRlcywgSFRNTEF0dHJpYnV0ZXMpLCAwXTtcbiAgICB9LFxuICAgIGFkZENvbW1hbmRzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2V0VW5kZXJsaW5lOiAoKSA9PiAoeyBjb21tYW5kcyB9KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnNldE1hcmsodGhpcy5uYW1lKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0b2dnbGVVbmRlcmxpbmU6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZHMudG9nZ2xlTWFyayh0aGlzLm5hbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHVuc2V0VW5kZXJsaW5lOiAoKSA9PiAoeyBjb21tYW5kcyB9KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnVuc2V0TWFyayh0aGlzLm5hbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGFkZEtleWJvYXJkU2hvcnRjdXRzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ01vZC11JzogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMudG9nZ2xlVW5kZXJsaW5lKCksXG4gICAgICAgICAgICAnTW9kLVUnOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy50b2dnbGVVbmRlcmxpbmUoKSxcbiAgICAgICAgfTtcbiAgICB9LFxufSk7XG5cbmV4cG9ydCB7IFVuZGVybGluZSwgVW5kZXJsaW5lIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tiptap/extension-underline/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tiptap/pm/commands/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@tiptap/pm/commands/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   autoJoin: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.autoJoin),\n/* harmony export */   baseKeymap: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.baseKeymap),\n/* harmony export */   chainCommands: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.chainCommands),\n/* harmony export */   createParagraphNear: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.createParagraphNear),\n/* harmony export */   deleteSelection: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.deleteSelection),\n/* harmony export */   exitCode: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.exitCode),\n/* harmony export */   joinBackward: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.joinBackward),\n/* harmony export */   joinDown: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.joinDown),\n/* harmony export */   joinForward: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.joinForward),\n/* harmony export */   joinTextblockBackward: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.joinTextblockBackward),\n/* harmony export */   joinTextblockForward: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.joinTextblockForward),\n/* harmony export */   joinUp: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.joinUp),\n/* harmony export */   lift: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.lift),\n/* harmony export */   liftEmptyBlock: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.liftEmptyBlock),\n/* harmony export */   macBaseKeymap: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.macBaseKeymap),\n/* harmony export */   newlineInCode: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.newlineInCode),\n/* harmony export */   pcBaseKeymap: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.pcBaseKeymap),\n/* harmony export */   selectAll: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.selectAll),\n/* harmony export */   selectNodeBackward: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.selectNodeBackward),\n/* harmony export */   selectNodeForward: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.selectNodeForward),\n/* harmony export */   selectParentNode: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.selectParentNode),\n/* harmony export */   selectTextblockEnd: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.selectTextblockEnd),\n/* harmony export */   selectTextblockStart: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.selectTextblockStart),\n/* harmony export */   setBlockType: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.setBlockType),\n/* harmony export */   splitBlock: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.splitBlock),\n/* harmony export */   splitBlockAs: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.splitBlockAs),\n/* harmony export */   splitBlockKeepMarks: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.splitBlockKeepMarks),\n/* harmony export */   toggleMark: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.toggleMark),\n/* harmony export */   wrapIn: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.wrapIn)\n/* harmony export */ });\n/* harmony import */ var prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-commands */ \"(app-pages-browser)/./node_modules/prosemirror-commands/dist/index.js\");\n// commands/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL3BtL2NvbW1hbmRzL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDcUMiLCJzb3VyY2VzIjpbIkM6XFxQcm9qZWN0c1xcdHVvbi1pby12MVxcbm9kZV9tb2R1bGVzXFxAdGlwdGFwXFxwbVxcY29tbWFuZHNcXGRpc3RcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGNvbW1hbmRzL2luZGV4LnRzXG5leHBvcnQgKiBmcm9tIFwicHJvc2VtaXJyb3ItY29tbWFuZHNcIjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tiptap/pm/commands/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tiptap/pm/gapcursor/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@tiptap/pm/gapcursor/dist/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GapCursor: () => (/* reexport safe */ prosemirror_gapcursor__WEBPACK_IMPORTED_MODULE_0__.GapCursor),\n/* harmony export */   gapCursor: () => (/* reexport safe */ prosemirror_gapcursor__WEBPACK_IMPORTED_MODULE_0__.gapCursor)\n/* harmony export */ });\n/* harmony import */ var prosemirror_gapcursor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-gapcursor */ \"(app-pages-browser)/./node_modules/prosemirror-gapcursor/dist/index.js\");\n// gapcursor/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL3BtL2dhcGN1cnNvci9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ3NDIiwic291cmNlcyI6WyJDOlxcUHJvamVjdHNcXHR1b24taW8tdjFcXG5vZGVfbW9kdWxlc1xcQHRpcHRhcFxccG1cXGdhcGN1cnNvclxcZGlzdFxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZ2FwY3Vyc29yL2luZGV4LnRzXG5leHBvcnQgKiBmcm9tIFwicHJvc2VtaXJyb3ItZ2FwY3Vyc29yXCI7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tiptap/pm/gapcursor/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tiptap/pm/history/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@tiptap/pm/history/dist/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeHistory: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.closeHistory),\n/* harmony export */   history: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.history),\n/* harmony export */   redo: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.redo),\n/* harmony export */   redoDepth: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.redoDepth),\n/* harmony export */   redoNoScroll: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.redoNoScroll),\n/* harmony export */   undo: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.undo),\n/* harmony export */   undoDepth: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.undoDepth),\n/* harmony export */   undoNoScroll: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.undoNoScroll)\n/* harmony export */ });\n/* harmony import */ var prosemirror_history__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-history */ \"(app-pages-browser)/./node_modules/prosemirror-history/dist/index.js\");\n// history/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL3BtL2hpc3RvcnkvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUNvQyIsInNvdXJjZXMiOlsiQzpcXFByb2plY3RzXFx0dW9uLWlvLXYxXFxub2RlX21vZHVsZXNcXEB0aXB0YXBcXHBtXFxoaXN0b3J5XFxkaXN0XFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBoaXN0b3J5L2luZGV4LnRzXG5leHBvcnQgKiBmcm9tIFwicHJvc2VtaXJyb3ItaGlzdG9yeVwiO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tiptap/pm/history/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tiptap/pm/keymap/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@tiptap/pm/keymap/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keydownHandler: () => (/* reexport safe */ prosemirror_keymap__WEBPACK_IMPORTED_MODULE_0__.keydownHandler),\n/* harmony export */   keymap: () => (/* reexport safe */ prosemirror_keymap__WEBPACK_IMPORTED_MODULE_0__.keymap)\n/* harmony export */ });\n/* harmony import */ var prosemirror_keymap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-keymap */ \"(app-pages-browser)/./node_modules/prosemirror-keymap/dist/index.js\");\n// keymap/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL3BtL2tleW1hcC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ21DIiwic291cmNlcyI6WyJDOlxcUHJvamVjdHNcXHR1b24taW8tdjFcXG5vZGVfbW9kdWxlc1xcQHRpcHRhcFxccG1cXGtleW1hcFxcZGlzdFxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8ga2V5bWFwL2luZGV4LnRzXG5leHBvcnQgKiBmcm9tIFwicHJvc2VtaXJyb3Ita2V5bWFwXCI7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tiptap/pm/keymap/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tiptap/pm/model/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@tiptap/pm/model/dist/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentMatch: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.ContentMatch),\n/* harmony export */   DOMParser: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.DOMParser),\n/* harmony export */   DOMSerializer: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.DOMSerializer),\n/* harmony export */   Fragment: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment),\n/* harmony export */   Mark: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Mark),\n/* harmony export */   MarkType: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.MarkType),\n/* harmony export */   Node: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Node),\n/* harmony export */   NodeRange: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.NodeRange),\n/* harmony export */   NodeType: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.NodeType),\n/* harmony export */   ReplaceError: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.ReplaceError),\n/* harmony export */   ResolvedPos: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.ResolvedPos),\n/* harmony export */   Schema: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Schema),\n/* harmony export */   Slice: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice)\n/* harmony export */ });\n/* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-model */ \"(app-pages-browser)/./node_modules/prosemirror-model/dist/index.js\");\n// model/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL3BtL21vZGVsL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNrQyIsInNvdXJjZXMiOlsiQzpcXFByb2plY3RzXFx0dW9uLWlvLXYxXFxub2RlX21vZHVsZXNcXEB0aXB0YXBcXHBtXFxtb2RlbFxcZGlzdFxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gbW9kZWwvaW5kZXgudHNcbmV4cG9ydCAqIGZyb20gXCJwcm9zZW1pcnJvci1tb2RlbFwiO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tiptap/pm/model/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tiptap/pm/schema-list/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@tiptap/pm/schema-list/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addListNodes: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.addListNodes),\n/* harmony export */   bulletList: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.bulletList),\n/* harmony export */   liftListItem: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.liftListItem),\n/* harmony export */   listItem: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.listItem),\n/* harmony export */   orderedList: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.orderedList),\n/* harmony export */   sinkListItem: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.sinkListItem),\n/* harmony export */   splitListItem: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.splitListItem),\n/* harmony export */   splitListItemKeepMarks: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.splitListItemKeepMarks),\n/* harmony export */   wrapInList: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.wrapInList),\n/* harmony export */   wrapRangeInList: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.wrapRangeInList)\n/* harmony export */ });\n/* harmony import */ var prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-schema-list */ \"(app-pages-browser)/./node_modules/prosemirror-schema-list/dist/index.js\");\n// schema-list/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL3BtL3NjaGVtYS1saXN0L2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUN3QyIsInNvdXJjZXMiOlsiQzpcXFByb2plY3RzXFx0dW9uLWlvLXYxXFxub2RlX21vZHVsZXNcXEB0aXB0YXBcXHBtXFxzY2hlbWEtbGlzdFxcZGlzdFxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc2NoZW1hLWxpc3QvaW5kZXgudHNcbmV4cG9ydCAqIGZyb20gXCJwcm9zZW1pcnJvci1zY2hlbWEtbGlzdFwiO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tiptap/pm/schema-list/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tiptap/pm/state/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@tiptap/pm/state/dist/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AllSelection: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.AllSelection),\n/* harmony export */   EditorState: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.EditorState),\n/* harmony export */   NodeSelection: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection),\n/* harmony export */   Plugin: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Plugin),\n/* harmony export */   PluginKey: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey),\n/* harmony export */   Selection: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection),\n/* harmony export */   SelectionRange: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.SelectionRange),\n/* harmony export */   TextSelection: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection),\n/* harmony export */   Transaction: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Transaction)\n/* harmony export */ });\n/* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-state */ \"(app-pages-browser)/./node_modules/prosemirror-state/dist/index.js\");\n// state/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL3BtL3N0YXRlL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ2tDIiwic291cmNlcyI6WyJDOlxcUHJvamVjdHNcXHR1b24taW8tdjFcXG5vZGVfbW9kdWxlc1xcQHRpcHRhcFxccG1cXHN0YXRlXFxkaXN0XFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzdGF0ZS9pbmRleC50c1xuZXhwb3J0ICogZnJvbSBcInByb3NlbWlycm9yLXN0YXRlXCI7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tiptap/pm/state/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tiptap/pm/transform/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@tiptap/pm/transform/dist/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AddMarkStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.AddMarkStep),\n/* harmony export */   AddNodeMarkStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.AddNodeMarkStep),\n/* harmony export */   AttrStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.AttrStep),\n/* harmony export */   DocAttrStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.DocAttrStep),\n/* harmony export */   MapResult: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.MapResult),\n/* harmony export */   Mapping: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.Mapping),\n/* harmony export */   RemoveMarkStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.RemoveMarkStep),\n/* harmony export */   RemoveNodeMarkStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.RemoveNodeMarkStep),\n/* harmony export */   ReplaceAroundStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.ReplaceAroundStep),\n/* harmony export */   ReplaceStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.ReplaceStep),\n/* harmony export */   Step: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.Step),\n/* harmony export */   StepMap: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.StepMap),\n/* harmony export */   StepResult: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.StepResult),\n/* harmony export */   Transform: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.Transform),\n/* harmony export */   TransformError: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.TransformError),\n/* harmony export */   canJoin: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.canJoin),\n/* harmony export */   canSplit: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.canSplit),\n/* harmony export */   dropPoint: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.dropPoint),\n/* harmony export */   findWrapping: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.findWrapping),\n/* harmony export */   insertPoint: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.insertPoint),\n/* harmony export */   joinPoint: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.joinPoint),\n/* harmony export */   liftTarget: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.liftTarget),\n/* harmony export */   replaceStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.replaceStep)\n/* harmony export */ });\n/* harmony import */ var prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-transform */ \"(app-pages-browser)/./node_modules/prosemirror-transform/dist/index.js\");\n// transform/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL3BtL3RyYW5zZm9ybS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ3NDIiwic291cmNlcyI6WyJDOlxcUHJvamVjdHNcXHR1b24taW8tdjFcXG5vZGVfbW9kdWxlc1xcQHRpcHRhcFxccG1cXHRyYW5zZm9ybVxcZGlzdFxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gdHJhbnNmb3JtL2luZGV4LnRzXG5leHBvcnQgKiBmcm9tIFwicHJvc2VtaXJyb3ItdHJhbnNmb3JtXCI7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tiptap/pm/transform/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tiptap/pm/view/dist/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@tiptap/pm/view/dist/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Decoration: () => (/* reexport safe */ prosemirror_view__WEBPACK_IMPORTED_MODULE_0__.Decoration),\n/* harmony export */   DecorationSet: () => (/* reexport safe */ prosemirror_view__WEBPACK_IMPORTED_MODULE_0__.DecorationSet),\n/* harmony export */   EditorView: () => (/* reexport safe */ prosemirror_view__WEBPACK_IMPORTED_MODULE_0__.EditorView),\n/* harmony export */   __endComposition: () => (/* reexport safe */ prosemirror_view__WEBPACK_IMPORTED_MODULE_0__.__endComposition),\n/* harmony export */   __parseFromClipboard: () => (/* reexport safe */ prosemirror_view__WEBPACK_IMPORTED_MODULE_0__.__parseFromClipboard)\n/* harmony export */ });\n/* harmony import */ var prosemirror_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-view */ \"(app-pages-browser)/./node_modules/prosemirror-view/dist/index.js\");\n// view/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL3BtL3ZpZXcvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNpQyIsInNvdXJjZXMiOlsiQzpcXFByb2plY3RzXFx0dW9uLWlvLXYxXFxub2RlX21vZHVsZXNcXEB0aXB0YXBcXHBtXFx2aWV3XFxkaXN0XFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB2aWV3L2luZGV4LnRzXG5leHBvcnQgKiBmcm9tIFwicHJvc2VtaXJyb3Itdmlld1wiO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tiptap/pm/view/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tiptap/react/dist/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@tiptap/react/dist/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BubbleMenu: () => (/* binding */ BubbleMenu),\n/* harmony export */   CommandManager: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.CommandManager),\n/* harmony export */   Editor: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Editor),\n/* harmony export */   EditorConsumer: () => (/* binding */ EditorConsumer),\n/* harmony export */   EditorContent: () => (/* binding */ EditorContent),\n/* harmony export */   EditorContext: () => (/* binding */ EditorContext),\n/* harmony export */   EditorProvider: () => (/* binding */ EditorProvider),\n/* harmony export */   Extension: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Extension),\n/* harmony export */   FloatingMenu: () => (/* binding */ FloatingMenu),\n/* harmony export */   InputRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.InputRule),\n/* harmony export */   Mark: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Mark),\n/* harmony export */   Node: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Node),\n/* harmony export */   NodePos: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.NodePos),\n/* harmony export */   NodeView: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.NodeView),\n/* harmony export */   NodeViewContent: () => (/* binding */ NodeViewContent),\n/* harmony export */   NodeViewWrapper: () => (/* binding */ NodeViewWrapper),\n/* harmony export */   PasteRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.PasteRule),\n/* harmony export */   PureEditorContent: () => (/* binding */ PureEditorContent),\n/* harmony export */   ReactNodeView: () => (/* binding */ ReactNodeView),\n/* harmony export */   ReactNodeViewContext: () => (/* binding */ ReactNodeViewContext),\n/* harmony export */   ReactNodeViewRenderer: () => (/* binding */ ReactNodeViewRenderer),\n/* harmony export */   ReactRenderer: () => (/* binding */ ReactRenderer),\n/* harmony export */   Tracker: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Tracker),\n/* harmony export */   callOrReturn: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.callOrReturn),\n/* harmony export */   combineTransactionSteps: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.combineTransactionSteps),\n/* harmony export */   createChainableState: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.createChainableState),\n/* harmony export */   createDocument: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.createDocument),\n/* harmony export */   createNodeFromContent: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.createNodeFromContent),\n/* harmony export */   createStyleTag: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.createStyleTag),\n/* harmony export */   defaultBlockAt: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.defaultBlockAt),\n/* harmony export */   deleteProps: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.deleteProps),\n/* harmony export */   elementFromString: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.elementFromString),\n/* harmony export */   escapeForRegEx: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.escapeForRegEx),\n/* harmony export */   extensions: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.extensions),\n/* harmony export */   findChildren: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.findChildren),\n/* harmony export */   findChildrenInRange: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.findChildrenInRange),\n/* harmony export */   findDuplicates: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.findDuplicates),\n/* harmony export */   findParentNode: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.findParentNode),\n/* harmony export */   findParentNodeClosestToPos: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.findParentNodeClosestToPos),\n/* harmony export */   fromString: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.fromString),\n/* harmony export */   generateHTML: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.generateHTML),\n/* harmony export */   generateJSON: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.generateJSON),\n/* harmony export */   generateText: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.generateText),\n/* harmony export */   getAttributes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getAttributes),\n/* harmony export */   getAttributesFromExtensions: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getAttributesFromExtensions),\n/* harmony export */   getChangedRanges: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getChangedRanges),\n/* harmony export */   getDebugJSON: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getDebugJSON),\n/* harmony export */   getExtensionField: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getExtensionField),\n/* harmony export */   getHTMLFromFragment: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getHTMLFromFragment),\n/* harmony export */   getMarkAttributes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getMarkAttributes),\n/* harmony export */   getMarkRange: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getMarkRange),\n/* harmony export */   getMarkType: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getMarkType),\n/* harmony export */   getMarksBetween: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getMarksBetween),\n/* harmony export */   getNodeAtPosition: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getNodeAtPosition),\n/* harmony export */   getNodeAttributes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getNodeAttributes),\n/* harmony export */   getNodeType: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getNodeType),\n/* harmony export */   getRenderedAttributes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getRenderedAttributes),\n/* harmony export */   getSchema: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getSchema),\n/* harmony export */   getSchemaByResolvedExtensions: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getSchemaByResolvedExtensions),\n/* harmony export */   getSchemaTypeByName: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getSchemaTypeByName),\n/* harmony export */   getSchemaTypeNameByName: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getSchemaTypeNameByName),\n/* harmony export */   getSplittedAttributes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getSplittedAttributes),\n/* harmony export */   getText: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getText),\n/* harmony export */   getTextBetween: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getTextBetween),\n/* harmony export */   getTextContentFromNodes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getTextContentFromNodes),\n/* harmony export */   getTextSerializersFromSchema: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getTextSerializersFromSchema),\n/* harmony export */   injectExtensionAttributesToParseRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.injectExtensionAttributesToParseRule),\n/* harmony export */   inputRulesPlugin: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.inputRulesPlugin),\n/* harmony export */   isActive: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isActive),\n/* harmony export */   isAtEndOfNode: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isAtEndOfNode),\n/* harmony export */   isAtStartOfNode: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isAtStartOfNode),\n/* harmony export */   isEmptyObject: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isEmptyObject),\n/* harmony export */   isExtensionRulesEnabled: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isExtensionRulesEnabled),\n/* harmony export */   isFunction: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isFunction),\n/* harmony export */   isList: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isList),\n/* harmony export */   isMacOS: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isMacOS),\n/* harmony export */   isMarkActive: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isMarkActive),\n/* harmony export */   isNodeActive: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isNodeActive),\n/* harmony export */   isNodeEmpty: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isNodeEmpty),\n/* harmony export */   isNodeSelection: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isNodeSelection),\n/* harmony export */   isNumber: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isNumber),\n/* harmony export */   isPlainObject: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isPlainObject),\n/* harmony export */   isRegExp: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isRegExp),\n/* harmony export */   isString: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isString),\n/* harmony export */   isTextSelection: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isTextSelection),\n/* harmony export */   isiOS: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isiOS),\n/* harmony export */   markInputRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.markInputRule),\n/* harmony export */   markPasteRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.markPasteRule),\n/* harmony export */   mergeAttributes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.mergeAttributes),\n/* harmony export */   mergeDeep: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.mergeDeep),\n/* harmony export */   minMax: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.minMax),\n/* harmony export */   nodeInputRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.nodeInputRule),\n/* harmony export */   nodePasteRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.nodePasteRule),\n/* harmony export */   objectIncludes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.objectIncludes),\n/* harmony export */   pasteRulesPlugin: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.pasteRulesPlugin),\n/* harmony export */   posToDOMRect: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.posToDOMRect),\n/* harmony export */   removeDuplicates: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.removeDuplicates),\n/* harmony export */   resolveFocusPosition: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.resolveFocusPosition),\n/* harmony export */   rewriteUnknownContent: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.rewriteUnknownContent),\n/* harmony export */   selectionToInsertionEnd: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.selectionToInsertionEnd),\n/* harmony export */   splitExtensions: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.splitExtensions),\n/* harmony export */   textInputRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.textInputRule),\n/* harmony export */   textPasteRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.textPasteRule),\n/* harmony export */   textblockTypeInputRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.textblockTypeInputRule),\n/* harmony export */   useCurrentEditor: () => (/* binding */ useCurrentEditor),\n/* harmony export */   useEditor: () => (/* binding */ useEditor),\n/* harmony export */   useEditorState: () => (/* binding */ useEditorState),\n/* harmony export */   useReactNodeView: () => (/* binding */ useReactNodeView),\n/* harmony export */   wrappingInputRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.wrappingInputRule)\n/* harmony export */ });\n/* harmony import */ var _tiptap_extension_bubble_menu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tiptap/extension-bubble-menu */ \"(app-pages-browser)/./node_modules/@tiptap/extension-bubble-menu/dist/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\");\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tiptap/core */ \"(app-pages-browser)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_extension_floating_menu__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tiptap/extension-floating-menu */ \"(app-pages-browser)/./node_modules/@tiptap/extension-floating-menu/dist/index.js\");\n\n\n\n\n\n\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nvar shim = {exports: {}};\n\nvar useSyncExternalStoreShim_production_min = {};\n\n/**\n * @license React\n * use-sync-external-store-shim.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar hasRequiredUseSyncExternalStoreShim_production_min;\n\nfunction requireUseSyncExternalStoreShim_production_min () {\n\tif (hasRequiredUseSyncExternalStoreShim_production_min) return useSyncExternalStoreShim_production_min;\n\thasRequiredUseSyncExternalStoreShim_production_min = 1;\nvar e=react__WEBPACK_IMPORTED_MODULE_0__;function h(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var k=\"function\"===typeof Object.is?Object.is:h,l=e.useState,m=e.useEffect,n=e.useLayoutEffect,p=e.useDebugValue;function q(a,b){var d=b(),f=l({inst:{value:d,getSnapshot:b}}),c=f[0].inst,g=f[1];n(function(){c.value=d;c.getSnapshot=b;r(c)&&g({inst:c});},[a,d,b]);m(function(){r(c)&&g({inst:c});return a(function(){r(c)&&g({inst:c});})},[a]);p(d);return d}\n\tfunction r(a){var b=a.getSnapshot;a=a.value;try{var d=b();return !k(a,d)}catch(f){return !0}}function t(a,b){return b()}var u=\"undefined\"===typeof window||\"undefined\"===typeof window.document||\"undefined\"===typeof window.document.createElement?t:q;useSyncExternalStoreShim_production_min.useSyncExternalStore=void 0!==e.useSyncExternalStore?e.useSyncExternalStore:u;\n\treturn useSyncExternalStoreShim_production_min;\n}\n\nvar useSyncExternalStoreShim_development = {};\n\n/**\n * @license React\n * use-sync-external-store-shim.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar hasRequiredUseSyncExternalStoreShim_development;\n\nfunction requireUseSyncExternalStoreShim_development () {\n\tif (hasRequiredUseSyncExternalStoreShim_development) return useSyncExternalStoreShim_development;\n\thasRequiredUseSyncExternalStoreShim_development = 1;\n\n\tif (true) {\n\t  (function() {\n\n\t/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n\tif (\n\t  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n\t  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===\n\t    'function'\n\t) {\n\t  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n\t}\n\t          var React$1 = react__WEBPACK_IMPORTED_MODULE_0__;\n\n\tvar ReactSharedInternals = React$1.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\n\tfunction error(format) {\n\t  {\n\t    {\n\t      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n\t        args[_key2 - 1] = arguments[_key2];\n\t      }\n\n\t      printWarning('error', format, args);\n\t    }\n\t  }\n\t}\n\n\tfunction printWarning(level, format, args) {\n\t  // When changing this logic, you might want to also\n\t  // update consoleWithStackDev.www.js as well.\n\t  {\n\t    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\t    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n\t    if (stack !== '') {\n\t      format += '%s';\n\t      args = args.concat([stack]);\n\t    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n\t    var argsWithFormat = args.map(function (item) {\n\t      return String(item);\n\t    }); // Careful: RN currently depends on this prefix\n\n\t    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n\t    // breaks IE9: https://github.com/facebook/react/issues/13610\n\t    // eslint-disable-next-line react-internal/no-production-logging\n\n\t    Function.prototype.apply.call(console[level], console, argsWithFormat);\n\t  }\n\t}\n\n\t/**\n\t * inlined Object.is polyfill to avoid requiring consumers ship their own\n\t * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n\t */\n\tfunction is(x, y) {\n\t  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n\t  ;\n\t}\n\n\tvar objectIs = typeof Object.is === 'function' ? Object.is : is;\n\n\t// dispatch for CommonJS interop named imports.\n\n\tvar useState = React$1.useState,\n\t    useEffect = React$1.useEffect,\n\t    useLayoutEffect = React$1.useLayoutEffect,\n\t    useDebugValue = React$1.useDebugValue;\n\tvar didWarnOld18Alpha = false;\n\tvar didWarnUncachedGetSnapshot = false; // Disclaimer: This shim breaks many of the rules of React, and only works\n\t// because of a very particular set of implementation details and assumptions\n\t// -- change any one of them and it will break. The most important assumption\n\t// is that updates are always synchronous, because concurrent rendering is\n\t// only available in versions of React that also have a built-in\n\t// useSyncExternalStore API. And we only use this shim when the built-in API\n\t// does not exist.\n\t//\n\t// Do not assume that the clever hacks used by this hook also work in general.\n\t// The point of this shim is to replace the need for hacks by other libraries.\n\n\tfunction useSyncExternalStore(subscribe, getSnapshot, // Note: The shim does not use getServerSnapshot, because pre-18 versions of\n\t// React do not expose a way to check if we're hydrating. So users of the shim\n\t// will need to track that themselves and return the correct value\n\t// from `getSnapshot`.\n\tgetServerSnapshot) {\n\t  {\n\t    if (!didWarnOld18Alpha) {\n\t      if (React$1.startTransition !== undefined) {\n\t        didWarnOld18Alpha = true;\n\n\t        error('You are using an outdated, pre-release alpha of React 18 that ' + 'does not support useSyncExternalStore. The ' + 'use-sync-external-store shim will not work correctly. Upgrade ' + 'to a newer pre-release.');\n\t      }\n\t    }\n\t  } // Read the current snapshot from the store on every render. Again, this\n\t  // breaks the rules of React, and only works here because of specific\n\t  // implementation details, most importantly that updates are\n\t  // always synchronous.\n\n\n\t  var value = getSnapshot();\n\n\t  {\n\t    if (!didWarnUncachedGetSnapshot) {\n\t      var cachedValue = getSnapshot();\n\n\t      if (!objectIs(value, cachedValue)) {\n\t        error('The result of getSnapshot should be cached to avoid an infinite loop');\n\n\t        didWarnUncachedGetSnapshot = true;\n\t      }\n\t    }\n\t  } // Because updates are synchronous, we don't queue them. Instead we force a\n\t  // re-render whenever the subscribed state changes by updating an some\n\t  // arbitrary useState hook. Then, during render, we call getSnapshot to read\n\t  // the current value.\n\t  //\n\t  // Because we don't actually use the state returned by the useState hook, we\n\t  // can save a bit of memory by storing other stuff in that slot.\n\t  //\n\t  // To implement the early bailout, we need to track some things on a mutable\n\t  // object. Usually, we would put that in a useRef hook, but we can stash it in\n\t  // our useState hook instead.\n\t  //\n\t  // To force a re-render, we call forceUpdate({inst}). That works because the\n\t  // new object always fails an equality check.\n\n\n\t  var _useState = useState({\n\t    inst: {\n\t      value: value,\n\t      getSnapshot: getSnapshot\n\t    }\n\t  }),\n\t      inst = _useState[0].inst,\n\t      forceUpdate = _useState[1]; // Track the latest getSnapshot function with a ref. This needs to be updated\n\t  // in the layout phase so we can access it during the tearing check that\n\t  // happens on subscribe.\n\n\n\t  useLayoutEffect(function () {\n\t    inst.value = value;\n\t    inst.getSnapshot = getSnapshot; // Whenever getSnapshot or subscribe changes, we need to check in the\n\t    // commit phase if there was an interleaved mutation. In concurrent mode\n\t    // this can happen all the time, but even in synchronous mode, an earlier\n\t    // effect may have mutated the store.\n\n\t    if (checkIfSnapshotChanged(inst)) {\n\t      // Force a re-render.\n\t      forceUpdate({\n\t        inst: inst\n\t      });\n\t    }\n\t  }, [subscribe, value, getSnapshot]);\n\t  useEffect(function () {\n\t    // Check for changes right before subscribing. Subsequent changes will be\n\t    // detected in the subscription handler.\n\t    if (checkIfSnapshotChanged(inst)) {\n\t      // Force a re-render.\n\t      forceUpdate({\n\t        inst: inst\n\t      });\n\t    }\n\n\t    var handleStoreChange = function () {\n\t      // TODO: Because there is no cross-renderer API for batching updates, it's\n\t      // up to the consumer of this library to wrap their subscription event\n\t      // with unstable_batchedUpdates. Should we try to detect when this isn't\n\t      // the case and print a warning in development?\n\t      // The store changed. Check if the snapshot changed since the last time we\n\t      // read from the store.\n\t      if (checkIfSnapshotChanged(inst)) {\n\t        // Force a re-render.\n\t        forceUpdate({\n\t          inst: inst\n\t        });\n\t      }\n\t    }; // Subscribe to the store and return a clean-up function.\n\n\n\t    return subscribe(handleStoreChange);\n\t  }, [subscribe]);\n\t  useDebugValue(value);\n\t  return value;\n\t}\n\n\tfunction checkIfSnapshotChanged(inst) {\n\t  var latestGetSnapshot = inst.getSnapshot;\n\t  var prevValue = inst.value;\n\n\t  try {\n\t    var nextValue = latestGetSnapshot();\n\t    return !objectIs(prevValue, nextValue);\n\t  } catch (error) {\n\t    return true;\n\t  }\n\t}\n\n\tfunction useSyncExternalStore$1(subscribe, getSnapshot, getServerSnapshot) {\n\t  // Note: The shim does not use getServerSnapshot, because pre-18 versions of\n\t  // React do not expose a way to check if we're hydrating. So users of the shim\n\t  // will need to track that themselves and return the correct value\n\t  // from `getSnapshot`.\n\t  return getSnapshot();\n\t}\n\n\tvar canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');\n\n\tvar isServerEnvironment = !canUseDOM;\n\n\tvar shim = isServerEnvironment ? useSyncExternalStore$1 : useSyncExternalStore;\n\tvar useSyncExternalStore$2 = React$1.useSyncExternalStore !== undefined ? React$1.useSyncExternalStore : shim;\n\n\tuseSyncExternalStoreShim_development.useSyncExternalStore = useSyncExternalStore$2;\n\t          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n\tif (\n\t  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n\t  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===\n\t    'function'\n\t) {\n\t  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n\t}\n\t        \n\t  })();\n\t}\n\treturn useSyncExternalStoreShim_development;\n}\n\nif (false) {} else {\n  shim.exports = requireUseSyncExternalStoreShim_development();\n}\n\nvar shimExports = shim.exports;\n\nconst mergeRefs = (...refs) => {\n    return (node) => {\n        refs.forEach(ref => {\n            if (typeof ref === 'function') {\n                ref(node);\n            }\n            else if (ref) {\n                ref.current = node;\n            }\n        });\n    };\n};\n/**\n * This component renders all of the editor's node views.\n */\nconst Portals = ({ contentComponent, }) => {\n    // For performance reasons, we render the node view portals on state changes only\n    const renderers = shimExports.useSyncExternalStore(contentComponent.subscribe, contentComponent.getSnapshot, contentComponent.getServerSnapshot);\n    // This allows us to directly render the portals without any additional wrapper\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, Object.values(renderers)));\n};\nfunction getInstance() {\n    const subscribers = new Set();\n    let renderers = {};\n    return {\n        /**\n         * Subscribe to the editor instance's changes.\n         */\n        subscribe(callback) {\n            subscribers.add(callback);\n            return () => {\n                subscribers.delete(callback);\n            };\n        },\n        getSnapshot() {\n            return renderers;\n        },\n        getServerSnapshot() {\n            return renderers;\n        },\n        /**\n         * Adds a new NodeView Renderer to the editor.\n         */\n        setRenderer(id, renderer) {\n            renderers = {\n                ...renderers,\n                [id]: react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal(renderer.reactElement, renderer.element, id),\n            };\n            subscribers.forEach(subscriber => subscriber());\n        },\n        /**\n         * Removes a NodeView Renderer from the editor.\n         */\n        removeRenderer(id) {\n            const nextRenderers = { ...renderers };\n            delete nextRenderers[id];\n            renderers = nextRenderers;\n            subscribers.forEach(subscriber => subscriber());\n        },\n    };\n}\nclass PureEditorContent extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(props) {\n        var _a;\n        super(props);\n        this.editorContentRef = react__WEBPACK_IMPORTED_MODULE_0__.createRef();\n        this.initialized = false;\n        this.state = {\n            hasContentComponentInitialized: Boolean((_a = props.editor) === null || _a === void 0 ? void 0 : _a.contentComponent),\n        };\n    }\n    componentDidMount() {\n        this.init();\n    }\n    componentDidUpdate() {\n        this.init();\n    }\n    init() {\n        const editor = this.props.editor;\n        if (editor && !editor.isDestroyed && editor.options.element) {\n            if (editor.contentComponent) {\n                return;\n            }\n            const element = this.editorContentRef.current;\n            element.append(...editor.options.element.childNodes);\n            editor.setOptions({\n                element,\n            });\n            editor.contentComponent = getInstance();\n            // Has the content component been initialized?\n            if (!this.state.hasContentComponentInitialized) {\n                // Subscribe to the content component\n                this.unsubscribeToContentComponent = editor.contentComponent.subscribe(() => {\n                    this.setState(prevState => {\n                        if (!prevState.hasContentComponentInitialized) {\n                            return {\n                                hasContentComponentInitialized: true,\n                            };\n                        }\n                        return prevState;\n                    });\n                    // Unsubscribe to previous content component\n                    if (this.unsubscribeToContentComponent) {\n                        this.unsubscribeToContentComponent();\n                    }\n                });\n            }\n            editor.createNodeViews();\n            this.initialized = true;\n        }\n    }\n    componentWillUnmount() {\n        const editor = this.props.editor;\n        if (!editor) {\n            return;\n        }\n        this.initialized = false;\n        if (!editor.isDestroyed) {\n            editor.view.setProps({\n                nodeViews: {},\n            });\n        }\n        if (this.unsubscribeToContentComponent) {\n            this.unsubscribeToContentComponent();\n        }\n        editor.contentComponent = null;\n        if (!editor.options.element.firstChild) {\n            return;\n        }\n        const newElement = document.createElement('div');\n        newElement.append(...editor.options.element.childNodes);\n        editor.setOptions({\n            element: newElement,\n        });\n    }\n    render() {\n        const { editor, innerRef, ...rest } = this.props;\n        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { ref: mergeRefs(innerRef, this.editorContentRef), ...rest }),\n            (editor === null || editor === void 0 ? void 0 : editor.contentComponent) && react__WEBPACK_IMPORTED_MODULE_0__.createElement(Portals, { contentComponent: editor.contentComponent })));\n    }\n}\n// EditorContent should be re-created whenever the Editor instance changes\nconst EditorContentWithKey = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref) => {\n    const key = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n        return Math.floor(Math.random() * 0xffffffff).toString();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.editor]);\n    // Can't use JSX here because it conflicts with the type definition of Vue's JSX, so use createElement\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(PureEditorContent, {\n        key,\n        innerRef: ref,\n        ...props,\n    });\n});\nconst EditorContent = react__WEBPACK_IMPORTED_MODULE_0__.memo(EditorContentWithKey);\n\nvar react = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n    if ((a instanceof Map) && (b instanceof Map)) {\n      if (a.size !== b.size) return false;\n      for (i of a.entries())\n        if (!b.has(i[0])) return false;\n      for (i of a.entries())\n        if (!equal(i[1], b.get(i[0]))) return false;\n      return true;\n    }\n\n    if ((a instanceof Set) && (b instanceof Set)) {\n      if (a.size !== b.size) return false;\n      for (i of a.entries())\n        if (!b.has(i[0])) return false;\n      return true;\n    }\n\n    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (a[i] !== b[i]) return false;\n      return true;\n    }\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (key === '_owner' && a.$$typeof) {\n        // React-specific: avoid traversing React elements' _owner.\n        //  _owner contains circular references\n        // and is not needed when comparing the actual elements (and not their owners)\n        continue;\n      }\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n\nvar deepEqual = /*@__PURE__*/getDefaultExportFromCjs(react);\n\nvar withSelector = {exports: {}};\n\nvar withSelector_production_min = {};\n\n/**\n * @license React\n * use-sync-external-store-shim/with-selector.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar hasRequiredWithSelector_production_min;\n\nfunction requireWithSelector_production_min () {\n\tif (hasRequiredWithSelector_production_min) return withSelector_production_min;\n\thasRequiredWithSelector_production_min = 1;\nvar h=react__WEBPACK_IMPORTED_MODULE_0__,n=shimExports;function p(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var q=\"function\"===typeof Object.is?Object.is:p,r=n.useSyncExternalStore,t=h.useRef,u=h.useEffect,v=h.useMemo,w=h.useDebugValue;\n\twithSelector_production_min.useSyncExternalStoreWithSelector=function(a,b,e,l,g){var c=t(null);if(null===c.current){var f={hasValue:!1,value:null};c.current=f;}else f=c.current;c=v(function(){function a(a){if(!c){c=!0;d=a;a=l(a);if(void 0!==g&&f.hasValue){var b=f.value;if(g(b,a))return k=b}return k=a}b=k;if(q(d,a))return b;var e=l(a);if(void 0!==g&&g(b,e))return b;d=a;return k=e}var c=!1,d,k,m=void 0===e?null:e;return [function(){return a(b())},null===m?void 0:function(){return a(m())}]},[b,e,l,g]);var d=r(a,c[0],c[1]);\n\tu(function(){f.hasValue=!0;f.value=d;},[d]);w(d);return d};\n\treturn withSelector_production_min;\n}\n\nvar withSelector_development = {};\n\n/**\n * @license React\n * use-sync-external-store-shim/with-selector.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar hasRequiredWithSelector_development;\n\nfunction requireWithSelector_development () {\n\tif (hasRequiredWithSelector_development) return withSelector_development;\n\thasRequiredWithSelector_development = 1;\n\n\tif (true) {\n\t  (function() {\n\n\t/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n\tif (\n\t  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n\t  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===\n\t    'function'\n\t) {\n\t  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n\t}\n\t          var React$1 = react__WEBPACK_IMPORTED_MODULE_0__;\n\tvar shim = shimExports;\n\n\t/**\n\t * inlined Object.is polyfill to avoid requiring consumers ship their own\n\t * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n\t */\n\tfunction is(x, y) {\n\t  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n\t  ;\n\t}\n\n\tvar objectIs = typeof Object.is === 'function' ? Object.is : is;\n\n\tvar useSyncExternalStore = shim.useSyncExternalStore;\n\n\t// for CommonJS interop.\n\n\tvar useRef = React$1.useRef,\n\t    useEffect = React$1.useEffect,\n\t    useMemo = React$1.useMemo,\n\t    useDebugValue = React$1.useDebugValue; // Same as useSyncExternalStore, but supports selector and isEqual arguments.\n\n\tfunction useSyncExternalStoreWithSelector(subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {\n\t  // Use this to track the rendered snapshot.\n\t  var instRef = useRef(null);\n\t  var inst;\n\n\t  if (instRef.current === null) {\n\t    inst = {\n\t      hasValue: false,\n\t      value: null\n\t    };\n\t    instRef.current = inst;\n\t  } else {\n\t    inst = instRef.current;\n\t  }\n\n\t  var _useMemo = useMemo(function () {\n\t    // Track the memoized state using closure variables that are local to this\n\t    // memoized instance of a getSnapshot function. Intentionally not using a\n\t    // useRef hook, because that state would be shared across all concurrent\n\t    // copies of the hook/component.\n\t    var hasMemo = false;\n\t    var memoizedSnapshot;\n\t    var memoizedSelection;\n\n\t    var memoizedSelector = function (nextSnapshot) {\n\t      if (!hasMemo) {\n\t        // The first time the hook is called, there is no memoized result.\n\t        hasMemo = true;\n\t        memoizedSnapshot = nextSnapshot;\n\n\t        var _nextSelection = selector(nextSnapshot);\n\n\t        if (isEqual !== undefined) {\n\t          // Even if the selector has changed, the currently rendered selection\n\t          // may be equal to the new selection. We should attempt to reuse the\n\t          // current value if possible, to preserve downstream memoizations.\n\t          if (inst.hasValue) {\n\t            var currentSelection = inst.value;\n\n\t            if (isEqual(currentSelection, _nextSelection)) {\n\t              memoizedSelection = currentSelection;\n\t              return currentSelection;\n\t            }\n\t          }\n\t        }\n\n\t        memoizedSelection = _nextSelection;\n\t        return _nextSelection;\n\t      } // We may be able to reuse the previous invocation's result.\n\n\n\t      // We may be able to reuse the previous invocation's result.\n\t      var prevSnapshot = memoizedSnapshot;\n\t      var prevSelection = memoizedSelection;\n\n\t      if (objectIs(prevSnapshot, nextSnapshot)) {\n\t        // The snapshot is the same as last time. Reuse the previous selection.\n\t        return prevSelection;\n\t      } // The snapshot has changed, so we need to compute a new selection.\n\n\n\t      // The snapshot has changed, so we need to compute a new selection.\n\t      var nextSelection = selector(nextSnapshot); // If a custom isEqual function is provided, use that to check if the data\n\t      // has changed. If it hasn't, return the previous selection. That signals\n\t      // to React that the selections are conceptually equal, and we can bail\n\t      // out of rendering.\n\n\t      // If a custom isEqual function is provided, use that to check if the data\n\t      // has changed. If it hasn't, return the previous selection. That signals\n\t      // to React that the selections are conceptually equal, and we can bail\n\t      // out of rendering.\n\t      if (isEqual !== undefined && isEqual(prevSelection, nextSelection)) {\n\t        return prevSelection;\n\t      }\n\n\t      memoizedSnapshot = nextSnapshot;\n\t      memoizedSelection = nextSelection;\n\t      return nextSelection;\n\t    }; // Assigning this to a constant so that Flow knows it can't change.\n\n\n\t    // Assigning this to a constant so that Flow knows it can't change.\n\t    var maybeGetServerSnapshot = getServerSnapshot === undefined ? null : getServerSnapshot;\n\n\t    var getSnapshotWithSelector = function () {\n\t      return memoizedSelector(getSnapshot());\n\t    };\n\n\t    var getServerSnapshotWithSelector = maybeGetServerSnapshot === null ? undefined : function () {\n\t      return memoizedSelector(maybeGetServerSnapshot());\n\t    };\n\t    return [getSnapshotWithSelector, getServerSnapshotWithSelector];\n\t  }, [getSnapshot, getServerSnapshot, selector, isEqual]),\n\t      getSelection = _useMemo[0],\n\t      getServerSelection = _useMemo[1];\n\n\t  var value = useSyncExternalStore(subscribe, getSelection, getServerSelection);\n\t  useEffect(function () {\n\t    inst.hasValue = true;\n\t    inst.value = value;\n\t  }, [value]);\n\t  useDebugValue(value);\n\t  return value;\n\t}\n\n\twithSelector_development.useSyncExternalStoreWithSelector = useSyncExternalStoreWithSelector;\n\t          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n\tif (\n\t  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n\t  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===\n\t    'function'\n\t) {\n\t  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n\t}\n\t        \n\t  })();\n\t}\n\treturn withSelector_development;\n}\n\nif (false) {} else {\n  withSelector.exports = requireWithSelector_development();\n}\n\nvar withSelectorExports = withSelector.exports;\n\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n/**\n * To synchronize the editor instance with the component state,\n * we need to create a separate instance that is not affected by the component re-renders.\n */\nclass EditorStateManager {\n    constructor(initialEditor) {\n        this.transactionNumber = 0;\n        this.lastTransactionNumber = 0;\n        this.subscribers = new Set();\n        this.editor = initialEditor;\n        this.lastSnapshot = { editor: initialEditor, transactionNumber: 0 };\n        this.getSnapshot = this.getSnapshot.bind(this);\n        this.getServerSnapshot = this.getServerSnapshot.bind(this);\n        this.watch = this.watch.bind(this);\n        this.subscribe = this.subscribe.bind(this);\n    }\n    /**\n     * Get the current editor instance.\n     */\n    getSnapshot() {\n        if (this.transactionNumber === this.lastTransactionNumber) {\n            return this.lastSnapshot;\n        }\n        this.lastTransactionNumber = this.transactionNumber;\n        this.lastSnapshot = { editor: this.editor, transactionNumber: this.transactionNumber };\n        return this.lastSnapshot;\n    }\n    /**\n     * Always disable the editor on the server-side.\n     */\n    getServerSnapshot() {\n        return { editor: null, transactionNumber: 0 };\n    }\n    /**\n     * Subscribe to the editor instance's changes.\n     */\n    subscribe(callback) {\n        this.subscribers.add(callback);\n        return () => {\n            this.subscribers.delete(callback);\n        };\n    }\n    /**\n     * Watch the editor instance for changes.\n     */\n    watch(nextEditor) {\n        this.editor = nextEditor;\n        if (this.editor) {\n            /**\n             * This will force a re-render when the editor state changes.\n             * This is to support things like `editor.can().toggleBold()` in components that `useEditor`.\n             * This could be more efficient, but it's a good trade-off for now.\n             */\n            const fn = () => {\n                this.transactionNumber += 1;\n                this.subscribers.forEach(callback => callback());\n            };\n            const currentEditor = this.editor;\n            currentEditor.on('transaction', fn);\n            return () => {\n                currentEditor.off('transaction', fn);\n            };\n        }\n        return undefined;\n    }\n}\n/**\n * This hook allows you to watch for changes on the editor instance.\n * It will allow you to select a part of the editor state and re-render the component when it changes.\n * @example\n * ```tsx\n * const editor = useEditor({...options})\n * const { currentSelection } = useEditorState({\n *  editor,\n *  selector: snapshot => ({ currentSelection: snapshot.editor.state.selection }),\n * })\n */\nfunction useEditorState(options) {\n    var _a;\n    const [editorStateManager] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => new EditorStateManager(options.editor));\n    // Using the `useSyncExternalStore` hook to sync the editor instance with the component state\n    const selectedState = withSelectorExports.useSyncExternalStoreWithSelector(editorStateManager.subscribe, editorStateManager.getSnapshot, editorStateManager.getServerSnapshot, options.selector, (_a = options.equalityFn) !== null && _a !== void 0 ? _a : deepEqual);\n    useIsomorphicLayoutEffect(() => {\n        return editorStateManager.watch(options.editor);\n    }, [options.editor, editorStateManager]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue)(selectedState);\n    return selectedState;\n}\n\nconst isDev = \"development\" !== 'production';\nconst isSSR = typeof window === 'undefined';\nconst isNext = isSSR || Boolean(typeof window !== 'undefined' && window.next);\n/**\n * This class handles the creation, destruction, and re-creation of the editor instance.\n */\nclass EditorInstanceManager {\n    constructor(options) {\n        /**\n         * The current editor instance.\n         */\n        this.editor = null;\n        /**\n         * The subscriptions to notify when the editor instance\n         * has been created or destroyed.\n         */\n        this.subscriptions = new Set();\n        /**\n         * Whether the editor has been mounted.\n         */\n        this.isComponentMounted = false;\n        /**\n         * The most recent dependencies array.\n         */\n        this.previousDeps = null;\n        /**\n         * The unique instance ID. This is used to identify the editor instance. And will be re-generated for each new instance.\n         */\n        this.instanceId = '';\n        this.options = options;\n        this.subscriptions = new Set();\n        this.setEditor(this.getInitialEditor());\n        this.scheduleDestroy();\n        this.getEditor = this.getEditor.bind(this);\n        this.getServerSnapshot = this.getServerSnapshot.bind(this);\n        this.subscribe = this.subscribe.bind(this);\n        this.refreshEditorInstance = this.refreshEditorInstance.bind(this);\n        this.scheduleDestroy = this.scheduleDestroy.bind(this);\n        this.onRender = this.onRender.bind(this);\n        this.createEditor = this.createEditor.bind(this);\n    }\n    setEditor(editor) {\n        this.editor = editor;\n        this.instanceId = Math.random().toString(36).slice(2, 9);\n        // Notify all subscribers that the editor instance has been created\n        this.subscriptions.forEach(cb => cb());\n    }\n    getInitialEditor() {\n        if (this.options.current.immediatelyRender === undefined) {\n            if (isSSR || isNext) {\n                // TODO in the next major release, we should throw an error here\n                if (isDev) {\n                    /**\n                     * Throw an error in development, to make sure the developer is aware that tiptap cannot be SSR'd\n                     * and that they need to set `immediatelyRender` to `false` to avoid hydration mismatches.\n                     */\n                    console.warn('Tiptap Error: SSR has been detected, please set `immediatelyRender` explicitly to `false` to avoid hydration mismatches.');\n                }\n                // Best faith effort in production, run the code in the legacy mode to avoid hydration mismatches and errors in production\n                return null;\n            }\n            // Default to immediately rendering when client-side rendering\n            return this.createEditor();\n        }\n        if (this.options.current.immediatelyRender && isSSR && isDev) {\n            // Warn in development, to make sure the developer is aware that tiptap cannot be SSR'd, set `immediatelyRender` to `false` to avoid hydration mismatches.\n            throw new Error('Tiptap Error: SSR has been detected, and `immediatelyRender` has been set to `true` this is an unsupported configuration that may result in errors, explicitly set `immediatelyRender` to `false` to avoid hydration mismatches.');\n        }\n        if (this.options.current.immediatelyRender) {\n            return this.createEditor();\n        }\n        return null;\n    }\n    /**\n     * Create a new editor instance. And attach event listeners.\n     */\n    createEditor() {\n        const optionsToApply = {\n            ...this.options.current,\n            // Always call the most recent version of the callback function by default\n            onBeforeCreate: (...args) => { var _a, _b; return (_b = (_a = this.options.current).onBeforeCreate) === null || _b === void 0 ? void 0 : _b.call(_a, ...args); },\n            onBlur: (...args) => { var _a, _b; return (_b = (_a = this.options.current).onBlur) === null || _b === void 0 ? void 0 : _b.call(_a, ...args); },\n            onCreate: (...args) => { var _a, _b; return (_b = (_a = this.options.current).onCreate) === null || _b === void 0 ? void 0 : _b.call(_a, ...args); },\n            onDestroy: (...args) => { var _a, _b; return (_b = (_a = this.options.current).onDestroy) === null || _b === void 0 ? void 0 : _b.call(_a, ...args); },\n            onFocus: (...args) => { var _a, _b; return (_b = (_a = this.options.current).onFocus) === null || _b === void 0 ? void 0 : _b.call(_a, ...args); },\n            onSelectionUpdate: (...args) => { var _a, _b; return (_b = (_a = this.options.current).onSelectionUpdate) === null || _b === void 0 ? void 0 : _b.call(_a, ...args); },\n            onTransaction: (...args) => { var _a, _b; return (_b = (_a = this.options.current).onTransaction) === null || _b === void 0 ? void 0 : _b.call(_a, ...args); },\n            onUpdate: (...args) => { var _a, _b; return (_b = (_a = this.options.current).onUpdate) === null || _b === void 0 ? void 0 : _b.call(_a, ...args); },\n            onContentError: (...args) => { var _a, _b; return (_b = (_a = this.options.current).onContentError) === null || _b === void 0 ? void 0 : _b.call(_a, ...args); },\n            onDrop: (...args) => { var _a, _b; return (_b = (_a = this.options.current).onDrop) === null || _b === void 0 ? void 0 : _b.call(_a, ...args); },\n            onPaste: (...args) => { var _a, _b; return (_b = (_a = this.options.current).onPaste) === null || _b === void 0 ? void 0 : _b.call(_a, ...args); },\n        };\n        const editor = new _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Editor(optionsToApply);\n        // no need to keep track of the event listeners, they will be removed when the editor is destroyed\n        return editor;\n    }\n    /**\n     * Get the current editor instance.\n     */\n    getEditor() {\n        return this.editor;\n    }\n    /**\n     * Always disable the editor on the server-side.\n     */\n    getServerSnapshot() {\n        return null;\n    }\n    /**\n     * Subscribe to the editor instance's changes.\n     */\n    subscribe(onStoreChange) {\n        this.subscriptions.add(onStoreChange);\n        return () => {\n            this.subscriptions.delete(onStoreChange);\n        };\n    }\n    static compareOptions(a, b) {\n        return Object.keys(a).every(key => {\n            if (['onCreate', 'onBeforeCreate', 'onDestroy', 'onUpdate', 'onTransaction', 'onFocus', 'onBlur', 'onSelectionUpdate', 'onContentError', 'onDrop', 'onPaste'].includes(key)) {\n                // we don't want to compare callbacks, they are always different and only registered once\n                return true;\n            }\n            // We often encourage putting extensions inlined in the options object, so we will do a slightly deeper comparison here\n            if (key === 'extensions' && a.extensions && b.extensions) {\n                if (a.extensions.length !== b.extensions.length) {\n                    return false;\n                }\n                return a.extensions.every((extension, index) => {\n                    var _a;\n                    if (extension !== ((_a = b.extensions) === null || _a === void 0 ? void 0 : _a[index])) {\n                        return false;\n                    }\n                    return true;\n                });\n            }\n            if (a[key] !== b[key]) {\n                // if any of the options have changed, we should update the editor options\n                return false;\n            }\n            return true;\n        });\n    }\n    /**\n     * On each render, we will create, update, or destroy the editor instance.\n     * @param deps The dependencies to watch for changes\n     * @returns A cleanup function\n     */\n    onRender(deps) {\n        // The returned callback will run on each render\n        return () => {\n            this.isComponentMounted = true;\n            // Cleanup any scheduled destructions, since we are currently rendering\n            clearTimeout(this.scheduledDestructionTimeout);\n            if (this.editor && !this.editor.isDestroyed && deps.length === 0) {\n                // if the editor does exist & deps are empty, we don't need to re-initialize the editor generally\n                if (!EditorInstanceManager.compareOptions(this.options.current, this.editor.options)) {\n                    // But, the options are different, so we need to update the editor options\n                    // Still, this is faster than re-creating the editor\n                    this.editor.setOptions({\n                        ...this.options.current,\n                        editable: this.editor.isEditable,\n                    });\n                }\n            }\n            else {\n                // When the editor:\n                // - does not yet exist\n                // - is destroyed\n                // - the deps array changes\n                // We need to destroy the editor instance and re-initialize it\n                this.refreshEditorInstance(deps);\n            }\n            return () => {\n                this.isComponentMounted = false;\n                this.scheduleDestroy();\n            };\n        };\n    }\n    /**\n     * Recreate the editor instance if the dependencies have changed.\n     */\n    refreshEditorInstance(deps) {\n        if (this.editor && !this.editor.isDestroyed) {\n            // Editor instance already exists\n            if (this.previousDeps === null) {\n                // If lastDeps has not yet been initialized, reuse the current editor instance\n                this.previousDeps = deps;\n                return;\n            }\n            const depsAreEqual = this.previousDeps.length === deps.length\n                && this.previousDeps.every((dep, index) => dep === deps[index]);\n            if (depsAreEqual) {\n                // deps exist and are equal, no need to recreate\n                return;\n            }\n        }\n        if (this.editor && !this.editor.isDestroyed) {\n            // Destroy the editor instance if it exists\n            this.editor.destroy();\n        }\n        this.setEditor(this.createEditor());\n        // Update the lastDeps to the current deps\n        this.previousDeps = deps;\n    }\n    /**\n     * Schedule the destruction of the editor instance.\n     * This will only destroy the editor if it was not mounted on the next tick.\n     * This is to avoid destroying the editor instance when it's actually still mounted.\n     */\n    scheduleDestroy() {\n        const currentInstanceId = this.instanceId;\n        const currentEditor = this.editor;\n        // Wait two ticks to see if the component is still mounted\n        this.scheduledDestructionTimeout = setTimeout(() => {\n            if (this.isComponentMounted && this.instanceId === currentInstanceId) {\n                // If still mounted on the following tick, with the same instanceId, do not destroy the editor\n                if (currentEditor) {\n                    // just re-apply options as they might have changed\n                    currentEditor.setOptions(this.options.current);\n                }\n                return;\n            }\n            if (currentEditor && !currentEditor.isDestroyed) {\n                currentEditor.destroy();\n                if (this.instanceId === currentInstanceId) {\n                    this.setEditor(null);\n                }\n            }\n            // This allows the effect to run again between ticks\n            // which may save us from having to re-create the editor\n        }, 1);\n    }\n}\nfunction useEditor(options = {}, deps = []) {\n    const mostRecentOptions = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(options);\n    mostRecentOptions.current = options;\n    const [instanceManager] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => new EditorInstanceManager(mostRecentOptions));\n    const editor = shimExports.useSyncExternalStore(instanceManager.subscribe, instanceManager.getEditor, instanceManager.getServerSnapshot);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue)(editor);\n    // This effect will handle creating/updating the editor instance\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(instanceManager.onRender(deps));\n    // The default behavior is to re-render on each transaction\n    // This is legacy behavior that will be removed in future versions\n    useEditorState({\n        editor,\n        selector: ({ transactionNumber }) => {\n            if (options.shouldRerenderOnTransaction === false) {\n                // This will prevent the editor from re-rendering on each transaction\n                return null;\n            }\n            // This will avoid re-rendering on the first transaction when `immediatelyRender` is set to `true`\n            if (options.immediatelyRender && transactionNumber === 0) {\n                return 0;\n            }\n            return transactionNumber + 1;\n        },\n    });\n    return editor;\n}\n\nconst EditorContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    editor: null,\n});\nconst EditorConsumer = EditorContext.Consumer;\n/**\n * A hook to get the current editor instance.\n */\nconst useCurrentEditor = () => (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(EditorContext);\n/**\n * This is the provider component for the editor.\n * It allows the editor to be accessible across the entire component tree\n * with `useCurrentEditor`.\n */\nfunction EditorProvider({ children, slotAfter, slotBefore, editorContainerProps = {}, ...editorOptions }) {\n    const editor = useEditor(editorOptions);\n    if (!editor) {\n        return null;\n    }\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(EditorContext.Provider, { value: { editor } },\n        slotBefore,\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(EditorConsumer, null, ({ editor: currentEditor }) => (react__WEBPACK_IMPORTED_MODULE_0__.createElement(EditorContent, { editor: currentEditor, ...editorContainerProps }))),\n        children,\n        slotAfter));\n}\n\nconst BubbleMenu = (props) => {\n    const [element, setElement] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const { editor: currentEditor } = useCurrentEditor();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        var _a;\n        if (!element) {\n            return;\n        }\n        if (((_a = props.editor) === null || _a === void 0 ? void 0 : _a.isDestroyed) || (currentEditor === null || currentEditor === void 0 ? void 0 : currentEditor.isDestroyed)) {\n            return;\n        }\n        const { pluginKey = 'bubbleMenu', editor, tippyOptions = {}, updateDelay, shouldShow = null, } = props;\n        const menuEditor = editor || currentEditor;\n        if (!menuEditor) {\n            console.warn('BubbleMenu component is not rendered inside of an editor component or does not have editor prop.');\n            return;\n        }\n        const plugin = (0,_tiptap_extension_bubble_menu__WEBPACK_IMPORTED_MODULE_3__.BubbleMenuPlugin)({\n            updateDelay,\n            editor: menuEditor,\n            element,\n            pluginKey,\n            shouldShow,\n            tippyOptions,\n        });\n        menuEditor.registerPlugin(plugin);\n        return () => { menuEditor.unregisterPlugin(pluginKey); };\n    }, [props.editor, currentEditor, element]);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { ref: setElement, className: props.className, style: { visibility: 'hidden' } }, props.children));\n};\n\nconst FloatingMenu = (props) => {\n    const [element, setElement] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const { editor: currentEditor } = useCurrentEditor();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        var _a;\n        if (!element) {\n            return;\n        }\n        if (((_a = props.editor) === null || _a === void 0 ? void 0 : _a.isDestroyed) || (currentEditor === null || currentEditor === void 0 ? void 0 : currentEditor.isDestroyed)) {\n            return;\n        }\n        const { pluginKey = 'floatingMenu', editor, tippyOptions = {}, shouldShow = null, } = props;\n        const menuEditor = editor || currentEditor;\n        if (!menuEditor) {\n            console.warn('FloatingMenu component is not rendered inside of an editor component or does not have editor prop.');\n            return;\n        }\n        const plugin = (0,_tiptap_extension_floating_menu__WEBPACK_IMPORTED_MODULE_4__.FloatingMenuPlugin)({\n            pluginKey,\n            editor: menuEditor,\n            element,\n            tippyOptions,\n            shouldShow,\n        });\n        menuEditor.registerPlugin(plugin);\n        return () => { menuEditor.unregisterPlugin(pluginKey); };\n    }, [\n        props.editor,\n        currentEditor,\n        element,\n    ]);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { ref: setElement, className: props.className, style: { visibility: 'hidden' } }, props.children));\n};\n\nconst ReactNodeViewContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    onDragStart: undefined,\n});\nconst useReactNodeView = () => (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ReactNodeViewContext);\n\nconst NodeViewContent = props => {\n    const Tag = props.as || 'div';\n    const { nodeViewContentRef } = useReactNodeView();\n    return (\n    // @ts-ignore\n    react__WEBPACK_IMPORTED_MODULE_0__.createElement(Tag, { ...props, ref: nodeViewContentRef, \"data-node-view-content\": \"\", style: {\n            whiteSpace: 'pre-wrap',\n            ...props.style,\n        } }));\n};\n\nconst NodeViewWrapper = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, ref) => {\n    const { onDragStart } = useReactNodeView();\n    const Tag = props.as || 'div';\n    return (\n    // @ts-ignore\n    react__WEBPACK_IMPORTED_MODULE_0__.createElement(Tag, { ...props, ref: ref, \"data-node-view-wrapper\": \"\", onDragStart: onDragStart, style: {\n            whiteSpace: 'normal',\n            ...props.style,\n        } }));\n});\n\n/**\n * Check if a component is a class component.\n * @param Component\n * @returns {boolean}\n */\nfunction isClassComponent(Component) {\n    return !!(typeof Component === 'function'\n        && Component.prototype\n        && Component.prototype.isReactComponent);\n}\n/**\n * Check if a component is a forward ref component.\n * @param Component\n * @returns {boolean}\n */\nfunction isForwardRefComponent(Component) {\n    var _a;\n    return !!(typeof Component === 'object'\n        && ((_a = Component.$$typeof) === null || _a === void 0 ? void 0 : _a.toString()) === 'Symbol(react.forward_ref)');\n}\n/**\n * The ReactRenderer class. It's responsible for rendering React components inside the editor.\n * @example\n * new ReactRenderer(MyComponent, {\n *   editor,\n *   props: {\n *     foo: 'bar',\n *   },\n *   as: 'span',\n * })\n*/\nclass ReactRenderer {\n    /**\n     * Immediately creates element and renders the provided React component.\n     */\n    constructor(component, { editor, props = {}, as = 'div', className = '', }) {\n        this.ref = null;\n        this.id = Math.floor(Math.random() * 0xFFFFFFFF).toString();\n        this.component = component;\n        this.editor = editor;\n        this.props = props;\n        this.element = document.createElement(as);\n        this.element.classList.add('react-renderer');\n        if (className) {\n            this.element.classList.add(...className.split(' '));\n        }\n        if (this.editor.isInitialized) {\n            // On first render, we need to flush the render synchronously\n            // Renders afterwards can be async, but this fixes a cursor positioning issue\n            (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync)(() => {\n                this.render();\n            });\n        }\n        else {\n            this.render();\n        }\n    }\n    /**\n     * Render the React component.\n     */\n    render() {\n        var _a;\n        const Component = this.component;\n        const props = this.props;\n        const editor = this.editor;\n        if (isClassComponent(Component) || isForwardRefComponent(Component)) {\n            // @ts-ignore This is a hack to make the ref work\n            props.ref = (ref) => {\n                this.ref = ref;\n            };\n        }\n        this.reactElement = react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, { ...props });\n        (_a = editor === null || editor === void 0 ? void 0 : editor.contentComponent) === null || _a === void 0 ? void 0 : _a.setRenderer(this.id, this);\n    }\n    /**\n     * Re-renders the React component with new props.\n     */\n    updateProps(props = {}) {\n        this.props = {\n            ...this.props,\n            ...props,\n        };\n        this.render();\n    }\n    /**\n     * Destroy the React component.\n     */\n    destroy() {\n        var _a;\n        const editor = this.editor;\n        (_a = editor === null || editor === void 0 ? void 0 : editor.contentComponent) === null || _a === void 0 ? void 0 : _a.removeRenderer(this.id);\n    }\n    /**\n     * Update the attributes of the element that holds the React component.\n     */\n    updateAttributes(attributes) {\n        Object.keys(attributes).forEach(key => {\n            this.element.setAttribute(key, attributes[key]);\n        });\n    }\n}\n\nclass ReactNodeView extends _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.NodeView {\n    /**\n     * Setup the React component.\n     * Called on initialization.\n     */\n    mount() {\n        const props = {\n            editor: this.editor,\n            node: this.node,\n            decorations: this.decorations,\n            innerDecorations: this.innerDecorations,\n            view: this.view,\n            selected: false,\n            extension: this.extension,\n            HTMLAttributes: this.HTMLAttributes,\n            getPos: () => this.getPos(),\n            updateAttributes: (attributes = {}) => this.updateAttributes(attributes),\n            deleteNode: () => this.deleteNode(),\n        };\n        if (!this.component.displayName) {\n            const capitalizeFirstChar = (string) => {\n                return string.charAt(0).toUpperCase() + string.substring(1);\n            };\n            this.component.displayName = capitalizeFirstChar(this.extension.name);\n        }\n        const onDragStart = this.onDragStart.bind(this);\n        const nodeViewContentRef = element => {\n            if (element && this.contentDOMElement && element.firstChild !== this.contentDOMElement) {\n                element.appendChild(this.contentDOMElement);\n            }\n        };\n        const context = { onDragStart, nodeViewContentRef };\n        const Component = this.component;\n        // For performance reasons, we memoize the provider component\n        // And all of the things it requires are declared outside of the component, so it doesn't need to re-render\n        const ReactNodeViewProvider = react__WEBPACK_IMPORTED_MODULE_0__.memo(componentProps => {\n            return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(ReactNodeViewContext.Provider, { value: context }, react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, componentProps)));\n        });\n        ReactNodeViewProvider.displayName = 'ReactNodeView';\n        if (this.node.isLeaf) {\n            this.contentDOMElement = null;\n        }\n        else if (this.options.contentDOMElementTag) {\n            this.contentDOMElement = document.createElement(this.options.contentDOMElementTag);\n        }\n        else {\n            this.contentDOMElement = document.createElement(this.node.isInline ? 'span' : 'div');\n        }\n        if (this.contentDOMElement) {\n            this.contentDOMElement.dataset.nodeViewContentReact = '';\n            // For some reason the whiteSpace prop is not inherited properly in Chrome and Safari\n            // With this fix it seems to work fine\n            // See: https://github.com/ueberdosis/tiptap/issues/1197\n            this.contentDOMElement.style.whiteSpace = 'inherit';\n        }\n        let as = this.node.isInline ? 'span' : 'div';\n        if (this.options.as) {\n            as = this.options.as;\n        }\n        const { className = '' } = this.options;\n        this.handleSelectionUpdate = this.handleSelectionUpdate.bind(this);\n        this.renderer = new ReactRenderer(ReactNodeViewProvider, {\n            editor: this.editor,\n            props,\n            as,\n            className: `node-${this.node.type.name} ${className}`.trim(),\n        });\n        this.editor.on('selectionUpdate', this.handleSelectionUpdate);\n        this.updateElementAttributes();\n    }\n    /**\n     * Return the DOM element.\n     * This is the element that will be used to display the node view.\n     */\n    get dom() {\n        var _a;\n        if (this.renderer.element.firstElementChild\n            && !((_a = this.renderer.element.firstElementChild) === null || _a === void 0 ? void 0 : _a.hasAttribute('data-node-view-wrapper'))) {\n            throw Error('Please use the NodeViewWrapper component for your node view.');\n        }\n        return this.renderer.element;\n    }\n    /**\n     * Return the content DOM element.\n     * This is the element that will be used to display the rich-text content of the node.\n     */\n    get contentDOM() {\n        if (this.node.isLeaf) {\n            return null;\n        }\n        return this.contentDOMElement;\n    }\n    /**\n     * On editor selection update, check if the node is selected.\n     * If it is, call `selectNode`, otherwise call `deselectNode`.\n     */\n    handleSelectionUpdate() {\n        const { from, to } = this.editor.state.selection;\n        const pos = this.getPos();\n        if (typeof pos !== 'number') {\n            return;\n        }\n        if (from <= pos && to >= pos + this.node.nodeSize) {\n            if (this.renderer.props.selected) {\n                return;\n            }\n            this.selectNode();\n        }\n        else {\n            if (!this.renderer.props.selected) {\n                return;\n            }\n            this.deselectNode();\n        }\n    }\n    /**\n     * On update, update the React component.\n     * To prevent unnecessary updates, the `update` option can be used.\n     */\n    update(node, decorations, innerDecorations) {\n        const rerenderComponent = (props) => {\n            this.renderer.updateProps(props);\n            if (typeof this.options.attrs === 'function') {\n                this.updateElementAttributes();\n            }\n        };\n        if (node.type !== this.node.type) {\n            return false;\n        }\n        if (typeof this.options.update === 'function') {\n            const oldNode = this.node;\n            const oldDecorations = this.decorations;\n            const oldInnerDecorations = this.innerDecorations;\n            this.node = node;\n            this.decorations = decorations;\n            this.innerDecorations = innerDecorations;\n            return this.options.update({\n                oldNode,\n                oldDecorations,\n                newNode: node,\n                newDecorations: decorations,\n                oldInnerDecorations,\n                innerDecorations,\n                updateProps: () => rerenderComponent({ node, decorations, innerDecorations }),\n            });\n        }\n        if (node === this.node\n            && this.decorations === decorations\n            && this.innerDecorations === innerDecorations) {\n            return true;\n        }\n        this.node = node;\n        this.decorations = decorations;\n        this.innerDecorations = innerDecorations;\n        rerenderComponent({ node, decorations, innerDecorations });\n        return true;\n    }\n    /**\n     * Select the node.\n     * Add the `selected` prop and the `ProseMirror-selectednode` class.\n     */\n    selectNode() {\n        this.renderer.updateProps({\n            selected: true,\n        });\n        this.renderer.element.classList.add('ProseMirror-selectednode');\n    }\n    /**\n     * Deselect the node.\n     * Remove the `selected` prop and the `ProseMirror-selectednode` class.\n     */\n    deselectNode() {\n        this.renderer.updateProps({\n            selected: false,\n        });\n        this.renderer.element.classList.remove('ProseMirror-selectednode');\n    }\n    /**\n     * Destroy the React component instance.\n     */\n    destroy() {\n        this.renderer.destroy();\n        this.editor.off('selectionUpdate', this.handleSelectionUpdate);\n        this.contentDOMElement = null;\n    }\n    /**\n     * Update the attributes of the top-level element that holds the React component.\n     * Applying the attributes defined in the `attrs` option.\n     */\n    updateElementAttributes() {\n        if (this.options.attrs) {\n            let attrsObj = {};\n            if (typeof this.options.attrs === 'function') {\n                const extensionAttributes = this.editor.extensionManager.attributes;\n                const HTMLAttributes = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getRenderedAttributes)(this.node, extensionAttributes);\n                attrsObj = this.options.attrs({ node: this.node, HTMLAttributes });\n            }\n            else {\n                attrsObj = this.options.attrs;\n            }\n            this.renderer.updateAttributes(attrsObj);\n        }\n    }\n}\n/**\n * Create a React node view renderer.\n */\nfunction ReactNodeViewRenderer(component, options) {\n    return props => {\n        // try to get the parent component\n        // this is important for vue devtools to show the component hierarchy correctly\n        // maybe it’s `undefined` because <editor-content> isn’t rendered yet\n        if (!props.editor.contentComponent) {\n            return {};\n        }\n        return new ReactNodeView(component, props, options);\n    };\n}\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tiptap/react/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/prosemirror-commands/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/prosemirror-commands/dist/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   autoJoin: () => (/* binding */ autoJoin),\n/* harmony export */   baseKeymap: () => (/* binding */ baseKeymap),\n/* harmony export */   chainCommands: () => (/* binding */ chainCommands),\n/* harmony export */   createParagraphNear: () => (/* binding */ createParagraphNear),\n/* harmony export */   deleteSelection: () => (/* binding */ deleteSelection),\n/* harmony export */   exitCode: () => (/* binding */ exitCode),\n/* harmony export */   joinBackward: () => (/* binding */ joinBackward),\n/* harmony export */   joinDown: () => (/* binding */ joinDown),\n/* harmony export */   joinForward: () => (/* binding */ joinForward),\n/* harmony export */   joinTextblockBackward: () => (/* binding */ joinTextblockBackward),\n/* harmony export */   joinTextblockForward: () => (/* binding */ joinTextblockForward),\n/* harmony export */   joinUp: () => (/* binding */ joinUp),\n/* harmony export */   lift: () => (/* binding */ lift),\n/* harmony export */   liftEmptyBlock: () => (/* binding */ liftEmptyBlock),\n/* harmony export */   macBaseKeymap: () => (/* binding */ macBaseKeymap),\n/* harmony export */   newlineInCode: () => (/* binding */ newlineInCode),\n/* harmony export */   pcBaseKeymap: () => (/* binding */ pcBaseKeymap),\n/* harmony export */   selectAll: () => (/* binding */ selectAll),\n/* harmony export */   selectNodeBackward: () => (/* binding */ selectNodeBackward),\n/* harmony export */   selectNodeForward: () => (/* binding */ selectNodeForward),\n/* harmony export */   selectParentNode: () => (/* binding */ selectParentNode),\n/* harmony export */   selectTextblockEnd: () => (/* binding */ selectTextblockEnd),\n/* harmony export */   selectTextblockStart: () => (/* binding */ selectTextblockStart),\n/* harmony export */   setBlockType: () => (/* binding */ setBlockType),\n/* harmony export */   splitBlock: () => (/* binding */ splitBlock),\n/* harmony export */   splitBlockAs: () => (/* binding */ splitBlockAs),\n/* harmony export */   splitBlockKeepMarks: () => (/* binding */ splitBlockKeepMarks),\n/* harmony export */   toggleMark: () => (/* binding */ toggleMark),\n/* harmony export */   wrapIn: () => (/* binding */ wrapIn)\n/* harmony export */ });\n/* harmony import */ var prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-transform */ \"(app-pages-browser)/./node_modules/prosemirror-transform/dist/index.js\");\n/* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prosemirror-model */ \"(app-pages-browser)/./node_modules/prosemirror-model/dist/index.js\");\n/* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prosemirror-state */ \"(app-pages-browser)/./node_modules/prosemirror-state/dist/index.js\");\n\n\n\n\n/**\nDelete the selection, if there is one.\n*/\nconst deleteSelection = (state, dispatch) => {\n    if (state.selection.empty)\n        return false;\n    if (dispatch)\n        dispatch(state.tr.deleteSelection().scrollIntoView());\n    return true;\n};\nfunction atBlockStart(state, view) {\n    let { $cursor } = state.selection;\n    if (!$cursor || (view ? !view.endOfTextblock(\"backward\", state)\n        : $cursor.parentOffset > 0))\n        return null;\n    return $cursor;\n}\n/**\nIf the selection is empty and at the start of a textblock, try to\nreduce the distance between that block and the one before it—if\nthere's a block directly before it that can be joined, join them.\nIf not, try to move the selected block closer to the next one in\nthe document structure by lifting it out of its parent or moving it\ninto a parent of the previous block. Will use the view for accurate\n(bidi-aware) start-of-textblock detection if given.\n*/\nconst joinBackward = (state, dispatch, view) => {\n    let $cursor = atBlockStart(state, view);\n    if (!$cursor)\n        return false;\n    let $cut = findCutBefore($cursor);\n    // If there is no node before this, try to lift\n    if (!$cut) {\n        let range = $cursor.blockRange(), target = range && (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.liftTarget)(range);\n        if (target == null)\n            return false;\n        if (dispatch)\n            dispatch(state.tr.lift(range, target).scrollIntoView());\n        return true;\n    }\n    let before = $cut.nodeBefore;\n    // Apply the joining algorithm\n    if (deleteBarrier(state, $cut, dispatch, -1))\n        return true;\n    // If the node below has no content and the node above is\n    // selectable, delete the node below and select the one above.\n    if ($cursor.parent.content.size == 0 &&\n        (textblockAt(before, \"end\") || prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.isSelectable(before))) {\n        for (let depth = $cursor.depth;; depth--) {\n            let delStep = (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.replaceStep)(state.doc, $cursor.before(depth), $cursor.after(depth), prosemirror_model__WEBPACK_IMPORTED_MODULE_2__.Slice.empty);\n            if (delStep && delStep.slice.size < delStep.to - delStep.from) {\n                if (dispatch) {\n                    let tr = state.tr.step(delStep);\n                    tr.setSelection(textblockAt(before, \"end\")\n                        ? prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos, -1)), -1)\n                        : prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.create(tr.doc, $cut.pos - before.nodeSize));\n                    dispatch(tr.scrollIntoView());\n                }\n                return true;\n            }\n            if (depth == 1 || $cursor.node(depth - 1).childCount > 1)\n                break;\n        }\n    }\n    // If the node before is an atom, delete it\n    if (before.isAtom && $cut.depth == $cursor.depth - 1) {\n        if (dispatch)\n            dispatch(state.tr.delete($cut.pos - before.nodeSize, $cut.pos).scrollIntoView());\n        return true;\n    }\n    return false;\n};\n/**\nA more limited form of [`joinBackward`](https://prosemirror.net/docs/ref/#commands.joinBackward)\nthat only tries to join the current textblock to the one before\nit, if the cursor is at the start of a textblock.\n*/\nconst joinTextblockBackward = (state, dispatch, view) => {\n    let $cursor = atBlockStart(state, view);\n    if (!$cursor)\n        return false;\n    let $cut = findCutBefore($cursor);\n    return $cut ? joinTextblocksAround(state, $cut, dispatch) : false;\n};\n/**\nA more limited form of [`joinForward`](https://prosemirror.net/docs/ref/#commands.joinForward)\nthat only tries to join the current textblock to the one after\nit, if the cursor is at the end of a textblock.\n*/\nconst joinTextblockForward = (state, dispatch, view) => {\n    let $cursor = atBlockEnd(state, view);\n    if (!$cursor)\n        return false;\n    let $cut = findCutAfter($cursor);\n    return $cut ? joinTextblocksAround(state, $cut, dispatch) : false;\n};\nfunction joinTextblocksAround(state, $cut, dispatch) {\n    let before = $cut.nodeBefore, beforeText = before, beforePos = $cut.pos - 1;\n    for (; !beforeText.isTextblock; beforePos--) {\n        if (beforeText.type.spec.isolating)\n            return false;\n        let child = beforeText.lastChild;\n        if (!child)\n            return false;\n        beforeText = child;\n    }\n    let after = $cut.nodeAfter, afterText = after, afterPos = $cut.pos + 1;\n    for (; !afterText.isTextblock; afterPos++) {\n        if (afterText.type.spec.isolating)\n            return false;\n        let child = afterText.firstChild;\n        if (!child)\n            return false;\n        afterText = child;\n    }\n    let step = (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.replaceStep)(state.doc, beforePos, afterPos, prosemirror_model__WEBPACK_IMPORTED_MODULE_2__.Slice.empty);\n    if (!step || step.from != beforePos ||\n        step instanceof prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.ReplaceStep && step.slice.size >= afterPos - beforePos)\n        return false;\n    if (dispatch) {\n        let tr = state.tr.step(step);\n        tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection.create(tr.doc, beforePos));\n        dispatch(tr.scrollIntoView());\n    }\n    return true;\n}\nfunction textblockAt(node, side, only = false) {\n    for (let scan = node; scan; scan = (side == \"start\" ? scan.firstChild : scan.lastChild)) {\n        if (scan.isTextblock)\n            return true;\n        if (only && scan.childCount != 1)\n            return false;\n    }\n    return false;\n}\n/**\nWhen the selection is empty and at the start of a textblock, select\nthe node before that textblock, if possible. This is intended to be\nbound to keys like backspace, after\n[`joinBackward`](https://prosemirror.net/docs/ref/#commands.joinBackward) or other deleting\ncommands, as a fall-back behavior when the schema doesn't allow\ndeletion at the selected point.\n*/\nconst selectNodeBackward = (state, dispatch, view) => {\n    let { $head, empty } = state.selection, $cut = $head;\n    if (!empty)\n        return false;\n    if ($head.parent.isTextblock) {\n        if (view ? !view.endOfTextblock(\"backward\", state) : $head.parentOffset > 0)\n            return false;\n        $cut = findCutBefore($head);\n    }\n    let node = $cut && $cut.nodeBefore;\n    if (!node || !prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.isSelectable(node))\n        return false;\n    if (dispatch)\n        dispatch(state.tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.create(state.doc, $cut.pos - node.nodeSize)).scrollIntoView());\n    return true;\n};\nfunction findCutBefore($pos) {\n    if (!$pos.parent.type.spec.isolating)\n        for (let i = $pos.depth - 1; i >= 0; i--) {\n            if ($pos.index(i) > 0)\n                return $pos.doc.resolve($pos.before(i + 1));\n            if ($pos.node(i).type.spec.isolating)\n                break;\n        }\n    return null;\n}\nfunction atBlockEnd(state, view) {\n    let { $cursor } = state.selection;\n    if (!$cursor || (view ? !view.endOfTextblock(\"forward\", state)\n        : $cursor.parentOffset < $cursor.parent.content.size))\n        return null;\n    return $cursor;\n}\n/**\nIf the selection is empty and the cursor is at the end of a\ntextblock, try to reduce or remove the boundary between that block\nand the one after it, either by joining them or by moving the other\nblock closer to this one in the tree structure. Will use the view\nfor accurate start-of-textblock detection if given.\n*/\nconst joinForward = (state, dispatch, view) => {\n    let $cursor = atBlockEnd(state, view);\n    if (!$cursor)\n        return false;\n    let $cut = findCutAfter($cursor);\n    // If there is no node after this, there's nothing to do\n    if (!$cut)\n        return false;\n    let after = $cut.nodeAfter;\n    // Try the joining algorithm\n    if (deleteBarrier(state, $cut, dispatch, 1))\n        return true;\n    // If the node above has no content and the node below is\n    // selectable, delete the node above and select the one below.\n    if ($cursor.parent.content.size == 0 &&\n        (textblockAt(after, \"start\") || prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.isSelectable(after))) {\n        let delStep = (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.replaceStep)(state.doc, $cursor.before(), $cursor.after(), prosemirror_model__WEBPACK_IMPORTED_MODULE_2__.Slice.empty);\n        if (delStep && delStep.slice.size < delStep.to - delStep.from) {\n            if (dispatch) {\n                let tr = state.tr.step(delStep);\n                tr.setSelection(textblockAt(after, \"start\") ? prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos)), 1)\n                    : prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.create(tr.doc, tr.mapping.map($cut.pos)));\n                dispatch(tr.scrollIntoView());\n            }\n            return true;\n        }\n    }\n    // If the next node is an atom, delete it\n    if (after.isAtom && $cut.depth == $cursor.depth - 1) {\n        if (dispatch)\n            dispatch(state.tr.delete($cut.pos, $cut.pos + after.nodeSize).scrollIntoView());\n        return true;\n    }\n    return false;\n};\n/**\nWhen the selection is empty and at the end of a textblock, select\nthe node coming after that textblock, if possible. This is intended\nto be bound to keys like delete, after\n[`joinForward`](https://prosemirror.net/docs/ref/#commands.joinForward) and similar deleting\ncommands, to provide a fall-back behavior when the schema doesn't\nallow deletion at the selected point.\n*/\nconst selectNodeForward = (state, dispatch, view) => {\n    let { $head, empty } = state.selection, $cut = $head;\n    if (!empty)\n        return false;\n    if ($head.parent.isTextblock) {\n        if (view ? !view.endOfTextblock(\"forward\", state) : $head.parentOffset < $head.parent.content.size)\n            return false;\n        $cut = findCutAfter($head);\n    }\n    let node = $cut && $cut.nodeAfter;\n    if (!node || !prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.isSelectable(node))\n        return false;\n    if (dispatch)\n        dispatch(state.tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.create(state.doc, $cut.pos)).scrollIntoView());\n    return true;\n};\nfunction findCutAfter($pos) {\n    if (!$pos.parent.type.spec.isolating)\n        for (let i = $pos.depth - 1; i >= 0; i--) {\n            let parent = $pos.node(i);\n            if ($pos.index(i) + 1 < parent.childCount)\n                return $pos.doc.resolve($pos.after(i + 1));\n            if (parent.type.spec.isolating)\n                break;\n        }\n    return null;\n}\n/**\nJoin the selected block or, if there is a text selection, the\nclosest ancestor block of the selection that can be joined, with\nthe sibling above it.\n*/\nconst joinUp = (state, dispatch) => {\n    let sel = state.selection, nodeSel = sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection, point;\n    if (nodeSel) {\n        if (sel.node.isTextblock || !(0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.canJoin)(state.doc, sel.from))\n            return false;\n        point = sel.from;\n    }\n    else {\n        point = (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.joinPoint)(state.doc, sel.from, -1);\n        if (point == null)\n            return false;\n    }\n    if (dispatch) {\n        let tr = state.tr.join(point);\n        if (nodeSel)\n            tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.create(tr.doc, point - state.doc.resolve(point).nodeBefore.nodeSize));\n        dispatch(tr.scrollIntoView());\n    }\n    return true;\n};\n/**\nJoin the selected block, or the closest ancestor of the selection\nthat can be joined, with the sibling after it.\n*/\nconst joinDown = (state, dispatch) => {\n    let sel = state.selection, point;\n    if (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection) {\n        if (sel.node.isTextblock || !(0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.canJoin)(state.doc, sel.to))\n            return false;\n        point = sel.to;\n    }\n    else {\n        point = (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.joinPoint)(state.doc, sel.to, 1);\n        if (point == null)\n            return false;\n    }\n    if (dispatch)\n        dispatch(state.tr.join(point).scrollIntoView());\n    return true;\n};\n/**\nLift the selected block, or the closest ancestor block of the\nselection that can be lifted, out of its parent node.\n*/\nconst lift = (state, dispatch) => {\n    let { $from, $to } = state.selection;\n    let range = $from.blockRange($to), target = range && (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.liftTarget)(range);\n    if (target == null)\n        return false;\n    if (dispatch)\n        dispatch(state.tr.lift(range, target).scrollIntoView());\n    return true;\n};\n/**\nIf the selection is in a node whose type has a truthy\n[`code`](https://prosemirror.net/docs/ref/#model.NodeSpec.code) property in its spec, replace the\nselection with a newline character.\n*/\nconst newlineInCode = (state, dispatch) => {\n    let { $head, $anchor } = state.selection;\n    if (!$head.parent.type.spec.code || !$head.sameParent($anchor))\n        return false;\n    if (dispatch)\n        dispatch(state.tr.insertText(\"\\n\").scrollIntoView());\n    return true;\n};\nfunction defaultBlockAt(match) {\n    for (let i = 0; i < match.edgeCount; i++) {\n        let { type } = match.edge(i);\n        if (type.isTextblock && !type.hasRequiredAttrs())\n            return type;\n    }\n    return null;\n}\n/**\nWhen the selection is in a node with a truthy\n[`code`](https://prosemirror.net/docs/ref/#model.NodeSpec.code) property in its spec, create a\ndefault block after the code block, and move the cursor there.\n*/\nconst exitCode = (state, dispatch) => {\n    let { $head, $anchor } = state.selection;\n    if (!$head.parent.type.spec.code || !$head.sameParent($anchor))\n        return false;\n    let above = $head.node(-1), after = $head.indexAfter(-1), type = defaultBlockAt(above.contentMatchAt(after));\n    if (!type || !above.canReplaceWith(after, after, type))\n        return false;\n    if (dispatch) {\n        let pos = $head.after(), tr = state.tr.replaceWith(pos, pos, type.createAndFill());\n        tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Selection.near(tr.doc.resolve(pos), 1));\n        dispatch(tr.scrollIntoView());\n    }\n    return true;\n};\n/**\nIf a block node is selected, create an empty paragraph before (if\nit is its parent's first child) or after it.\n*/\nconst createParagraphNear = (state, dispatch) => {\n    let sel = state.selection, { $from, $to } = sel;\n    if (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.AllSelection || $from.parent.inlineContent || $to.parent.inlineContent)\n        return false;\n    let type = defaultBlockAt($to.parent.contentMatchAt($to.indexAfter()));\n    if (!type || !type.isTextblock)\n        return false;\n    if (dispatch) {\n        let side = (!$from.parentOffset && $to.index() < $to.parent.childCount ? $from : $to).pos;\n        let tr = state.tr.insert(side, type.createAndFill());\n        tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection.create(tr.doc, side + 1));\n        dispatch(tr.scrollIntoView());\n    }\n    return true;\n};\n/**\nIf the cursor is in an empty textblock that can be lifted, lift the\nblock.\n*/\nconst liftEmptyBlock = (state, dispatch) => {\n    let { $cursor } = state.selection;\n    if (!$cursor || $cursor.parent.content.size)\n        return false;\n    if ($cursor.depth > 1 && $cursor.after() != $cursor.end(-1)) {\n        let before = $cursor.before();\n        if ((0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.canSplit)(state.doc, before)) {\n            if (dispatch)\n                dispatch(state.tr.split(before).scrollIntoView());\n            return true;\n        }\n    }\n    let range = $cursor.blockRange(), target = range && (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.liftTarget)(range);\n    if (target == null)\n        return false;\n    if (dispatch)\n        dispatch(state.tr.lift(range, target).scrollIntoView());\n    return true;\n};\n/**\nCreate a variant of [`splitBlock`](https://prosemirror.net/docs/ref/#commands.splitBlock) that uses\na custom function to determine the type of the newly split off block.\n*/\nfunction splitBlockAs(splitNode) {\n    return (state, dispatch) => {\n        let { $from, $to } = state.selection;\n        if (state.selection instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection && state.selection.node.isBlock) {\n            if (!$from.parentOffset || !(0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.canSplit)(state.doc, $from.pos))\n                return false;\n            if (dispatch)\n                dispatch(state.tr.split($from.pos).scrollIntoView());\n            return true;\n        }\n        if (!$from.depth)\n            return false;\n        let types = [];\n        let splitDepth, deflt, atEnd = false, atStart = false;\n        for (let d = $from.depth;; d--) {\n            let node = $from.node(d);\n            if (node.isBlock) {\n                atEnd = $from.end(d) == $from.pos + ($from.depth - d);\n                atStart = $from.start(d) == $from.pos - ($from.depth - d);\n                deflt = defaultBlockAt($from.node(d - 1).contentMatchAt($from.indexAfter(d - 1)));\n                let splitType = splitNode && splitNode($to.parent, atEnd, $from);\n                types.unshift(splitType || (atEnd && deflt ? { type: deflt } : null));\n                splitDepth = d;\n                break;\n            }\n            else {\n                if (d == 1)\n                    return false;\n                types.unshift(null);\n            }\n        }\n        let tr = state.tr;\n        if (state.selection instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection || state.selection instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.AllSelection)\n            tr.deleteSelection();\n        let splitPos = tr.mapping.map($from.pos);\n        let can = (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.canSplit)(tr.doc, splitPos, types.length, types);\n        if (!can) {\n            types[0] = deflt ? { type: deflt } : null;\n            can = (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.canSplit)(tr.doc, splitPos, types.length, types);\n        }\n        tr.split(splitPos, types.length, types);\n        if (!atEnd && atStart && $from.node(splitDepth).type != deflt) {\n            let first = tr.mapping.map($from.before(splitDepth)), $first = tr.doc.resolve(first);\n            if (deflt && $from.node(splitDepth - 1).canReplaceWith($first.index(), $first.index() + 1, deflt))\n                tr.setNodeMarkup(tr.mapping.map($from.before(splitDepth)), deflt);\n        }\n        if (dispatch)\n            dispatch(tr.scrollIntoView());\n        return true;\n    };\n}\n/**\nSplit the parent block of the selection. If the selection is a text\nselection, also delete its content.\n*/\nconst splitBlock = splitBlockAs();\n/**\nActs like [`splitBlock`](https://prosemirror.net/docs/ref/#commands.splitBlock), but without\nresetting the set of active marks at the cursor.\n*/\nconst splitBlockKeepMarks = (state, dispatch) => {\n    return splitBlock(state, dispatch && (tr => {\n        let marks = state.storedMarks || (state.selection.$to.parentOffset && state.selection.$from.marks());\n        if (marks)\n            tr.ensureMarks(marks);\n        dispatch(tr);\n    }));\n};\n/**\nMove the selection to the node wrapping the current selection, if\nany. (Will not select the document node.)\n*/\nconst selectParentNode = (state, dispatch) => {\n    let { $from, to } = state.selection, pos;\n    let same = $from.sharedDepth(to);\n    if (same == 0)\n        return false;\n    pos = $from.before(same);\n    if (dispatch)\n        dispatch(state.tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.NodeSelection.create(state.doc, pos)));\n    return true;\n};\n/**\nSelect the whole document.\n*/\nconst selectAll = (state, dispatch) => {\n    if (dispatch)\n        dispatch(state.tr.setSelection(new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.AllSelection(state.doc)));\n    return true;\n};\nfunction joinMaybeClear(state, $pos, dispatch) {\n    let before = $pos.nodeBefore, after = $pos.nodeAfter, index = $pos.index();\n    if (!before || !after || !before.type.compatibleContent(after.type))\n        return false;\n    if (!before.content.size && $pos.parent.canReplace(index - 1, index)) {\n        if (dispatch)\n            dispatch(state.tr.delete($pos.pos - before.nodeSize, $pos.pos).scrollIntoView());\n        return true;\n    }\n    if (!$pos.parent.canReplace(index, index + 1) || !(after.isTextblock || (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.canJoin)(state.doc, $pos.pos)))\n        return false;\n    if (dispatch)\n        dispatch(state.tr.join($pos.pos).scrollIntoView());\n    return true;\n}\nfunction deleteBarrier(state, $cut, dispatch, dir) {\n    let before = $cut.nodeBefore, after = $cut.nodeAfter, conn, match;\n    let isolated = before.type.spec.isolating || after.type.spec.isolating;\n    if (!isolated && joinMaybeClear(state, $cut, dispatch))\n        return true;\n    let canDelAfter = !isolated && $cut.parent.canReplace($cut.index(), $cut.index() + 1);\n    if (canDelAfter &&\n        (conn = (match = before.contentMatchAt(before.childCount)).findWrapping(after.type)) &&\n        match.matchType(conn[0] || after.type).validEnd) {\n        if (dispatch) {\n            let end = $cut.pos + after.nodeSize, wrap = prosemirror_model__WEBPACK_IMPORTED_MODULE_2__.Fragment.empty;\n            for (let i = conn.length - 1; i >= 0; i--)\n                wrap = prosemirror_model__WEBPACK_IMPORTED_MODULE_2__.Fragment.from(conn[i].create(null, wrap));\n            wrap = prosemirror_model__WEBPACK_IMPORTED_MODULE_2__.Fragment.from(before.copy(wrap));\n            let tr = state.tr.step(new prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.ReplaceAroundStep($cut.pos - 1, end, $cut.pos, end, new prosemirror_model__WEBPACK_IMPORTED_MODULE_2__.Slice(wrap, 1, 0), conn.length, true));\n            let $joinAt = tr.doc.resolve(end + 2 * conn.length);\n            if ($joinAt.nodeAfter && $joinAt.nodeAfter.type == before.type &&\n                (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.canJoin)(tr.doc, $joinAt.pos))\n                tr.join($joinAt.pos);\n            dispatch(tr.scrollIntoView());\n        }\n        return true;\n    }\n    let selAfter = after.type.spec.isolating || (dir > 0 && isolated) ? null : prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Selection.findFrom($cut, 1);\n    let range = selAfter && selAfter.$from.blockRange(selAfter.$to), target = range && (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.liftTarget)(range);\n    if (target != null && target >= $cut.depth) {\n        if (dispatch)\n            dispatch(state.tr.lift(range, target).scrollIntoView());\n        return true;\n    }\n    if (canDelAfter && textblockAt(after, \"start\", true) && textblockAt(before, \"end\")) {\n        let at = before, wrap = [];\n        for (;;) {\n            wrap.push(at);\n            if (at.isTextblock)\n                break;\n            at = at.lastChild;\n        }\n        let afterText = after, afterDepth = 1;\n        for (; !afterText.isTextblock; afterText = afterText.firstChild)\n            afterDepth++;\n        if (at.canReplace(at.childCount, at.childCount, afterText.content)) {\n            if (dispatch) {\n                let end = prosemirror_model__WEBPACK_IMPORTED_MODULE_2__.Fragment.empty;\n                for (let i = wrap.length - 1; i >= 0; i--)\n                    end = prosemirror_model__WEBPACK_IMPORTED_MODULE_2__.Fragment.from(wrap[i].copy(end));\n                let tr = state.tr.step(new prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.ReplaceAroundStep($cut.pos - wrap.length, $cut.pos + after.nodeSize, $cut.pos + afterDepth, $cut.pos + after.nodeSize - afterDepth, new prosemirror_model__WEBPACK_IMPORTED_MODULE_2__.Slice(end, wrap.length, 0), 0, true));\n                dispatch(tr.scrollIntoView());\n            }\n            return true;\n        }\n    }\n    return false;\n}\nfunction selectTextblockSide(side) {\n    return function (state, dispatch) {\n        let sel = state.selection, $pos = side < 0 ? sel.$from : sel.$to;\n        let depth = $pos.depth;\n        while ($pos.node(depth).isInline) {\n            if (!depth)\n                return false;\n            depth--;\n        }\n        if (!$pos.node(depth).isTextblock)\n            return false;\n        if (dispatch)\n            dispatch(state.tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection.create(state.doc, side < 0 ? $pos.start(depth) : $pos.end(depth))));\n        return true;\n    };\n}\n/**\nMoves the cursor to the start of current text block.\n*/\nconst selectTextblockStart = selectTextblockSide(-1);\n/**\nMoves the cursor to the end of current text block.\n*/\nconst selectTextblockEnd = selectTextblockSide(1);\n// Parameterized commands\n/**\nWrap the selection in a node of the given type with the given\nattributes.\n*/\nfunction wrapIn(nodeType, attrs = null) {\n    return function (state, dispatch) {\n        let { $from, $to } = state.selection;\n        let range = $from.blockRange($to), wrapping = range && (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.findWrapping)(range, nodeType, attrs);\n        if (!wrapping)\n            return false;\n        if (dispatch)\n            dispatch(state.tr.wrap(range, wrapping).scrollIntoView());\n        return true;\n    };\n}\n/**\nReturns a command that tries to set the selected textblocks to the\ngiven node type with the given attributes.\n*/\nfunction setBlockType(nodeType, attrs = null) {\n    return function (state, dispatch) {\n        let applicable = false;\n        for (let i = 0; i < state.selection.ranges.length && !applicable; i++) {\n            let { $from: { pos: from }, $to: { pos: to } } = state.selection.ranges[i];\n            state.doc.nodesBetween(from, to, (node, pos) => {\n                if (applicable)\n                    return false;\n                if (!node.isTextblock || node.hasMarkup(nodeType, attrs))\n                    return;\n                if (node.type == nodeType) {\n                    applicable = true;\n                }\n                else {\n                    let $pos = state.doc.resolve(pos), index = $pos.index();\n                    applicable = $pos.parent.canReplaceWith(index, index + 1, nodeType);\n                }\n            });\n        }\n        if (!applicable)\n            return false;\n        if (dispatch) {\n            let tr = state.tr;\n            for (let i = 0; i < state.selection.ranges.length; i++) {\n                let { $from: { pos: from }, $to: { pos: to } } = state.selection.ranges[i];\n                tr.setBlockType(from, to, nodeType, attrs);\n            }\n            dispatch(tr.scrollIntoView());\n        }\n        return true;\n    };\n}\nfunction markApplies(doc, ranges, type, enterAtoms) {\n    for (let i = 0; i < ranges.length; i++) {\n        let { $from, $to } = ranges[i];\n        let can = $from.depth == 0 ? doc.inlineContent && doc.type.allowsMarkType(type) : false;\n        doc.nodesBetween($from.pos, $to.pos, (node, pos) => {\n            if (can || !enterAtoms && node.isAtom && node.isInline && pos >= $from.pos && pos + node.nodeSize <= $to.pos)\n                return false;\n            can = node.inlineContent && node.type.allowsMarkType(type);\n        });\n        if (can)\n            return true;\n    }\n    return false;\n}\nfunction removeInlineAtoms(ranges) {\n    let result = [];\n    for (let i = 0; i < ranges.length; i++) {\n        let { $from, $to } = ranges[i];\n        $from.doc.nodesBetween($from.pos, $to.pos, (node, pos) => {\n            if (node.isAtom && node.content.size && node.isInline && pos >= $from.pos && pos + node.nodeSize <= $to.pos) {\n                if (pos + 1 > $from.pos)\n                    result.push(new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.SelectionRange($from, $from.doc.resolve(pos + 1)));\n                $from = $from.doc.resolve(pos + 1 + node.content.size);\n                return false;\n            }\n        });\n        if ($from.pos < $to.pos)\n            result.push(new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.SelectionRange($from, $to));\n    }\n    return result;\n}\n/**\nCreate a command function that toggles the given mark with the\ngiven attributes. Will return `false` when the current selection\ndoesn't support that mark. This will remove the mark if any marks\nof that type exist in the selection, or add it otherwise. If the\nselection is empty, this applies to the [stored\nmarks](https://prosemirror.net/docs/ref/#state.EditorState.storedMarks) instead of a range of the\ndocument.\n*/\nfunction toggleMark(markType, attrs = null, options) {\n    let removeWhenPresent = (options && options.removeWhenPresent) !== false;\n    let enterAtoms = (options && options.enterInlineAtoms) !== false;\n    let dropSpace = !(options && options.includeWhitespace);\n    return function (state, dispatch) {\n        let { empty, $cursor, ranges } = state.selection;\n        if ((empty && !$cursor) || !markApplies(state.doc, ranges, markType, enterAtoms))\n            return false;\n        if (dispatch) {\n            if ($cursor) {\n                if (markType.isInSet(state.storedMarks || $cursor.marks()))\n                    dispatch(state.tr.removeStoredMark(markType));\n                else\n                    dispatch(state.tr.addStoredMark(markType.create(attrs)));\n            }\n            else {\n                let add, tr = state.tr;\n                if (!enterAtoms)\n                    ranges = removeInlineAtoms(ranges);\n                if (removeWhenPresent) {\n                    add = !ranges.some(r => state.doc.rangeHasMark(r.$from.pos, r.$to.pos, markType));\n                }\n                else {\n                    add = !ranges.every(r => {\n                        let missing = false;\n                        tr.doc.nodesBetween(r.$from.pos, r.$to.pos, (node, pos, parent) => {\n                            if (missing)\n                                return false;\n                            missing = !markType.isInSet(node.marks) && !!parent && parent.type.allowsMarkType(markType) &&\n                                !(node.isText && /^\\s*$/.test(node.textBetween(Math.max(0, r.$from.pos - pos), Math.min(node.nodeSize, r.$to.pos - pos))));\n                        });\n                        return !missing;\n                    });\n                }\n                for (let i = 0; i < ranges.length; i++) {\n                    let { $from, $to } = ranges[i];\n                    if (!add) {\n                        tr.removeMark($from.pos, $to.pos, markType);\n                    }\n                    else {\n                        let from = $from.pos, to = $to.pos, start = $from.nodeAfter, end = $to.nodeBefore;\n                        let spaceStart = dropSpace && start && start.isText ? /^\\s*/.exec(start.text)[0].length : 0;\n                        let spaceEnd = dropSpace && end && end.isText ? /\\s*$/.exec(end.text)[0].length : 0;\n                        if (from + spaceStart < to) {\n                            from += spaceStart;\n                            to -= spaceEnd;\n                        }\n                        tr.addMark(from, to, markType.create(attrs));\n                    }\n                }\n                dispatch(tr.scrollIntoView());\n            }\n        }\n        return true;\n    };\n}\nfunction wrapDispatchForJoin(dispatch, isJoinable) {\n    return (tr) => {\n        if (!tr.isGeneric)\n            return dispatch(tr);\n        let ranges = [];\n        for (let i = 0; i < tr.mapping.maps.length; i++) {\n            let map = tr.mapping.maps[i];\n            for (let j = 0; j < ranges.length; j++)\n                ranges[j] = map.map(ranges[j]);\n            map.forEach((_s, _e, from, to) => ranges.push(from, to));\n        }\n        // Figure out which joinable points exist inside those ranges,\n        // by checking all node boundaries in their parent nodes.\n        let joinable = [];\n        for (let i = 0; i < ranges.length; i += 2) {\n            let from = ranges[i], to = ranges[i + 1];\n            let $from = tr.doc.resolve(from), depth = $from.sharedDepth(to), parent = $from.node(depth);\n            for (let index = $from.indexAfter(depth), pos = $from.after(depth + 1); pos <= to; ++index) {\n                let after = parent.maybeChild(index);\n                if (!after)\n                    break;\n                if (index && joinable.indexOf(pos) == -1) {\n                    let before = parent.child(index - 1);\n                    if (before.type == after.type && isJoinable(before, after))\n                        joinable.push(pos);\n                }\n                pos += after.nodeSize;\n            }\n        }\n        // Join the joinable points\n        joinable.sort((a, b) => a - b);\n        for (let i = joinable.length - 1; i >= 0; i--) {\n            if ((0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.canJoin)(tr.doc, joinable[i]))\n                tr.join(joinable[i]);\n        }\n        dispatch(tr);\n    };\n}\n/**\nWrap a command so that, when it produces a transform that causes\ntwo joinable nodes to end up next to each other, those are joined.\nNodes are considered joinable when they are of the same type and\nwhen the `isJoinable` predicate returns true for them or, if an\narray of strings was passed, if their node type name is in that\narray.\n*/\nfunction autoJoin(command, isJoinable) {\n    let canJoin = Array.isArray(isJoinable) ? (node) => isJoinable.indexOf(node.type.name) > -1\n        : isJoinable;\n    return (state, dispatch, view) => command(state, dispatch && wrapDispatchForJoin(dispatch, canJoin), view);\n}\n/**\nCombine a number of command functions into a single function (which\ncalls them one by one until one returns true).\n*/\nfunction chainCommands(...commands) {\n    return function (state, dispatch, view) {\n        for (let i = 0; i < commands.length; i++)\n            if (commands[i](state, dispatch, view))\n                return true;\n        return false;\n    };\n}\nlet backspace = chainCommands(deleteSelection, joinBackward, selectNodeBackward);\nlet del = chainCommands(deleteSelection, joinForward, selectNodeForward);\n/**\nA basic keymap containing bindings not specific to any schema.\nBinds the following keys (when multiple commands are listed, they\nare chained with [`chainCommands`](https://prosemirror.net/docs/ref/#commands.chainCommands)):\n\n* **Enter** to `newlineInCode`, `createParagraphNear`, `liftEmptyBlock`, `splitBlock`\n* **Mod-Enter** to `exitCode`\n* **Backspace** and **Mod-Backspace** to `deleteSelection`, `joinBackward`, `selectNodeBackward`\n* **Delete** and **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`\n* **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`\n* **Mod-a** to `selectAll`\n*/\nconst pcBaseKeymap = {\n    \"Enter\": chainCommands(newlineInCode, createParagraphNear, liftEmptyBlock, splitBlock),\n    \"Mod-Enter\": exitCode,\n    \"Backspace\": backspace,\n    \"Mod-Backspace\": backspace,\n    \"Shift-Backspace\": backspace,\n    \"Delete\": del,\n    \"Mod-Delete\": del,\n    \"Mod-a\": selectAll\n};\n/**\nA copy of `pcBaseKeymap` that also binds **Ctrl-h** like Backspace,\n**Ctrl-d** like Delete, **Alt-Backspace** like Ctrl-Backspace, and\n**Ctrl-Alt-Backspace**, **Alt-Delete**, and **Alt-d** like\nCtrl-Delete.\n*/\nconst macBaseKeymap = {\n    \"Ctrl-h\": pcBaseKeymap[\"Backspace\"],\n    \"Alt-Backspace\": pcBaseKeymap[\"Mod-Backspace\"],\n    \"Ctrl-d\": pcBaseKeymap[\"Delete\"],\n    \"Ctrl-Alt-Backspace\": pcBaseKeymap[\"Mod-Delete\"],\n    \"Alt-Delete\": pcBaseKeymap[\"Mod-Delete\"],\n    \"Alt-d\": pcBaseKeymap[\"Mod-Delete\"],\n    \"Ctrl-a\": selectTextblockStart,\n    \"Ctrl-e\": selectTextblockEnd\n};\nfor (let key in pcBaseKeymap)\n    macBaseKeymap[key] = pcBaseKeymap[key];\nconst mac = typeof navigator != \"undefined\" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform)\n    // @ts-ignore\n    : typeof os != \"undefined\" && os.platform ? os.platform() == \"darwin\" : false;\n/**\nDepending on the detected platform, this will hold\n[`pcBasekeymap`](https://prosemirror.net/docs/ref/#commands.pcBaseKeymap) or\n[`macBaseKeymap`](https://prosemirror.net/docs/ref/#commands.macBaseKeymap).\n*/\nconst baseKeymap = mac ? macBaseKeymap : pcBaseKeymap;\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/prosemirror-commands/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/prosemirror-dropcursor/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/prosemirror-dropcursor/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dropCursor: () => (/* binding */ dropCursor)\n/* harmony export */ });\n/* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-state */ \"(app-pages-browser)/./node_modules/prosemirror-state/dist/index.js\");\n/* harmony import */ var prosemirror_transform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prosemirror-transform */ \"(app-pages-browser)/./node_modules/prosemirror-transform/dist/index.js\");\n\n\n\n/**\nCreate a plugin that, when added to a ProseMirror instance,\ncauses a decoration to show up at the drop position when something\nis dragged over the editor.\n\nNodes may add a `disableDropCursor` property to their spec to\ncontrol the showing of a drop cursor inside them. This may be a\nboolean or a function, which will be called with a view and a\nposition, and should return a boolean.\n*/\nfunction dropCursor(options = {}) {\n    return new prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n        view(editorView) { return new DropCursorView(editorView, options); }\n    });\n}\nclass DropCursorView {\n    constructor(editorView, options) {\n        var _a;\n        this.editorView = editorView;\n        this.cursorPos = null;\n        this.element = null;\n        this.timeout = -1;\n        this.width = (_a = options.width) !== null && _a !== void 0 ? _a : 1;\n        this.color = options.color === false ? undefined : (options.color || \"black\");\n        this.class = options.class;\n        this.handlers = [\"dragover\", \"dragend\", \"drop\", \"dragleave\"].map(name => {\n            let handler = (e) => { this[name](e); };\n            editorView.dom.addEventListener(name, handler);\n            return { name, handler };\n        });\n    }\n    destroy() {\n        this.handlers.forEach(({ name, handler }) => this.editorView.dom.removeEventListener(name, handler));\n    }\n    update(editorView, prevState) {\n        if (this.cursorPos != null && prevState.doc != editorView.state.doc) {\n            if (this.cursorPos > editorView.state.doc.content.size)\n                this.setCursor(null);\n            else\n                this.updateOverlay();\n        }\n    }\n    setCursor(pos) {\n        if (pos == this.cursorPos)\n            return;\n        this.cursorPos = pos;\n        if (pos == null) {\n            this.element.parentNode.removeChild(this.element);\n            this.element = null;\n        }\n        else {\n            this.updateOverlay();\n        }\n    }\n    updateOverlay() {\n        let $pos = this.editorView.state.doc.resolve(this.cursorPos);\n        let isBlock = !$pos.parent.inlineContent, rect;\n        if (isBlock) {\n            let before = $pos.nodeBefore, after = $pos.nodeAfter;\n            if (before || after) {\n                let node = this.editorView.nodeDOM(this.cursorPos - (before ? before.nodeSize : 0));\n                if (node) {\n                    let nodeRect = node.getBoundingClientRect();\n                    let top = before ? nodeRect.bottom : nodeRect.top;\n                    if (before && after)\n                        top = (top + this.editorView.nodeDOM(this.cursorPos).getBoundingClientRect().top) / 2;\n                    rect = { left: nodeRect.left, right: nodeRect.right, top: top - this.width / 2, bottom: top + this.width / 2 };\n                }\n            }\n        }\n        if (!rect) {\n            let coords = this.editorView.coordsAtPos(this.cursorPos);\n            rect = { left: coords.left - this.width / 2, right: coords.left + this.width / 2, top: coords.top, bottom: coords.bottom };\n        }\n        let parent = this.editorView.dom.offsetParent;\n        if (!this.element) {\n            this.element = parent.appendChild(document.createElement(\"div\"));\n            if (this.class)\n                this.element.className = this.class;\n            this.element.style.cssText = \"position: absolute; z-index: 50; pointer-events: none;\";\n            if (this.color) {\n                this.element.style.backgroundColor = this.color;\n            }\n        }\n        this.element.classList.toggle(\"prosemirror-dropcursor-block\", isBlock);\n        this.element.classList.toggle(\"prosemirror-dropcursor-inline\", !isBlock);\n        let parentLeft, parentTop;\n        if (!parent || parent == document.body && getComputedStyle(parent).position == \"static\") {\n            parentLeft = -pageXOffset;\n            parentTop = -pageYOffset;\n        }\n        else {\n            let rect = parent.getBoundingClientRect();\n            parentLeft = rect.left - parent.scrollLeft;\n            parentTop = rect.top - parent.scrollTop;\n        }\n        this.element.style.left = (rect.left - parentLeft) + \"px\";\n        this.element.style.top = (rect.top - parentTop) + \"px\";\n        this.element.style.width = (rect.right - rect.left) + \"px\";\n        this.element.style.height = (rect.bottom - rect.top) + \"px\";\n    }\n    scheduleRemoval(timeout) {\n        clearTimeout(this.timeout);\n        this.timeout = setTimeout(() => this.setCursor(null), timeout);\n    }\n    dragover(event) {\n        if (!this.editorView.editable)\n            return;\n        let pos = this.editorView.posAtCoords({ left: event.clientX, top: event.clientY });\n        let node = pos && pos.inside >= 0 && this.editorView.state.doc.nodeAt(pos.inside);\n        let disableDropCursor = node && node.type.spec.disableDropCursor;\n        let disabled = typeof disableDropCursor == \"function\" ? disableDropCursor(this.editorView, pos, event) : disableDropCursor;\n        if (pos && !disabled) {\n            let target = pos.pos;\n            if (this.editorView.dragging && this.editorView.dragging.slice) {\n                let point = (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_1__.dropPoint)(this.editorView.state.doc, target, this.editorView.dragging.slice);\n                if (point != null)\n                    target = point;\n            }\n            this.setCursor(target);\n            this.scheduleRemoval(5000);\n        }\n    }\n    dragend() {\n        this.scheduleRemoval(20);\n    }\n    drop() {\n        this.scheduleRemoval(20);\n    }\n    dragleave(event) {\n        if (event.target == this.editorView.dom || !this.editorView.dom.contains(event.relatedTarget))\n            this.setCursor(null);\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/prosemirror-dropcursor/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/prosemirror-gapcursor/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/prosemirror-gapcursor/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GapCursor: () => (/* binding */ GapCursor),\n/* harmony export */   gapCursor: () => (/* binding */ gapCursor)\n/* harmony export */ });\n/* harmony import */ var prosemirror_keymap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prosemirror-keymap */ \"(app-pages-browser)/./node_modules/prosemirror-keymap/dist/index.js\");\n/* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-state */ \"(app-pages-browser)/./node_modules/prosemirror-state/dist/index.js\");\n/* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prosemirror-model */ \"(app-pages-browser)/./node_modules/prosemirror-model/dist/index.js\");\n/* harmony import */ var prosemirror_view__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! prosemirror-view */ \"(app-pages-browser)/./node_modules/prosemirror-view/dist/index.js\");\n\n\n\n\n\n/**\nGap cursor selections are represented using this class. Its\n`$anchor` and `$head` properties both point at the cursor position.\n*/\nclass GapCursor extends prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection {\n    /**\n    Create a gap cursor.\n    */\n    constructor($pos) {\n        super($pos, $pos);\n    }\n    map(doc, mapping) {\n        let $pos = doc.resolve(mapping.map(this.head));\n        return GapCursor.valid($pos) ? new GapCursor($pos) : prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection.near($pos);\n    }\n    content() { return prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Slice.empty; }\n    eq(other) {\n        return other instanceof GapCursor && other.head == this.head;\n    }\n    toJSON() {\n        return { type: \"gapcursor\", pos: this.head };\n    }\n    /**\n    @internal\n    */\n    static fromJSON(doc, json) {\n        if (typeof json.pos != \"number\")\n            throw new RangeError(\"Invalid input for GapCursor.fromJSON\");\n        return new GapCursor(doc.resolve(json.pos));\n    }\n    /**\n    @internal\n    */\n    getBookmark() { return new GapBookmark(this.anchor); }\n    /**\n    @internal\n    */\n    static valid($pos) {\n        let parent = $pos.parent;\n        if (parent.isTextblock || !closedBefore($pos) || !closedAfter($pos))\n            return false;\n        let override = parent.type.spec.allowGapCursor;\n        if (override != null)\n            return override;\n        let deflt = parent.contentMatchAt($pos.index()).defaultType;\n        return deflt && deflt.isTextblock;\n    }\n    /**\n    @internal\n    */\n    static findGapCursorFrom($pos, dir, mustMove = false) {\n        search: for (;;) {\n            if (!mustMove && GapCursor.valid($pos))\n                return $pos;\n            let pos = $pos.pos, next = null;\n            // Scan up from this position\n            for (let d = $pos.depth;; d--) {\n                let parent = $pos.node(d);\n                if (dir > 0 ? $pos.indexAfter(d) < parent.childCount : $pos.index(d) > 0) {\n                    next = parent.child(dir > 0 ? $pos.indexAfter(d) : $pos.index(d) - 1);\n                    break;\n                }\n                else if (d == 0) {\n                    return null;\n                }\n                pos += dir;\n                let $cur = $pos.doc.resolve(pos);\n                if (GapCursor.valid($cur))\n                    return $cur;\n            }\n            // And then down into the next node\n            for (;;) {\n                let inside = dir > 0 ? next.firstChild : next.lastChild;\n                if (!inside) {\n                    if (next.isAtom && !next.isText && !prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection.isSelectable(next)) {\n                        $pos = $pos.doc.resolve(pos + next.nodeSize * dir);\n                        mustMove = false;\n                        continue search;\n                    }\n                    break;\n                }\n                next = inside;\n                pos += dir;\n                let $cur = $pos.doc.resolve(pos);\n                if (GapCursor.valid($cur))\n                    return $cur;\n            }\n            return null;\n        }\n    }\n}\nGapCursor.prototype.visible = false;\nGapCursor.findFrom = GapCursor.findGapCursorFrom;\nprosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection.jsonID(\"gapcursor\", GapCursor);\nclass GapBookmark {\n    constructor(pos) {\n        this.pos = pos;\n    }\n    map(mapping) {\n        return new GapBookmark(mapping.map(this.pos));\n    }\n    resolve(doc) {\n        let $pos = doc.resolve(this.pos);\n        return GapCursor.valid($pos) ? new GapCursor($pos) : prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection.near($pos);\n    }\n}\nfunction closedBefore($pos) {\n    for (let d = $pos.depth; d >= 0; d--) {\n        let index = $pos.index(d), parent = $pos.node(d);\n        // At the start of this parent, look at next one\n        if (index == 0) {\n            if (parent.type.spec.isolating)\n                return true;\n            continue;\n        }\n        // See if the node before (or its first ancestor) is closed\n        for (let before = parent.child(index - 1);; before = before.lastChild) {\n            if ((before.childCount == 0 && !before.inlineContent) || before.isAtom || before.type.spec.isolating)\n                return true;\n            if (before.inlineContent)\n                return false;\n        }\n    }\n    // Hit start of document\n    return true;\n}\nfunction closedAfter($pos) {\n    for (let d = $pos.depth; d >= 0; d--) {\n        let index = $pos.indexAfter(d), parent = $pos.node(d);\n        if (index == parent.childCount) {\n            if (parent.type.spec.isolating)\n                return true;\n            continue;\n        }\n        for (let after = parent.child(index);; after = after.firstChild) {\n            if ((after.childCount == 0 && !after.inlineContent) || after.isAtom || after.type.spec.isolating)\n                return true;\n            if (after.inlineContent)\n                return false;\n        }\n    }\n    return true;\n}\n\n/**\nCreate a gap cursor plugin. When enabled, this will capture clicks\nnear and arrow-key-motion past places that don't have a normally\nselectable position nearby, and create a gap cursor selection for\nthem. The cursor is drawn as an element with class\n`ProseMirror-gapcursor`. You can either include\n`style/gapcursor.css` from the package's directory or add your own\nstyles to make it visible.\n*/\nfunction gapCursor() {\n    return new prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n        props: {\n            decorations: drawGapCursor,\n            createSelectionBetween(_view, $anchor, $head) {\n                return $anchor.pos == $head.pos && GapCursor.valid($head) ? new GapCursor($head) : null;\n            },\n            handleClick,\n            handleKeyDown,\n            handleDOMEvents: { beforeinput: beforeinput }\n        }\n    });\n}\nconst handleKeyDown = (0,prosemirror_keymap__WEBPACK_IMPORTED_MODULE_2__.keydownHandler)({\n    \"ArrowLeft\": arrow(\"horiz\", -1),\n    \"ArrowRight\": arrow(\"horiz\", 1),\n    \"ArrowUp\": arrow(\"vert\", -1),\n    \"ArrowDown\": arrow(\"vert\", 1)\n});\nfunction arrow(axis, dir) {\n    const dirStr = axis == \"vert\" ? (dir > 0 ? \"down\" : \"up\") : (dir > 0 ? \"right\" : \"left\");\n    return function (state, dispatch, view) {\n        let sel = state.selection;\n        let $start = dir > 0 ? sel.$to : sel.$from, mustMove = sel.empty;\n        if (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection) {\n            if (!view.endOfTextblock(dirStr) || $start.depth == 0)\n                return false;\n            mustMove = false;\n            $start = state.doc.resolve(dir > 0 ? $start.after() : $start.before());\n        }\n        let $found = GapCursor.findGapCursorFrom($start, dir, mustMove);\n        if (!$found)\n            return false;\n        if (dispatch)\n            dispatch(state.tr.setSelection(new GapCursor($found)));\n        return true;\n    };\n}\nfunction handleClick(view, pos, event) {\n    if (!view || !view.editable)\n        return false;\n    let $pos = view.state.doc.resolve(pos);\n    if (!GapCursor.valid($pos))\n        return false;\n    let clickPos = view.posAtCoords({ left: event.clientX, top: event.clientY });\n    if (clickPos && clickPos.inside > -1 && prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection.isSelectable(view.state.doc.nodeAt(clickPos.inside)))\n        return false;\n    view.dispatch(view.state.tr.setSelection(new GapCursor($pos)));\n    return true;\n}\n// This is a hack that, when a composition starts while a gap cursor\n// is active, quickly creates an inline context for the composition to\n// happen in, to avoid it being aborted by the DOM selection being\n// moved into a valid position.\nfunction beforeinput(view, event) {\n    if (event.inputType != \"insertCompositionText\" || !(view.state.selection instanceof GapCursor))\n        return false;\n    let { $from } = view.state.selection;\n    let insert = $from.parent.contentMatchAt($from.index()).findWrapping(view.state.schema.nodes.text);\n    if (!insert)\n        return false;\n    let frag = prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.empty;\n    for (let i = insert.length - 1; i >= 0; i--)\n        frag = prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.from(insert[i].createAndFill(null, frag));\n    let tr = view.state.tr.replace($from.pos, $from.pos, new prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Slice(frag, 0, 0));\n    tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.near(tr.doc.resolve($from.pos + 1)));\n    view.dispatch(tr);\n    return false;\n}\nfunction drawGapCursor(state) {\n    if (!(state.selection instanceof GapCursor))\n        return null;\n    let node = document.createElement(\"div\");\n    node.className = \"ProseMirror-gapcursor\";\n    return prosemirror_view__WEBPACK_IMPORTED_MODULE_3__.DecorationSet.create(state.doc, [prosemirror_view__WEBPACK_IMPORTED_MODULE_3__.Decoration.widget(state.selection.head, node, { key: \"gapcursor\" })]);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/prosemirror-gapcursor/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/prosemirror-history/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/prosemirror-history/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeHistory: () => (/* binding */ closeHistory),\n/* harmony export */   history: () => (/* binding */ history),\n/* harmony export */   redo: () => (/* binding */ redo),\n/* harmony export */   redoDepth: () => (/* binding */ redoDepth),\n/* harmony export */   redoNoScroll: () => (/* binding */ redoNoScroll),\n/* harmony export */   undo: () => (/* binding */ undo),\n/* harmony export */   undoDepth: () => (/* binding */ undoDepth),\n/* harmony export */   undoNoScroll: () => (/* binding */ undoNoScroll)\n/* harmony export */ });\n/* harmony import */ var rope_sequence__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rope-sequence */ \"(app-pages-browser)/./node_modules/rope-sequence/dist/index.js\");\n/* harmony import */ var prosemirror_transform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prosemirror-transform */ \"(app-pages-browser)/./node_modules/prosemirror-transform/dist/index.js\");\n/* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prosemirror-state */ \"(app-pages-browser)/./node_modules/prosemirror-state/dist/index.js\");\n\n\n\n\n// ProseMirror's history isn't simply a way to roll back to a previous\n// state, because ProseMirror supports applying changes without adding\n// them to the history (for example during collaboration).\n//\n// To this end, each 'Branch' (one for the undo history and one for\n// the redo history) keeps an array of 'Items', which can optionally\n// hold a step (an actual undoable change), and always hold a position\n// map (which is needed to move changes below them to apply to the\n// current document).\n//\n// An item that has both a step and a selection bookmark is the start\n// of an 'event' — a group of changes that will be undone or redone at\n// once. (It stores only the bookmark, since that way we don't have to\n// provide a document until the selection is actually applied, which\n// is useful when compressing.)\n// Used to schedule history compression\nconst max_empty_items = 500;\nclass Branch {\n    constructor(items, eventCount) {\n        this.items = items;\n        this.eventCount = eventCount;\n    }\n    // Pop the latest event off the branch's history and apply it\n    // to a document transform.\n    popEvent(state, preserveItems) {\n        if (this.eventCount == 0)\n            return null;\n        let end = this.items.length;\n        for (;; end--) {\n            let next = this.items.get(end - 1);\n            if (next.selection) {\n                --end;\n                break;\n            }\n        }\n        let remap, mapFrom;\n        if (preserveItems) {\n            remap = this.remapping(end, this.items.length);\n            mapFrom = remap.maps.length;\n        }\n        let transform = state.tr;\n        let selection, remaining;\n        let addAfter = [], addBefore = [];\n        this.items.forEach((item, i) => {\n            if (!item.step) {\n                if (!remap) {\n                    remap = this.remapping(end, i + 1);\n                    mapFrom = remap.maps.length;\n                }\n                mapFrom--;\n                addBefore.push(item);\n                return;\n            }\n            if (remap) {\n                addBefore.push(new Item(item.map));\n                let step = item.step.map(remap.slice(mapFrom)), map;\n                if (step && transform.maybeStep(step).doc) {\n                    map = transform.mapping.maps[transform.mapping.maps.length - 1];\n                    addAfter.push(new Item(map, undefined, undefined, addAfter.length + addBefore.length));\n                }\n                mapFrom--;\n                if (map)\n                    remap.appendMap(map, mapFrom);\n            }\n            else {\n                transform.maybeStep(item.step);\n            }\n            if (item.selection) {\n                selection = remap ? item.selection.map(remap.slice(mapFrom)) : item.selection;\n                remaining = new Branch(this.items.slice(0, end).append(addBefore.reverse().concat(addAfter)), this.eventCount - 1);\n                return false;\n            }\n        }, this.items.length, 0);\n        return { remaining: remaining, transform, selection: selection };\n    }\n    // Create a new branch with the given transform added.\n    addTransform(transform, selection, histOptions, preserveItems) {\n        let newItems = [], eventCount = this.eventCount;\n        let oldItems = this.items, lastItem = !preserveItems && oldItems.length ? oldItems.get(oldItems.length - 1) : null;\n        for (let i = 0; i < transform.steps.length; i++) {\n            let step = transform.steps[i].invert(transform.docs[i]);\n            let item = new Item(transform.mapping.maps[i], step, selection), merged;\n            if (merged = lastItem && lastItem.merge(item)) {\n                item = merged;\n                if (i)\n                    newItems.pop();\n                else\n                    oldItems = oldItems.slice(0, oldItems.length - 1);\n            }\n            newItems.push(item);\n            if (selection) {\n                eventCount++;\n                selection = undefined;\n            }\n            if (!preserveItems)\n                lastItem = item;\n        }\n        let overflow = eventCount - histOptions.depth;\n        if (overflow > DEPTH_OVERFLOW) {\n            oldItems = cutOffEvents(oldItems, overflow);\n            eventCount -= overflow;\n        }\n        return new Branch(oldItems.append(newItems), eventCount);\n    }\n    remapping(from, to) {\n        let maps = new prosemirror_transform__WEBPACK_IMPORTED_MODULE_1__.Mapping;\n        this.items.forEach((item, i) => {\n            let mirrorPos = item.mirrorOffset != null && i - item.mirrorOffset >= from\n                ? maps.maps.length - item.mirrorOffset : undefined;\n            maps.appendMap(item.map, mirrorPos);\n        }, from, to);\n        return maps;\n    }\n    addMaps(array) {\n        if (this.eventCount == 0)\n            return this;\n        return new Branch(this.items.append(array.map(map => new Item(map))), this.eventCount);\n    }\n    // When the collab module receives remote changes, the history has\n    // to know about those, so that it can adjust the steps that were\n    // rebased on top of the remote changes, and include the position\n    // maps for the remote changes in its array of items.\n    rebased(rebasedTransform, rebasedCount) {\n        if (!this.eventCount)\n            return this;\n        let rebasedItems = [], start = Math.max(0, this.items.length - rebasedCount);\n        let mapping = rebasedTransform.mapping;\n        let newUntil = rebasedTransform.steps.length;\n        let eventCount = this.eventCount;\n        this.items.forEach(item => { if (item.selection)\n            eventCount--; }, start);\n        let iRebased = rebasedCount;\n        this.items.forEach(item => {\n            let pos = mapping.getMirror(--iRebased);\n            if (pos == null)\n                return;\n            newUntil = Math.min(newUntil, pos);\n            let map = mapping.maps[pos];\n            if (item.step) {\n                let step = rebasedTransform.steps[pos].invert(rebasedTransform.docs[pos]);\n                let selection = item.selection && item.selection.map(mapping.slice(iRebased + 1, pos));\n                if (selection)\n                    eventCount++;\n                rebasedItems.push(new Item(map, step, selection));\n            }\n            else {\n                rebasedItems.push(new Item(map));\n            }\n        }, start);\n        let newMaps = [];\n        for (let i = rebasedCount; i < newUntil; i++)\n            newMaps.push(new Item(mapping.maps[i]));\n        let items = this.items.slice(0, start).append(newMaps).append(rebasedItems);\n        let branch = new Branch(items, eventCount);\n        if (branch.emptyItemCount() > max_empty_items)\n            branch = branch.compress(this.items.length - rebasedItems.length);\n        return branch;\n    }\n    emptyItemCount() {\n        let count = 0;\n        this.items.forEach(item => { if (!item.step)\n            count++; });\n        return count;\n    }\n    // Compressing a branch means rewriting it to push the air (map-only\n    // items) out. During collaboration, these naturally accumulate\n    // because each remote change adds one. The `upto` argument is used\n    // to ensure that only the items below a given level are compressed,\n    // because `rebased` relies on a clean, untouched set of items in\n    // order to associate old items with rebased steps.\n    compress(upto = this.items.length) {\n        let remap = this.remapping(0, upto), mapFrom = remap.maps.length;\n        let items = [], events = 0;\n        this.items.forEach((item, i) => {\n            if (i >= upto) {\n                items.push(item);\n                if (item.selection)\n                    events++;\n            }\n            else if (item.step) {\n                let step = item.step.map(remap.slice(mapFrom)), map = step && step.getMap();\n                mapFrom--;\n                if (map)\n                    remap.appendMap(map, mapFrom);\n                if (step) {\n                    let selection = item.selection && item.selection.map(remap.slice(mapFrom));\n                    if (selection)\n                        events++;\n                    let newItem = new Item(map.invert(), step, selection), merged, last = items.length - 1;\n                    if (merged = items.length && items[last].merge(newItem))\n                        items[last] = merged;\n                    else\n                        items.push(newItem);\n                }\n            }\n            else if (item.map) {\n                mapFrom--;\n            }\n        }, this.items.length, 0);\n        return new Branch(rope_sequence__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(items.reverse()), events);\n    }\n}\nBranch.empty = new Branch(rope_sequence__WEBPACK_IMPORTED_MODULE_0__[\"default\"].empty, 0);\nfunction cutOffEvents(items, n) {\n    let cutPoint;\n    items.forEach((item, i) => {\n        if (item.selection && (n-- == 0)) {\n            cutPoint = i;\n            return false;\n        }\n    });\n    return items.slice(cutPoint);\n}\nclass Item {\n    constructor(\n    // The (forward) step map for this item.\n    map, \n    // The inverted step\n    step, \n    // If this is non-null, this item is the start of a group, and\n    // this selection is the starting selection for the group (the one\n    // that was active before the first step was applied)\n    selection, \n    // If this item is the inverse of a previous mapping on the stack,\n    // this points at the inverse's offset\n    mirrorOffset) {\n        this.map = map;\n        this.step = step;\n        this.selection = selection;\n        this.mirrorOffset = mirrorOffset;\n    }\n    merge(other) {\n        if (this.step && other.step && !other.selection) {\n            let step = other.step.merge(this.step);\n            if (step)\n                return new Item(step.getMap().invert(), step, this.selection);\n        }\n    }\n}\n// The value of the state field that tracks undo/redo history for that\n// state. Will be stored in the plugin state when the history plugin\n// is active.\nclass HistoryState {\n    constructor(done, undone, prevRanges, prevTime, prevComposition) {\n        this.done = done;\n        this.undone = undone;\n        this.prevRanges = prevRanges;\n        this.prevTime = prevTime;\n        this.prevComposition = prevComposition;\n    }\n}\nconst DEPTH_OVERFLOW = 20;\n// Record a transformation in undo history.\nfunction applyTransaction(history, state, tr, options) {\n    let historyTr = tr.getMeta(historyKey), rebased;\n    if (historyTr)\n        return historyTr.historyState;\n    if (tr.getMeta(closeHistoryKey))\n        history = new HistoryState(history.done, history.undone, null, 0, -1);\n    let appended = tr.getMeta(\"appendedTransaction\");\n    if (tr.steps.length == 0) {\n        return history;\n    }\n    else if (appended && appended.getMeta(historyKey)) {\n        if (appended.getMeta(historyKey).redo)\n            return new HistoryState(history.done.addTransform(tr, undefined, options, mustPreserveItems(state)), history.undone, rangesFor(tr.mapping.maps), history.prevTime, history.prevComposition);\n        else\n            return new HistoryState(history.done, history.undone.addTransform(tr, undefined, options, mustPreserveItems(state)), null, history.prevTime, history.prevComposition);\n    }\n    else if (tr.getMeta(\"addToHistory\") !== false && !(appended && appended.getMeta(\"addToHistory\") === false)) {\n        // Group transforms that occur in quick succession into one event.\n        let composition = tr.getMeta(\"composition\");\n        let newGroup = history.prevTime == 0 ||\n            (!appended && history.prevComposition != composition &&\n                (history.prevTime < (tr.time || 0) - options.newGroupDelay || !isAdjacentTo(tr, history.prevRanges)));\n        let prevRanges = appended ? mapRanges(history.prevRanges, tr.mapping) : rangesFor(tr.mapping.maps);\n        return new HistoryState(history.done.addTransform(tr, newGroup ? state.selection.getBookmark() : undefined, options, mustPreserveItems(state)), Branch.empty, prevRanges, tr.time, composition == null ? history.prevComposition : composition);\n    }\n    else if (rebased = tr.getMeta(\"rebased\")) {\n        // Used by the collab module to tell the history that some of its\n        // content has been rebased.\n        return new HistoryState(history.done.rebased(tr, rebased), history.undone.rebased(tr, rebased), mapRanges(history.prevRanges, tr.mapping), history.prevTime, history.prevComposition);\n    }\n    else {\n        return new HistoryState(history.done.addMaps(tr.mapping.maps), history.undone.addMaps(tr.mapping.maps), mapRanges(history.prevRanges, tr.mapping), history.prevTime, history.prevComposition);\n    }\n}\nfunction isAdjacentTo(transform, prevRanges) {\n    if (!prevRanges)\n        return false;\n    if (!transform.docChanged)\n        return true;\n    let adjacent = false;\n    transform.mapping.maps[0].forEach((start, end) => {\n        for (let i = 0; i < prevRanges.length; i += 2)\n            if (start <= prevRanges[i + 1] && end >= prevRanges[i])\n                adjacent = true;\n    });\n    return adjacent;\n}\nfunction rangesFor(maps) {\n    let result = [];\n    for (let i = maps.length - 1; i >= 0 && result.length == 0; i--)\n        maps[i].forEach((_from, _to, from, to) => result.push(from, to));\n    return result;\n}\nfunction mapRanges(ranges, mapping) {\n    if (!ranges)\n        return null;\n    let result = [];\n    for (let i = 0; i < ranges.length; i += 2) {\n        let from = mapping.map(ranges[i], 1), to = mapping.map(ranges[i + 1], -1);\n        if (from <= to)\n            result.push(from, to);\n    }\n    return result;\n}\n// Apply the latest event from one branch to the document and shift the event\n// onto the other branch.\nfunction histTransaction(history, state, redo) {\n    let preserveItems = mustPreserveItems(state);\n    let histOptions = historyKey.get(state).spec.config;\n    let pop = (redo ? history.undone : history.done).popEvent(state, preserveItems);\n    if (!pop)\n        return null;\n    let selection = pop.selection.resolve(pop.transform.doc);\n    let added = (redo ? history.done : history.undone).addTransform(pop.transform, state.selection.getBookmark(), histOptions, preserveItems);\n    let newHist = new HistoryState(redo ? added : pop.remaining, redo ? pop.remaining : added, null, 0, -1);\n    return pop.transform.setSelection(selection).setMeta(historyKey, { redo, historyState: newHist });\n}\nlet cachedPreserveItems = false, cachedPreserveItemsPlugins = null;\n// Check whether any plugin in the given state has a\n// `historyPreserveItems` property in its spec, in which case we must\n// preserve steps exactly as they came in, so that they can be\n// rebased.\nfunction mustPreserveItems(state) {\n    let plugins = state.plugins;\n    if (cachedPreserveItemsPlugins != plugins) {\n        cachedPreserveItems = false;\n        cachedPreserveItemsPlugins = plugins;\n        for (let i = 0; i < plugins.length; i++)\n            if (plugins[i].spec.historyPreserveItems) {\n                cachedPreserveItems = true;\n                break;\n            }\n    }\n    return cachedPreserveItems;\n}\n/**\nSet a flag on the given transaction that will prevent further steps\nfrom being appended to an existing history event (so that they\nrequire a separate undo command to undo).\n*/\nfunction closeHistory(tr) {\n    return tr.setMeta(closeHistoryKey, true);\n}\nconst historyKey = new prosemirror_state__WEBPACK_IMPORTED_MODULE_2__.PluginKey(\"history\");\nconst closeHistoryKey = new prosemirror_state__WEBPACK_IMPORTED_MODULE_2__.PluginKey(\"closeHistory\");\n/**\nReturns a plugin that enables the undo history for an editor. The\nplugin will track undo and redo stacks, which can be used with the\n[`undo`](https://prosemirror.net/docs/ref/#history.undo) and [`redo`](https://prosemirror.net/docs/ref/#history.redo) commands.\n\nYou can set an `\"addToHistory\"` [metadata\nproperty](https://prosemirror.net/docs/ref/#state.Transaction.setMeta) of `false` on a transaction\nto prevent it from being rolled back by undo.\n*/\nfunction history(config = {}) {\n    config = { depth: config.depth || 100,\n        newGroupDelay: config.newGroupDelay || 500 };\n    return new prosemirror_state__WEBPACK_IMPORTED_MODULE_2__.Plugin({\n        key: historyKey,\n        state: {\n            init() {\n                return new HistoryState(Branch.empty, Branch.empty, null, 0, -1);\n            },\n            apply(tr, hist, state) {\n                return applyTransaction(hist, state, tr, config);\n            }\n        },\n        config,\n        props: {\n            handleDOMEvents: {\n                beforeinput(view, e) {\n                    let inputType = e.inputType;\n                    let command = inputType == \"historyUndo\" ? undo : inputType == \"historyRedo\" ? redo : null;\n                    if (!command)\n                        return false;\n                    e.preventDefault();\n                    return command(view.state, view.dispatch);\n                }\n            }\n        }\n    });\n}\nfunction buildCommand(redo, scroll) {\n    return (state, dispatch) => {\n        let hist = historyKey.getState(state);\n        if (!hist || (redo ? hist.undone : hist.done).eventCount == 0)\n            return false;\n        if (dispatch) {\n            let tr = histTransaction(hist, state, redo);\n            if (tr)\n                dispatch(scroll ? tr.scrollIntoView() : tr);\n        }\n        return true;\n    };\n}\n/**\nA command function that undoes the last change, if any.\n*/\nconst undo = buildCommand(false, true);\n/**\nA command function that redoes the last undone change, if any.\n*/\nconst redo = buildCommand(true, true);\n/**\nA command function that undoes the last change. Don't scroll the\nselection into view.\n*/\nconst undoNoScroll = buildCommand(false, false);\n/**\nA command function that redoes the last undone change. Don't\nscroll the selection into view.\n*/\nconst redoNoScroll = buildCommand(true, false);\n/**\nThe amount of undoable events available in a given state.\n*/\nfunction undoDepth(state) {\n    let hist = historyKey.getState(state);\n    return hist ? hist.done.eventCount : 0;\n}\n/**\nThe amount of redoable events available in a given editor state.\n*/\nfunction redoDepth(state) {\n    let hist = historyKey.getState(state);\n    return hist ? hist.undone.eventCount : 0;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/prosemirror-history/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/prosemirror-keymap/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/prosemirror-keymap/dist/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keydownHandler: () => (/* binding */ keydownHandler),\n/* harmony export */   keymap: () => (/* binding */ keymap)\n/* harmony export */ });\n/* harmony import */ var w3c_keyname__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! w3c-keyname */ \"(app-pages-browser)/./node_modules/w3c-keyname/index.js\");\n/* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prosemirror-state */ \"(app-pages-browser)/./node_modules/prosemirror-state/dist/index.js\");\n\n\n\nconst mac = typeof navigator != \"undefined\" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : false;\nfunction normalizeKeyName(name) {\n    let parts = name.split(/-(?!$)/), result = parts[parts.length - 1];\n    if (result == \"Space\")\n        result = \" \";\n    let alt, ctrl, shift, meta;\n    for (let i = 0; i < parts.length - 1; i++) {\n        let mod = parts[i];\n        if (/^(cmd|meta|m)$/i.test(mod))\n            meta = true;\n        else if (/^a(lt)?$/i.test(mod))\n            alt = true;\n        else if (/^(c|ctrl|control)$/i.test(mod))\n            ctrl = true;\n        else if (/^s(hift)?$/i.test(mod))\n            shift = true;\n        else if (/^mod$/i.test(mod)) {\n            if (mac)\n                meta = true;\n            else\n                ctrl = true;\n        }\n        else\n            throw new Error(\"Unrecognized modifier name: \" + mod);\n    }\n    if (alt)\n        result = \"Alt-\" + result;\n    if (ctrl)\n        result = \"Ctrl-\" + result;\n    if (meta)\n        result = \"Meta-\" + result;\n    if (shift)\n        result = \"Shift-\" + result;\n    return result;\n}\nfunction normalize(map) {\n    let copy = Object.create(null);\n    for (let prop in map)\n        copy[normalizeKeyName(prop)] = map[prop];\n    return copy;\n}\nfunction modifiers(name, event, shift = true) {\n    if (event.altKey)\n        name = \"Alt-\" + name;\n    if (event.ctrlKey)\n        name = \"Ctrl-\" + name;\n    if (event.metaKey)\n        name = \"Meta-\" + name;\n    if (shift && event.shiftKey)\n        name = \"Shift-\" + name;\n    return name;\n}\n/**\nCreate a keymap plugin for the given set of bindings.\n\nBindings should map key names to [command](https://prosemirror.net/docs/ref/#commands)-style\nfunctions, which will be called with `(EditorState, dispatch,\nEditorView)` arguments, and should return true when they've handled\nthe key. Note that the view argument isn't part of the command\nprotocol, but can be used as an escape hatch if a binding needs to\ndirectly interact with the UI.\n\nKey names may be strings like `\"Shift-Ctrl-Enter\"`—a key\nidentifier prefixed with zero or more modifiers. Key identifiers\nare based on the strings that can appear in\n[`KeyEvent.key`](https:developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key).\nUse lowercase letters to refer to letter keys (or uppercase letters\nif you want shift to be held). You may use `\"Space\"` as an alias\nfor the `\" \"` name.\n\nModifiers can be given in any order. `Shift-` (or `s-`), `Alt-` (or\n`a-`), `Ctrl-` (or `c-` or `Control-`) and `Cmd-` (or `m-` or\n`Meta-`) are recognized. For characters that are created by holding\nshift, the `Shift-` prefix is implied, and should not be added\nexplicitly.\n\nYou can use `Mod-` as a shorthand for `Cmd-` on Mac and `Ctrl-` on\nother platforms.\n\nYou can add multiple keymap plugins to an editor. The order in\nwhich they appear determines their precedence (the ones early in\nthe array get to dispatch first).\n*/\nfunction keymap(bindings) {\n    return new prosemirror_state__WEBPACK_IMPORTED_MODULE_1__.Plugin({ props: { handleKeyDown: keydownHandler(bindings) } });\n}\n/**\nGiven a set of bindings (using the same format as\n[`keymap`](https://prosemirror.net/docs/ref/#keymap.keymap)), return a [keydown\nhandler](https://prosemirror.net/docs/ref/#view.EditorProps.handleKeyDown) that handles them.\n*/\nfunction keydownHandler(bindings) {\n    let map = normalize(bindings);\n    return function (view, event) {\n        let name = (0,w3c_keyname__WEBPACK_IMPORTED_MODULE_0__.keyName)(event), baseName, direct = map[modifiers(name, event)];\n        if (direct && direct(view.state, view.dispatch, view))\n            return true;\n        // A character key\n        if (name.length == 1 && name != \" \") {\n            if (event.shiftKey) {\n                // In case the name was already modified by shift, try looking\n                // it up without its shift modifier\n                let noShift = map[modifiers(name, event, false)];\n                if (noShift && noShift(view.state, view.dispatch, view))\n                    return true;\n            }\n            if ((event.shiftKey || event.altKey || event.metaKey || name.charCodeAt(0) > 127) &&\n                (baseName = w3c_keyname__WEBPACK_IMPORTED_MODULE_0__.base[event.keyCode]) && baseName != name) {\n                // Try falling back to the keyCode when there's a modifier\n                // active or the character produced isn't ASCII, and our table\n                // produces a different name from the the keyCode. See #668,\n                // #1060\n                let fromCode = map[modifiers(baseName, event)];\n                if (fromCode && fromCode(view.state, view.dispatch, view))\n                    return true;\n            }\n        }\n        return false;\n    };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wcm9zZW1pcnJvci1rZXltYXAvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTRDO0FBQ0Q7O0FBRTNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixzQkFBc0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHFEQUFNLEdBQUcsU0FBUywyQ0FBMkM7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG9EQUFPO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qiw2Q0FBSTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWtDIiwic291cmNlcyI6WyJDOlxcUHJvamVjdHNcXHR1b24taW8tdjFcXG5vZGVfbW9kdWxlc1xccHJvc2VtaXJyb3Ita2V5bWFwXFxkaXN0XFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBrZXlOYW1lLCBiYXNlIH0gZnJvbSAndzNjLWtleW5hbWUnO1xuaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAncHJvc2VtaXJyb3Itc3RhdGUnO1xuXG5jb25zdCBtYWMgPSB0eXBlb2YgbmF2aWdhdG9yICE9IFwidW5kZWZpbmVkXCIgPyAvTWFjfGlQKGhvbmV8W29hXWQpLy50ZXN0KG5hdmlnYXRvci5wbGF0Zm9ybSkgOiBmYWxzZTtcbmZ1bmN0aW9uIG5vcm1hbGl6ZUtleU5hbWUobmFtZSkge1xuICAgIGxldCBwYXJ0cyA9IG5hbWUuc3BsaXQoLy0oPyEkKS8pLCByZXN1bHQgPSBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBpZiAocmVzdWx0ID09IFwiU3BhY2VcIilcbiAgICAgICAgcmVzdWx0ID0gXCIgXCI7XG4gICAgbGV0IGFsdCwgY3RybCwgc2hpZnQsIG1ldGE7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgbGV0IG1vZCA9IHBhcnRzW2ldO1xuICAgICAgICBpZiAoL14oY21kfG1ldGF8bSkkL2kudGVzdChtb2QpKVxuICAgICAgICAgICAgbWV0YSA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKC9eYShsdCk/JC9pLnRlc3QobW9kKSlcbiAgICAgICAgICAgIGFsdCA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKC9eKGN8Y3RybHxjb250cm9sKSQvaS50ZXN0KG1vZCkpXG4gICAgICAgICAgICBjdHJsID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoL15zKGhpZnQpPyQvaS50ZXN0KG1vZCkpXG4gICAgICAgICAgICBzaGlmdCA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKC9ebW9kJC9pLnRlc3QobW9kKSkge1xuICAgICAgICAgICAgaWYgKG1hYylcbiAgICAgICAgICAgICAgICBtZXRhID0gdHJ1ZTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBjdHJsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgbW9kaWZpZXIgbmFtZTogXCIgKyBtb2QpO1xuICAgIH1cbiAgICBpZiAoYWx0KVxuICAgICAgICByZXN1bHQgPSBcIkFsdC1cIiArIHJlc3VsdDtcbiAgICBpZiAoY3RybClcbiAgICAgICAgcmVzdWx0ID0gXCJDdHJsLVwiICsgcmVzdWx0O1xuICAgIGlmIChtZXRhKVxuICAgICAgICByZXN1bHQgPSBcIk1ldGEtXCIgKyByZXN1bHQ7XG4gICAgaWYgKHNoaWZ0KVxuICAgICAgICByZXN1bHQgPSBcIlNoaWZ0LVwiICsgcmVzdWx0O1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBub3JtYWxpemUobWFwKSB7XG4gICAgbGV0IGNvcHkgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGZvciAobGV0IHByb3AgaW4gbWFwKVxuICAgICAgICBjb3B5W25vcm1hbGl6ZUtleU5hbWUocHJvcCldID0gbWFwW3Byb3BdO1xuICAgIHJldHVybiBjb3B5O1xufVxuZnVuY3Rpb24gbW9kaWZpZXJzKG5hbWUsIGV2ZW50LCBzaGlmdCA9IHRydWUpIHtcbiAgICBpZiAoZXZlbnQuYWx0S2V5KVxuICAgICAgICBuYW1lID0gXCJBbHQtXCIgKyBuYW1lO1xuICAgIGlmIChldmVudC5jdHJsS2V5KVxuICAgICAgICBuYW1lID0gXCJDdHJsLVwiICsgbmFtZTtcbiAgICBpZiAoZXZlbnQubWV0YUtleSlcbiAgICAgICAgbmFtZSA9IFwiTWV0YS1cIiArIG5hbWU7XG4gICAgaWYgKHNoaWZ0ICYmIGV2ZW50LnNoaWZ0S2V5KVxuICAgICAgICBuYW1lID0gXCJTaGlmdC1cIiArIG5hbWU7XG4gICAgcmV0dXJuIG5hbWU7XG59XG4vKipcbkNyZWF0ZSBhIGtleW1hcCBwbHVnaW4gZm9yIHRoZSBnaXZlbiBzZXQgb2YgYmluZGluZ3MuXG5cbkJpbmRpbmdzIHNob3VsZCBtYXAga2V5IG5hbWVzIHRvIFtjb21tYW5kXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jY29tbWFuZHMpLXN0eWxlXG5mdW5jdGlvbnMsIHdoaWNoIHdpbGwgYmUgY2FsbGVkIHdpdGggYChFZGl0b3JTdGF0ZSwgZGlzcGF0Y2gsXG5FZGl0b3JWaWV3KWAgYXJndW1lbnRzLCBhbmQgc2hvdWxkIHJldHVybiB0cnVlIHdoZW4gdGhleSd2ZSBoYW5kbGVkXG50aGUga2V5LiBOb3RlIHRoYXQgdGhlIHZpZXcgYXJndW1lbnQgaXNuJ3QgcGFydCBvZiB0aGUgY29tbWFuZFxucHJvdG9jb2wsIGJ1dCBjYW4gYmUgdXNlZCBhcyBhbiBlc2NhcGUgaGF0Y2ggaWYgYSBiaW5kaW5nIG5lZWRzIHRvXG5kaXJlY3RseSBpbnRlcmFjdCB3aXRoIHRoZSBVSS5cblxuS2V5IG5hbWVzIG1heSBiZSBzdHJpbmdzIGxpa2UgYFwiU2hpZnQtQ3RybC1FbnRlclwiYOKAlGEga2V5XG5pZGVudGlmaWVyIHByZWZpeGVkIHdpdGggemVybyBvciBtb3JlIG1vZGlmaWVycy4gS2V5IGlkZW50aWZpZXJzXG5hcmUgYmFzZWQgb24gdGhlIHN0cmluZ3MgdGhhdCBjYW4gYXBwZWFyIGluXG5bYEtleUV2ZW50LmtleWBdKGh0dHBzOmRldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudC9rZXkpLlxuVXNlIGxvd2VyY2FzZSBsZXR0ZXJzIHRvIHJlZmVyIHRvIGxldHRlciBrZXlzIChvciB1cHBlcmNhc2UgbGV0dGVyc1xuaWYgeW91IHdhbnQgc2hpZnQgdG8gYmUgaGVsZCkuIFlvdSBtYXkgdXNlIGBcIlNwYWNlXCJgIGFzIGFuIGFsaWFzXG5mb3IgdGhlIGBcIiBcImAgbmFtZS5cblxuTW9kaWZpZXJzIGNhbiBiZSBnaXZlbiBpbiBhbnkgb3JkZXIuIGBTaGlmdC1gIChvciBgcy1gKSwgYEFsdC1gIChvclxuYGEtYCksIGBDdHJsLWAgKG9yIGBjLWAgb3IgYENvbnRyb2wtYCkgYW5kIGBDbWQtYCAob3IgYG0tYCBvclxuYE1ldGEtYCkgYXJlIHJlY29nbml6ZWQuIEZvciBjaGFyYWN0ZXJzIHRoYXQgYXJlIGNyZWF0ZWQgYnkgaG9sZGluZ1xuc2hpZnQsIHRoZSBgU2hpZnQtYCBwcmVmaXggaXMgaW1wbGllZCwgYW5kIHNob3VsZCBub3QgYmUgYWRkZWRcbmV4cGxpY2l0bHkuXG5cbllvdSBjYW4gdXNlIGBNb2QtYCBhcyBhIHNob3J0aGFuZCBmb3IgYENtZC1gIG9uIE1hYyBhbmQgYEN0cmwtYCBvblxub3RoZXIgcGxhdGZvcm1zLlxuXG5Zb3UgY2FuIGFkZCBtdWx0aXBsZSBrZXltYXAgcGx1Z2lucyB0byBhbiBlZGl0b3IuIFRoZSBvcmRlciBpblxud2hpY2ggdGhleSBhcHBlYXIgZGV0ZXJtaW5lcyB0aGVpciBwcmVjZWRlbmNlICh0aGUgb25lcyBlYXJseSBpblxudGhlIGFycmF5IGdldCB0byBkaXNwYXRjaCBmaXJzdCkuXG4qL1xuZnVuY3Rpb24ga2V5bWFwKGJpbmRpbmdzKSB7XG4gICAgcmV0dXJuIG5ldyBQbHVnaW4oeyBwcm9wczogeyBoYW5kbGVLZXlEb3duOiBrZXlkb3duSGFuZGxlcihiaW5kaW5ncykgfSB9KTtcbn1cbi8qKlxuR2l2ZW4gYSBzZXQgb2YgYmluZGluZ3MgKHVzaW5nIHRoZSBzYW1lIGZvcm1hdCBhc1xuW2BrZXltYXBgXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8ja2V5bWFwLmtleW1hcCkpLCByZXR1cm4gYSBba2V5ZG93blxuaGFuZGxlcl0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI3ZpZXcuRWRpdG9yUHJvcHMuaGFuZGxlS2V5RG93bikgdGhhdCBoYW5kbGVzIHRoZW0uXG4qL1xuZnVuY3Rpb24ga2V5ZG93bkhhbmRsZXIoYmluZGluZ3MpIHtcbiAgICBsZXQgbWFwID0gbm9ybWFsaXplKGJpbmRpbmdzKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHZpZXcsIGV2ZW50KSB7XG4gICAgICAgIGxldCBuYW1lID0ga2V5TmFtZShldmVudCksIGJhc2VOYW1lLCBkaXJlY3QgPSBtYXBbbW9kaWZpZXJzKG5hbWUsIGV2ZW50KV07XG4gICAgICAgIGlmIChkaXJlY3QgJiYgZGlyZWN0KHZpZXcuc3RhdGUsIHZpZXcuZGlzcGF0Y2gsIHZpZXcpKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIC8vIEEgY2hhcmFjdGVyIGtleVxuICAgICAgICBpZiAobmFtZS5sZW5ndGggPT0gMSAmJiBuYW1lICE9IFwiIFwiKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgICAgICAvLyBJbiBjYXNlIHRoZSBuYW1lIHdhcyBhbHJlYWR5IG1vZGlmaWVkIGJ5IHNoaWZ0LCB0cnkgbG9va2luZ1xuICAgICAgICAgICAgICAgIC8vIGl0IHVwIHdpdGhvdXQgaXRzIHNoaWZ0IG1vZGlmaWVyXG4gICAgICAgICAgICAgICAgbGV0IG5vU2hpZnQgPSBtYXBbbW9kaWZpZXJzKG5hbWUsIGV2ZW50LCBmYWxzZSldO1xuICAgICAgICAgICAgICAgIGlmIChub1NoaWZ0ICYmIG5vU2hpZnQodmlldy5zdGF0ZSwgdmlldy5kaXNwYXRjaCwgdmlldykpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKChldmVudC5zaGlmdEtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQubWV0YUtleSB8fCBuYW1lLmNoYXJDb2RlQXQoMCkgPiAxMjcpICYmXG4gICAgICAgICAgICAgICAgKGJhc2VOYW1lID0gYmFzZVtldmVudC5rZXlDb2RlXSkgJiYgYmFzZU5hbWUgIT0gbmFtZSkge1xuICAgICAgICAgICAgICAgIC8vIFRyeSBmYWxsaW5nIGJhY2sgdG8gdGhlIGtleUNvZGUgd2hlbiB0aGVyZSdzIGEgbW9kaWZpZXJcbiAgICAgICAgICAgICAgICAvLyBhY3RpdmUgb3IgdGhlIGNoYXJhY3RlciBwcm9kdWNlZCBpc24ndCBBU0NJSSwgYW5kIG91ciB0YWJsZVxuICAgICAgICAgICAgICAgIC8vIHByb2R1Y2VzIGEgZGlmZmVyZW50IG5hbWUgZnJvbSB0aGUgdGhlIGtleUNvZGUuIFNlZSAjNjY4LFxuICAgICAgICAgICAgICAgIC8vICMxMDYwXG4gICAgICAgICAgICAgICAgbGV0IGZyb21Db2RlID0gbWFwW21vZGlmaWVycyhiYXNlTmFtZSwgZXZlbnQpXTtcbiAgICAgICAgICAgICAgICBpZiAoZnJvbUNvZGUgJiYgZnJvbUNvZGUodmlldy5zdGF0ZSwgdmlldy5kaXNwYXRjaCwgdmlldykpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xufVxuXG5leHBvcnQgeyBrZXlkb3duSGFuZGxlciwga2V5bWFwIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/prosemirror-keymap/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/prosemirror-schema-list/dist/index.js":
/*!************************************************************!*\
  !*** ./node_modules/prosemirror-schema-list/dist/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addListNodes: () => (/* binding */ addListNodes),\n/* harmony export */   bulletList: () => (/* binding */ bulletList),\n/* harmony export */   liftListItem: () => (/* binding */ liftListItem),\n/* harmony export */   listItem: () => (/* binding */ listItem),\n/* harmony export */   orderedList: () => (/* binding */ orderedList),\n/* harmony export */   sinkListItem: () => (/* binding */ sinkListItem),\n/* harmony export */   splitListItem: () => (/* binding */ splitListItem),\n/* harmony export */   splitListItemKeepMarks: () => (/* binding */ splitListItemKeepMarks),\n/* harmony export */   wrapInList: () => (/* binding */ wrapInList),\n/* harmony export */   wrapRangeInList: () => (/* binding */ wrapRangeInList)\n/* harmony export */ });\n/* harmony import */ var prosemirror_transform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prosemirror-transform */ \"(app-pages-browser)/./node_modules/prosemirror-transform/dist/index.js\");\n/* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-model */ \"(app-pages-browser)/./node_modules/prosemirror-model/dist/index.js\");\n/* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prosemirror-state */ \"(app-pages-browser)/./node_modules/prosemirror-state/dist/index.js\");\n\n\n\n\nconst olDOM = [\"ol\", 0], ulDOM = [\"ul\", 0], liDOM = [\"li\", 0];\n/**\nAn ordered list [node spec](https://prosemirror.net/docs/ref/#model.NodeSpec). Has a single\nattribute, `order`, which determines the number at which the list\nstarts counting, and defaults to 1. Represented as an `<ol>`\nelement.\n*/\nconst orderedList = {\n    attrs: { order: { default: 1, validate: \"number\" } },\n    parseDOM: [{ tag: \"ol\", getAttrs(dom) {\n                return { order: dom.hasAttribute(\"start\") ? +dom.getAttribute(\"start\") : 1 };\n            } }],\n    toDOM(node) {\n        return node.attrs.order == 1 ? olDOM : [\"ol\", { start: node.attrs.order }, 0];\n    }\n};\n/**\nA bullet list node spec, represented in the DOM as `<ul>`.\n*/\nconst bulletList = {\n    parseDOM: [{ tag: \"ul\" }],\n    toDOM() { return ulDOM; }\n};\n/**\nA list item (`<li>`) spec.\n*/\nconst listItem = {\n    parseDOM: [{ tag: \"li\" }],\n    toDOM() { return liDOM; },\n    defining: true\n};\nfunction add(obj, props) {\n    let copy = {};\n    for (let prop in obj)\n        copy[prop] = obj[prop];\n    for (let prop in props)\n        copy[prop] = props[prop];\n    return copy;\n}\n/**\nConvenience function for adding list-related node types to a map\nspecifying the nodes for a schema. Adds\n[`orderedList`](https://prosemirror.net/docs/ref/#schema-list.orderedList) as `\"ordered_list\"`,\n[`bulletList`](https://prosemirror.net/docs/ref/#schema-list.bulletList) as `\"bullet_list\"`, and\n[`listItem`](https://prosemirror.net/docs/ref/#schema-list.listItem) as `\"list_item\"`.\n\n`itemContent` determines the content expression for the list items.\nIf you want the commands defined in this module to apply to your\nlist structure, it should have a shape like `\"paragraph block*\"` or\n`\"paragraph (ordered_list | bullet_list)*\"`. `listGroup` can be\ngiven to assign a group name to the list node types, for example\n`\"block\"`.\n*/\nfunction addListNodes(nodes, itemContent, listGroup) {\n    return nodes.append({\n        ordered_list: add(orderedList, { content: \"list_item+\", group: listGroup }),\n        bullet_list: add(bulletList, { content: \"list_item+\", group: listGroup }),\n        list_item: add(listItem, { content: itemContent })\n    });\n}\n/**\nReturns a command function that wraps the selection in a list with\nthe given type an attributes. If `dispatch` is null, only return a\nvalue to indicate whether this is possible, but don't actually\nperform the change.\n*/\nfunction wrapInList(listType, attrs = null) {\n    return function (state, dispatch) {\n        let { $from, $to } = state.selection;\n        let range = $from.blockRange($to);\n        if (!range)\n            return false;\n        let tr = dispatch ? state.tr : null;\n        if (!wrapRangeInList(tr, range, listType, attrs))\n            return false;\n        if (dispatch)\n            dispatch(tr.scrollIntoView());\n        return true;\n    };\n}\n/**\nTry to wrap the given node range in a list of the given type.\nReturn `true` when this is possible, `false` otherwise. When `tr`\nis non-null, the wrapping is added to that transaction. When it is\n`null`, the function only queries whether the wrapping is\npossible.\n*/\nfunction wrapRangeInList(tr, range, listType, attrs = null) {\n    let doJoin = false, outerRange = range, doc = range.$from.doc;\n    // This is at the top of an existing list item\n    if (range.depth >= 2 && range.$from.node(range.depth - 1).type.compatibleContent(listType) && range.startIndex == 0) {\n        // Don't do anything if this is the top of the list\n        if (range.$from.index(range.depth - 1) == 0)\n            return false;\n        let $insert = doc.resolve(range.start - 2);\n        outerRange = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.NodeRange($insert, $insert, range.depth);\n        if (range.endIndex < range.parent.childCount)\n            range = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.NodeRange(range.$from, doc.resolve(range.$to.end(range.depth)), range.depth);\n        doJoin = true;\n    }\n    let wrap = (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_1__.findWrapping)(outerRange, listType, attrs, range);\n    if (!wrap)\n        return false;\n    if (tr)\n        doWrapInList(tr, range, wrap, doJoin, listType);\n    return true;\n}\nfunction doWrapInList(tr, range, wrappers, joinBefore, listType) {\n    let content = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty;\n    for (let i = wrappers.length - 1; i >= 0; i--)\n        content = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content));\n    tr.step(new prosemirror_transform__WEBPACK_IMPORTED_MODULE_1__.ReplaceAroundStep(range.start - (joinBefore ? 2 : 0), range.end, range.start, range.end, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(content, 0, 0), wrappers.length, true));\n    let found = 0;\n    for (let i = 0; i < wrappers.length; i++)\n        if (wrappers[i].type == listType)\n            found = i + 1;\n    let splitDepth = wrappers.length - found;\n    let splitPos = range.start + wrappers.length - (joinBefore ? 2 : 0), parent = range.parent;\n    for (let i = range.startIndex, e = range.endIndex, first = true; i < e; i++, first = false) {\n        if (!first && (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_1__.canSplit)(tr.doc, splitPos, splitDepth)) {\n            tr.split(splitPos, splitDepth);\n            splitPos += 2 * splitDepth;\n        }\n        splitPos += parent.child(i).nodeSize;\n    }\n    return tr;\n}\n/**\nBuild a command that splits a non-empty textblock at the top level\nof a list item by also splitting that list item.\n*/\nfunction splitListItem(itemType, itemAttrs) {\n    return function (state, dispatch) {\n        let { $from, $to, node } = state.selection;\n        if ((node && node.isBlock) || $from.depth < 2 || !$from.sameParent($to))\n            return false;\n        let grandParent = $from.node(-1);\n        if (grandParent.type != itemType)\n            return false;\n        if ($from.parent.content.size == 0 && $from.node(-1).childCount == $from.indexAfter(-1)) {\n            // In an empty block. If this is a nested list, the wrapping\n            // list item should be split. Otherwise, bail out and let next\n            // command handle lifting.\n            if ($from.depth == 3 || $from.node(-3).type != itemType ||\n                $from.index(-2) != $from.node(-2).childCount - 1)\n                return false;\n            if (dispatch) {\n                let wrap = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty;\n                let depthBefore = $from.index(-1) ? 1 : $from.index(-2) ? 2 : 3;\n                // Build a fragment containing empty versions of the structure\n                // from the outer list item to the parent node of the cursor\n                for (let d = $from.depth - depthBefore; d >= $from.depth - 3; d--)\n                    wrap = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from($from.node(d).copy(wrap));\n                let depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount ? 1\n                    : $from.indexAfter(-2) < $from.node(-3).childCount ? 2 : 3;\n                // Add a second list item with an empty default start node\n                wrap = wrap.append(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(itemType.createAndFill()));\n                let start = $from.before($from.depth - (depthBefore - 1));\n                let tr = state.tr.replace(start, $from.after(-depthAfter), new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(wrap, 4 - depthBefore, 0));\n                let sel = -1;\n                tr.doc.nodesBetween(start, tr.doc.content.size, (node, pos) => {\n                    if (sel > -1)\n                        return false;\n                    if (node.isTextblock && node.content.size == 0)\n                        sel = pos + 1;\n                });\n                if (sel > -1)\n                    tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_2__.Selection.near(tr.doc.resolve(sel)));\n                dispatch(tr.scrollIntoView());\n            }\n            return true;\n        }\n        let nextType = $to.pos == $from.end() ? grandParent.contentMatchAt(0).defaultType : null;\n        let tr = state.tr.delete($from.pos, $to.pos);\n        let types = nextType ? [itemAttrs ? { type: itemType, attrs: itemAttrs } : null, { type: nextType }] : undefined;\n        if (!(0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_1__.canSplit)(tr.doc, $from.pos, 2, types))\n            return false;\n        if (dispatch)\n            dispatch(tr.split($from.pos, 2, types).scrollIntoView());\n        return true;\n    };\n}\n/**\nActs like [`splitListItem`](https://prosemirror.net/docs/ref/#schema-list.splitListItem), but\nwithout resetting the set of active marks at the cursor.\n*/\nfunction splitListItemKeepMarks(itemType, itemAttrs) {\n    let split = splitListItem(itemType, itemAttrs);\n    return (state, dispatch) => {\n        return split(state, dispatch && (tr => {\n            let marks = state.storedMarks || (state.selection.$to.parentOffset && state.selection.$from.marks());\n            if (marks)\n                tr.ensureMarks(marks);\n            dispatch(tr);\n        }));\n    };\n}\n/**\nCreate a command to lift the list item around the selection up into\na wrapping list.\n*/\nfunction liftListItem(itemType) {\n    return function (state, dispatch) {\n        let { $from, $to } = state.selection;\n        let range = $from.blockRange($to, node => node.childCount > 0 && node.firstChild.type == itemType);\n        if (!range)\n            return false;\n        if (!dispatch)\n            return true;\n        if ($from.node(range.depth - 1).type == itemType) // Inside a parent list\n            return liftToOuterList(state, dispatch, itemType, range);\n        else // Outer list node\n            return liftOutOfList(state, dispatch, range);\n    };\n}\nfunction liftToOuterList(state, dispatch, itemType, range) {\n    let tr = state.tr, end = range.end, endOfList = range.$to.end(range.depth);\n    if (end < endOfList) {\n        // There are siblings after the lifted items, which must become\n        // children of the last item\n        tr.step(new prosemirror_transform__WEBPACK_IMPORTED_MODULE_1__.ReplaceAroundStep(end - 1, endOfList, end, endOfList, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(itemType.create(null, range.parent.copy())), 1, 0), 1, true));\n        range = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.NodeRange(tr.doc.resolve(range.$from.pos), tr.doc.resolve(endOfList), range.depth);\n    }\n    const target = (0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_1__.liftTarget)(range);\n    if (target == null)\n        return false;\n    tr.lift(range, target);\n    let $after = tr.doc.resolve(tr.mapping.map(end, -1) - 1);\n    if ((0,prosemirror_transform__WEBPACK_IMPORTED_MODULE_1__.canJoin)(tr.doc, $after.pos) && $after.nodeBefore.type == $after.nodeAfter.type)\n        tr.join($after.pos);\n    dispatch(tr.scrollIntoView());\n    return true;\n}\nfunction liftOutOfList(state, dispatch, range) {\n    let tr = state.tr, list = range.parent;\n    // Merge the list items into a single big item\n    for (let pos = range.end, i = range.endIndex - 1, e = range.startIndex; i > e; i--) {\n        pos -= list.child(i).nodeSize;\n        tr.delete(pos - 1, pos + 1);\n    }\n    let $start = tr.doc.resolve(range.start), item = $start.nodeAfter;\n    if (tr.mapping.map(range.end) != range.start + $start.nodeAfter.nodeSize)\n        return false;\n    let atStart = range.startIndex == 0, atEnd = range.endIndex == list.childCount;\n    let parent = $start.node(-1), indexBefore = $start.index(-1);\n    if (!parent.canReplace(indexBefore + (atStart ? 0 : 1), indexBefore + 1, item.content.append(atEnd ? prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty : prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(list))))\n        return false;\n    let start = $start.pos, end = start + item.nodeSize;\n    // Strip off the surrounding list. At the sides where we're not at\n    // the end of the list, the existing list is closed. At sides where\n    // this is the end, it is overwritten to its end.\n    tr.step(new prosemirror_transform__WEBPACK_IMPORTED_MODULE_1__.ReplaceAroundStep(start - (atStart ? 1 : 0), end + (atEnd ? 1 : 0), start + 1, end - 1, new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice((atStart ? prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty : prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(list.copy(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty)))\n        .append(atEnd ? prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty : prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(list.copy(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.empty))), atStart ? 0 : 1, atEnd ? 0 : 1), atStart ? 0 : 1));\n    dispatch(tr.scrollIntoView());\n    return true;\n}\n/**\nCreate a command to sink the list item around the selection down\ninto an inner list.\n*/\nfunction sinkListItem(itemType) {\n    return function (state, dispatch) {\n        let { $from, $to } = state.selection;\n        let range = $from.blockRange($to, node => node.childCount > 0 && node.firstChild.type == itemType);\n        if (!range)\n            return false;\n        let startIndex = range.startIndex;\n        if (startIndex == 0)\n            return false;\n        let parent = range.parent, nodeBefore = parent.child(startIndex - 1);\n        if (nodeBefore.type != itemType)\n            return false;\n        if (dispatch) {\n            let nestedBefore = nodeBefore.lastChild && nodeBefore.lastChild.type == parent.type;\n            let inner = prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(nestedBefore ? itemType.create() : null);\n            let slice = new prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(itemType.create(null, prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.from(parent.type.create(null, inner)))), nestedBefore ? 3 : 1, 0);\n            let before = range.start, after = range.end;\n            dispatch(state.tr.step(new prosemirror_transform__WEBPACK_IMPORTED_MODULE_1__.ReplaceAroundStep(before - (nestedBefore ? 3 : 1), after, before, after, slice, 1, true))\n                .scrollIntoView());\n        }\n        return true;\n    };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/prosemirror-schema-list/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/prosemirror-tables/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/prosemirror-tables/dist/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CellBookmark: () => (/* binding */ CellBookmark),\n/* harmony export */   CellSelection: () => (/* binding */ CellSelection),\n/* harmony export */   ResizeState: () => (/* binding */ ResizeState),\n/* harmony export */   TableMap: () => (/* binding */ TableMap),\n/* harmony export */   TableView: () => (/* binding */ TableView),\n/* harmony export */   __clipCells: () => (/* binding */ clipCells),\n/* harmony export */   __insertCells: () => (/* binding */ insertCells),\n/* harmony export */   __pastedCells: () => (/* binding */ pastedCells),\n/* harmony export */   addColSpan: () => (/* binding */ addColSpan),\n/* harmony export */   addColumn: () => (/* binding */ addColumn),\n/* harmony export */   addColumnAfter: () => (/* binding */ addColumnAfter),\n/* harmony export */   addColumnBefore: () => (/* binding */ addColumnBefore),\n/* harmony export */   addRow: () => (/* binding */ addRow),\n/* harmony export */   addRowAfter: () => (/* binding */ addRowAfter),\n/* harmony export */   addRowBefore: () => (/* binding */ addRowBefore),\n/* harmony export */   cellAround: () => (/* binding */ cellAround),\n/* harmony export */   cellNear: () => (/* binding */ cellNear),\n/* harmony export */   colCount: () => (/* binding */ colCount),\n/* harmony export */   columnIsHeader: () => (/* binding */ columnIsHeader),\n/* harmony export */   columnResizing: () => (/* binding */ columnResizing),\n/* harmony export */   columnResizingPluginKey: () => (/* binding */ columnResizingPluginKey),\n/* harmony export */   deleteCellSelection: () => (/* binding */ deleteCellSelection),\n/* harmony export */   deleteColumn: () => (/* binding */ deleteColumn),\n/* harmony export */   deleteRow: () => (/* binding */ deleteRow),\n/* harmony export */   deleteTable: () => (/* binding */ deleteTable),\n/* harmony export */   findCell: () => (/* binding */ findCell),\n/* harmony export */   fixTables: () => (/* binding */ fixTables),\n/* harmony export */   fixTablesKey: () => (/* binding */ fixTablesKey),\n/* harmony export */   goToNextCell: () => (/* binding */ goToNextCell),\n/* harmony export */   handlePaste: () => (/* binding */ handlePaste),\n/* harmony export */   inSameTable: () => (/* binding */ inSameTable),\n/* harmony export */   isInTable: () => (/* binding */ isInTable),\n/* harmony export */   mergeCells: () => (/* binding */ mergeCells),\n/* harmony export */   moveCellForward: () => (/* binding */ moveCellForward),\n/* harmony export */   nextCell: () => (/* binding */ nextCell),\n/* harmony export */   pointsAtCell: () => (/* binding */ pointsAtCell),\n/* harmony export */   removeColSpan: () => (/* binding */ removeColSpan),\n/* harmony export */   removeColumn: () => (/* binding */ removeColumn),\n/* harmony export */   removeRow: () => (/* binding */ removeRow),\n/* harmony export */   rowIsHeader: () => (/* binding */ rowIsHeader),\n/* harmony export */   selectedRect: () => (/* binding */ selectedRect),\n/* harmony export */   selectionCell: () => (/* binding */ selectionCell),\n/* harmony export */   setCellAttr: () => (/* binding */ setCellAttr),\n/* harmony export */   splitCell: () => (/* binding */ splitCell),\n/* harmony export */   splitCellWithType: () => (/* binding */ splitCellWithType),\n/* harmony export */   tableEditing: () => (/* binding */ tableEditing),\n/* harmony export */   tableEditingKey: () => (/* binding */ tableEditingKey),\n/* harmony export */   tableNodeTypes: () => (/* binding */ tableNodeTypes),\n/* harmony export */   tableNodes: () => (/* binding */ tableNodes),\n/* harmony export */   toggleHeader: () => (/* binding */ toggleHeader),\n/* harmony export */   toggleHeaderCell: () => (/* binding */ toggleHeaderCell),\n/* harmony export */   toggleHeaderColumn: () => (/* binding */ toggleHeaderColumn),\n/* harmony export */   toggleHeaderRow: () => (/* binding */ toggleHeaderRow),\n/* harmony export */   updateColumnsOnResize: () => (/* binding */ updateColumnsOnResize)\n/* harmony export */ });\n/* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-state */ \"(app-pages-browser)/./node_modules/prosemirror-state/dist/index.js\");\n/* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prosemirror-model */ \"(app-pages-browser)/./node_modules/prosemirror-model/dist/index.js\");\n/* harmony import */ var prosemirror_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prosemirror-view */ \"(app-pages-browser)/./node_modules/prosemirror-view/dist/index.js\");\n/* harmony import */ var prosemirror_keymap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! prosemirror-keymap */ \"(app-pages-browser)/./node_modules/prosemirror-keymap/dist/index.js\");\n/* harmony import */ var prosemirror_transform__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! prosemirror-transform */ \"(app-pages-browser)/./node_modules/prosemirror-transform/dist/index.js\");\n// src/index.ts\n\n\n// src/cellselection.ts\n\n\n\n\n// src/tablemap.ts\nvar readFromCache;\nvar addToCache;\nif (typeof WeakMap != \"undefined\") {\n  let cache = /* @__PURE__ */ new WeakMap();\n  readFromCache = (key) => cache.get(key);\n  addToCache = (key, value) => {\n    cache.set(key, value);\n    return value;\n  };\n} else {\n  const cache = [];\n  const cacheSize = 10;\n  let cachePos = 0;\n  readFromCache = (key) => {\n    for (let i = 0; i < cache.length; i += 2)\n      if (cache[i] == key) return cache[i + 1];\n  };\n  addToCache = (key, value) => {\n    if (cachePos == cacheSize) cachePos = 0;\n    cache[cachePos++] = key;\n    return cache[cachePos++] = value;\n  };\n}\nvar TableMap = class {\n  constructor(width, height, map, problems) {\n    this.width = width;\n    this.height = height;\n    this.map = map;\n    this.problems = problems;\n  }\n  // Find the dimensions of the cell at the given position.\n  findCell(pos) {\n    for (let i = 0; i < this.map.length; i++) {\n      const curPos = this.map[i];\n      if (curPos != pos) continue;\n      const left = i % this.width;\n      const top = i / this.width | 0;\n      let right = left + 1;\n      let bottom = top + 1;\n      for (let j = 1; right < this.width && this.map[i + j] == curPos; j++) {\n        right++;\n      }\n      for (let j = 1; bottom < this.height && this.map[i + this.width * j] == curPos; j++) {\n        bottom++;\n      }\n      return { left, top, right, bottom };\n    }\n    throw new RangeError(`No cell with offset ${pos} found`);\n  }\n  // Find the left side of the cell at the given position.\n  colCount(pos) {\n    for (let i = 0; i < this.map.length; i++) {\n      if (this.map[i] == pos) {\n        return i % this.width;\n      }\n    }\n    throw new RangeError(`No cell with offset ${pos} found`);\n  }\n  // Find the next cell in the given direction, starting from the cell\n  // at `pos`, if any.\n  nextCell(pos, axis, dir) {\n    const { left, right, top, bottom } = this.findCell(pos);\n    if (axis == \"horiz\") {\n      if (dir < 0 ? left == 0 : right == this.width) return null;\n      return this.map[top * this.width + (dir < 0 ? left - 1 : right)];\n    } else {\n      if (dir < 0 ? top == 0 : bottom == this.height) return null;\n      return this.map[left + this.width * (dir < 0 ? top - 1 : bottom)];\n    }\n  }\n  // Get the rectangle spanning the two given cells.\n  rectBetween(a, b) {\n    const {\n      left: leftA,\n      right: rightA,\n      top: topA,\n      bottom: bottomA\n    } = this.findCell(a);\n    const {\n      left: leftB,\n      right: rightB,\n      top: topB,\n      bottom: bottomB\n    } = this.findCell(b);\n    return {\n      left: Math.min(leftA, leftB),\n      top: Math.min(topA, topB),\n      right: Math.max(rightA, rightB),\n      bottom: Math.max(bottomA, bottomB)\n    };\n  }\n  // Return the position of all cells that have the top left corner in\n  // the given rectangle.\n  cellsInRect(rect) {\n    const result = [];\n    const seen = {};\n    for (let row = rect.top; row < rect.bottom; row++) {\n      for (let col = rect.left; col < rect.right; col++) {\n        const index = row * this.width + col;\n        const pos = this.map[index];\n        if (seen[pos]) continue;\n        seen[pos] = true;\n        if (col == rect.left && col && this.map[index - 1] == pos || row == rect.top && row && this.map[index - this.width] == pos) {\n          continue;\n        }\n        result.push(pos);\n      }\n    }\n    return result;\n  }\n  // Return the position at which the cell at the given row and column\n  // starts, or would start, if a cell started there.\n  positionAt(row, col, table) {\n    for (let i = 0, rowStart = 0; ; i++) {\n      const rowEnd = rowStart + table.child(i).nodeSize;\n      if (i == row) {\n        let index = col + row * this.width;\n        const rowEndIndex = (row + 1) * this.width;\n        while (index < rowEndIndex && this.map[index] < rowStart) index++;\n        return index == rowEndIndex ? rowEnd - 1 : this.map[index];\n      }\n      rowStart = rowEnd;\n    }\n  }\n  // Find the table map for the given table node.\n  static get(table) {\n    return readFromCache(table) || addToCache(table, computeMap(table));\n  }\n};\nfunction computeMap(table) {\n  if (table.type.spec.tableRole != \"table\")\n    throw new RangeError(\"Not a table node: \" + table.type.name);\n  const width = findWidth(table), height = table.childCount;\n  const map = [];\n  let mapPos = 0;\n  let problems = null;\n  const colWidths = [];\n  for (let i = 0, e = width * height; i < e; i++) map[i] = 0;\n  for (let row = 0, pos = 0; row < height; row++) {\n    const rowNode = table.child(row);\n    pos++;\n    for (let i = 0; ; i++) {\n      while (mapPos < map.length && map[mapPos] != 0) mapPos++;\n      if (i == rowNode.childCount) break;\n      const cellNode = rowNode.child(i);\n      const { colspan, rowspan, colwidth } = cellNode.attrs;\n      for (let h = 0; h < rowspan; h++) {\n        if (h + row >= height) {\n          (problems || (problems = [])).push({\n            type: \"overlong_rowspan\",\n            pos,\n            n: rowspan - h\n          });\n          break;\n        }\n        const start = mapPos + h * width;\n        for (let w = 0; w < colspan; w++) {\n          if (map[start + w] == 0) map[start + w] = pos;\n          else\n            (problems || (problems = [])).push({\n              type: \"collision\",\n              row,\n              pos,\n              n: colspan - w\n            });\n          const colW = colwidth && colwidth[w];\n          if (colW) {\n            const widthIndex = (start + w) % width * 2, prev = colWidths[widthIndex];\n            if (prev == null || prev != colW && colWidths[widthIndex + 1] == 1) {\n              colWidths[widthIndex] = colW;\n              colWidths[widthIndex + 1] = 1;\n            } else if (prev == colW) {\n              colWidths[widthIndex + 1]++;\n            }\n          }\n        }\n      }\n      mapPos += colspan;\n      pos += cellNode.nodeSize;\n    }\n    const expectedPos = (row + 1) * width;\n    let missing = 0;\n    while (mapPos < expectedPos) if (map[mapPos++] == 0) missing++;\n    if (missing)\n      (problems || (problems = [])).push({ type: \"missing\", row, n: missing });\n    pos++;\n  }\n  if (width === 0 || height === 0)\n    (problems || (problems = [])).push({ type: \"zero_sized\" });\n  const tableMap = new TableMap(width, height, map, problems);\n  let badWidths = false;\n  for (let i = 0; !badWidths && i < colWidths.length; i += 2)\n    if (colWidths[i] != null && colWidths[i + 1] < height) badWidths = true;\n  if (badWidths) findBadColWidths(tableMap, colWidths, table);\n  return tableMap;\n}\nfunction findWidth(table) {\n  let width = -1;\n  let hasRowSpan = false;\n  for (let row = 0; row < table.childCount; row++) {\n    const rowNode = table.child(row);\n    let rowWidth = 0;\n    if (hasRowSpan)\n      for (let j = 0; j < row; j++) {\n        const prevRow = table.child(j);\n        for (let i = 0; i < prevRow.childCount; i++) {\n          const cell = prevRow.child(i);\n          if (j + cell.attrs.rowspan > row) rowWidth += cell.attrs.colspan;\n        }\n      }\n    for (let i = 0; i < rowNode.childCount; i++) {\n      const cell = rowNode.child(i);\n      rowWidth += cell.attrs.colspan;\n      if (cell.attrs.rowspan > 1) hasRowSpan = true;\n    }\n    if (width == -1) width = rowWidth;\n    else if (width != rowWidth) width = Math.max(width, rowWidth);\n  }\n  return width;\n}\nfunction findBadColWidths(map, colWidths, table) {\n  if (!map.problems) map.problems = [];\n  const seen = {};\n  for (let i = 0; i < map.map.length; i++) {\n    const pos = map.map[i];\n    if (seen[pos]) continue;\n    seen[pos] = true;\n    const node = table.nodeAt(pos);\n    if (!node) {\n      throw new RangeError(`No cell with offset ${pos} found`);\n    }\n    let updated = null;\n    const attrs = node.attrs;\n    for (let j = 0; j < attrs.colspan; j++) {\n      const col = (i + j) % map.width;\n      const colWidth = colWidths[col * 2];\n      if (colWidth != null && (!attrs.colwidth || attrs.colwidth[j] != colWidth))\n        (updated || (updated = freshColWidth(attrs)))[j] = colWidth;\n    }\n    if (updated)\n      map.problems.unshift({\n        type: \"colwidth mismatch\",\n        pos,\n        colwidth: updated\n      });\n  }\n}\nfunction freshColWidth(attrs) {\n  if (attrs.colwidth) return attrs.colwidth.slice();\n  const result = [];\n  for (let i = 0; i < attrs.colspan; i++) result.push(0);\n  return result;\n}\n\n// src/util.ts\n\n\n// src/schema.ts\nfunction getCellAttrs(dom, extraAttrs) {\n  if (typeof dom === \"string\") {\n    return {};\n  }\n  const widthAttr = dom.getAttribute(\"data-colwidth\");\n  const widths = widthAttr && /^\\d+(,\\d+)*$/.test(widthAttr) ? widthAttr.split(\",\").map((s) => Number(s)) : null;\n  const colspan = Number(dom.getAttribute(\"colspan\") || 1);\n  const result = {\n    colspan,\n    rowspan: Number(dom.getAttribute(\"rowspan\") || 1),\n    colwidth: widths && widths.length == colspan ? widths : null\n  };\n  for (const prop in extraAttrs) {\n    const getter = extraAttrs[prop].getFromDOM;\n    const value = getter && getter(dom);\n    if (value != null) {\n      result[prop] = value;\n    }\n  }\n  return result;\n}\nfunction setCellAttrs(node, extraAttrs) {\n  const attrs = {};\n  if (node.attrs.colspan != 1) attrs.colspan = node.attrs.colspan;\n  if (node.attrs.rowspan != 1) attrs.rowspan = node.attrs.rowspan;\n  if (node.attrs.colwidth)\n    attrs[\"data-colwidth\"] = node.attrs.colwidth.join(\",\");\n  for (const prop in extraAttrs) {\n    const setter = extraAttrs[prop].setDOMAttr;\n    if (setter) setter(node.attrs[prop], attrs);\n  }\n  return attrs;\n}\nfunction tableNodes(options) {\n  const extraAttrs = options.cellAttributes || {};\n  const cellAttrs = {\n    colspan: { default: 1 },\n    rowspan: { default: 1 },\n    colwidth: { default: null }\n  };\n  for (const prop in extraAttrs)\n    cellAttrs[prop] = { default: extraAttrs[prop].default };\n  return {\n    table: {\n      content: \"table_row+\",\n      tableRole: \"table\",\n      isolating: true,\n      group: options.tableGroup,\n      parseDOM: [{ tag: \"table\" }],\n      toDOM() {\n        return [\"table\", [\"tbody\", 0]];\n      }\n    },\n    table_row: {\n      content: \"(table_cell | table_header)*\",\n      tableRole: \"row\",\n      parseDOM: [{ tag: \"tr\" }],\n      toDOM() {\n        return [\"tr\", 0];\n      }\n    },\n    table_cell: {\n      content: options.cellContent,\n      attrs: cellAttrs,\n      tableRole: \"cell\",\n      isolating: true,\n      parseDOM: [\n        { tag: \"td\", getAttrs: (dom) => getCellAttrs(dom, extraAttrs) }\n      ],\n      toDOM(node) {\n        return [\"td\", setCellAttrs(node, extraAttrs), 0];\n      }\n    },\n    table_header: {\n      content: options.cellContent,\n      attrs: cellAttrs,\n      tableRole: \"header_cell\",\n      isolating: true,\n      parseDOM: [\n        { tag: \"th\", getAttrs: (dom) => getCellAttrs(dom, extraAttrs) }\n      ],\n      toDOM(node) {\n        return [\"th\", setCellAttrs(node, extraAttrs), 0];\n      }\n    }\n  };\n}\nfunction tableNodeTypes(schema) {\n  let result = schema.cached.tableNodeTypes;\n  if (!result) {\n    result = schema.cached.tableNodeTypes = {};\n    for (const name in schema.nodes) {\n      const type = schema.nodes[name], role = type.spec.tableRole;\n      if (role) result[role] = type;\n    }\n  }\n  return result;\n}\n\n// src/util.ts\nvar tableEditingKey = new prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(\"selectingCells\");\nfunction cellAround($pos) {\n  for (let d = $pos.depth - 1; d > 0; d--)\n    if ($pos.node(d).type.spec.tableRole == \"row\")\n      return $pos.node(0).resolve($pos.before(d + 1));\n  return null;\n}\nfunction cellWrapping($pos) {\n  for (let d = $pos.depth; d > 0; d--) {\n    const role = $pos.node(d).type.spec.tableRole;\n    if (role === \"cell\" || role === \"header_cell\") return $pos.node(d);\n  }\n  return null;\n}\nfunction isInTable(state) {\n  const $head = state.selection.$head;\n  for (let d = $head.depth; d > 0; d--)\n    if ($head.node(d).type.spec.tableRole == \"row\") return true;\n  return false;\n}\nfunction selectionCell(state) {\n  const sel = state.selection;\n  if (\"$anchorCell\" in sel && sel.$anchorCell) {\n    return sel.$anchorCell.pos > sel.$headCell.pos ? sel.$anchorCell : sel.$headCell;\n  } else if (\"node\" in sel && sel.node && sel.node.type.spec.tableRole == \"cell\") {\n    return sel.$anchor;\n  }\n  const $cell = cellAround(sel.$head) || cellNear(sel.$head);\n  if ($cell) {\n    return $cell;\n  }\n  throw new RangeError(`No cell found around position ${sel.head}`);\n}\nfunction cellNear($pos) {\n  for (let after = $pos.nodeAfter, pos = $pos.pos; after; after = after.firstChild, pos++) {\n    const role = after.type.spec.tableRole;\n    if (role == \"cell\" || role == \"header_cell\") return $pos.doc.resolve(pos);\n  }\n  for (let before = $pos.nodeBefore, pos = $pos.pos; before; before = before.lastChild, pos--) {\n    const role = before.type.spec.tableRole;\n    if (role == \"cell\" || role == \"header_cell\")\n      return $pos.doc.resolve(pos - before.nodeSize);\n  }\n}\nfunction pointsAtCell($pos) {\n  return $pos.parent.type.spec.tableRole == \"row\" && !!$pos.nodeAfter;\n}\nfunction moveCellForward($pos) {\n  return $pos.node(0).resolve($pos.pos + $pos.nodeAfter.nodeSize);\n}\nfunction inSameTable($cellA, $cellB) {\n  return $cellA.depth == $cellB.depth && $cellA.pos >= $cellB.start(-1) && $cellA.pos <= $cellB.end(-1);\n}\nfunction findCell($pos) {\n  return TableMap.get($pos.node(-1)).findCell($pos.pos - $pos.start(-1));\n}\nfunction colCount($pos) {\n  return TableMap.get($pos.node(-1)).colCount($pos.pos - $pos.start(-1));\n}\nfunction nextCell($pos, axis, dir) {\n  const table = $pos.node(-1);\n  const map = TableMap.get(table);\n  const tableStart = $pos.start(-1);\n  const moved = map.nextCell($pos.pos - tableStart, axis, dir);\n  return moved == null ? null : $pos.node(0).resolve(tableStart + moved);\n}\nfunction removeColSpan(attrs, pos, n = 1) {\n  const result = { ...attrs, colspan: attrs.colspan - n };\n  if (result.colwidth) {\n    result.colwidth = result.colwidth.slice();\n    result.colwidth.splice(pos, n);\n    if (!result.colwidth.some((w) => w > 0)) result.colwidth = null;\n  }\n  return result;\n}\nfunction addColSpan(attrs, pos, n = 1) {\n  const result = { ...attrs, colspan: attrs.colspan + n };\n  if (result.colwidth) {\n    result.colwidth = result.colwidth.slice();\n    for (let i = 0; i < n; i++) result.colwidth.splice(pos, 0, 0);\n  }\n  return result;\n}\nfunction columnIsHeader(map, table, col) {\n  const headerCell = tableNodeTypes(table.type.schema).header_cell;\n  for (let row = 0; row < map.height; row++)\n    if (table.nodeAt(map.map[col + row * map.width]).type != headerCell)\n      return false;\n  return true;\n}\n\n// src/cellselection.ts\nvar CellSelection = class _CellSelection extends prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection {\n  // A table selection is identified by its anchor and head cells. The\n  // positions given to this constructor should point _before_ two\n  // cells in the same table. They may be the same, to select a single\n  // cell.\n  constructor($anchorCell, $headCell = $anchorCell) {\n    const table = $anchorCell.node(-1);\n    const map = TableMap.get(table);\n    const tableStart = $anchorCell.start(-1);\n    const rect = map.rectBetween(\n      $anchorCell.pos - tableStart,\n      $headCell.pos - tableStart\n    );\n    const doc = $anchorCell.node(0);\n    const cells = map.cellsInRect(rect).filter((p) => p != $headCell.pos - tableStart);\n    cells.unshift($headCell.pos - tableStart);\n    const ranges = cells.map((pos) => {\n      const cell = table.nodeAt(pos);\n      if (!cell) {\n        throw RangeError(`No cell with offset ${pos} found`);\n      }\n      const from = tableStart + pos + 1;\n      return new prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.SelectionRange(\n        doc.resolve(from),\n        doc.resolve(from + cell.content.size)\n      );\n    });\n    super(ranges[0].$from, ranges[0].$to, ranges);\n    this.$anchorCell = $anchorCell;\n    this.$headCell = $headCell;\n  }\n  map(doc, mapping) {\n    const $anchorCell = doc.resolve(mapping.map(this.$anchorCell.pos));\n    const $headCell = doc.resolve(mapping.map(this.$headCell.pos));\n    if (pointsAtCell($anchorCell) && pointsAtCell($headCell) && inSameTable($anchorCell, $headCell)) {\n      const tableChanged = this.$anchorCell.node(-1) != $anchorCell.node(-1);\n      if (tableChanged && this.isRowSelection())\n        return _CellSelection.rowSelection($anchorCell, $headCell);\n      else if (tableChanged && this.isColSelection())\n        return _CellSelection.colSelection($anchorCell, $headCell);\n      else return new _CellSelection($anchorCell, $headCell);\n    }\n    return prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.between($anchorCell, $headCell);\n  }\n  // Returns a rectangular slice of table rows containing the selected\n  // cells.\n  content() {\n    const table = this.$anchorCell.node(-1);\n    const map = TableMap.get(table);\n    const tableStart = this.$anchorCell.start(-1);\n    const rect = map.rectBetween(\n      this.$anchorCell.pos - tableStart,\n      this.$headCell.pos - tableStart\n    );\n    const seen = {};\n    const rows = [];\n    for (let row = rect.top; row < rect.bottom; row++) {\n      const rowContent = [];\n      for (let index = row * map.width + rect.left, col = rect.left; col < rect.right; col++, index++) {\n        const pos = map.map[index];\n        if (seen[pos]) continue;\n        seen[pos] = true;\n        const cellRect = map.findCell(pos);\n        let cell = table.nodeAt(pos);\n        if (!cell) {\n          throw RangeError(`No cell with offset ${pos} found`);\n        }\n        const extraLeft = rect.left - cellRect.left;\n        const extraRight = cellRect.right - rect.right;\n        if (extraLeft > 0 || extraRight > 0) {\n          let attrs = cell.attrs;\n          if (extraLeft > 0) {\n            attrs = removeColSpan(attrs, 0, extraLeft);\n          }\n          if (extraRight > 0) {\n            attrs = removeColSpan(\n              attrs,\n              attrs.colspan - extraRight,\n              extraRight\n            );\n          }\n          if (cellRect.left < rect.left) {\n            cell = cell.type.createAndFill(attrs);\n            if (!cell) {\n              throw RangeError(\n                `Could not create cell with attrs ${JSON.stringify(attrs)}`\n              );\n            }\n          } else {\n            cell = cell.type.create(attrs, cell.content);\n          }\n        }\n        if (cellRect.top < rect.top || cellRect.bottom > rect.bottom) {\n          const attrs = {\n            ...cell.attrs,\n            rowspan: Math.min(cellRect.bottom, rect.bottom) - Math.max(cellRect.top, rect.top)\n          };\n          if (cellRect.top < rect.top) {\n            cell = cell.type.createAndFill(attrs);\n          } else {\n            cell = cell.type.create(attrs, cell.content);\n          }\n        }\n        rowContent.push(cell);\n      }\n      rows.push(table.child(row).copy(prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.from(rowContent)));\n    }\n    const fragment = this.isColSelection() && this.isRowSelection() ? table : rows;\n    return new prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.from(fragment), 1, 1);\n  }\n  replace(tr, content = prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Slice.empty) {\n    const mapFrom = tr.steps.length, ranges = this.ranges;\n    for (let i = 0; i < ranges.length; i++) {\n      const { $from, $to } = ranges[i], mapping = tr.mapping.slice(mapFrom);\n      tr.replace(\n        mapping.map($from.pos),\n        mapping.map($to.pos),\n        i ? prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Slice.empty : content\n      );\n    }\n    const sel = prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection.findFrom(\n      tr.doc.resolve(tr.mapping.slice(mapFrom).map(this.to)),\n      -1\n    );\n    if (sel) tr.setSelection(sel);\n  }\n  replaceWith(tr, node) {\n    this.replace(tr, new prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.from(node), 0, 0));\n  }\n  forEachCell(f) {\n    const table = this.$anchorCell.node(-1);\n    const map = TableMap.get(table);\n    const tableStart = this.$anchorCell.start(-1);\n    const cells = map.cellsInRect(\n      map.rectBetween(\n        this.$anchorCell.pos - tableStart,\n        this.$headCell.pos - tableStart\n      )\n    );\n    for (let i = 0; i < cells.length; i++) {\n      f(table.nodeAt(cells[i]), tableStart + cells[i]);\n    }\n  }\n  // True if this selection goes all the way from the top to the\n  // bottom of the table.\n  isColSelection() {\n    const anchorTop = this.$anchorCell.index(-1);\n    const headTop = this.$headCell.index(-1);\n    if (Math.min(anchorTop, headTop) > 0) return false;\n    const anchorBottom = anchorTop + this.$anchorCell.nodeAfter.attrs.rowspan;\n    const headBottom = headTop + this.$headCell.nodeAfter.attrs.rowspan;\n    return Math.max(anchorBottom, headBottom) == this.$headCell.node(-1).childCount;\n  }\n  // Returns the smallest column selection that covers the given anchor\n  // and head cell.\n  static colSelection($anchorCell, $headCell = $anchorCell) {\n    const table = $anchorCell.node(-1);\n    const map = TableMap.get(table);\n    const tableStart = $anchorCell.start(-1);\n    const anchorRect = map.findCell($anchorCell.pos - tableStart);\n    const headRect = map.findCell($headCell.pos - tableStart);\n    const doc = $anchorCell.node(0);\n    if (anchorRect.top <= headRect.top) {\n      if (anchorRect.top > 0)\n        $anchorCell = doc.resolve(tableStart + map.map[anchorRect.left]);\n      if (headRect.bottom < map.height)\n        $headCell = doc.resolve(\n          tableStart + map.map[map.width * (map.height - 1) + headRect.right - 1]\n        );\n    } else {\n      if (headRect.top > 0)\n        $headCell = doc.resolve(tableStart + map.map[headRect.left]);\n      if (anchorRect.bottom < map.height)\n        $anchorCell = doc.resolve(\n          tableStart + map.map[map.width * (map.height - 1) + anchorRect.right - 1]\n        );\n    }\n    return new _CellSelection($anchorCell, $headCell);\n  }\n  // True if this selection goes all the way from the left to the\n  // right of the table.\n  isRowSelection() {\n    const table = this.$anchorCell.node(-1);\n    const map = TableMap.get(table);\n    const tableStart = this.$anchorCell.start(-1);\n    const anchorLeft = map.colCount(this.$anchorCell.pos - tableStart);\n    const headLeft = map.colCount(this.$headCell.pos - tableStart);\n    if (Math.min(anchorLeft, headLeft) > 0) return false;\n    const anchorRight = anchorLeft + this.$anchorCell.nodeAfter.attrs.colspan;\n    const headRight = headLeft + this.$headCell.nodeAfter.attrs.colspan;\n    return Math.max(anchorRight, headRight) == map.width;\n  }\n  eq(other) {\n    return other instanceof _CellSelection && other.$anchorCell.pos == this.$anchorCell.pos && other.$headCell.pos == this.$headCell.pos;\n  }\n  // Returns the smallest row selection that covers the given anchor\n  // and head cell.\n  static rowSelection($anchorCell, $headCell = $anchorCell) {\n    const table = $anchorCell.node(-1);\n    const map = TableMap.get(table);\n    const tableStart = $anchorCell.start(-1);\n    const anchorRect = map.findCell($anchorCell.pos - tableStart);\n    const headRect = map.findCell($headCell.pos - tableStart);\n    const doc = $anchorCell.node(0);\n    if (anchorRect.left <= headRect.left) {\n      if (anchorRect.left > 0)\n        $anchorCell = doc.resolve(\n          tableStart + map.map[anchorRect.top * map.width]\n        );\n      if (headRect.right < map.width)\n        $headCell = doc.resolve(\n          tableStart + map.map[map.width * (headRect.top + 1) - 1]\n        );\n    } else {\n      if (headRect.left > 0)\n        $headCell = doc.resolve(tableStart + map.map[headRect.top * map.width]);\n      if (anchorRect.right < map.width)\n        $anchorCell = doc.resolve(\n          tableStart + map.map[map.width * (anchorRect.top + 1) - 1]\n        );\n    }\n    return new _CellSelection($anchorCell, $headCell);\n  }\n  toJSON() {\n    return {\n      type: \"cell\",\n      anchor: this.$anchorCell.pos,\n      head: this.$headCell.pos\n    };\n  }\n  static fromJSON(doc, json) {\n    return new _CellSelection(doc.resolve(json.anchor), doc.resolve(json.head));\n  }\n  static create(doc, anchorCell, headCell = anchorCell) {\n    return new _CellSelection(doc.resolve(anchorCell), doc.resolve(headCell));\n  }\n  getBookmark() {\n    return new CellBookmark(this.$anchorCell.pos, this.$headCell.pos);\n  }\n};\nCellSelection.prototype.visible = false;\nprosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection.jsonID(\"cell\", CellSelection);\nvar CellBookmark = class _CellBookmark {\n  constructor(anchor, head) {\n    this.anchor = anchor;\n    this.head = head;\n  }\n  map(mapping) {\n    return new _CellBookmark(mapping.map(this.anchor), mapping.map(this.head));\n  }\n  resolve(doc) {\n    const $anchorCell = doc.resolve(this.anchor), $headCell = doc.resolve(this.head);\n    if ($anchorCell.parent.type.spec.tableRole == \"row\" && $headCell.parent.type.spec.tableRole == \"row\" && $anchorCell.index() < $anchorCell.parent.childCount && $headCell.index() < $headCell.parent.childCount && inSameTable($anchorCell, $headCell))\n      return new CellSelection($anchorCell, $headCell);\n    else return prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection.near($headCell, 1);\n  }\n};\nfunction drawCellSelection(state) {\n  if (!(state.selection instanceof CellSelection)) return null;\n  const cells = [];\n  state.selection.forEachCell((node, pos) => {\n    cells.push(\n      prosemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.node(pos, pos + node.nodeSize, { class: \"selectedCell\" })\n    );\n  });\n  return prosemirror_view__WEBPACK_IMPORTED_MODULE_2__.DecorationSet.create(state.doc, cells);\n}\nfunction isCellBoundarySelection({ $from, $to }) {\n  if ($from.pos == $to.pos || $from.pos < $to.pos - 6) return false;\n  let afterFrom = $from.pos;\n  let beforeTo = $to.pos;\n  let depth = $from.depth;\n  for (; depth >= 0; depth--, afterFrom++)\n    if ($from.after(depth + 1) < $from.end(depth)) break;\n  for (let d = $to.depth; d >= 0; d--, beforeTo--)\n    if ($to.before(d + 1) > $to.start(d)) break;\n  return afterFrom == beforeTo && /row|table/.test($from.node(depth).type.spec.tableRole);\n}\nfunction isTextSelectionAcrossCells({ $from, $to }) {\n  let fromCellBoundaryNode;\n  let toCellBoundaryNode;\n  for (let i = $from.depth; i > 0; i--) {\n    const node = $from.node(i);\n    if (node.type.spec.tableRole === \"cell\" || node.type.spec.tableRole === \"header_cell\") {\n      fromCellBoundaryNode = node;\n      break;\n    }\n  }\n  for (let i = $to.depth; i > 0; i--) {\n    const node = $to.node(i);\n    if (node.type.spec.tableRole === \"cell\" || node.type.spec.tableRole === \"header_cell\") {\n      toCellBoundaryNode = node;\n      break;\n    }\n  }\n  return fromCellBoundaryNode !== toCellBoundaryNode && $to.parentOffset === 0;\n}\nfunction normalizeSelection(state, tr, allowTableNodeSelection) {\n  const sel = (tr || state).selection;\n  const doc = (tr || state).doc;\n  let normalize;\n  let role;\n  if (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection && (role = sel.node.type.spec.tableRole)) {\n    if (role == \"cell\" || role == \"header_cell\") {\n      normalize = CellSelection.create(doc, sel.from);\n    } else if (role == \"row\") {\n      const $cell = doc.resolve(sel.from + 1);\n      normalize = CellSelection.rowSelection($cell, $cell);\n    } else if (!allowTableNodeSelection) {\n      const map = TableMap.get(sel.node);\n      const start = sel.from + 1;\n      const lastCell = start + map.map[map.width * map.height - 1];\n      normalize = CellSelection.create(doc, start + 1, lastCell);\n    }\n  } else if (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection && isCellBoundarySelection(sel)) {\n    normalize = prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(doc, sel.from);\n  } else if (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection && isTextSelectionAcrossCells(sel)) {\n    normalize = prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(doc, sel.$from.start(), sel.$from.end());\n  }\n  if (normalize) (tr || (tr = state.tr)).setSelection(normalize);\n  return tr;\n}\n\n// src/fixtables.ts\n\nvar fixTablesKey = new prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(\"fix-tables\");\nfunction changedDescendants(old, cur, offset, f) {\n  const oldSize = old.childCount, curSize = cur.childCount;\n  outer: for (let i = 0, j = 0; i < curSize; i++) {\n    const child = cur.child(i);\n    for (let scan = j, e = Math.min(oldSize, i + 3); scan < e; scan++) {\n      if (old.child(scan) == child) {\n        j = scan + 1;\n        offset += child.nodeSize;\n        continue outer;\n      }\n    }\n    f(child, offset);\n    if (j < oldSize && old.child(j).sameMarkup(child))\n      changedDescendants(old.child(j), child, offset + 1, f);\n    else child.nodesBetween(0, child.content.size, f, offset + 1);\n    offset += child.nodeSize;\n  }\n}\nfunction fixTables(state, oldState) {\n  let tr;\n  const check = (node, pos) => {\n    if (node.type.spec.tableRole == \"table\")\n      tr = fixTable(state, node, pos, tr);\n  };\n  if (!oldState) state.doc.descendants(check);\n  else if (oldState.doc != state.doc)\n    changedDescendants(oldState.doc, state.doc, 0, check);\n  return tr;\n}\nfunction fixTable(state, table, tablePos, tr) {\n  const map = TableMap.get(table);\n  if (!map.problems) return tr;\n  if (!tr) tr = state.tr;\n  const mustAdd = [];\n  for (let i = 0; i < map.height; i++) mustAdd.push(0);\n  for (let i = 0; i < map.problems.length; i++) {\n    const prob = map.problems[i];\n    if (prob.type == \"collision\") {\n      const cell = table.nodeAt(prob.pos);\n      if (!cell) continue;\n      const attrs = cell.attrs;\n      for (let j = 0; j < attrs.rowspan; j++) mustAdd[prob.row + j] += prob.n;\n      tr.setNodeMarkup(\n        tr.mapping.map(tablePos + 1 + prob.pos),\n        null,\n        removeColSpan(attrs, attrs.colspan - prob.n, prob.n)\n      );\n    } else if (prob.type == \"missing\") {\n      mustAdd[prob.row] += prob.n;\n    } else if (prob.type == \"overlong_rowspan\") {\n      const cell = table.nodeAt(prob.pos);\n      if (!cell) continue;\n      tr.setNodeMarkup(tr.mapping.map(tablePos + 1 + prob.pos), null, {\n        ...cell.attrs,\n        rowspan: cell.attrs.rowspan - prob.n\n      });\n    } else if (prob.type == \"colwidth mismatch\") {\n      const cell = table.nodeAt(prob.pos);\n      if (!cell) continue;\n      tr.setNodeMarkup(tr.mapping.map(tablePos + 1 + prob.pos), null, {\n        ...cell.attrs,\n        colwidth: prob.colwidth\n      });\n    } else if (prob.type == \"zero_sized\") {\n      const pos = tr.mapping.map(tablePos);\n      tr.delete(pos, pos + table.nodeSize);\n    }\n  }\n  let first, last;\n  for (let i = 0; i < mustAdd.length; i++)\n    if (mustAdd[i]) {\n      if (first == null) first = i;\n      last = i;\n    }\n  for (let i = 0, pos = tablePos + 1; i < map.height; i++) {\n    const row = table.child(i);\n    const end = pos + row.nodeSize;\n    const add = mustAdd[i];\n    if (add > 0) {\n      let role = \"cell\";\n      if (row.firstChild) {\n        role = row.firstChild.type.spec.tableRole;\n      }\n      const nodes = [];\n      for (let j = 0; j < add; j++) {\n        const node = tableNodeTypes(state.schema)[role].createAndFill();\n        if (node) nodes.push(node);\n      }\n      const side = (i == 0 || first == i - 1) && last == i ? pos + 1 : end - 1;\n      tr.insert(tr.mapping.map(side), nodes);\n    }\n    pos = end;\n  }\n  return tr.setMeta(fixTablesKey, { fixTables: true });\n}\n\n// src/input.ts\n\n\n\n\n// src/commands.ts\n\n\nfunction selectedRect(state) {\n  const sel = state.selection;\n  const $pos = selectionCell(state);\n  const table = $pos.node(-1);\n  const tableStart = $pos.start(-1);\n  const map = TableMap.get(table);\n  const rect = sel instanceof CellSelection ? map.rectBetween(\n    sel.$anchorCell.pos - tableStart,\n    sel.$headCell.pos - tableStart\n  ) : map.findCell($pos.pos - tableStart);\n  return { ...rect, tableStart, map, table };\n}\nfunction addColumn(tr, { map, tableStart, table }, col) {\n  let refColumn = col > 0 ? -1 : 0;\n  if (columnIsHeader(map, table, col + refColumn)) {\n    refColumn = col == 0 || col == map.width ? null : 0;\n  }\n  for (let row = 0; row < map.height; row++) {\n    const index = row * map.width + col;\n    if (col > 0 && col < map.width && map.map[index - 1] == map.map[index]) {\n      const pos = map.map[index];\n      const cell = table.nodeAt(pos);\n      tr.setNodeMarkup(\n        tr.mapping.map(tableStart + pos),\n        null,\n        addColSpan(cell.attrs, col - map.colCount(pos))\n      );\n      row += cell.attrs.rowspan - 1;\n    } else {\n      const type = refColumn == null ? tableNodeTypes(table.type.schema).cell : table.nodeAt(map.map[index + refColumn]).type;\n      const pos = map.positionAt(row, col, table);\n      tr.insert(tr.mapping.map(tableStart + pos), type.createAndFill());\n    }\n  }\n  return tr;\n}\nfunction addColumnBefore(state, dispatch) {\n  if (!isInTable(state)) return false;\n  if (dispatch) {\n    const rect = selectedRect(state);\n    dispatch(addColumn(state.tr, rect, rect.left));\n  }\n  return true;\n}\nfunction addColumnAfter(state, dispatch) {\n  if (!isInTable(state)) return false;\n  if (dispatch) {\n    const rect = selectedRect(state);\n    dispatch(addColumn(state.tr, rect, rect.right));\n  }\n  return true;\n}\nfunction removeColumn(tr, { map, table, tableStart }, col) {\n  const mapStart = tr.mapping.maps.length;\n  for (let row = 0; row < map.height; ) {\n    const index = row * map.width + col;\n    const pos = map.map[index];\n    const cell = table.nodeAt(pos);\n    const attrs = cell.attrs;\n    if (col > 0 && map.map[index - 1] == pos || col < map.width - 1 && map.map[index + 1] == pos) {\n      tr.setNodeMarkup(\n        tr.mapping.slice(mapStart).map(tableStart + pos),\n        null,\n        removeColSpan(attrs, col - map.colCount(pos))\n      );\n    } else {\n      const start = tr.mapping.slice(mapStart).map(tableStart + pos);\n      tr.delete(start, start + cell.nodeSize);\n    }\n    row += attrs.rowspan;\n  }\n}\nfunction deleteColumn(state, dispatch) {\n  if (!isInTable(state)) return false;\n  if (dispatch) {\n    const rect = selectedRect(state);\n    const tr = state.tr;\n    if (rect.left == 0 && rect.right == rect.map.width) return false;\n    for (let i = rect.right - 1; ; i--) {\n      removeColumn(tr, rect, i);\n      if (i == rect.left) break;\n      const table = rect.tableStart ? tr.doc.nodeAt(rect.tableStart - 1) : tr.doc;\n      if (!table) {\n        throw RangeError(\"No table found\");\n      }\n      rect.table = table;\n      rect.map = TableMap.get(table);\n    }\n    dispatch(tr);\n  }\n  return true;\n}\nfunction rowIsHeader(map, table, row) {\n  var _a;\n  const headerCell = tableNodeTypes(table.type.schema).header_cell;\n  for (let col = 0; col < map.width; col++)\n    if (((_a = table.nodeAt(map.map[col + row * map.width])) == null ? void 0 : _a.type) != headerCell)\n      return false;\n  return true;\n}\nfunction addRow(tr, { map, tableStart, table }, row) {\n  var _a;\n  let rowPos = tableStart;\n  for (let i = 0; i < row; i++) rowPos += table.child(i).nodeSize;\n  const cells = [];\n  let refRow = row > 0 ? -1 : 0;\n  if (rowIsHeader(map, table, row + refRow))\n    refRow = row == 0 || row == map.height ? null : 0;\n  for (let col = 0, index = map.width * row; col < map.width; col++, index++) {\n    if (row > 0 && row < map.height && map.map[index] == map.map[index - map.width]) {\n      const pos = map.map[index];\n      const attrs = table.nodeAt(pos).attrs;\n      tr.setNodeMarkup(tableStart + pos, null, {\n        ...attrs,\n        rowspan: attrs.rowspan + 1\n      });\n      col += attrs.colspan - 1;\n    } else {\n      const type = refRow == null ? tableNodeTypes(table.type.schema).cell : (_a = table.nodeAt(map.map[index + refRow * map.width])) == null ? void 0 : _a.type;\n      const node = type == null ? void 0 : type.createAndFill();\n      if (node) cells.push(node);\n    }\n  }\n  tr.insert(rowPos, tableNodeTypes(table.type.schema).row.create(null, cells));\n  return tr;\n}\nfunction addRowBefore(state, dispatch) {\n  if (!isInTable(state)) return false;\n  if (dispatch) {\n    const rect = selectedRect(state);\n    dispatch(addRow(state.tr, rect, rect.top));\n  }\n  return true;\n}\nfunction addRowAfter(state, dispatch) {\n  if (!isInTable(state)) return false;\n  if (dispatch) {\n    const rect = selectedRect(state);\n    dispatch(addRow(state.tr, rect, rect.bottom));\n  }\n  return true;\n}\nfunction removeRow(tr, { map, table, tableStart }, row) {\n  let rowPos = 0;\n  for (let i = 0; i < row; i++) rowPos += table.child(i).nodeSize;\n  const nextRow = rowPos + table.child(row).nodeSize;\n  const mapFrom = tr.mapping.maps.length;\n  tr.delete(rowPos + tableStart, nextRow + tableStart);\n  const seen = /* @__PURE__ */ new Set();\n  for (let col = 0, index = row * map.width; col < map.width; col++, index++) {\n    const pos = map.map[index];\n    if (seen.has(pos)) continue;\n    seen.add(pos);\n    if (row > 0 && pos == map.map[index - map.width]) {\n      const attrs = table.nodeAt(pos).attrs;\n      tr.setNodeMarkup(tr.mapping.slice(mapFrom).map(pos + tableStart), null, {\n        ...attrs,\n        rowspan: attrs.rowspan - 1\n      });\n      col += attrs.colspan - 1;\n    } else if (row < map.height && pos == map.map[index + map.width]) {\n      const cell = table.nodeAt(pos);\n      const attrs = cell.attrs;\n      const copy = cell.type.create(\n        { ...attrs, rowspan: cell.attrs.rowspan - 1 },\n        cell.content\n      );\n      const newPos = map.positionAt(row + 1, col, table);\n      tr.insert(tr.mapping.slice(mapFrom).map(tableStart + newPos), copy);\n      col += attrs.colspan - 1;\n    }\n  }\n}\nfunction deleteRow(state, dispatch) {\n  if (!isInTable(state)) return false;\n  if (dispatch) {\n    const rect = selectedRect(state), tr = state.tr;\n    if (rect.top == 0 && rect.bottom == rect.map.height) return false;\n    for (let i = rect.bottom - 1; ; i--) {\n      removeRow(tr, rect, i);\n      if (i == rect.top) break;\n      const table = rect.tableStart ? tr.doc.nodeAt(rect.tableStart - 1) : tr.doc;\n      if (!table) {\n        throw RangeError(\"No table found\");\n      }\n      rect.table = table;\n      rect.map = TableMap.get(rect.table);\n    }\n    dispatch(tr);\n  }\n  return true;\n}\nfunction isEmpty(cell) {\n  const c = cell.content;\n  return c.childCount == 1 && c.child(0).isTextblock && c.child(0).childCount == 0;\n}\nfunction cellsOverlapRectangle({ width, height, map }, rect) {\n  let indexTop = rect.top * width + rect.left, indexLeft = indexTop;\n  let indexBottom = (rect.bottom - 1) * width + rect.left, indexRight = indexTop + (rect.right - rect.left - 1);\n  for (let i = rect.top; i < rect.bottom; i++) {\n    if (rect.left > 0 && map[indexLeft] == map[indexLeft - 1] || rect.right < width && map[indexRight] == map[indexRight + 1])\n      return true;\n    indexLeft += width;\n    indexRight += width;\n  }\n  for (let i = rect.left; i < rect.right; i++) {\n    if (rect.top > 0 && map[indexTop] == map[indexTop - width] || rect.bottom < height && map[indexBottom] == map[indexBottom + width])\n      return true;\n    indexTop++;\n    indexBottom++;\n  }\n  return false;\n}\nfunction mergeCells(state, dispatch) {\n  const sel = state.selection;\n  if (!(sel instanceof CellSelection) || sel.$anchorCell.pos == sel.$headCell.pos)\n    return false;\n  const rect = selectedRect(state), { map } = rect;\n  if (cellsOverlapRectangle(map, rect)) return false;\n  if (dispatch) {\n    const tr = state.tr;\n    const seen = {};\n    let content = prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.empty;\n    let mergedPos;\n    let mergedCell;\n    for (let row = rect.top; row < rect.bottom; row++) {\n      for (let col = rect.left; col < rect.right; col++) {\n        const cellPos = map.map[row * map.width + col];\n        const cell = rect.table.nodeAt(cellPos);\n        if (seen[cellPos] || !cell) continue;\n        seen[cellPos] = true;\n        if (mergedPos == null) {\n          mergedPos = cellPos;\n          mergedCell = cell;\n        } else {\n          if (!isEmpty(cell)) content = content.append(cell.content);\n          const mapped = tr.mapping.map(cellPos + rect.tableStart);\n          tr.delete(mapped, mapped + cell.nodeSize);\n        }\n      }\n    }\n    if (mergedPos == null || mergedCell == null) {\n      return true;\n    }\n    tr.setNodeMarkup(mergedPos + rect.tableStart, null, {\n      ...addColSpan(\n        mergedCell.attrs,\n        mergedCell.attrs.colspan,\n        rect.right - rect.left - mergedCell.attrs.colspan\n      ),\n      rowspan: rect.bottom - rect.top\n    });\n    if (content.size) {\n      const end = mergedPos + 1 + mergedCell.content.size;\n      const start = isEmpty(mergedCell) ? mergedPos + 1 : end;\n      tr.replaceWith(start + rect.tableStart, end + rect.tableStart, content);\n    }\n    tr.setSelection(\n      new CellSelection(tr.doc.resolve(mergedPos + rect.tableStart))\n    );\n    dispatch(tr);\n  }\n  return true;\n}\nfunction splitCell(state, dispatch) {\n  const nodeTypes = tableNodeTypes(state.schema);\n  return splitCellWithType(({ node }) => {\n    return nodeTypes[node.type.spec.tableRole];\n  })(state, dispatch);\n}\nfunction splitCellWithType(getCellType) {\n  return (state, dispatch) => {\n    var _a;\n    const sel = state.selection;\n    let cellNode;\n    let cellPos;\n    if (!(sel instanceof CellSelection)) {\n      cellNode = cellWrapping(sel.$from);\n      if (!cellNode) return false;\n      cellPos = (_a = cellAround(sel.$from)) == null ? void 0 : _a.pos;\n    } else {\n      if (sel.$anchorCell.pos != sel.$headCell.pos) return false;\n      cellNode = sel.$anchorCell.nodeAfter;\n      cellPos = sel.$anchorCell.pos;\n    }\n    if (cellNode == null || cellPos == null) {\n      return false;\n    }\n    if (cellNode.attrs.colspan == 1 && cellNode.attrs.rowspan == 1) {\n      return false;\n    }\n    if (dispatch) {\n      let baseAttrs = cellNode.attrs;\n      const attrs = [];\n      const colwidth = baseAttrs.colwidth;\n      if (baseAttrs.rowspan > 1) baseAttrs = { ...baseAttrs, rowspan: 1 };\n      if (baseAttrs.colspan > 1) baseAttrs = { ...baseAttrs, colspan: 1 };\n      const rect = selectedRect(state), tr = state.tr;\n      for (let i = 0; i < rect.right - rect.left; i++)\n        attrs.push(\n          colwidth ? {\n            ...baseAttrs,\n            colwidth: colwidth && colwidth[i] ? [colwidth[i]] : null\n          } : baseAttrs\n        );\n      let lastCell;\n      for (let row = rect.top; row < rect.bottom; row++) {\n        let pos = rect.map.positionAt(row, rect.left, rect.table);\n        if (row == rect.top) pos += cellNode.nodeSize;\n        for (let col = rect.left, i = 0; col < rect.right; col++, i++) {\n          if (col == rect.left && row == rect.top) continue;\n          tr.insert(\n            lastCell = tr.mapping.map(pos + rect.tableStart, 1),\n            getCellType({ node: cellNode, row, col }).createAndFill(attrs[i])\n          );\n        }\n      }\n      tr.setNodeMarkup(\n        cellPos,\n        getCellType({ node: cellNode, row: rect.top, col: rect.left }),\n        attrs[0]\n      );\n      if (sel instanceof CellSelection)\n        tr.setSelection(\n          new CellSelection(\n            tr.doc.resolve(sel.$anchorCell.pos),\n            lastCell ? tr.doc.resolve(lastCell) : void 0\n          )\n        );\n      dispatch(tr);\n    }\n    return true;\n  };\n}\nfunction setCellAttr(name, value) {\n  return function(state, dispatch) {\n    if (!isInTable(state)) return false;\n    const $cell = selectionCell(state);\n    if ($cell.nodeAfter.attrs[name] === value) return false;\n    if (dispatch) {\n      const tr = state.tr;\n      if (state.selection instanceof CellSelection)\n        state.selection.forEachCell((node, pos) => {\n          if (node.attrs[name] !== value)\n            tr.setNodeMarkup(pos, null, {\n              ...node.attrs,\n              [name]: value\n            });\n        });\n      else\n        tr.setNodeMarkup($cell.pos, null, {\n          ...$cell.nodeAfter.attrs,\n          [name]: value\n        });\n      dispatch(tr);\n    }\n    return true;\n  };\n}\nfunction deprecated_toggleHeader(type) {\n  return function(state, dispatch) {\n    if (!isInTable(state)) return false;\n    if (dispatch) {\n      const types = tableNodeTypes(state.schema);\n      const rect = selectedRect(state), tr = state.tr;\n      const cells = rect.map.cellsInRect(\n        type == \"column\" ? {\n          left: rect.left,\n          top: 0,\n          right: rect.right,\n          bottom: rect.map.height\n        } : type == \"row\" ? {\n          left: 0,\n          top: rect.top,\n          right: rect.map.width,\n          bottom: rect.bottom\n        } : rect\n      );\n      const nodes = cells.map((pos) => rect.table.nodeAt(pos));\n      for (let i = 0; i < cells.length; i++)\n        if (nodes[i].type == types.header_cell)\n          tr.setNodeMarkup(\n            rect.tableStart + cells[i],\n            types.cell,\n            nodes[i].attrs\n          );\n      if (tr.steps.length == 0)\n        for (let i = 0; i < cells.length; i++)\n          tr.setNodeMarkup(\n            rect.tableStart + cells[i],\n            types.header_cell,\n            nodes[i].attrs\n          );\n      dispatch(tr);\n    }\n    return true;\n  };\n}\nfunction isHeaderEnabledByType(type, rect, types) {\n  const cellPositions = rect.map.cellsInRect({\n    left: 0,\n    top: 0,\n    right: type == \"row\" ? rect.map.width : 1,\n    bottom: type == \"column\" ? rect.map.height : 1\n  });\n  for (let i = 0; i < cellPositions.length; i++) {\n    const cell = rect.table.nodeAt(cellPositions[i]);\n    if (cell && cell.type !== types.header_cell) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction toggleHeader(type, options) {\n  options = options || { useDeprecatedLogic: false };\n  if (options.useDeprecatedLogic) return deprecated_toggleHeader(type);\n  return function(state, dispatch) {\n    if (!isInTable(state)) return false;\n    if (dispatch) {\n      const types = tableNodeTypes(state.schema);\n      const rect = selectedRect(state), tr = state.tr;\n      const isHeaderRowEnabled = isHeaderEnabledByType(\"row\", rect, types);\n      const isHeaderColumnEnabled = isHeaderEnabledByType(\n        \"column\",\n        rect,\n        types\n      );\n      const isHeaderEnabled = type === \"column\" ? isHeaderRowEnabled : type === \"row\" ? isHeaderColumnEnabled : false;\n      const selectionStartsAt = isHeaderEnabled ? 1 : 0;\n      const cellsRect = type == \"column\" ? {\n        left: 0,\n        top: selectionStartsAt,\n        right: 1,\n        bottom: rect.map.height\n      } : type == \"row\" ? {\n        left: selectionStartsAt,\n        top: 0,\n        right: rect.map.width,\n        bottom: 1\n      } : rect;\n      const newType = type == \"column\" ? isHeaderColumnEnabled ? types.cell : types.header_cell : type == \"row\" ? isHeaderRowEnabled ? types.cell : types.header_cell : types.cell;\n      rect.map.cellsInRect(cellsRect).forEach((relativeCellPos) => {\n        const cellPos = relativeCellPos + rect.tableStart;\n        const cell = tr.doc.nodeAt(cellPos);\n        if (cell) {\n          tr.setNodeMarkup(cellPos, newType, cell.attrs);\n        }\n      });\n      dispatch(tr);\n    }\n    return true;\n  };\n}\nvar toggleHeaderRow = toggleHeader(\"row\", {\n  useDeprecatedLogic: true\n});\nvar toggleHeaderColumn = toggleHeader(\"column\", {\n  useDeprecatedLogic: true\n});\nvar toggleHeaderCell = toggleHeader(\"cell\", {\n  useDeprecatedLogic: true\n});\nfunction findNextCell($cell, dir) {\n  if (dir < 0) {\n    const before = $cell.nodeBefore;\n    if (before) return $cell.pos - before.nodeSize;\n    for (let row = $cell.index(-1) - 1, rowEnd = $cell.before(); row >= 0; row--) {\n      const rowNode = $cell.node(-1).child(row);\n      const lastChild = rowNode.lastChild;\n      if (lastChild) {\n        return rowEnd - 1 - lastChild.nodeSize;\n      }\n      rowEnd -= rowNode.nodeSize;\n    }\n  } else {\n    if ($cell.index() < $cell.parent.childCount - 1) {\n      return $cell.pos + $cell.nodeAfter.nodeSize;\n    }\n    const table = $cell.node(-1);\n    for (let row = $cell.indexAfter(-1), rowStart = $cell.after(); row < table.childCount; row++) {\n      const rowNode = table.child(row);\n      if (rowNode.childCount) return rowStart + 1;\n      rowStart += rowNode.nodeSize;\n    }\n  }\n  return null;\n}\nfunction goToNextCell(direction) {\n  return function(state, dispatch) {\n    if (!isInTable(state)) return false;\n    const cell = findNextCell(selectionCell(state), direction);\n    if (cell == null) return false;\n    if (dispatch) {\n      const $cell = state.doc.resolve(cell);\n      dispatch(\n        state.tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.between($cell, moveCellForward($cell))).scrollIntoView()\n      );\n    }\n    return true;\n  };\n}\nfunction deleteTable(state, dispatch) {\n  const $pos = state.selection.$anchor;\n  for (let d = $pos.depth; d > 0; d--) {\n    const node = $pos.node(d);\n    if (node.type.spec.tableRole == \"table\") {\n      if (dispatch)\n        dispatch(\n          state.tr.delete($pos.before(d), $pos.after(d)).scrollIntoView()\n        );\n      return true;\n    }\n  }\n  return false;\n}\nfunction deleteCellSelection(state, dispatch) {\n  const sel = state.selection;\n  if (!(sel instanceof CellSelection)) return false;\n  if (dispatch) {\n    const tr = state.tr;\n    const baseContent = tableNodeTypes(state.schema).cell.createAndFill().content;\n    sel.forEachCell((cell, pos) => {\n      if (!cell.content.eq(baseContent))\n        tr.replace(\n          tr.mapping.map(pos + 1),\n          tr.mapping.map(pos + cell.nodeSize - 1),\n          new prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Slice(baseContent, 0, 0)\n        );\n    });\n    if (tr.docChanged) dispatch(tr);\n  }\n  return true;\n}\n\n// src/copypaste.ts\n\n\nfunction pastedCells(slice) {\n  if (!slice.size) return null;\n  let { content, openStart, openEnd } = slice;\n  while (content.childCount == 1 && (openStart > 0 && openEnd > 0 || content.child(0).type.spec.tableRole == \"table\")) {\n    openStart--;\n    openEnd--;\n    content = content.child(0).content;\n  }\n  const first = content.child(0);\n  const role = first.type.spec.tableRole;\n  const schema = first.type.schema, rows = [];\n  if (role == \"row\") {\n    for (let i = 0; i < content.childCount; i++) {\n      let cells = content.child(i).content;\n      const left = i ? 0 : Math.max(0, openStart - 1);\n      const right = i < content.childCount - 1 ? 0 : Math.max(0, openEnd - 1);\n      if (left || right)\n        cells = fitSlice(\n          tableNodeTypes(schema).row,\n          new prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Slice(cells, left, right)\n        ).content;\n      rows.push(cells);\n    }\n  } else if (role == \"cell\" || role == \"header_cell\") {\n    rows.push(\n      openStart || openEnd ? fitSlice(\n        tableNodeTypes(schema).row,\n        new prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Slice(content, openStart, openEnd)\n      ).content : content\n    );\n  } else {\n    return null;\n  }\n  return ensureRectangular(schema, rows);\n}\nfunction ensureRectangular(schema, rows) {\n  const widths = [];\n  for (let i = 0; i < rows.length; i++) {\n    const row = rows[i];\n    for (let j = row.childCount - 1; j >= 0; j--) {\n      const { rowspan, colspan } = row.child(j).attrs;\n      for (let r = i; r < i + rowspan; r++)\n        widths[r] = (widths[r] || 0) + colspan;\n    }\n  }\n  let width = 0;\n  for (let r = 0; r < widths.length; r++) width = Math.max(width, widths[r]);\n  for (let r = 0; r < widths.length; r++) {\n    if (r >= rows.length) rows.push(prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.empty);\n    if (widths[r] < width) {\n      const empty = tableNodeTypes(schema).cell.createAndFill();\n      const cells = [];\n      for (let i = widths[r]; i < width; i++) {\n        cells.push(empty);\n      }\n      rows[r] = rows[r].append(prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.from(cells));\n    }\n  }\n  return { height: rows.length, width, rows };\n}\nfunction fitSlice(nodeType, slice) {\n  const node = nodeType.createAndFill();\n  const tr = new prosemirror_transform__WEBPACK_IMPORTED_MODULE_3__.Transform(node).replace(0, node.content.size, slice);\n  return tr.doc;\n}\nfunction clipCells({ width, height, rows }, newWidth, newHeight) {\n  if (width != newWidth) {\n    const added = [];\n    const newRows = [];\n    for (let row = 0; row < rows.length; row++) {\n      const frag = rows[row], cells = [];\n      for (let col = added[row] || 0, i = 0; col < newWidth; i++) {\n        let cell = frag.child(i % frag.childCount);\n        if (col + cell.attrs.colspan > newWidth)\n          cell = cell.type.createChecked(\n            removeColSpan(\n              cell.attrs,\n              cell.attrs.colspan,\n              col + cell.attrs.colspan - newWidth\n            ),\n            cell.content\n          );\n        cells.push(cell);\n        col += cell.attrs.colspan;\n        for (let j = 1; j < cell.attrs.rowspan; j++)\n          added[row + j] = (added[row + j] || 0) + cell.attrs.colspan;\n      }\n      newRows.push(prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.from(cells));\n    }\n    rows = newRows;\n    width = newWidth;\n  }\n  if (height != newHeight) {\n    const newRows = [];\n    for (let row = 0, i = 0; row < newHeight; row++, i++) {\n      const cells = [], source = rows[i % height];\n      for (let j = 0; j < source.childCount; j++) {\n        let cell = source.child(j);\n        if (row + cell.attrs.rowspan > newHeight)\n          cell = cell.type.create(\n            {\n              ...cell.attrs,\n              rowspan: Math.max(1, newHeight - cell.attrs.rowspan)\n            },\n            cell.content\n          );\n        cells.push(cell);\n      }\n      newRows.push(prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.from(cells));\n    }\n    rows = newRows;\n    height = newHeight;\n  }\n  return { width, height, rows };\n}\nfunction growTable(tr, map, table, start, width, height, mapFrom) {\n  const schema = tr.doc.type.schema;\n  const types = tableNodeTypes(schema);\n  let empty;\n  let emptyHead;\n  if (width > map.width) {\n    for (let row = 0, rowEnd = 0; row < map.height; row++) {\n      const rowNode = table.child(row);\n      rowEnd += rowNode.nodeSize;\n      const cells = [];\n      let add;\n      if (rowNode.lastChild == null || rowNode.lastChild.type == types.cell)\n        add = empty || (empty = types.cell.createAndFill());\n      else add = emptyHead || (emptyHead = types.header_cell.createAndFill());\n      for (let i = map.width; i < width; i++) cells.push(add);\n      tr.insert(tr.mapping.slice(mapFrom).map(rowEnd - 1 + start), cells);\n    }\n  }\n  if (height > map.height) {\n    const cells = [];\n    for (let i = 0, start2 = (map.height - 1) * map.width; i < Math.max(map.width, width); i++) {\n      const header = i >= map.width ? false : table.nodeAt(map.map[start2 + i]).type == types.header_cell;\n      cells.push(\n        header ? emptyHead || (emptyHead = types.header_cell.createAndFill()) : empty || (empty = types.cell.createAndFill())\n      );\n    }\n    const emptyRow = types.row.create(null, prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.from(cells)), rows = [];\n    for (let i = map.height; i < height; i++) rows.push(emptyRow);\n    tr.insert(tr.mapping.slice(mapFrom).map(start + table.nodeSize - 2), rows);\n  }\n  return !!(empty || emptyHead);\n}\nfunction isolateHorizontal(tr, map, table, start, left, right, top, mapFrom) {\n  if (top == 0 || top == map.height) return false;\n  let found = false;\n  for (let col = left; col < right; col++) {\n    const index = top * map.width + col, pos = map.map[index];\n    if (map.map[index - map.width] == pos) {\n      found = true;\n      const cell = table.nodeAt(pos);\n      const { top: cellTop, left: cellLeft } = map.findCell(pos);\n      tr.setNodeMarkup(tr.mapping.slice(mapFrom).map(pos + start), null, {\n        ...cell.attrs,\n        rowspan: top - cellTop\n      });\n      tr.insert(\n        tr.mapping.slice(mapFrom).map(map.positionAt(top, cellLeft, table)),\n        cell.type.createAndFill({\n          ...cell.attrs,\n          rowspan: cellTop + cell.attrs.rowspan - top\n        })\n      );\n      col += cell.attrs.colspan - 1;\n    }\n  }\n  return found;\n}\nfunction isolateVertical(tr, map, table, start, top, bottom, left, mapFrom) {\n  if (left == 0 || left == map.width) return false;\n  let found = false;\n  for (let row = top; row < bottom; row++) {\n    const index = row * map.width + left, pos = map.map[index];\n    if (map.map[index - 1] == pos) {\n      found = true;\n      const cell = table.nodeAt(pos);\n      const cellLeft = map.colCount(pos);\n      const updatePos = tr.mapping.slice(mapFrom).map(pos + start);\n      tr.setNodeMarkup(\n        updatePos,\n        null,\n        removeColSpan(\n          cell.attrs,\n          left - cellLeft,\n          cell.attrs.colspan - (left - cellLeft)\n        )\n      );\n      tr.insert(\n        updatePos + cell.nodeSize,\n        cell.type.createAndFill(\n          removeColSpan(cell.attrs, 0, left - cellLeft)\n        )\n      );\n      row += cell.attrs.rowspan - 1;\n    }\n  }\n  return found;\n}\nfunction insertCells(state, dispatch, tableStart, rect, cells) {\n  let table = tableStart ? state.doc.nodeAt(tableStart - 1) : state.doc;\n  if (!table) {\n    throw new Error(\"No table found\");\n  }\n  let map = TableMap.get(table);\n  const { top, left } = rect;\n  const right = left + cells.width, bottom = top + cells.height;\n  const tr = state.tr;\n  let mapFrom = 0;\n  function recomp() {\n    table = tableStart ? tr.doc.nodeAt(tableStart - 1) : tr.doc;\n    if (!table) {\n      throw new Error(\"No table found\");\n    }\n    map = TableMap.get(table);\n    mapFrom = tr.mapping.maps.length;\n  }\n  if (growTable(tr, map, table, tableStart, right, bottom, mapFrom)) recomp();\n  if (isolateHorizontal(tr, map, table, tableStart, left, right, top, mapFrom))\n    recomp();\n  if (isolateHorizontal(tr, map, table, tableStart, left, right, bottom, mapFrom))\n    recomp();\n  if (isolateVertical(tr, map, table, tableStart, top, bottom, left, mapFrom))\n    recomp();\n  if (isolateVertical(tr, map, table, tableStart, top, bottom, right, mapFrom))\n    recomp();\n  for (let row = top; row < bottom; row++) {\n    const from = map.positionAt(row, left, table), to = map.positionAt(row, right, table);\n    tr.replace(\n      tr.mapping.slice(mapFrom).map(from + tableStart),\n      tr.mapping.slice(mapFrom).map(to + tableStart),\n      new prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Slice(cells.rows[row - top], 0, 0)\n    );\n  }\n  recomp();\n  tr.setSelection(\n    new CellSelection(\n      tr.doc.resolve(tableStart + map.positionAt(top, left, table)),\n      tr.doc.resolve(tableStart + map.positionAt(bottom - 1, right - 1, table))\n    )\n  );\n  dispatch(tr);\n}\n\n// src/input.ts\nvar handleKeyDown = (0,prosemirror_keymap__WEBPACK_IMPORTED_MODULE_4__.keydownHandler)({\n  ArrowLeft: arrow(\"horiz\", -1),\n  ArrowRight: arrow(\"horiz\", 1),\n  ArrowUp: arrow(\"vert\", -1),\n  ArrowDown: arrow(\"vert\", 1),\n  \"Shift-ArrowLeft\": shiftArrow(\"horiz\", -1),\n  \"Shift-ArrowRight\": shiftArrow(\"horiz\", 1),\n  \"Shift-ArrowUp\": shiftArrow(\"vert\", -1),\n  \"Shift-ArrowDown\": shiftArrow(\"vert\", 1),\n  Backspace: deleteCellSelection,\n  \"Mod-Backspace\": deleteCellSelection,\n  Delete: deleteCellSelection,\n  \"Mod-Delete\": deleteCellSelection\n});\nfunction maybeSetSelection(state, dispatch, selection) {\n  if (selection.eq(state.selection)) return false;\n  if (dispatch) dispatch(state.tr.setSelection(selection).scrollIntoView());\n  return true;\n}\nfunction arrow(axis, dir) {\n  return (state, dispatch, view) => {\n    if (!view) return false;\n    const sel = state.selection;\n    if (sel instanceof CellSelection) {\n      return maybeSetSelection(\n        state,\n        dispatch,\n        prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection.near(sel.$headCell, dir)\n      );\n    }\n    if (axis != \"horiz\" && !sel.empty) return false;\n    const end = atEndOfCell(view, axis, dir);\n    if (end == null) return false;\n    if (axis == \"horiz\") {\n      return maybeSetSelection(\n        state,\n        dispatch,\n        prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection.near(state.doc.resolve(sel.head + dir), dir)\n      );\n    } else {\n      const $cell = state.doc.resolve(end);\n      const $next = nextCell($cell, axis, dir);\n      let newSel;\n      if ($next) newSel = prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection.near($next, 1);\n      else if (dir < 0)\n        newSel = prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection.near(state.doc.resolve($cell.before(-1)), -1);\n      else newSel = prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection.near(state.doc.resolve($cell.after(-1)), 1);\n      return maybeSetSelection(state, dispatch, newSel);\n    }\n  };\n}\nfunction shiftArrow(axis, dir) {\n  return (state, dispatch, view) => {\n    if (!view) return false;\n    const sel = state.selection;\n    let cellSel;\n    if (sel instanceof CellSelection) {\n      cellSel = sel;\n    } else {\n      const end = atEndOfCell(view, axis, dir);\n      if (end == null) return false;\n      cellSel = new CellSelection(state.doc.resolve(end));\n    }\n    const $head = nextCell(cellSel.$headCell, axis, dir);\n    if (!$head) return false;\n    return maybeSetSelection(\n      state,\n      dispatch,\n      new CellSelection(cellSel.$anchorCell, $head)\n    );\n  };\n}\nfunction handleTripleClick(view, pos) {\n  const doc = view.state.doc, $cell = cellAround(doc.resolve(pos));\n  if (!$cell) return false;\n  view.dispatch(view.state.tr.setSelection(new CellSelection($cell)));\n  return true;\n}\nfunction handlePaste(view, _, slice) {\n  if (!isInTable(view.state)) return false;\n  let cells = pastedCells(slice);\n  const sel = view.state.selection;\n  if (sel instanceof CellSelection) {\n    if (!cells)\n      cells = {\n        width: 1,\n        height: 1,\n        rows: [\n          prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.from(\n            fitSlice(tableNodeTypes(view.state.schema).cell, slice)\n          )\n        ]\n      };\n    const table = sel.$anchorCell.node(-1);\n    const start = sel.$anchorCell.start(-1);\n    const rect = TableMap.get(table).rectBetween(\n      sel.$anchorCell.pos - start,\n      sel.$headCell.pos - start\n    );\n    cells = clipCells(cells, rect.right - rect.left, rect.bottom - rect.top);\n    insertCells(view.state, view.dispatch, start, rect, cells);\n    return true;\n  } else if (cells) {\n    const $cell = selectionCell(view.state);\n    const start = $cell.start(-1);\n    insertCells(\n      view.state,\n      view.dispatch,\n      start,\n      TableMap.get($cell.node(-1)).findCell($cell.pos - start),\n      cells\n    );\n    return true;\n  } else {\n    return false;\n  }\n}\nfunction handleMouseDown(view, startEvent) {\n  var _a;\n  if (startEvent.ctrlKey || startEvent.metaKey) return;\n  const startDOMCell = domInCell(view, startEvent.target);\n  let $anchor;\n  if (startEvent.shiftKey && view.state.selection instanceof CellSelection) {\n    setCellSelection(view.state.selection.$anchorCell, startEvent);\n    startEvent.preventDefault();\n  } else if (startEvent.shiftKey && startDOMCell && ($anchor = cellAround(view.state.selection.$anchor)) != null && ((_a = cellUnderMouse(view, startEvent)) == null ? void 0 : _a.pos) != $anchor.pos) {\n    setCellSelection($anchor, startEvent);\n    startEvent.preventDefault();\n  } else if (!startDOMCell) {\n    return;\n  }\n  function setCellSelection($anchor2, event) {\n    let $head = cellUnderMouse(view, event);\n    const starting = tableEditingKey.getState(view.state) == null;\n    if (!$head || !inSameTable($anchor2, $head)) {\n      if (starting) $head = $anchor2;\n      else return;\n    }\n    const selection = new CellSelection($anchor2, $head);\n    if (starting || !view.state.selection.eq(selection)) {\n      const tr = view.state.tr.setSelection(selection);\n      if (starting) tr.setMeta(tableEditingKey, $anchor2.pos);\n      view.dispatch(tr);\n    }\n  }\n  function stop() {\n    view.root.removeEventListener(\"mouseup\", stop);\n    view.root.removeEventListener(\"dragstart\", stop);\n    view.root.removeEventListener(\"mousemove\", move);\n    if (tableEditingKey.getState(view.state) != null)\n      view.dispatch(view.state.tr.setMeta(tableEditingKey, -1));\n  }\n  function move(_event) {\n    const event = _event;\n    const anchor = tableEditingKey.getState(view.state);\n    let $anchor2;\n    if (anchor != null) {\n      $anchor2 = view.state.doc.resolve(anchor);\n    } else if (domInCell(view, event.target) != startDOMCell) {\n      $anchor2 = cellUnderMouse(view, startEvent);\n      if (!$anchor2) return stop();\n    }\n    if ($anchor2) setCellSelection($anchor2, event);\n  }\n  view.root.addEventListener(\"mouseup\", stop);\n  view.root.addEventListener(\"dragstart\", stop);\n  view.root.addEventListener(\"mousemove\", move);\n}\nfunction atEndOfCell(view, axis, dir) {\n  if (!(view.state.selection instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection)) return null;\n  const { $head } = view.state.selection;\n  for (let d = $head.depth - 1; d >= 0; d--) {\n    const parent = $head.node(d), index = dir < 0 ? $head.index(d) : $head.indexAfter(d);\n    if (index != (dir < 0 ? 0 : parent.childCount)) return null;\n    if (parent.type.spec.tableRole == \"cell\" || parent.type.spec.tableRole == \"header_cell\") {\n      const cellPos = $head.before(d);\n      const dirStr = axis == \"vert\" ? dir > 0 ? \"down\" : \"up\" : dir > 0 ? \"right\" : \"left\";\n      return view.endOfTextblock(dirStr) ? cellPos : null;\n    }\n  }\n  return null;\n}\nfunction domInCell(view, dom) {\n  for (; dom && dom != view.dom; dom = dom.parentNode) {\n    if (dom.nodeName == \"TD\" || dom.nodeName == \"TH\") {\n      return dom;\n    }\n  }\n  return null;\n}\nfunction cellUnderMouse(view, event) {\n  const mousePos = view.posAtCoords({\n    left: event.clientX,\n    top: event.clientY\n  });\n  if (!mousePos) return null;\n  return mousePos ? cellAround(view.state.doc.resolve(mousePos.pos)) : null;\n}\n\n// src/columnresizing.ts\n\n\n\n// src/tableview.ts\nvar TableView = class {\n  constructor(node, defaultCellMinWidth) {\n    this.node = node;\n    this.defaultCellMinWidth = defaultCellMinWidth;\n    this.dom = document.createElement(\"div\");\n    this.dom.className = \"tableWrapper\";\n    this.table = this.dom.appendChild(document.createElement(\"table\"));\n    this.table.style.setProperty(\n      \"--default-cell-min-width\",\n      `${defaultCellMinWidth}px`\n    );\n    this.colgroup = this.table.appendChild(document.createElement(\"colgroup\"));\n    updateColumnsOnResize(node, this.colgroup, this.table, defaultCellMinWidth);\n    this.contentDOM = this.table.appendChild(document.createElement(\"tbody\"));\n  }\n  update(node) {\n    if (node.type != this.node.type) return false;\n    this.node = node;\n    updateColumnsOnResize(\n      node,\n      this.colgroup,\n      this.table,\n      this.defaultCellMinWidth\n    );\n    return true;\n  }\n  ignoreMutation(record) {\n    return record.type == \"attributes\" && (record.target == this.table || this.colgroup.contains(record.target));\n  }\n};\nfunction updateColumnsOnResize(node, colgroup, table, defaultCellMinWidth, overrideCol, overrideValue) {\n  var _a;\n  let totalWidth = 0;\n  let fixedWidth = true;\n  let nextDOM = colgroup.firstChild;\n  const row = node.firstChild;\n  if (!row) return;\n  for (let i = 0, col = 0; i < row.childCount; i++) {\n    const { colspan, colwidth } = row.child(i).attrs;\n    for (let j = 0; j < colspan; j++, col++) {\n      const hasWidth = overrideCol == col ? overrideValue : colwidth && colwidth[j];\n      const cssWidth = hasWidth ? hasWidth + \"px\" : \"\";\n      totalWidth += hasWidth || defaultCellMinWidth;\n      if (!hasWidth) fixedWidth = false;\n      if (!nextDOM) {\n        const col2 = document.createElement(\"col\");\n        col2.style.width = cssWidth;\n        colgroup.appendChild(col2);\n      } else {\n        if (nextDOM.style.width != cssWidth) {\n          nextDOM.style.width = cssWidth;\n        }\n        nextDOM = nextDOM.nextSibling;\n      }\n    }\n  }\n  while (nextDOM) {\n    const after = nextDOM.nextSibling;\n    (_a = nextDOM.parentNode) == null ? void 0 : _a.removeChild(nextDOM);\n    nextDOM = after;\n  }\n  if (fixedWidth) {\n    table.style.width = totalWidth + \"px\";\n    table.style.minWidth = \"\";\n  } else {\n    table.style.width = \"\";\n    table.style.minWidth = totalWidth + \"px\";\n  }\n}\n\n// src/columnresizing.ts\nvar columnResizingPluginKey = new prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(\n  \"tableColumnResizing\"\n);\nfunction columnResizing({\n  handleWidth = 5,\n  cellMinWidth = 25,\n  defaultCellMinWidth = 100,\n  View = TableView,\n  lastColumnResizable = true\n} = {}) {\n  const plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n    key: columnResizingPluginKey,\n    state: {\n      init(_, state) {\n        var _a, _b;\n        const nodeViews = (_b = (_a = plugin.spec) == null ? void 0 : _a.props) == null ? void 0 : _b.nodeViews;\n        const tableName = tableNodeTypes(state.schema).table.name;\n        if (View && nodeViews) {\n          nodeViews[tableName] = (node, view) => {\n            return new View(node, defaultCellMinWidth, view);\n          };\n        }\n        return new ResizeState(-1, false);\n      },\n      apply(tr, prev) {\n        return prev.apply(tr);\n      }\n    },\n    props: {\n      attributes: (state) => {\n        const pluginState = columnResizingPluginKey.getState(state);\n        return pluginState && pluginState.activeHandle > -1 ? { class: \"resize-cursor\" } : {};\n      },\n      handleDOMEvents: {\n        mousemove: (view, event) => {\n          handleMouseMove(view, event, handleWidth, lastColumnResizable);\n        },\n        mouseleave: (view) => {\n          handleMouseLeave(view);\n        },\n        mousedown: (view, event) => {\n          handleMouseDown2(view, event, cellMinWidth, defaultCellMinWidth);\n        }\n      },\n      decorations: (state) => {\n        const pluginState = columnResizingPluginKey.getState(state);\n        if (pluginState && pluginState.activeHandle > -1) {\n          return handleDecorations(state, pluginState.activeHandle);\n        }\n      },\n      nodeViews: {}\n    }\n  });\n  return plugin;\n}\nvar ResizeState = class _ResizeState {\n  constructor(activeHandle, dragging) {\n    this.activeHandle = activeHandle;\n    this.dragging = dragging;\n  }\n  apply(tr) {\n    const state = this;\n    const action = tr.getMeta(columnResizingPluginKey);\n    if (action && action.setHandle != null)\n      return new _ResizeState(action.setHandle, false);\n    if (action && action.setDragging !== void 0)\n      return new _ResizeState(state.activeHandle, action.setDragging);\n    if (state.activeHandle > -1 && tr.docChanged) {\n      let handle = tr.mapping.map(state.activeHandle, -1);\n      if (!pointsAtCell(tr.doc.resolve(handle))) {\n        handle = -1;\n      }\n      return new _ResizeState(handle, state.dragging);\n    }\n    return state;\n  }\n};\nfunction handleMouseMove(view, event, handleWidth, lastColumnResizable) {\n  if (!view.editable) return;\n  const pluginState = columnResizingPluginKey.getState(view.state);\n  if (!pluginState) return;\n  if (!pluginState.dragging) {\n    const target = domCellAround(event.target);\n    let cell = -1;\n    if (target) {\n      const { left, right } = target.getBoundingClientRect();\n      if (event.clientX - left <= handleWidth)\n        cell = edgeCell(view, event, \"left\", handleWidth);\n      else if (right - event.clientX <= handleWidth)\n        cell = edgeCell(view, event, \"right\", handleWidth);\n    }\n    if (cell != pluginState.activeHandle) {\n      if (!lastColumnResizable && cell !== -1) {\n        const $cell = view.state.doc.resolve(cell);\n        const table = $cell.node(-1);\n        const map = TableMap.get(table);\n        const tableStart = $cell.start(-1);\n        const col = map.colCount($cell.pos - tableStart) + $cell.nodeAfter.attrs.colspan - 1;\n        if (col == map.width - 1) {\n          return;\n        }\n      }\n      updateHandle(view, cell);\n    }\n  }\n}\nfunction handleMouseLeave(view) {\n  if (!view.editable) return;\n  const pluginState = columnResizingPluginKey.getState(view.state);\n  if (pluginState && pluginState.activeHandle > -1 && !pluginState.dragging)\n    updateHandle(view, -1);\n}\nfunction handleMouseDown2(view, event, cellMinWidth, defaultCellMinWidth) {\n  var _a;\n  if (!view.editable) return false;\n  const win = (_a = view.dom.ownerDocument.defaultView) != null ? _a : window;\n  const pluginState = columnResizingPluginKey.getState(view.state);\n  if (!pluginState || pluginState.activeHandle == -1 || pluginState.dragging)\n    return false;\n  const cell = view.state.doc.nodeAt(pluginState.activeHandle);\n  const width = currentColWidth(view, pluginState.activeHandle, cell.attrs);\n  view.dispatch(\n    view.state.tr.setMeta(columnResizingPluginKey, {\n      setDragging: { startX: event.clientX, startWidth: width }\n    })\n  );\n  function finish(event2) {\n    win.removeEventListener(\"mouseup\", finish);\n    win.removeEventListener(\"mousemove\", move);\n    const pluginState2 = columnResizingPluginKey.getState(view.state);\n    if (pluginState2 == null ? void 0 : pluginState2.dragging) {\n      updateColumnWidth(\n        view,\n        pluginState2.activeHandle,\n        draggedWidth(pluginState2.dragging, event2, cellMinWidth)\n      );\n      view.dispatch(\n        view.state.tr.setMeta(columnResizingPluginKey, { setDragging: null })\n      );\n    }\n  }\n  function move(event2) {\n    if (!event2.which) return finish(event2);\n    const pluginState2 = columnResizingPluginKey.getState(view.state);\n    if (!pluginState2) return;\n    if (pluginState2.dragging) {\n      const dragged = draggedWidth(pluginState2.dragging, event2, cellMinWidth);\n      displayColumnWidth(\n        view,\n        pluginState2.activeHandle,\n        dragged,\n        defaultCellMinWidth\n      );\n    }\n  }\n  displayColumnWidth(\n    view,\n    pluginState.activeHandle,\n    width,\n    defaultCellMinWidth\n  );\n  win.addEventListener(\"mouseup\", finish);\n  win.addEventListener(\"mousemove\", move);\n  event.preventDefault();\n  return true;\n}\nfunction currentColWidth(view, cellPos, { colspan, colwidth }) {\n  const width = colwidth && colwidth[colwidth.length - 1];\n  if (width) return width;\n  const dom = view.domAtPos(cellPos);\n  const node = dom.node.childNodes[dom.offset];\n  let domWidth = node.offsetWidth, parts = colspan;\n  if (colwidth) {\n    for (let i = 0; i < colspan; i++)\n      if (colwidth[i]) {\n        domWidth -= colwidth[i];\n        parts--;\n      }\n  }\n  return domWidth / parts;\n}\nfunction domCellAround(target) {\n  while (target && target.nodeName != \"TD\" && target.nodeName != \"TH\")\n    target = target.classList && target.classList.contains(\"ProseMirror\") ? null : target.parentNode;\n  return target;\n}\nfunction edgeCell(view, event, side, handleWidth) {\n  const offset = side == \"right\" ? -handleWidth : handleWidth;\n  const found = view.posAtCoords({\n    left: event.clientX + offset,\n    top: event.clientY\n  });\n  if (!found) return -1;\n  const { pos } = found;\n  const $cell = cellAround(view.state.doc.resolve(pos));\n  if (!$cell) return -1;\n  if (side == \"right\") return $cell.pos;\n  const map = TableMap.get($cell.node(-1)), start = $cell.start(-1);\n  const index = map.map.indexOf($cell.pos - start);\n  return index % map.width == 0 ? -1 : start + map.map[index - 1];\n}\nfunction draggedWidth(dragging, event, resizeMinWidth) {\n  const offset = event.clientX - dragging.startX;\n  return Math.max(resizeMinWidth, dragging.startWidth + offset);\n}\nfunction updateHandle(view, value) {\n  view.dispatch(\n    view.state.tr.setMeta(columnResizingPluginKey, { setHandle: value })\n  );\n}\nfunction updateColumnWidth(view, cell, width) {\n  const $cell = view.state.doc.resolve(cell);\n  const table = $cell.node(-1), map = TableMap.get(table), start = $cell.start(-1);\n  const col = map.colCount($cell.pos - start) + $cell.nodeAfter.attrs.colspan - 1;\n  const tr = view.state.tr;\n  for (let row = 0; row < map.height; row++) {\n    const mapIndex = row * map.width + col;\n    if (row && map.map[mapIndex] == map.map[mapIndex - map.width]) continue;\n    const pos = map.map[mapIndex];\n    const attrs = table.nodeAt(pos).attrs;\n    const index = attrs.colspan == 1 ? 0 : col - map.colCount(pos);\n    if (attrs.colwidth && attrs.colwidth[index] == width) continue;\n    const colwidth = attrs.colwidth ? attrs.colwidth.slice() : zeroes(attrs.colspan);\n    colwidth[index] = width;\n    tr.setNodeMarkup(start + pos, null, { ...attrs, colwidth });\n  }\n  if (tr.docChanged) view.dispatch(tr);\n}\nfunction displayColumnWidth(view, cell, width, defaultCellMinWidth) {\n  const $cell = view.state.doc.resolve(cell);\n  const table = $cell.node(-1), start = $cell.start(-1);\n  const col = TableMap.get(table).colCount($cell.pos - start) + $cell.nodeAfter.attrs.colspan - 1;\n  let dom = view.domAtPos($cell.start(-1)).node;\n  while (dom && dom.nodeName != \"TABLE\") {\n    dom = dom.parentNode;\n  }\n  if (!dom) return;\n  updateColumnsOnResize(\n    table,\n    dom.firstChild,\n    dom,\n    defaultCellMinWidth,\n    col,\n    width\n  );\n}\nfunction zeroes(n) {\n  return Array(n).fill(0);\n}\nfunction handleDecorations(state, cell) {\n  var _a;\n  const decorations = [];\n  const $cell = state.doc.resolve(cell);\n  const table = $cell.node(-1);\n  if (!table) {\n    return prosemirror_view__WEBPACK_IMPORTED_MODULE_2__.DecorationSet.empty;\n  }\n  const map = TableMap.get(table);\n  const start = $cell.start(-1);\n  const col = map.colCount($cell.pos - start) + $cell.nodeAfter.attrs.colspan - 1;\n  for (let row = 0; row < map.height; row++) {\n    const index = col + row * map.width;\n    if ((col == map.width - 1 || map.map[index] != map.map[index + 1]) && (row == 0 || map.map[index] != map.map[index - map.width])) {\n      const cellPos = map.map[index];\n      const pos = start + cellPos + table.nodeAt(cellPos).nodeSize - 1;\n      const dom = document.createElement(\"div\");\n      dom.className = \"column-resize-handle\";\n      if ((_a = columnResizingPluginKey.getState(state)) == null ? void 0 : _a.dragging) {\n        decorations.push(\n          prosemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.node(\n            start + cellPos,\n            start + cellPos + table.nodeAt(cellPos).nodeSize,\n            {\n              class: \"column-resize-dragging\"\n            }\n          )\n        );\n      }\n      decorations.push(prosemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.widget(pos, dom));\n    }\n  }\n  return prosemirror_view__WEBPACK_IMPORTED_MODULE_2__.DecorationSet.create(state.doc, decorations);\n}\n\n// src/index.ts\nfunction tableEditing({\n  allowTableNodeSelection = false\n} = {}) {\n  return new prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n    key: tableEditingKey,\n    // This piece of state is used to remember when a mouse-drag\n    // cell-selection is happening, so that it can continue even as\n    // transactions (which might move its anchor cell) come in.\n    state: {\n      init() {\n        return null;\n      },\n      apply(tr, cur) {\n        const set = tr.getMeta(tableEditingKey);\n        if (set != null) return set == -1 ? null : set;\n        if (cur == null || !tr.docChanged) return cur;\n        const { deleted, pos } = tr.mapping.mapResult(cur);\n        return deleted ? null : pos;\n      }\n    },\n    props: {\n      decorations: drawCellSelection,\n      handleDOMEvents: {\n        mousedown: handleMouseDown\n      },\n      createSelectionBetween(view) {\n        return tableEditingKey.getState(view.state) != null ? view.state.selection : null;\n      },\n      handleTripleClick,\n      handleKeyDown,\n      handlePaste\n    },\n    appendTransaction(_, oldState, state) {\n      return normalizeSelection(\n        state,\n        fixTables(state, oldState),\n        allowTableNodeSelection\n      );\n    }\n  });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/prosemirror-tables/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/rope-sequence/dist/index.js":
/*!**************************************************!*\
  !*** ./node_modules/rope-sequence/dist/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar GOOD_LEAF_SIZE = 200;\n\n// :: class<T> A rope sequence is a persistent sequence data structure\n// that supports appending, prepending, and slicing without doing a\n// full copy. It is represented as a mostly-balanced tree.\nvar RopeSequence = function RopeSequence () {};\n\nRopeSequence.prototype.append = function append (other) {\n  if (!other.length) { return this }\n  other = RopeSequence.from(other);\n\n  return (!this.length && other) ||\n    (other.length < GOOD_LEAF_SIZE && this.leafAppend(other)) ||\n    (this.length < GOOD_LEAF_SIZE && other.leafPrepend(this)) ||\n    this.appendInner(other)\n};\n\n// :: (union<[T], RopeSequence<T>>) → RopeSequence<T>\n// Prepend an array or other rope to this one, returning a new rope.\nRopeSequence.prototype.prepend = function prepend (other) {\n  if (!other.length) { return this }\n  return RopeSequence.from(other).append(this)\n};\n\nRopeSequence.prototype.appendInner = function appendInner (other) {\n  return new Append(this, other)\n};\n\n// :: (?number, ?number) → RopeSequence<T>\n// Create a rope repesenting a sub-sequence of this rope.\nRopeSequence.prototype.slice = function slice (from, to) {\n    if ( from === void 0 ) from = 0;\n    if ( to === void 0 ) to = this.length;\n\n  if (from >= to) { return RopeSequence.empty }\n  return this.sliceInner(Math.max(0, from), Math.min(this.length, to))\n};\n\n// :: (number) → T\n// Retrieve the element at the given position from this rope.\nRopeSequence.prototype.get = function get (i) {\n  if (i < 0 || i >= this.length) { return undefined }\n  return this.getInner(i)\n};\n\n// :: ((element: T, index: number) → ?bool, ?number, ?number)\n// Call the given function for each element between the given\n// indices. This tends to be more efficient than looping over the\n// indices and calling `get`, because it doesn't have to descend the\n// tree for every element.\nRopeSequence.prototype.forEach = function forEach (f, from, to) {\n    if ( from === void 0 ) from = 0;\n    if ( to === void 0 ) to = this.length;\n\n  if (from <= to)\n    { this.forEachInner(f, from, to, 0); }\n  else\n    { this.forEachInvertedInner(f, from, to, 0); }\n};\n\n// :: ((element: T, index: number) → U, ?number, ?number) → [U]\n// Map the given functions over the elements of the rope, producing\n// a flat array.\nRopeSequence.prototype.map = function map (f, from, to) {\n    if ( from === void 0 ) from = 0;\n    if ( to === void 0 ) to = this.length;\n\n  var result = [];\n  this.forEach(function (elt, i) { return result.push(f(elt, i)); }, from, to);\n  return result\n};\n\n// :: (?union<[T], RopeSequence<T>>) → RopeSequence<T>\n// Create a rope representing the given array, or return the rope\n// itself if a rope was given.\nRopeSequence.from = function from (values) {\n  if (values instanceof RopeSequence) { return values }\n  return values && values.length ? new Leaf(values) : RopeSequence.empty\n};\n\nvar Leaf = /*@__PURE__*/(function (RopeSequence) {\n  function Leaf(values) {\n    RopeSequence.call(this);\n    this.values = values;\n  }\n\n  if ( RopeSequence ) Leaf.__proto__ = RopeSequence;\n  Leaf.prototype = Object.create( RopeSequence && RopeSequence.prototype );\n  Leaf.prototype.constructor = Leaf;\n\n  var prototypeAccessors = { length: { configurable: true },depth: { configurable: true } };\n\n  Leaf.prototype.flatten = function flatten () {\n    return this.values\n  };\n\n  Leaf.prototype.sliceInner = function sliceInner (from, to) {\n    if (from == 0 && to == this.length) { return this }\n    return new Leaf(this.values.slice(from, to))\n  };\n\n  Leaf.prototype.getInner = function getInner (i) {\n    return this.values[i]\n  };\n\n  Leaf.prototype.forEachInner = function forEachInner (f, from, to, start) {\n    for (var i = from; i < to; i++)\n      { if (f(this.values[i], start + i) === false) { return false } }\n  };\n\n  Leaf.prototype.forEachInvertedInner = function forEachInvertedInner (f, from, to, start) {\n    for (var i = from - 1; i >= to; i--)\n      { if (f(this.values[i], start + i) === false) { return false } }\n  };\n\n  Leaf.prototype.leafAppend = function leafAppend (other) {\n    if (this.length + other.length <= GOOD_LEAF_SIZE)\n      { return new Leaf(this.values.concat(other.flatten())) }\n  };\n\n  Leaf.prototype.leafPrepend = function leafPrepend (other) {\n    if (this.length + other.length <= GOOD_LEAF_SIZE)\n      { return new Leaf(other.flatten().concat(this.values)) }\n  };\n\n  prototypeAccessors.length.get = function () { return this.values.length };\n\n  prototypeAccessors.depth.get = function () { return 0 };\n\n  Object.defineProperties( Leaf.prototype, prototypeAccessors );\n\n  return Leaf;\n}(RopeSequence));\n\n// :: RopeSequence\n// The empty rope sequence.\nRopeSequence.empty = new Leaf([]);\n\nvar Append = /*@__PURE__*/(function (RopeSequence) {\n  function Append(left, right) {\n    RopeSequence.call(this);\n    this.left = left;\n    this.right = right;\n    this.length = left.length + right.length;\n    this.depth = Math.max(left.depth, right.depth) + 1;\n  }\n\n  if ( RopeSequence ) Append.__proto__ = RopeSequence;\n  Append.prototype = Object.create( RopeSequence && RopeSequence.prototype );\n  Append.prototype.constructor = Append;\n\n  Append.prototype.flatten = function flatten () {\n    return this.left.flatten().concat(this.right.flatten())\n  };\n\n  Append.prototype.getInner = function getInner (i) {\n    return i < this.left.length ? this.left.get(i) : this.right.get(i - this.left.length)\n  };\n\n  Append.prototype.forEachInner = function forEachInner (f, from, to, start) {\n    var leftLen = this.left.length;\n    if (from < leftLen &&\n        this.left.forEachInner(f, from, Math.min(to, leftLen), start) === false)\n      { return false }\n    if (to > leftLen &&\n        this.right.forEachInner(f, Math.max(from - leftLen, 0), Math.min(this.length, to) - leftLen, start + leftLen) === false)\n      { return false }\n  };\n\n  Append.prototype.forEachInvertedInner = function forEachInvertedInner (f, from, to, start) {\n    var leftLen = this.left.length;\n    if (from > leftLen &&\n        this.right.forEachInvertedInner(f, from - leftLen, Math.max(to, leftLen) - leftLen, start + leftLen) === false)\n      { return false }\n    if (to < leftLen &&\n        this.left.forEachInvertedInner(f, Math.min(from, leftLen), to, start) === false)\n      { return false }\n  };\n\n  Append.prototype.sliceInner = function sliceInner (from, to) {\n    if (from == 0 && to == this.length) { return this }\n    var leftLen = this.left.length;\n    if (to <= leftLen) { return this.left.slice(from, to) }\n    if (from >= leftLen) { return this.right.slice(from - leftLen, to - leftLen) }\n    return this.left.slice(from, leftLen).append(this.right.slice(0, to - leftLen))\n  };\n\n  Append.prototype.leafAppend = function leafAppend (other) {\n    var inner = this.right.leafAppend(other);\n    if (inner) { return new Append(this.left, inner) }\n  };\n\n  Append.prototype.leafPrepend = function leafPrepend (other) {\n    var inner = this.left.leafPrepend(other);\n    if (inner) { return new Append(inner, this.right) }\n  };\n\n  Append.prototype.appendInner = function appendInner (other) {\n    if (this.left.depth >= Math.max(this.right.depth, other.depth) + 1)\n      { return new Append(this.left, new Append(this.right, other)) }\n    return new Append(this, other)\n  };\n\n  return Append;\n}(RopeSequence));\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (RopeSequence);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/rope-sequence/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/w3c-keyname/index.js":
/*!*******************************************!*\
  !*** ./node_modules/w3c-keyname/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base: () => (/* binding */ base),\n/* harmony export */   keyName: () => (/* binding */ keyName),\n/* harmony export */   shift: () => (/* binding */ shift)\n/* harmony export */ });\nvar base = {\n  8: \"Backspace\",\n  9: \"Tab\",\n  10: \"Enter\",\n  12: \"NumLock\",\n  13: \"Enter\",\n  16: \"Shift\",\n  17: \"Control\",\n  18: \"Alt\",\n  20: \"CapsLock\",\n  27: \"Escape\",\n  32: \" \",\n  33: \"PageUp\",\n  34: \"PageDown\",\n  35: \"End\",\n  36: \"Home\",\n  37: \"ArrowLeft\",\n  38: \"ArrowUp\",\n  39: \"ArrowRight\",\n  40: \"ArrowDown\",\n  44: \"PrintScreen\",\n  45: \"Insert\",\n  46: \"Delete\",\n  59: \";\",\n  61: \"=\",\n  91: \"Meta\",\n  92: \"Meta\",\n  106: \"*\",\n  107: \"+\",\n  108: \",\",\n  109: \"-\",\n  110: \".\",\n  111: \"/\",\n  144: \"NumLock\",\n  145: \"ScrollLock\",\n  160: \"Shift\",\n  161: \"Shift\",\n  162: \"Control\",\n  163: \"Control\",\n  164: \"Alt\",\n  165: \"Alt\",\n  173: \"-\",\n  186: \";\",\n  187: \"=\",\n  188: \",\",\n  189: \"-\",\n  190: \".\",\n  191: \"/\",\n  192: \"`\",\n  219: \"[\",\n  220: \"\\\\\",\n  221: \"]\",\n  222: \"'\"\n}\n\nvar shift = {\n  48: \")\",\n  49: \"!\",\n  50: \"@\",\n  51: \"#\",\n  52: \"$\",\n  53: \"%\",\n  54: \"^\",\n  55: \"&\",\n  56: \"*\",\n  57: \"(\",\n  59: \":\",\n  61: \"+\",\n  173: \"_\",\n  186: \":\",\n  187: \"+\",\n  188: \"<\",\n  189: \"_\",\n  190: \">\",\n  191: \"?\",\n  192: \"~\",\n  219: \"{\",\n  220: \"|\",\n  221: \"}\",\n  222: \"\\\"\"\n}\n\nvar mac = typeof navigator != \"undefined\" && /Mac/.test(navigator.platform)\nvar ie = typeof navigator != \"undefined\" && /MSIE \\d|Trident\\/(?:[7-9]|\\d{2,})\\..*rv:(\\d+)/.exec(navigator.userAgent)\n\n// Fill in the digit keys\nfor (var i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i)\n\n// The function keys\nfor (var i = 1; i <= 24; i++) base[i + 111] = \"F\" + i\n\n// And the alphabetic keys\nfor (var i = 65; i <= 90; i++) {\n  base[i] = String.fromCharCode(i + 32)\n  shift[i] = String.fromCharCode(i)\n}\n\n// For each code that doesn't have a shift-equivalent, copy the base name\nfor (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code]\n\nfunction keyName(event) {\n  // On macOS, keys held with Shift and Cmd don't reflect the effect of Shift in `.key`.\n  // On IE, shift effect is never included in `.key`.\n  var ignoreKey = mac && event.metaKey && event.shiftKey && !event.ctrlKey && !event.altKey ||\n      ie && event.shiftKey && event.key && event.key.length == 1 ||\n      event.key == \"Unidentified\"\n  var name = (!ignoreKey && event.key) ||\n    (event.shiftKey ? shift : base)[event.keyCode] ||\n    event.key || \"Unidentified\"\n  // Edge sometimes produces wrong names (Issue #3)\n  if (name == \"Esc\") name = \"Escape\"\n  if (name == \"Del\") name = \"Delete\"\n  // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/\n  if (name == \"Left\") name = \"ArrowLeft\"\n  if (name == \"Up\") name = \"ArrowUp\"\n  if (name == \"Right\") name = \"ArrowRight\"\n  if (name == \"Down\") name = \"ArrowDown\"\n  return name\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy93M2Mta2V5bmFtZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0EsMEVBQTBFLEdBQUc7O0FBRTdFO0FBQ0EsZ0JBQWdCLFFBQVE7O0FBRXhCO0FBQ0EsZ0JBQWdCLFNBQVM7O0FBRXpCO0FBQ0EsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxQcm9qZWN0c1xcdHVvbi1pby12MVxcbm9kZV9tb2R1bGVzXFx3M2Mta2V5bmFtZVxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBiYXNlID0ge1xuICA4OiBcIkJhY2tzcGFjZVwiLFxuICA5OiBcIlRhYlwiLFxuICAxMDogXCJFbnRlclwiLFxuICAxMjogXCJOdW1Mb2NrXCIsXG4gIDEzOiBcIkVudGVyXCIsXG4gIDE2OiBcIlNoaWZ0XCIsXG4gIDE3OiBcIkNvbnRyb2xcIixcbiAgMTg6IFwiQWx0XCIsXG4gIDIwOiBcIkNhcHNMb2NrXCIsXG4gIDI3OiBcIkVzY2FwZVwiLFxuICAzMjogXCIgXCIsXG4gIDMzOiBcIlBhZ2VVcFwiLFxuICAzNDogXCJQYWdlRG93blwiLFxuICAzNTogXCJFbmRcIixcbiAgMzY6IFwiSG9tZVwiLFxuICAzNzogXCJBcnJvd0xlZnRcIixcbiAgMzg6IFwiQXJyb3dVcFwiLFxuICAzOTogXCJBcnJvd1JpZ2h0XCIsXG4gIDQwOiBcIkFycm93RG93blwiLFxuICA0NDogXCJQcmludFNjcmVlblwiLFxuICA0NTogXCJJbnNlcnRcIixcbiAgNDY6IFwiRGVsZXRlXCIsXG4gIDU5OiBcIjtcIixcbiAgNjE6IFwiPVwiLFxuICA5MTogXCJNZXRhXCIsXG4gIDkyOiBcIk1ldGFcIixcbiAgMTA2OiBcIipcIixcbiAgMTA3OiBcIitcIixcbiAgMTA4OiBcIixcIixcbiAgMTA5OiBcIi1cIixcbiAgMTEwOiBcIi5cIixcbiAgMTExOiBcIi9cIixcbiAgMTQ0OiBcIk51bUxvY2tcIixcbiAgMTQ1OiBcIlNjcm9sbExvY2tcIixcbiAgMTYwOiBcIlNoaWZ0XCIsXG4gIDE2MTogXCJTaGlmdFwiLFxuICAxNjI6IFwiQ29udHJvbFwiLFxuICAxNjM6IFwiQ29udHJvbFwiLFxuICAxNjQ6IFwiQWx0XCIsXG4gIDE2NTogXCJBbHRcIixcbiAgMTczOiBcIi1cIixcbiAgMTg2OiBcIjtcIixcbiAgMTg3OiBcIj1cIixcbiAgMTg4OiBcIixcIixcbiAgMTg5OiBcIi1cIixcbiAgMTkwOiBcIi5cIixcbiAgMTkxOiBcIi9cIixcbiAgMTkyOiBcImBcIixcbiAgMjE5OiBcIltcIixcbiAgMjIwOiBcIlxcXFxcIixcbiAgMjIxOiBcIl1cIixcbiAgMjIyOiBcIidcIlxufVxuXG5leHBvcnQgdmFyIHNoaWZ0ID0ge1xuICA0ODogXCIpXCIsXG4gIDQ5OiBcIiFcIixcbiAgNTA6IFwiQFwiLFxuICA1MTogXCIjXCIsXG4gIDUyOiBcIiRcIixcbiAgNTM6IFwiJVwiLFxuICA1NDogXCJeXCIsXG4gIDU1OiBcIiZcIixcbiAgNTY6IFwiKlwiLFxuICA1NzogXCIoXCIsXG4gIDU5OiBcIjpcIixcbiAgNjE6IFwiK1wiLFxuICAxNzM6IFwiX1wiLFxuICAxODY6IFwiOlwiLFxuICAxODc6IFwiK1wiLFxuICAxODg6IFwiPFwiLFxuICAxODk6IFwiX1wiLFxuICAxOTA6IFwiPlwiLFxuICAxOTE6IFwiP1wiLFxuICAxOTI6IFwiflwiLFxuICAyMTk6IFwie1wiLFxuICAyMjA6IFwifFwiLFxuICAyMjE6IFwifVwiLFxuICAyMjI6IFwiXFxcIlwiXG59XG5cbnZhciBtYWMgPSB0eXBlb2YgbmF2aWdhdG9yICE9IFwidW5kZWZpbmVkXCIgJiYgL01hYy8udGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pXG52YXIgaWUgPSB0eXBlb2YgbmF2aWdhdG9yICE9IFwidW5kZWZpbmVkXCIgJiYgL01TSUUgXFxkfFRyaWRlbnRcXC8oPzpbNy05XXxcXGR7Mix9KVxcLi4qcnY6KFxcZCspLy5leGVjKG5hdmlnYXRvci51c2VyQWdlbnQpXG5cbi8vIEZpbGwgaW4gdGhlIGRpZ2l0IGtleXNcbmZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykgYmFzZVs0OCArIGldID0gYmFzZVs5NiArIGldID0gU3RyaW5nKGkpXG5cbi8vIFRoZSBmdW5jdGlvbiBrZXlzXG5mb3IgKHZhciBpID0gMTsgaSA8PSAyNDsgaSsrKSBiYXNlW2kgKyAxMTFdID0gXCJGXCIgKyBpXG5cbi8vIEFuZCB0aGUgYWxwaGFiZXRpYyBrZXlzXG5mb3IgKHZhciBpID0gNjU7IGkgPD0gOTA7IGkrKykge1xuICBiYXNlW2ldID0gU3RyaW5nLmZyb21DaGFyQ29kZShpICsgMzIpXG4gIHNoaWZ0W2ldID0gU3RyaW5nLmZyb21DaGFyQ29kZShpKVxufVxuXG4vLyBGb3IgZWFjaCBjb2RlIHRoYXQgZG9lc24ndCBoYXZlIGEgc2hpZnQtZXF1aXZhbGVudCwgY29weSB0aGUgYmFzZSBuYW1lXG5mb3IgKHZhciBjb2RlIGluIGJhc2UpIGlmICghc2hpZnQuaGFzT3duUHJvcGVydHkoY29kZSkpIHNoaWZ0W2NvZGVdID0gYmFzZVtjb2RlXVxuXG5leHBvcnQgZnVuY3Rpb24ga2V5TmFtZShldmVudCkge1xuICAvLyBPbiBtYWNPUywga2V5cyBoZWxkIHdpdGggU2hpZnQgYW5kIENtZCBkb24ndCByZWZsZWN0IHRoZSBlZmZlY3Qgb2YgU2hpZnQgaW4gYC5rZXlgLlxuICAvLyBPbiBJRSwgc2hpZnQgZWZmZWN0IGlzIG5ldmVyIGluY2x1ZGVkIGluIGAua2V5YC5cbiAgdmFyIGlnbm9yZUtleSA9IG1hYyAmJiBldmVudC5tZXRhS2V5ICYmIGV2ZW50LnNoaWZ0S2V5ICYmICFldmVudC5jdHJsS2V5ICYmICFldmVudC5hbHRLZXkgfHxcbiAgICAgIGllICYmIGV2ZW50LnNoaWZ0S2V5ICYmIGV2ZW50LmtleSAmJiBldmVudC5rZXkubGVuZ3RoID09IDEgfHxcbiAgICAgIGV2ZW50LmtleSA9PSBcIlVuaWRlbnRpZmllZFwiXG4gIHZhciBuYW1lID0gKCFpZ25vcmVLZXkgJiYgZXZlbnQua2V5KSB8fFxuICAgIChldmVudC5zaGlmdEtleSA/IHNoaWZ0IDogYmFzZSlbZXZlbnQua2V5Q29kZV0gfHxcbiAgICBldmVudC5rZXkgfHwgXCJVbmlkZW50aWZpZWRcIlxuICAvLyBFZGdlIHNvbWV0aW1lcyBwcm9kdWNlcyB3cm9uZyBuYW1lcyAoSXNzdWUgIzMpXG4gIGlmIChuYW1lID09IFwiRXNjXCIpIG5hbWUgPSBcIkVzY2FwZVwiXG4gIGlmIChuYW1lID09IFwiRGVsXCIpIG5hbWUgPSBcIkRlbGV0ZVwiXG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vZW4tdXMvbWljcm9zb2Z0LWVkZ2UvcGxhdGZvcm0vaXNzdWVzLzg4NjA1NzEvXG4gIGlmIChuYW1lID09IFwiTGVmdFwiKSBuYW1lID0gXCJBcnJvd0xlZnRcIlxuICBpZiAobmFtZSA9PSBcIlVwXCIpIG5hbWUgPSBcIkFycm93VXBcIlxuICBpZiAobmFtZSA9PSBcIlJpZ2h0XCIpIG5hbWUgPSBcIkFycm93UmlnaHRcIlxuICBpZiAobmFtZSA9PSBcIkRvd25cIikgbmFtZSA9IFwiQXJyb3dEb3duXCJcbiAgcmV0dXJuIG5hbWVcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/w3c-keyname/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/y-prosemirror/src/lib.js":
/*!***********************************************!*\
  !*** ./node_modules/y-prosemirror/src/lib.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   absolutePositionToRelativePosition: () => (/* binding */ absolutePositionToRelativePosition),\n/* harmony export */   initProseMirrorDoc: () => (/* binding */ initProseMirrorDoc),\n/* harmony export */   prosemirrorJSONToYDoc: () => (/* binding */ prosemirrorJSONToYDoc),\n/* harmony export */   prosemirrorJSONToYXmlFragment: () => (/* binding */ prosemirrorJSONToYXmlFragment),\n/* harmony export */   prosemirrorToYDoc: () => (/* binding */ prosemirrorToYDoc),\n/* harmony export */   prosemirrorToYXmlFragment: () => (/* binding */ prosemirrorToYXmlFragment),\n/* harmony export */   relativePositionToAbsolutePosition: () => (/* binding */ relativePositionToAbsolutePosition),\n/* harmony export */   setMeta: () => (/* binding */ setMeta),\n/* harmony export */   yDocToProsemirror: () => (/* binding */ yDocToProsemirror),\n/* harmony export */   yDocToProsemirrorJSON: () => (/* binding */ yDocToProsemirrorJSON),\n/* harmony export */   yXmlFragmentToProseMirrorFragment: () => (/* binding */ yXmlFragmentToProseMirrorFragment),\n/* harmony export */   yXmlFragmentToProseMirrorRootNode: () => (/* binding */ yXmlFragmentToProseMirrorRootNode),\n/* harmony export */   yXmlFragmentToProsemirror: () => (/* binding */ yXmlFragmentToProsemirror),\n/* harmony export */   yXmlFragmentToProsemirrorJSON: () => (/* binding */ yXmlFragmentToProsemirrorJSON)\n/* harmony export */ });\n/* harmony import */ var _plugins_sync_plugin_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./plugins/sync-plugin.js */ \"(app-pages-browser)/./node_modules/y-prosemirror/src/plugins/sync-plugin.js\");\n/* harmony import */ var _plugins_keys_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./plugins/keys.js */ \"(app-pages-browser)/./node_modules/y-prosemirror/src/plugins/keys.js\");\n/* harmony import */ var yjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! yjs */ \"(app-pages-browser)/./node_modules/yjs/dist/yjs.mjs\");\n/* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! prosemirror-model */ \"(app-pages-browser)/./node_modules/prosemirror-model/dist/index.js\");\n/* harmony import */ var lib0_error__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lib0/error */ \"(app-pages-browser)/./node_modules/lib0/error.js\");\n/* harmony import */ var lib0_map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lib0/map */ \"(app-pages-browser)/./node_modules/lib0/map.js\");\n/* harmony import */ var lib0_eventloop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lib0/eventloop */ \"(app-pages-browser)/./node_modules/lib0/eventloop.js\");\n // eslint-disable-line\n\n\n // eslint-disable-line\n // eslint-disable-line\n\n\n\n\n/**\n * Either a node if type is YXmlElement or an Array of text nodes if YXmlText\n * @typedef {Map<Y.AbstractType, Node | Array<Node>>} ProsemirrorMapping\n */\n\n/**\n * Is null if no timeout is in progress.\n * Is defined if a timeout is in progress.\n * Maps from view\n * @type {Map<EditorView, Map<any, any>>|null}\n */\nlet viewsToUpdate = null\n\nconst updateMetas = () => {\n  const ups = /** @type {Map<EditorView, Map<any, any>>} */ (viewsToUpdate)\n  viewsToUpdate = null\n  ups.forEach((metas, view) => {\n    const tr = view.state.tr\n    const syncState = _plugins_keys_js__WEBPACK_IMPORTED_MODULE_0__.ySyncPluginKey.getState(view.state)\n    if (syncState && syncState.binding && !syncState.binding.isDestroyed) {\n      metas.forEach((val, key) => {\n        tr.setMeta(key, val)\n      })\n      view.dispatch(tr)\n    }\n  })\n}\n\nconst setMeta = (view, key, value) => {\n  if (!viewsToUpdate) {\n    viewsToUpdate = new Map()\n    lib0_eventloop__WEBPACK_IMPORTED_MODULE_1__.timeout(0, updateMetas)\n  }\n  lib0_map__WEBPACK_IMPORTED_MODULE_2__.setIfUndefined(viewsToUpdate, view, lib0_map__WEBPACK_IMPORTED_MODULE_2__.create).set(key, value)\n}\n\n/**\n * Transforms a Prosemirror based absolute position to a Yjs Cursor (relative position in the Yjs model).\n *\n * @param {number} pos\n * @param {Y.XmlFragment} type\n * @param {ProsemirrorMapping} mapping\n * @return {any} relative position\n */\nconst absolutePositionToRelativePosition = (pos, type, mapping) => {\n  if (pos === 0) {\n    return yjs__WEBPACK_IMPORTED_MODULE_3__.createRelativePositionFromTypeIndex(type, 0, -1)\n  }\n  /**\n   * @type {any}\n   */\n  let n = type._first === null ? null : /** @type {Y.ContentType} */ (type._first.content).type\n  while (n !== null && type !== n) {\n    if (n instanceof yjs__WEBPACK_IMPORTED_MODULE_3__.XmlText) {\n      if (n._length >= pos) {\n        return yjs__WEBPACK_IMPORTED_MODULE_3__.createRelativePositionFromTypeIndex(n, pos, -1)\n      } else {\n        pos -= n._length\n      }\n      if (n._item !== null && n._item.next !== null) {\n        n = /** @type {Y.ContentType} */ (n._item.next.content).type\n      } else {\n        do {\n          n = n._item === null ? null : n._item.parent\n          pos--\n        } while (n !== type && n !== null && n._item !== null && n._item.next === null)\n        if (n !== null && n !== type) {\n          // @ts-gnore we know that n.next !== null because of above loop conditition\n          n = n._item === null ? null : /** @type {Y.ContentType} */ (/** @type Y.Item */ (n._item.next).content).type\n        }\n      }\n    } else {\n      const pNodeSize = /** @type {any} */ (mapping.get(n) || { nodeSize: 0 }).nodeSize\n      if (n._first !== null && pos < pNodeSize) {\n        n = /** @type {Y.ContentType} */ (n._first.content).type\n        pos--\n      } else {\n        if (pos === 1 && n._length === 0 && pNodeSize > 1) {\n          // edge case, should end in this paragraph\n          return new yjs__WEBPACK_IMPORTED_MODULE_3__.RelativePosition(n._item === null ? null : n._item.id, n._item === null ? yjs__WEBPACK_IMPORTED_MODULE_3__.findRootTypeKey(n) : null, null)\n        }\n        pos -= pNodeSize\n        if (n._item !== null && n._item.next !== null) {\n          n = /** @type {Y.ContentType} */ (n._item.next.content).type\n        } else {\n          if (pos === 0) {\n            // set to end of n.parent\n            n = n._item === null ? n : n._item.parent\n            return new yjs__WEBPACK_IMPORTED_MODULE_3__.RelativePosition(n._item === null ? null : n._item.id, n._item === null ? yjs__WEBPACK_IMPORTED_MODULE_3__.findRootTypeKey(n) : null, null)\n          }\n          do {\n            n = /** @type {Y.Item} */ (n._item).parent\n            pos--\n          } while (n !== type && /** @type {Y.Item} */ (n._item).next === null)\n          // if n is null at this point, we have an unexpected case\n          if (n !== type) {\n            // We know that n._item.next is defined because of above loop condition\n            n = /** @type {Y.ContentType} */ (/** @type {Y.Item} */ (/** @type {Y.Item} */ (n._item).next).content).type\n          }\n        }\n      }\n    }\n    if (n === null) {\n      throw lib0_error__WEBPACK_IMPORTED_MODULE_4__.unexpectedCase()\n    }\n    if (pos === 0 && n.constructor !== yjs__WEBPACK_IMPORTED_MODULE_3__.XmlText && n !== type) { // TODO: set to <= 0\n      return createRelativePosition(n._item.parent, n._item)\n    }\n  }\n  return yjs__WEBPACK_IMPORTED_MODULE_3__.createRelativePositionFromTypeIndex(type, type._length, -1)\n}\n\nconst createRelativePosition = (type, item) => {\n  let typeid = null\n  let tname = null\n  if (type._item === null) {\n    tname = yjs__WEBPACK_IMPORTED_MODULE_3__.findRootTypeKey(type)\n  } else {\n    typeid = yjs__WEBPACK_IMPORTED_MODULE_3__.createID(type._item.id.client, type._item.id.clock)\n  }\n  return new yjs__WEBPACK_IMPORTED_MODULE_3__.RelativePosition(typeid, tname, item.id)\n}\n\n/**\n * @param {Y.Doc} y\n * @param {Y.XmlFragment} documentType Top level type that is bound to pView\n * @param {any} relPos Encoded Yjs based relative position\n * @param {ProsemirrorMapping} mapping\n * @return {null|number}\n */\nconst relativePositionToAbsolutePosition = (y, documentType, relPos, mapping) => {\n  const decodedPos = yjs__WEBPACK_IMPORTED_MODULE_3__.createAbsolutePositionFromRelativePosition(relPos, y)\n  if (decodedPos === null || (decodedPos.type !== documentType && !yjs__WEBPACK_IMPORTED_MODULE_3__.isParentOf(documentType, decodedPos.type._item))) {\n    return null\n  }\n  let type = decodedPos.type\n  let pos = 0\n  if (type.constructor === yjs__WEBPACK_IMPORTED_MODULE_3__.XmlText) {\n    pos = decodedPos.index\n  } else if (type._item === null || !type._item.deleted) {\n    let n = type._first\n    let i = 0\n    while (i < type._length && i < decodedPos.index && n !== null) {\n      if (!n.deleted) {\n        const t = /** @type {Y.ContentType} */ (n.content).type\n        i++\n        if (t instanceof yjs__WEBPACK_IMPORTED_MODULE_3__.XmlText) {\n          pos += t._length\n        } else {\n          pos += /** @type {any} */ (mapping.get(t)).nodeSize\n        }\n      }\n      n = /** @type {Y.Item} */ (n.right)\n    }\n    pos += 1 // increase because we go out of n\n  }\n  while (type !== documentType && type._item !== null) {\n    // @ts-ignore\n    const parent = type._item.parent\n    // @ts-ignore\n    if (parent._item === null || !parent._item.deleted) {\n      pos += 1 // the start tag\n      let n = /** @type {Y.AbstractType} */ (parent)._first\n      // now iterate until we found type\n      while (n !== null) {\n        const contentType = /** @type {Y.ContentType} */ (n.content).type\n        if (contentType === type) {\n          break\n        }\n        if (!n.deleted) {\n          if (contentType instanceof yjs__WEBPACK_IMPORTED_MODULE_3__.XmlText) {\n            pos += contentType._length\n          } else {\n            pos += /** @type {any} */ (mapping.get(contentType)).nodeSize\n          }\n        }\n        n = n.right\n      }\n    }\n    type = /** @type {Y.AbstractType} */ (parent)\n  }\n  return pos - 1 // we don't count the most outer tag, because it is a fragment\n}\n\n/**\n * Utility function for converting an Y.Fragment to a ProseMirror fragment.\n *\n * @param {Y.XmlFragment} yXmlFragment\n * @param {Schema} schema\n */\nconst yXmlFragmentToProseMirrorFragment = (yXmlFragment, schema) => {\n  const fragmentContent = yXmlFragment.toArray().map((t) =>\n    (0,_plugins_sync_plugin_js__WEBPACK_IMPORTED_MODULE_5__.createNodeFromYElement)(\n      /** @type {Y.XmlElement} */ (t),\n      schema,\n      (0,_plugins_sync_plugin_js__WEBPACK_IMPORTED_MODULE_5__.createEmptyMeta)()\n    )\n  ).filter((n) => n !== null)\n  return prosemirror_model__WEBPACK_IMPORTED_MODULE_6__.Fragment.fromArray(fragmentContent)\n}\n\n/**\n * Utility function for converting an Y.Fragment to a ProseMirror node.\n *\n * @param {Y.XmlFragment} yXmlFragment\n * @param {Schema} schema\n */\nconst yXmlFragmentToProseMirrorRootNode = (yXmlFragment, schema) =>\n  schema.topNodeType.create(null, yXmlFragmentToProseMirrorFragment(yXmlFragment, schema))\n\n/**\n * The initial ProseMirror content should be supplied by Yjs. This function transforms a Y.Fragment\n * to a ProseMirror Doc node and creates a mapping that is used by the sync plugin.\n *\n * @param {Y.XmlFragment} yXmlFragment\n * @param {Schema} schema\n */\nconst initProseMirrorDoc = (yXmlFragment, schema) => {\n  const meta = (0,_plugins_sync_plugin_js__WEBPACK_IMPORTED_MODULE_5__.createEmptyMeta)()\n  const fragmentContent = yXmlFragment.toArray().map((t) =>\n    (0,_plugins_sync_plugin_js__WEBPACK_IMPORTED_MODULE_5__.createNodeFromYElement)(\n      /** @type {Y.XmlElement} */ (t),\n      schema,\n      meta\n    )\n  ).filter((n) => n !== null)\n  const doc = schema.topNodeType.create(null, prosemirror_model__WEBPACK_IMPORTED_MODULE_6__.Fragment.fromArray(fragmentContent))\n  return { doc, meta: meta.mapping }\n}\n\n/**\n * Utility method to convert a Prosemirror Doc Node into a Y.Doc.\n *\n * This can be used when importing existing content to Y.Doc for the first time,\n * note that this should not be used to rehydrate a Y.Doc from a database once\n * collaboration has begun as all history will be lost\n *\n * @param {Node} doc\n * @param {string} xmlFragment\n * @return {Y.Doc}\n */\nfunction prosemirrorToYDoc (doc, xmlFragment = 'prosemirror') {\n  const ydoc = new yjs__WEBPACK_IMPORTED_MODULE_3__.Doc()\n  const type = /** @type {Y.XmlFragment} */ (ydoc.get(xmlFragment, yjs__WEBPACK_IMPORTED_MODULE_3__.XmlFragment))\n  if (!type.doc) {\n    return ydoc\n  }\n\n  prosemirrorToYXmlFragment(doc, type)\n  return type.doc\n}\n\n/**\n * Utility method to update an empty Y.XmlFragment with content from a Prosemirror Doc Node.\n *\n * This can be used when importing existing content to Y.Doc for the first time,\n * note that this should not be used to rehydrate a Y.Doc from a database once\n * collaboration has begun as all history will be lost\n *\n * Note: The Y.XmlFragment does not need to be part of a Y.Doc document at the time that this\n * method is called, but it must be added before any other operations are performed on it.\n *\n * @param {Node} doc prosemirror document.\n * @param {Y.XmlFragment} [xmlFragment] If supplied, an xml fragment to be\n *   populated from the prosemirror state; otherwise a new XmlFragment will be created.\n * @return {Y.XmlFragment}\n */\nfunction prosemirrorToYXmlFragment (doc, xmlFragment) {\n  const type = xmlFragment || new yjs__WEBPACK_IMPORTED_MODULE_3__.XmlFragment()\n  const ydoc = type.doc ? type.doc : { transact: (transaction) => transaction(undefined) }\n  ;(0,_plugins_sync_plugin_js__WEBPACK_IMPORTED_MODULE_5__.updateYFragment)(ydoc, type, doc, { mapping: new Map(), isOMark: new Map() })\n  return type\n}\n\n/**\n * Utility method to convert Prosemirror compatible JSON into a Y.Doc.\n *\n * This can be used when importing existing content to Y.Doc for the first time,\n * note that this should not be used to rehydrate a Y.Doc from a database once\n * collaboration has begun as all history will be lost\n *\n * @param {Schema} schema\n * @param {any} state\n * @param {string} xmlFragment\n * @return {Y.Doc}\n */\nfunction prosemirrorJSONToYDoc (schema, state, xmlFragment = 'prosemirror') {\n  const doc = prosemirror_model__WEBPACK_IMPORTED_MODULE_6__.Node.fromJSON(schema, state)\n  return prosemirrorToYDoc(doc, xmlFragment)\n}\n\n/**\n * Utility method to convert Prosemirror compatible JSON to a Y.XmlFragment\n *\n * This can be used when importing existing content to Y.Doc for the first time,\n * note that this should not be used to rehydrate a Y.Doc from a database once\n * collaboration has begun as all history will be lost\n *\n * @param {Schema} schema\n * @param {any} state\n * @param {Y.XmlFragment} [xmlFragment] If supplied, an xml fragment to be\n *   populated from the prosemirror state; otherwise a new XmlFragment will be created.\n * @return {Y.XmlFragment}\n */\nfunction prosemirrorJSONToYXmlFragment (schema, state, xmlFragment) {\n  const doc = prosemirror_model__WEBPACK_IMPORTED_MODULE_6__.Node.fromJSON(schema, state)\n  return prosemirrorToYXmlFragment(doc, xmlFragment)\n}\n\n/**\n * @deprecated Use `yXmlFragmentToProseMirrorRootNode` instead\n *\n * Utility method to convert a Y.Doc to a Prosemirror Doc node.\n *\n * @param {Schema} schema\n * @param {Y.Doc} ydoc\n * @return {Node}\n */\nfunction yDocToProsemirror (schema, ydoc) {\n  const state = yDocToProsemirrorJSON(ydoc)\n  return prosemirror_model__WEBPACK_IMPORTED_MODULE_6__.Node.fromJSON(schema, state)\n}\n\n/**\n *\n * @deprecated Use `yXmlFragmentToProseMirrorRootNode` instead\n *\n * Utility method to convert a Y.XmlFragment to a Prosemirror Doc node.\n *\n * @param {Schema} schema\n * @param {Y.XmlFragment} xmlFragment\n * @return {Node}\n */\nfunction yXmlFragmentToProsemirror (schema, xmlFragment) {\n  const state = yXmlFragmentToProsemirrorJSON(xmlFragment)\n  return prosemirror_model__WEBPACK_IMPORTED_MODULE_6__.Node.fromJSON(schema, state)\n}\n\n/**\n *\n * @deprecated Use `yXmlFragmentToProseMirrorRootNode` instead\n *\n * Utility method to convert a Y.Doc to Prosemirror compatible JSON.\n *\n * @param {Y.Doc} ydoc\n * @param {string} xmlFragment\n * @return {Record<string, any>}\n */\nfunction yDocToProsemirrorJSON (\n  ydoc,\n  xmlFragment = 'prosemirror'\n) {\n  return yXmlFragmentToProsemirrorJSON(ydoc.getXmlFragment(xmlFragment))\n}\n\n/**\n * @deprecated Use `yXmlFragmentToProseMirrorRootNode` instead\n *\n * Utility method to convert a Y.Doc to Prosemirror compatible JSON.\n *\n * @param {Y.XmlFragment} xmlFragment The fragment, which must be part of a Y.Doc.\n * @return {Record<string, any>}\n */\nfunction yXmlFragmentToProsemirrorJSON (xmlFragment) {\n  const items = xmlFragment.toArray()\n\n  /**\n   * @param {Y.AbstractType} item\n   */\n  const serialize = item => {\n    /**\n     * @type {Object} NodeObject\n     * @property {string} NodeObject.type\n     * @property {Record<string, string>=} NodeObject.attrs\n     * @property {Array<NodeObject>=} NodeObject.content\n     */\n    let response\n\n    // TODO: Must be a better way to detect text nodes than this\n    if (item instanceof yjs__WEBPACK_IMPORTED_MODULE_3__.XmlText) {\n      const delta = item.toDelta()\n      response = delta.map(/** @param {any} d */ (d) => {\n        const text = {\n          type: 'text',\n          text: d.insert\n        }\n        if (d.attributes) {\n          text.marks = Object.keys(d.attributes).map((type_) => {\n            const attrs = d.attributes[type_]\n            const type = (0,_plugins_sync_plugin_js__WEBPACK_IMPORTED_MODULE_5__.yattr2markname)(type_)\n            const mark = {\n              type\n            }\n            if (Object.keys(attrs)) {\n              mark.attrs = attrs\n            }\n            return mark\n          })\n        }\n        return text\n      })\n    } else if (item instanceof yjs__WEBPACK_IMPORTED_MODULE_3__.XmlElement) {\n      response = {\n        type: item.nodeName\n      }\n\n      const attrs = item.getAttributes()\n      if (Object.keys(attrs).length) {\n        response.attrs = attrs\n      }\n\n      const children = item.toArray()\n      if (children.length) {\n        response.content = children.map(serialize).flat()\n      }\n    } else {\n      // expected either Y.XmlElement or Y.XmlText\n      lib0_error__WEBPACK_IMPORTED_MODULE_4__.unexpectedCase()\n    }\n\n    return response\n  }\n\n  return {\n    type: 'doc',\n    content: items.map(serialize)\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/y-prosemirror/src/lib.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/y-prosemirror/src/plugins/cursor-plugin.js":
/*!*****************************************************************!*\
  !*** ./node_modules/y-prosemirror/src/plugins/cursor-plugin.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDecorations: () => (/* binding */ createDecorations),\n/* harmony export */   defaultAwarenessStateFilter: () => (/* binding */ defaultAwarenessStateFilter),\n/* harmony export */   defaultCursorBuilder: () => (/* binding */ defaultCursorBuilder),\n/* harmony export */   defaultSelectionBuilder: () => (/* binding */ defaultSelectionBuilder),\n/* harmony export */   yCursorPlugin: () => (/* binding */ yCursorPlugin)\n/* harmony export */ });\n/* harmony import */ var yjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! yjs */ \"(app-pages-browser)/./node_modules/yjs/dist/yjs.mjs\");\n/* harmony import */ var prosemirror_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prosemirror-view */ \"(app-pages-browser)/./node_modules/prosemirror-view/dist/index.js\");\n/* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! prosemirror-state */ \"(app-pages-browser)/./node_modules/prosemirror-state/dist/index.js\");\n/* harmony import */ var y_protocols_awareness__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! y-protocols/awareness */ \"(app-pages-browser)/./node_modules/y-protocols/awareness.js\");\n/* harmony import */ var _lib_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib.js */ \"(app-pages-browser)/./node_modules/y-prosemirror/src/lib.js\");\n/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keys.js */ \"(app-pages-browser)/./node_modules/y-prosemirror/src/plugins/keys.js\");\n/* harmony import */ var lib0_math__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lib0/math */ \"(app-pages-browser)/./node_modules/lib0/math.js\");\n\n // eslint-disable-line\n // eslint-disable-line\n // eslint-disable-line\n\n\n\n\n\n/**\n * Default awareness state filter\n *\n * @param {number} currentClientId current client id\n * @param {number} userClientId user client id\n * @param {any} _user user data\n * @return {boolean}\n */\nconst defaultAwarenessStateFilter = (currentClientId, userClientId, _user) => currentClientId !== userClientId\n\n/**\n * Default generator for a cursor element\n *\n * @param {any} user user data\n * @return {HTMLElement}\n */\nconst defaultCursorBuilder = (user) => {\n  const cursor = document.createElement('span')\n  cursor.classList.add('ProseMirror-yjs-cursor')\n  cursor.setAttribute('style', `border-color: ${user.color}`)\n  const userDiv = document.createElement('div')\n  userDiv.setAttribute('style', `background-color: ${user.color}`)\n  userDiv.insertBefore(document.createTextNode(user.name), null)\n  const nonbreakingSpace1 = document.createTextNode('\\u2060')\n  const nonbreakingSpace2 = document.createTextNode('\\u2060')\n  cursor.insertBefore(nonbreakingSpace1, null)\n  cursor.insertBefore(userDiv, null)\n  cursor.insertBefore(nonbreakingSpace2, null)\n  return cursor\n}\n\n/**\n * Default generator for the selection attributes\n *\n * @param {any} user user data\n * @return {import('prosemirror-view').DecorationAttrs}\n */\nconst defaultSelectionBuilder = (user) => {\n  return {\n    style: `background-color: ${user.color}70`,\n    class: 'ProseMirror-yjs-selection'\n  }\n}\n\nconst rxValidColor = /^#[0-9a-fA-F]{6}$/\n\n/**\n * @param {any} state\n * @param {Awareness} awareness\n * @param {function(number, number, any):boolean} awarenessFilter\n * @param {(user: { name: string, color: string }, clientId: number) => Element} createCursor\n * @param {(user: { name: string, color: string }, clientId: number) => import('prosemirror-view').DecorationAttrs} createSelection\n * @return {any} DecorationSet\n */\nconst createDecorations = (\n  state,\n  awareness,\n  awarenessFilter,\n  createCursor,\n  createSelection\n) => {\n  const ystate = _keys_js__WEBPACK_IMPORTED_MODULE_1__.ySyncPluginKey.getState(state)\n  const y = ystate.doc\n  const decorations = []\n  if (\n    ystate.snapshot != null || ystate.prevSnapshot != null ||\n    ystate.binding.mapping.size === 0\n  ) {\n    // do not render cursors while snapshot is active\n    return prosemirror_view__WEBPACK_IMPORTED_MODULE_2__.DecorationSet.create(state.doc, [])\n  }\n  awareness.getStates().forEach((aw, clientId) => {\n    if (!awarenessFilter(y.clientID, clientId, aw)) {\n      return\n    }\n\n    if (aw.cursor != null) {\n      const user = aw.user || {}\n      if (user.color == null) {\n        user.color = '#ffa500'\n      } else if (!rxValidColor.test(user.color)) {\n        // We only support 6-digit RGB colors in y-prosemirror\n        console.warn('A user uses an unsupported color format', user)\n      }\n      if (user.name == null) {\n        user.name = `User: ${clientId}`\n      }\n      let anchor = (0,_lib_js__WEBPACK_IMPORTED_MODULE_3__.relativePositionToAbsolutePosition)(\n        y,\n        ystate.type,\n        yjs__WEBPACK_IMPORTED_MODULE_4__.createRelativePositionFromJSON(aw.cursor.anchor),\n        ystate.binding.mapping\n      )\n      let head = (0,_lib_js__WEBPACK_IMPORTED_MODULE_3__.relativePositionToAbsolutePosition)(\n        y,\n        ystate.type,\n        yjs__WEBPACK_IMPORTED_MODULE_4__.createRelativePositionFromJSON(aw.cursor.head),\n        ystate.binding.mapping\n      )\n      if (anchor !== null && head !== null) {\n        const maxsize = lib0_math__WEBPACK_IMPORTED_MODULE_5__.max(state.doc.content.size - 1, 0)\n        anchor = lib0_math__WEBPACK_IMPORTED_MODULE_5__.min(anchor, maxsize)\n        head = lib0_math__WEBPACK_IMPORTED_MODULE_5__.min(head, maxsize)\n        decorations.push(\n          prosemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.widget(head, () => createCursor(user, clientId), {\n            key: clientId + '',\n            side: 10\n          })\n        )\n        const from = lib0_math__WEBPACK_IMPORTED_MODULE_5__.min(anchor, head)\n        const to = lib0_math__WEBPACK_IMPORTED_MODULE_5__.max(anchor, head)\n        decorations.push(\n          prosemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.inline(from, to, createSelection(user, clientId), {\n            inclusiveEnd: true,\n            inclusiveStart: false\n          })\n        )\n      }\n    }\n  })\n  return prosemirror_view__WEBPACK_IMPORTED_MODULE_2__.DecorationSet.create(state.doc, decorations)\n}\n\n/**\n * A prosemirror plugin that listens to awareness information on Yjs.\n * This requires that a `prosemirrorPlugin` is also bound to the prosemirror.\n *\n * @public\n * @param {Awareness} awareness\n * @param {object} opts\n * @param {function(any, any, any):boolean} [opts.awarenessStateFilter]\n * @param {(user: any, clientId: number) => HTMLElement} [opts.cursorBuilder]\n * @param {(user: any, clientId: number) => import('prosemirror-view').DecorationAttrs} [opts.selectionBuilder]\n * @param {function(any):any} [opts.getSelection]\n * @param {string} [cursorStateField] By default all editor bindings use the awareness 'cursor' field to propagate cursor information.\n * @return {any}\n */\nconst yCursorPlugin = (\n  awareness,\n  {\n    awarenessStateFilter = defaultAwarenessStateFilter,\n    cursorBuilder = defaultCursorBuilder,\n    selectionBuilder = defaultSelectionBuilder,\n    getSelection = (state) => state.selection\n  } = {},\n  cursorStateField = 'cursor'\n) =>\n  new prosemirror_state__WEBPACK_IMPORTED_MODULE_6__.Plugin({\n    key: _keys_js__WEBPACK_IMPORTED_MODULE_1__.yCursorPluginKey,\n    state: {\n      init (_, state) {\n        return createDecorations(\n          state,\n          awareness,\n          awarenessStateFilter,\n          cursorBuilder,\n          selectionBuilder\n        )\n      },\n      apply (tr, prevState, _oldState, newState) {\n        const ystate = _keys_js__WEBPACK_IMPORTED_MODULE_1__.ySyncPluginKey.getState(newState)\n        const yCursorState = tr.getMeta(_keys_js__WEBPACK_IMPORTED_MODULE_1__.yCursorPluginKey)\n        if (\n          (ystate && ystate.isChangeOrigin) ||\n          (yCursorState && yCursorState.awarenessUpdated)\n        ) {\n          return createDecorations(\n            newState,\n            awareness,\n            awarenessStateFilter,\n            cursorBuilder,\n            selectionBuilder\n          )\n        }\n        return prevState.map(tr.mapping, tr.doc)\n      }\n    },\n    props: {\n      decorations: (state) => {\n        return _keys_js__WEBPACK_IMPORTED_MODULE_1__.yCursorPluginKey.getState(state)\n      }\n    },\n    view: (view) => {\n      const awarenessListener = () => {\n        // @ts-ignore\n        if (view.docView) {\n          (0,_lib_js__WEBPACK_IMPORTED_MODULE_3__.setMeta)(view, _keys_js__WEBPACK_IMPORTED_MODULE_1__.yCursorPluginKey, { awarenessUpdated: true })\n        }\n      }\n      const updateCursorInfo = () => {\n        const ystate = _keys_js__WEBPACK_IMPORTED_MODULE_1__.ySyncPluginKey.getState(view.state)\n        // @note We make implicit checks when checking for the cursor property\n        const current = awareness.getLocalState() || {}\n        if (view.hasFocus()) {\n          const selection = getSelection(view.state)\n          /**\n           * @type {Y.RelativePosition}\n           */\n          const anchor = (0,_lib_js__WEBPACK_IMPORTED_MODULE_3__.absolutePositionToRelativePosition)(\n            selection.anchor,\n            ystate.type,\n            ystate.binding.mapping\n          )\n          /**\n           * @type {Y.RelativePosition}\n           */\n          const head = (0,_lib_js__WEBPACK_IMPORTED_MODULE_3__.absolutePositionToRelativePosition)(\n            selection.head,\n            ystate.type,\n            ystate.binding.mapping\n          )\n          if (\n            current.cursor == null ||\n            !yjs__WEBPACK_IMPORTED_MODULE_4__.compareRelativePositions(\n              yjs__WEBPACK_IMPORTED_MODULE_4__.createRelativePositionFromJSON(current.cursor.anchor),\n              anchor\n            ) ||\n            !yjs__WEBPACK_IMPORTED_MODULE_4__.compareRelativePositions(\n              yjs__WEBPACK_IMPORTED_MODULE_4__.createRelativePositionFromJSON(current.cursor.head),\n              head\n            )\n          ) {\n            awareness.setLocalStateField(cursorStateField, {\n              anchor,\n              head\n            })\n          }\n        } else if (\n          current.cursor != null &&\n          (0,_lib_js__WEBPACK_IMPORTED_MODULE_3__.relativePositionToAbsolutePosition)(\n            ystate.doc,\n            ystate.type,\n            yjs__WEBPACK_IMPORTED_MODULE_4__.createRelativePositionFromJSON(current.cursor.anchor),\n            ystate.binding.mapping\n          ) !== null\n        ) {\n          // delete cursor information if current cursor information is owned by this editor binding\n          awareness.setLocalStateField(cursorStateField, null)\n        }\n      }\n      awareness.on('change', awarenessListener)\n      view.dom.addEventListener('focusin', updateCursorInfo)\n      view.dom.addEventListener('focusout', updateCursorInfo)\n      return {\n        update: updateCursorInfo,\n        destroy: () => {\n          view.dom.removeEventListener('focusin', updateCursorInfo)\n          view.dom.removeEventListener('focusout', updateCursorInfo)\n          awareness.off('change', awarenessListener)\n          awareness.setLocalStateField(cursorStateField, null)\n        }\n      }\n    }\n  })\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/y-prosemirror/src/plugins/cursor-plugin.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/y-prosemirror/src/plugins/keys.js":
/*!********************************************************!*\
  !*** ./node_modules/y-prosemirror/src/plugins/keys.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   yCursorPluginKey: () => (/* binding */ yCursorPluginKey),\n/* harmony export */   ySyncPluginKey: () => (/* binding */ ySyncPluginKey),\n/* harmony export */   yUndoPluginKey: () => (/* binding */ yUndoPluginKey)\n/* harmony export */ });\n/* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-state */ \"(app-pages-browser)/./node_modules/prosemirror-state/dist/index.js\");\n // eslint-disable-line\n\n/**\n * The unique prosemirror plugin key for syncPlugin\n *\n * @public\n */\nconst ySyncPluginKey = new prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey('y-sync')\n\n/**\n * The unique prosemirror plugin key for undoPlugin\n *\n * @public\n */\nconst yUndoPluginKey = new prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey('y-undo')\n\n/**\n * The unique prosemirror plugin key for cursorPlugin\n *\n * @public\n */\nconst yCursorPluginKey = new prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey('yjs-cursor')\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy95LXByb3NlbWlycm9yL3NyYy9wbHVnaW5zL2tleXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE2Qzs7QUFFN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLDJCQUEyQix3REFBUzs7QUFFM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLDJCQUEyQix3REFBUzs7QUFFM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLDZCQUE2Qix3REFBUyIsInNvdXJjZXMiOlsiQzpcXFByb2plY3RzXFx0dW9uLWlvLXYxXFxub2RlX21vZHVsZXNcXHktcHJvc2VtaXJyb3JcXHNyY1xccGx1Z2luc1xca2V5cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQbHVnaW5LZXkgfSBmcm9tICdwcm9zZW1pcnJvci1zdGF0ZScgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4vKipcbiAqIFRoZSB1bmlxdWUgcHJvc2VtaXJyb3IgcGx1Z2luIGtleSBmb3Igc3luY1BsdWdpblxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IHlTeW5jUGx1Z2luS2V5ID0gbmV3IFBsdWdpbktleSgneS1zeW5jJylcblxuLyoqXG4gKiBUaGUgdW5pcXVlIHByb3NlbWlycm9yIHBsdWdpbiBrZXkgZm9yIHVuZG9QbHVnaW5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCB5VW5kb1BsdWdpbktleSA9IG5ldyBQbHVnaW5LZXkoJ3ktdW5kbycpXG5cbi8qKlxuICogVGhlIHVuaXF1ZSBwcm9zZW1pcnJvciBwbHVnaW4ga2V5IGZvciBjdXJzb3JQbHVnaW5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCB5Q3Vyc29yUGx1Z2luS2V5ID0gbmV3IFBsdWdpbktleSgneWpzLWN1cnNvcicpXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/y-prosemirror/src/plugins/keys.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/y-prosemirror/src/plugins/sync-plugin.js":
/*!***************************************************************!*\
  !*** ./node_modules/y-prosemirror/src/plugins/sync-plugin.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProsemirrorBinding: () => (/* binding */ ProsemirrorBinding),\n/* harmony export */   attributesToMarks: () => (/* binding */ attributesToMarks),\n/* harmony export */   createEmptyMeta: () => (/* binding */ createEmptyMeta),\n/* harmony export */   createNodeFromYElement: () => (/* binding */ createNodeFromYElement),\n/* harmony export */   getRelativeSelection: () => (/* binding */ getRelativeSelection),\n/* harmony export */   isVisible: () => (/* binding */ isVisible),\n/* harmony export */   updateYFragment: () => (/* binding */ updateYFragment),\n/* harmony export */   ySyncPlugin: () => (/* binding */ ySyncPlugin),\n/* harmony export */   yattr2markname: () => (/* binding */ yattr2markname)\n/* harmony export */ });\n/* harmony import */ var lib0_mutex__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lib0/mutex */ \"(app-pages-browser)/./node_modules/lib0/mutex.js\");\n/* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! prosemirror-model */ \"(app-pages-browser)/./node_modules/prosemirror-model/dist/index.js\");\n/* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! prosemirror-state */ \"(app-pages-browser)/./node_modules/prosemirror-state/dist/index.js\");\n/* harmony import */ var lib0_math__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lib0/math */ \"(app-pages-browser)/./node_modules/lib0/math.js\");\n/* harmony import */ var lib0_object__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! lib0/object */ \"(app-pages-browser)/./node_modules/lib0/object.js\");\n/* harmony import */ var lib0_set__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lib0/set */ \"(app-pages-browser)/./node_modules/lib0/set.js\");\n/* harmony import */ var lib0_diff__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! lib0/diff */ \"(app-pages-browser)/./node_modules/lib0/diff.js\");\n/* harmony import */ var lib0_error__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! lib0/error */ \"(app-pages-browser)/./node_modules/lib0/error.js\");\n/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./keys.js */ \"(app-pages-browser)/./node_modules/y-prosemirror/src/plugins/keys.js\");\n/* harmony import */ var yjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! yjs */ \"(app-pages-browser)/./node_modules/yjs/dist/yjs.mjs\");\n/* harmony import */ var _lib_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../lib.js */ \"(app-pages-browser)/./node_modules/y-prosemirror/src/lib.js\");\n/* harmony import */ var lib0_random__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lib0/random */ \"(app-pages-browser)/./node_modules/lib0/random.js\");\n/* harmony import */ var lib0_environment__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lib0/environment */ \"(app-pages-browser)/./node_modules/lib0/environment.js\");\n/* harmony import */ var lib0_dom__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lib0/dom */ \"(app-pages-browser)/./node_modules/lib0/dom.js\");\n/* harmony import */ var lib0_eventloop__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lib0/eventloop */ \"(app-pages-browser)/./node_modules/lib0/eventloop.js\");\n/* harmony import */ var lib0_map__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! lib0/map */ \"(app-pages-browser)/./node_modules/lib0/map.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../utils.js */ \"(app-pages-browser)/./node_modules/y-prosemirror/src/utils.js\");\n/**\n * @module bindings/prosemirror\n */\n\n\n\n // eslint-disable-line\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @typedef {Object} BindingMetadata\n * @property {ProsemirrorMapping} BindingMetadata.mapping\n * @property {Map<import('prosemirror-model').MarkType, boolean>} BindingMetadata.isOMark - is overlapping mark\n */\n\n/**\n * @return BindingMetadata\n */\nconst createEmptyMeta = () => ({\n  mapping: new Map(),\n  isOMark: new Map()\n})\n\n/**\n * @param {Y.Item} item\n * @param {Y.Snapshot} [snapshot]\n */\nconst isVisible = (item, snapshot) =>\n  snapshot === undefined\n    ? !item.deleted\n    : (snapshot.sv.has(item.id.client) && /** @type {number} */\n      (snapshot.sv.get(item.id.client)) > item.id.clock &&\n      !yjs__WEBPACK_IMPORTED_MODULE_0__.isDeleted(snapshot.ds, item.id))\n\n/**\n * Either a node if type is YXmlElement or an Array of text nodes if YXmlText\n * @typedef {Map<Y.AbstractType<any>, PModel.Node | Array<PModel.Node>>} ProsemirrorMapping\n */\n\n/**\n * @typedef {Object} ColorDef\n * @property {string} ColorDef.light\n * @property {string} ColorDef.dark\n */\n\n/**\n * @typedef {Object} YSyncOpts\n * @property {Array<ColorDef>} [YSyncOpts.colors]\n * @property {Map<string,ColorDef>} [YSyncOpts.colorMapping]\n * @property {Y.PermanentUserData|null} [YSyncOpts.permanentUserData]\n * @property {ProsemirrorMapping} [YSyncOpts.mapping]\n * @property {function} [YSyncOpts.onFirstRender] Fired when the content from Yjs is initially rendered to ProseMirror\n */\n\n/**\n * @type {Array<ColorDef>}\n */\nconst defaultColors = [{ light: '#ecd44433', dark: '#ecd444' }]\n\n/**\n * @param {Map<string,ColorDef>} colorMapping\n * @param {Array<ColorDef>} colors\n * @param {string} user\n * @return {ColorDef}\n */\nconst getUserColor = (colorMapping, colors, user) => {\n  // @todo do not hit the same color twice if possible\n  if (!colorMapping.has(user)) {\n    if (colorMapping.size < colors.length) {\n      const usedColors = lib0_set__WEBPACK_IMPORTED_MODULE_1__.create()\n      colorMapping.forEach((color) => usedColors.add(color))\n      colors = colors.filter((color) => !usedColors.has(color))\n    }\n    colorMapping.set(user, lib0_random__WEBPACK_IMPORTED_MODULE_2__.oneOf(colors))\n  }\n  return /** @type {ColorDef} */ (colorMapping.get(user))\n}\n\n/**\n * This plugin listens to changes in prosemirror view and keeps yXmlState and view in sync.\n *\n * This plugin also keeps references to the type and the shared document so other plugins can access it.\n * @param {Y.XmlFragment} yXmlFragment\n * @param {YSyncOpts} opts\n * @return {any} Returns a prosemirror plugin that binds to this type\n */\nconst ySyncPlugin = (yXmlFragment, {\n  colors = defaultColors,\n  colorMapping = new Map(),\n  permanentUserData = null,\n  onFirstRender = () => {},\n  mapping\n} = {}) => {\n  let initialContentChanged = false\n  const binding = new ProsemirrorBinding(yXmlFragment, mapping)\n  const plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_3__.Plugin({\n    props: {\n      editable: (state) => {\n        const syncState = _keys_js__WEBPACK_IMPORTED_MODULE_4__.ySyncPluginKey.getState(state)\n        return syncState.snapshot == null && syncState.prevSnapshot == null\n      }\n    },\n    key: _keys_js__WEBPACK_IMPORTED_MODULE_4__.ySyncPluginKey,\n    state: {\n      /**\n       * @returns {any}\n       */\n      init: (_initargs, _state) => {\n        return {\n          type: yXmlFragment,\n          doc: yXmlFragment.doc,\n          binding,\n          snapshot: null,\n          prevSnapshot: null,\n          isChangeOrigin: false,\n          isUndoRedoOperation: false,\n          addToHistory: true,\n          colors,\n          colorMapping,\n          permanentUserData\n        }\n      },\n      apply: (tr, pluginState) => {\n        const change = tr.getMeta(_keys_js__WEBPACK_IMPORTED_MODULE_4__.ySyncPluginKey)\n        if (change !== undefined) {\n          pluginState = Object.assign({}, pluginState)\n          for (const key in change) {\n            pluginState[key] = change[key]\n          }\n        }\n        pluginState.addToHistory = tr.getMeta('addToHistory') !== false\n        // always set isChangeOrigin. If undefined, this is not change origin.\n        pluginState.isChangeOrigin = change !== undefined &&\n          !!change.isChangeOrigin\n        pluginState.isUndoRedoOperation = change !== undefined && !!change.isChangeOrigin && !!change.isUndoRedoOperation\n        if (binding.prosemirrorView !== null) {\n          if (\n            change !== undefined &&\n            (change.snapshot != null || change.prevSnapshot != null)\n          ) {\n            // snapshot changed, rerender next\n            lib0_eventloop__WEBPACK_IMPORTED_MODULE_5__.timeout(0, () => {\n              if (binding.prosemirrorView == null) {\n                return\n              }\n              if (change.restore == null) {\n                binding._renderSnapshot(\n                  change.snapshot,\n                  change.prevSnapshot,\n                  pluginState\n                )\n              } else {\n                binding._renderSnapshot(\n                  change.snapshot,\n                  change.snapshot,\n                  pluginState\n                )\n                // reset to current prosemirror state\n                delete pluginState.restore\n                delete pluginState.snapshot\n                delete pluginState.prevSnapshot\n                binding.mux(() => {\n                  binding._prosemirrorChanged(\n                    binding.prosemirrorView.state.doc\n                  )\n                })\n              }\n            })\n          }\n        }\n        return pluginState\n      }\n    },\n    view: (view) => {\n      binding.initView(view)\n      if (mapping == null) {\n        // force rerender to update the bindings mapping\n        binding._forceRerender()\n      }\n      onFirstRender()\n      return {\n        update: () => {\n          const pluginState = plugin.getState(view.state)\n          if (\n            pluginState.snapshot == null && pluginState.prevSnapshot == null\n          ) {\n            if (\n              // If the content doesn't change initially, we don't render anything to Yjs\n              // If the content was cleared by a user action, we want to catch the change and\n              // represent it in Yjs\n              initialContentChanged ||\n              view.state.doc.content.findDiffStart(\n                view.state.doc.type.createAndFill().content\n              ) !== null\n            ) {\n              initialContentChanged = true\n              if (\n                pluginState.addToHistory === false &&\n                !pluginState.isChangeOrigin\n              ) {\n                const yUndoPluginState = _keys_js__WEBPACK_IMPORTED_MODULE_4__.yUndoPluginKey.getState(view.state)\n                /**\n                 * @type {Y.UndoManager}\n                 */\n                const um = yUndoPluginState && yUndoPluginState.undoManager\n                if (um) {\n                  um.stopCapturing()\n                }\n              }\n              binding.mux(() => {\n                /** @type {Y.Doc} */ (pluginState.doc).transact((tr) => {\n                  tr.meta.set('addToHistory', pluginState.addToHistory)\n                  binding._prosemirrorChanged(view.state.doc)\n                }, _keys_js__WEBPACK_IMPORTED_MODULE_4__.ySyncPluginKey)\n              })\n            }\n          }\n        },\n        destroy: () => {\n          binding.destroy()\n        }\n      }\n    }\n  })\n  return plugin\n}\n\n/**\n * @param {any} tr\n * @param {any} relSel\n * @param {ProsemirrorBinding} binding\n */\nconst restoreRelativeSelection = (tr, relSel, binding) => {\n  if (relSel !== null && relSel.anchor !== null && relSel.head !== null) {\n    if (relSel.type === 'all') {\n      tr.setSelection(new prosemirror_state__WEBPACK_IMPORTED_MODULE_3__.AllSelection(tr.doc))\n    } else {\n      const anchor = (0,_lib_js__WEBPACK_IMPORTED_MODULE_6__.relativePositionToAbsolutePosition)(\n        binding.doc,\n        binding.type,\n        relSel.anchor,\n        binding.mapping\n      )\n      const head = (0,_lib_js__WEBPACK_IMPORTED_MODULE_6__.relativePositionToAbsolutePosition)(\n        binding.doc,\n        binding.type,\n        relSel.head,\n        binding.mapping\n      )\n      if (anchor !== null && head !== null) {\n        tr = tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_3__.TextSelection.create(tr.doc, anchor, head))\n      }\n    }\n  }\n}\n\n/**\n * @param {ProsemirrorBinding} pmbinding\n * @param {import('prosemirror-state').EditorState} state\n */\nconst getRelativeSelection = (pmbinding, state) => ({\n  type: /** @type {any} */ (state.selection).jsonID,\n  anchor: (0,_lib_js__WEBPACK_IMPORTED_MODULE_6__.absolutePositionToRelativePosition)(\n    state.selection.anchor,\n    pmbinding.type,\n    pmbinding.mapping\n  ),\n  head: (0,_lib_js__WEBPACK_IMPORTED_MODULE_6__.absolutePositionToRelativePosition)(\n    state.selection.head,\n    pmbinding.type,\n    pmbinding.mapping\n  )\n})\n\n/**\n * Binding for prosemirror.\n *\n * @protected\n */\nclass ProsemirrorBinding {\n  /**\n   * @param {Y.XmlFragment} yXmlFragment The bind source\n   * @param {ProsemirrorMapping} mapping\n   */\n  constructor (yXmlFragment, mapping = new Map()) {\n    this.type = yXmlFragment\n    /**\n     * this will be set once the view is created\n     * @type {any}\n     */\n    this.prosemirrorView = null\n    this.mux = (0,lib0_mutex__WEBPACK_IMPORTED_MODULE_7__.createMutex)()\n    this.mapping = mapping\n    /**\n     * Is overlapping mark - i.e. mark does not exclude itself.\n     *\n     * @type {Map<import('prosemirror-model').MarkType, boolean>}\n     */\n    this.isOMark = new Map()\n    this._observeFunction = this._typeChanged.bind(this)\n    /**\n     * @type {Y.Doc}\n     */\n    // @ts-ignore\n    this.doc = yXmlFragment.doc\n    /**\n     * current selection as relative positions in the Yjs model\n     */\n    this.beforeTransactionSelection = null\n    this.beforeAllTransactions = () => {\n      if (this.beforeTransactionSelection === null && this.prosemirrorView != null) {\n        this.beforeTransactionSelection = getRelativeSelection(\n          this,\n          this.prosemirrorView.state\n        )\n      }\n    }\n    this.afterAllTransactions = () => {\n      this.beforeTransactionSelection = null\n    }\n    this._domSelectionInView = null\n  }\n\n  /**\n   * Create a transaction for changing the prosemirror state.\n   *\n   * @returns\n   */\n  get _tr () {\n    return this.prosemirrorView.state.tr.setMeta('addToHistory', false)\n  }\n\n  _isLocalCursorInView () {\n    if (!this.prosemirrorView.hasFocus()) return false\n    if (lib0_environment__WEBPACK_IMPORTED_MODULE_8__.isBrowser && this._domSelectionInView === null) {\n      // Calculate the domSelectionInView and clear by next tick after all events are finished\n      lib0_eventloop__WEBPACK_IMPORTED_MODULE_5__.timeout(0, () => {\n        this._domSelectionInView = null\n      })\n      this._domSelectionInView = this._isDomSelectionInView()\n    }\n    return this._domSelectionInView\n  }\n\n  _isDomSelectionInView () {\n    const selection = this.prosemirrorView._root.getSelection()\n\n    if (selection == null || selection.anchorNode == null) return false\n\n    const range = this.prosemirrorView._root.createRange()\n    range.setStart(selection.anchorNode, selection.anchorOffset)\n    range.setEnd(selection.focusNode, selection.focusOffset)\n\n    // This is a workaround for an edgecase where getBoundingClientRect will\n    // return zero values if the selection is collapsed at the start of a newline\n    // see reference here: https://stackoverflow.com/a/59780954\n    const rects = range.getClientRects()\n    if (rects.length === 0) {\n      // probably buggy newline behavior, explicitly select the node contents\n      if (range.startContainer && range.collapsed) {\n        range.selectNodeContents(range.startContainer)\n      }\n    }\n\n    const bounding = range.getBoundingClientRect()\n    const documentElement = lib0_dom__WEBPACK_IMPORTED_MODULE_9__.doc.documentElement\n\n    return bounding.bottom >= 0 && bounding.right >= 0 &&\n      bounding.left <=\n        (window.innerWidth || documentElement.clientWidth || 0) &&\n      bounding.top <= (window.innerHeight || documentElement.clientHeight || 0)\n  }\n\n  /**\n   * @param {Y.Snapshot} snapshot\n   * @param {Y.Snapshot} prevSnapshot\n   */\n  renderSnapshot (snapshot, prevSnapshot) {\n    if (!prevSnapshot) {\n      prevSnapshot = yjs__WEBPACK_IMPORTED_MODULE_0__.createSnapshot(yjs__WEBPACK_IMPORTED_MODULE_0__.createDeleteSet(), new Map())\n    }\n    this.prosemirrorView.dispatch(\n      this._tr.setMeta(_keys_js__WEBPACK_IMPORTED_MODULE_4__.ySyncPluginKey, { snapshot, prevSnapshot })\n    )\n  }\n\n  unrenderSnapshot () {\n    this.mapping.clear()\n    this.mux(() => {\n      const fragmentContent = this.type.toArray().map((t) =>\n        createNodeFromYElement(\n          /** @type {Y.XmlElement} */ (t),\n          this.prosemirrorView.state.schema,\n          this\n        )\n      ).filter((n) => n !== null)\n      // @ts-ignore\n      const tr = this._tr.replace(\n        0,\n        this.prosemirrorView.state.doc.content.size,\n        new prosemirror_model__WEBPACK_IMPORTED_MODULE_10__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_10__.Fragment.from(fragmentContent), 0, 0)\n      )\n      tr.setMeta(_keys_js__WEBPACK_IMPORTED_MODULE_4__.ySyncPluginKey, { snapshot: null, prevSnapshot: null })\n      this.prosemirrorView.dispatch(tr)\n    })\n  }\n\n  _forceRerender () {\n    this.mapping.clear()\n    this.mux(() => {\n      // If this is a forced rerender, this might neither happen as a pm change nor within a Yjs\n      // transaction. Then the \"before selection\" doesn't exist. In this case, we need to create a\n      // relative position before replacing content. Fixes #126\n      const sel = this.beforeTransactionSelection !== null ? null : this.prosemirrorView.state.selection\n      const fragmentContent = this.type.toArray().map((t) =>\n        createNodeFromYElement(\n          /** @type {Y.XmlElement} */ (t),\n          this.prosemirrorView.state.schema,\n          this\n        )\n      ).filter((n) => n !== null)\n      // @ts-ignore\n      const tr = this._tr.replace(\n        0,\n        this.prosemirrorView.state.doc.content.size,\n        new prosemirror_model__WEBPACK_IMPORTED_MODULE_10__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_10__.Fragment.from(fragmentContent), 0, 0)\n      )\n      if (sel) {\n        /**\n         * If the Prosemirror document we just created from this.type is\n         * smaller than the previous document, the selection might be\n         * out of bound, which would make Prosemirror throw an error.\n         */\n        const clampedAnchor = lib0_math__WEBPACK_IMPORTED_MODULE_11__.min(lib0_math__WEBPACK_IMPORTED_MODULE_11__.max(sel.anchor, 0), tr.doc.content.size)\n        const clampedHead = lib0_math__WEBPACK_IMPORTED_MODULE_11__.min(lib0_math__WEBPACK_IMPORTED_MODULE_11__.max(sel.head, 0), tr.doc.content.size)\n\n        tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_3__.TextSelection.create(tr.doc, clampedAnchor, clampedHead))\n      }\n      this.prosemirrorView.dispatch(\n        tr.setMeta(_keys_js__WEBPACK_IMPORTED_MODULE_4__.ySyncPluginKey, { isChangeOrigin: true, binding: this })\n      )\n    })\n  }\n\n  /**\n   * @param {Y.Snapshot|Uint8Array} snapshot\n   * @param {Y.Snapshot|Uint8Array} prevSnapshot\n   * @param {Object} pluginState\n   */\n  _renderSnapshot (snapshot, prevSnapshot, pluginState) {\n    /**\n     * The document that contains the full history of this document.\n     * @type {Y.Doc}\n     */\n    let historyDoc = this.doc\n    if (!snapshot) {\n      snapshot = yjs__WEBPACK_IMPORTED_MODULE_0__.snapshot(this.doc)\n    }\n    if (snapshot instanceof Uint8Array || prevSnapshot instanceof Uint8Array) {\n      if (!(snapshot instanceof Uint8Array) || !(prevSnapshot instanceof Uint8Array)) {\n        // expected both snapshots to be v2 updates\n        lib0_error__WEBPACK_IMPORTED_MODULE_12__.unexpectedCase()\n      }\n      historyDoc = new yjs__WEBPACK_IMPORTED_MODULE_0__.Doc({ gc: false })\n      yjs__WEBPACK_IMPORTED_MODULE_0__.applyUpdateV2(historyDoc, prevSnapshot)\n      prevSnapshot = yjs__WEBPACK_IMPORTED_MODULE_0__.snapshot(historyDoc)\n      yjs__WEBPACK_IMPORTED_MODULE_0__.applyUpdateV2(historyDoc, snapshot)\n      snapshot = yjs__WEBPACK_IMPORTED_MODULE_0__.snapshot(historyDoc)\n    }\n    // clear mapping because we are going to rerender\n    this.mapping.clear()\n    this.mux(() => {\n      historyDoc.transact((transaction) => {\n        // before rendering, we are going to sanitize ops and split deleted ops\n        // if they were deleted by seperate users.\n        /**\n         * @type {Y.PermanentUserData}\n         */\n        const pud = pluginState.permanentUserData\n        if (pud) {\n          pud.dss.forEach((ds) => {\n            yjs__WEBPACK_IMPORTED_MODULE_0__.iterateDeletedStructs(transaction, ds, (_item) => {})\n          })\n        }\n        /**\n         * @param {'removed'|'added'} type\n         * @param {Y.ID} id\n         */\n        const computeYChange = (type, id) => {\n          const user = type === 'added'\n            ? pud.getUserByClientId(id.client)\n            : pud.getUserByDeletedId(id)\n          return {\n            user,\n            type,\n            color: getUserColor(\n              pluginState.colorMapping,\n              pluginState.colors,\n              user\n            )\n          }\n        }\n        // Create document fragment and render\n        const fragmentContent = yjs__WEBPACK_IMPORTED_MODULE_0__.typeListToArraySnapshot(\n          this.type,\n          new yjs__WEBPACK_IMPORTED_MODULE_0__.Snapshot(prevSnapshot.ds, snapshot.sv)\n        ).map((t) => {\n          if (\n            !t._item.deleted || isVisible(t._item, snapshot) ||\n            isVisible(t._item, prevSnapshot)\n          ) {\n            return createNodeFromYElement(\n              t,\n              this.prosemirrorView.state.schema,\n              { mapping: new Map(), isOMark: new Map() },\n              snapshot,\n              prevSnapshot,\n              computeYChange\n            )\n          } else {\n            // No need to render elements that are not visible by either snapshot.\n            // If a client adds and deletes content in the same snapshot the element is not visible by either snapshot.\n            return null\n          }\n        }).filter((n) => n !== null)\n        // @ts-ignore\n        const tr = this._tr.replace(\n          0,\n          this.prosemirrorView.state.doc.content.size,\n          new prosemirror_model__WEBPACK_IMPORTED_MODULE_10__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_10__.Fragment.from(fragmentContent), 0, 0)\n        )\n        this.prosemirrorView.dispatch(\n          tr.setMeta(_keys_js__WEBPACK_IMPORTED_MODULE_4__.ySyncPluginKey, { isChangeOrigin: true })\n        )\n      }, _keys_js__WEBPACK_IMPORTED_MODULE_4__.ySyncPluginKey)\n    })\n  }\n\n  /**\n   * @param {Array<Y.YEvent<any>>} events\n   * @param {Y.Transaction} transaction\n   */\n  _typeChanged (events, transaction) {\n    if (this.prosemirrorView == null) return\n    const syncState = _keys_js__WEBPACK_IMPORTED_MODULE_4__.ySyncPluginKey.getState(this.prosemirrorView.state)\n    if (\n      events.length === 0 || syncState.snapshot != null ||\n      syncState.prevSnapshot != null\n    ) {\n      // drop out if snapshot is active\n      this.renderSnapshot(syncState.snapshot, syncState.prevSnapshot)\n      return\n    }\n    this.mux(() => {\n      /**\n       * @param {any} _\n       * @param {Y.AbstractType<any>} type\n       */\n      const delType = (_, type) => this.mapping.delete(type)\n      yjs__WEBPACK_IMPORTED_MODULE_0__.iterateDeletedStructs(\n        transaction,\n        transaction.deleteSet,\n        (struct) => {\n          if (struct.constructor === yjs__WEBPACK_IMPORTED_MODULE_0__.Item) {\n            const type = /** @type {Y.ContentType} */ (/** @type {Y.Item} */ (struct).content).type\n            type && this.mapping.delete(type)\n          }\n        }\n      )\n      transaction.changed.forEach(delType)\n      transaction.changedParentTypes.forEach(delType)\n      const fragmentContent = this.type.toArray().map((t) =>\n        createNodeIfNotExists(\n          /** @type {Y.XmlElement | Y.XmlHook} */ (t),\n          this.prosemirrorView.state.schema,\n          this\n        )\n      ).filter((n) => n !== null)\n      // @ts-ignore\n      let tr = this._tr.replace(\n        0,\n        this.prosemirrorView.state.doc.content.size,\n        new prosemirror_model__WEBPACK_IMPORTED_MODULE_10__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_10__.Fragment.from(fragmentContent), 0, 0)\n      )\n      restoreRelativeSelection(tr, this.beforeTransactionSelection, this)\n      tr = tr.setMeta(_keys_js__WEBPACK_IMPORTED_MODULE_4__.ySyncPluginKey, { isChangeOrigin: true, isUndoRedoOperation: transaction.origin instanceof yjs__WEBPACK_IMPORTED_MODULE_0__.UndoManager })\n      if (\n        this.beforeTransactionSelection !== null && this._isLocalCursorInView()\n      ) {\n        tr.scrollIntoView()\n      }\n      this.prosemirrorView.dispatch(tr)\n    })\n  }\n\n  /**\n   * @param {import('prosemirror-model').Node} doc\n   */\n  _prosemirrorChanged (doc) {\n    this.doc.transact(() => {\n      updateYFragment(this.doc, this.type, doc, this)\n      this.beforeTransactionSelection = getRelativeSelection(\n        this,\n        this.prosemirrorView.state\n      )\n    }, _keys_js__WEBPACK_IMPORTED_MODULE_4__.ySyncPluginKey)\n  }\n\n  /**\n   * View is ready to listen to changes. Register observers.\n   * @param {any} prosemirrorView\n   */\n  initView (prosemirrorView) {\n    if (this.prosemirrorView != null) this.destroy()\n    this.prosemirrorView = prosemirrorView\n    this.doc.on('beforeAllTransactions', this.beforeAllTransactions)\n    this.doc.on('afterAllTransactions', this.afterAllTransactions)\n    this.type.observeDeep(this._observeFunction)\n  }\n\n  destroy () {\n    if (this.prosemirrorView == null) return\n    this.prosemirrorView = null\n    this.type.unobserveDeep(this._observeFunction)\n    this.doc.off('beforeAllTransactions', this.beforeAllTransactions)\n    this.doc.off('afterAllTransactions', this.afterAllTransactions)\n  }\n}\n\n/**\n * @private\n * @param {Y.XmlElement | Y.XmlHook} el\n * @param {PModel.Schema} schema\n * @param {BindingMetadata} meta\n * @param {Y.Snapshot} [snapshot]\n * @param {Y.Snapshot} [prevSnapshot]\n * @param {function('removed' | 'added', Y.ID):any} [computeYChange]\n * @return {PModel.Node | null}\n */\nconst createNodeIfNotExists = (\n  el,\n  schema,\n  meta,\n  snapshot,\n  prevSnapshot,\n  computeYChange\n) => {\n  const node = /** @type {PModel.Node} */ (meta.mapping.get(el))\n  if (node === undefined) {\n    if (el instanceof yjs__WEBPACK_IMPORTED_MODULE_0__.XmlElement) {\n      return createNodeFromYElement(\n        el,\n        schema,\n        meta,\n        snapshot,\n        prevSnapshot,\n        computeYChange\n      )\n    } else {\n      throw lib0_error__WEBPACK_IMPORTED_MODULE_12__.methodUnimplemented() // we are currently not handling hooks\n    }\n  }\n  return node\n}\n\n/**\n * @private\n * @param {Y.XmlElement} el\n * @param {any} schema\n * @param {BindingMetadata} meta\n * @param {Y.Snapshot} [snapshot]\n * @param {Y.Snapshot} [prevSnapshot]\n * @param {function('removed' | 'added', Y.ID):any} [computeYChange]\n * @return {PModel.Node | null} Returns node if node could be created. Otherwise it deletes the yjs type and returns null\n */\nconst createNodeFromYElement = (\n  el,\n  schema,\n  meta,\n  snapshot,\n  prevSnapshot,\n  computeYChange\n) => {\n  const children = []\n  /**\n   * @param {Y.XmlElement | Y.XmlText} type\n   */\n  const createChildren = (type) => {\n    if (type instanceof yjs__WEBPACK_IMPORTED_MODULE_0__.XmlElement) {\n      const n = createNodeIfNotExists(\n        type,\n        schema,\n        meta,\n        snapshot,\n        prevSnapshot,\n        computeYChange\n      )\n      if (n !== null) {\n        children.push(n)\n      }\n    } else {\n      // If the next ytext exists and was created by us, move the content to the current ytext.\n      // This is a fix for #160 -- duplication of characters when two Y.Text exist next to each\n      // other.\n      const nextytext = /** @type {Y.ContentType} */ (type._item.right?.content)?.type\n      if (nextytext instanceof yjs__WEBPACK_IMPORTED_MODULE_0__.Text && !nextytext._item.deleted && nextytext._item.id.client === nextytext.doc.clientID) {\n        type.applyDelta([\n          { retain: type.length },\n          ...nextytext.toDelta()\n        ])\n        nextytext.doc.transact(tr => {\n          nextytext._item.delete(tr)\n        })\n      }\n      // now create the prosemirror text nodes\n      const ns = createTextNodesFromYText(\n        type,\n        schema,\n        meta,\n        snapshot,\n        prevSnapshot,\n        computeYChange\n      )\n      if (ns !== null) {\n        ns.forEach((textchild) => {\n          if (textchild !== null) {\n            children.push(textchild)\n          }\n        })\n      }\n    }\n  }\n  if (snapshot === undefined || prevSnapshot === undefined) {\n    el.toArray().forEach(createChildren)\n  } else {\n    yjs__WEBPACK_IMPORTED_MODULE_0__.typeListToArraySnapshot(el, new yjs__WEBPACK_IMPORTED_MODULE_0__.Snapshot(prevSnapshot.ds, snapshot.sv))\n      .forEach(createChildren)\n  }\n  try {\n    const attrs = el.getAttributes(snapshot)\n    if (snapshot !== undefined) {\n      if (!isVisible(/** @type {Y.Item} */ (el._item), snapshot)) {\n        attrs.ychange = computeYChange\n          ? computeYChange('removed', /** @type {Y.Item} */ (el._item).id)\n          : { type: 'removed' }\n      } else if (!isVisible(/** @type {Y.Item} */ (el._item), prevSnapshot)) {\n        attrs.ychange = computeYChange\n          ? computeYChange('added', /** @type {Y.Item} */ (el._item).id)\n          : { type: 'added' }\n      }\n    }\n    const node = schema.node(el.nodeName, attrs, children)\n    meta.mapping.set(el, node)\n    return node\n  } catch (e) {\n    // an error occured while creating the node. This is probably a result of a concurrent action.\n    /** @type {Y.Doc} */ (el.doc).transact((transaction) => {\n      /** @type {Y.Item} */ (el._item).delete(transaction)\n    }, _keys_js__WEBPACK_IMPORTED_MODULE_4__.ySyncPluginKey)\n    meta.mapping.delete(el)\n    return null\n  }\n}\n\n/**\n * @private\n * @param {Y.XmlText} text\n * @param {import('prosemirror-model').Schema} schema\n * @param {BindingMetadata} _meta\n * @param {Y.Snapshot} [snapshot]\n * @param {Y.Snapshot} [prevSnapshot]\n * @param {function('removed' | 'added', Y.ID):any} [computeYChange]\n * @return {Array<PModel.Node>|null}\n */\nconst createTextNodesFromYText = (\n  text,\n  schema,\n  _meta,\n  snapshot,\n  prevSnapshot,\n  computeYChange\n) => {\n  const nodes = []\n  const deltas = text.toDelta(snapshot, prevSnapshot, computeYChange)\n  try {\n    for (let i = 0; i < deltas.length; i++) {\n      const delta = deltas[i]\n      nodes.push(schema.text(delta.insert, attributesToMarks(delta.attributes, schema)))\n    }\n  } catch (e) {\n    // an error occured while creating the node. This is probably a result of a concurrent action.\n    /** @type {Y.Doc} */ (text.doc).transact((transaction) => {\n      /** @type {Y.Item} */ (text._item).delete(transaction)\n    }, _keys_js__WEBPACK_IMPORTED_MODULE_4__.ySyncPluginKey)\n    return null\n  }\n  // @ts-ignore\n  return nodes\n}\n\n/**\n * @private\n * @param {Array<any>} nodes prosemirror node\n * @param {BindingMetadata} meta\n * @return {Y.XmlText}\n */\nconst createTypeFromTextNodes = (nodes, meta) => {\n  const type = new yjs__WEBPACK_IMPORTED_MODULE_0__.XmlText()\n  const delta = nodes.map((node) => ({\n    // @ts-ignore\n    insert: node.text,\n    attributes: marksToAttributes(node.marks, meta)\n  }))\n  type.applyDelta(delta)\n  meta.mapping.set(type, nodes)\n  return type\n}\n\n/**\n * @private\n * @param {any} node prosemirror node\n * @param {BindingMetadata} meta\n * @return {Y.XmlElement}\n */\nconst createTypeFromElementNode = (node, meta) => {\n  const type = new yjs__WEBPACK_IMPORTED_MODULE_0__.XmlElement(node.type.name)\n  for (const key in node.attrs) {\n    const val = node.attrs[key]\n    if (val !== null && key !== 'ychange') {\n      type.setAttribute(key, val)\n    }\n  }\n  type.insert(\n    0,\n    normalizePNodeContent(node).map((n) =>\n      createTypeFromTextOrElementNode(n, meta)\n    )\n  )\n  meta.mapping.set(type, node)\n  return type\n}\n\n/**\n * @private\n * @param {PModel.Node|Array<PModel.Node>} node prosemirror text node\n * @param {BindingMetadata} meta\n * @return {Y.XmlElement|Y.XmlText}\n */\nconst createTypeFromTextOrElementNode = (node, meta) =>\n  node instanceof Array\n    ? createTypeFromTextNodes(node, meta)\n    : createTypeFromElementNode(node, meta)\n\n/**\n * @param {any} val\n */\nconst isObject = (val) => typeof val === 'object' && val !== null\n\n/**\n * @param {any} pattrs\n * @param {any} yattrs\n */\nconst equalAttrs = (pattrs, yattrs) => {\n  const keys = Object.keys(pattrs).filter((key) => pattrs[key] !== null)\n  let eq =\n    keys.length ===\n      Object.keys(yattrs).filter((key) => yattrs[key] !== null).length\n  for (let i = 0; i < keys.length && eq; i++) {\n    const key = keys[i]\n    const l = pattrs[key]\n    const r = yattrs[key]\n    eq = key === 'ychange' || l === r ||\n      (isObject(l) && isObject(r) && equalAttrs(l, r))\n  }\n  return eq\n}\n\n/**\n * @typedef {Array<Array<PModel.Node>|PModel.Node>} NormalizedPNodeContent\n */\n\n/**\n * @param {any} pnode\n * @return {NormalizedPNodeContent}\n */\nconst normalizePNodeContent = (pnode) => {\n  const c = pnode.content.content\n  const res = []\n  for (let i = 0; i < c.length; i++) {\n    const n = c[i]\n    if (n.isText) {\n      const textNodes = []\n      for (let tnode = c[i]; i < c.length && tnode.isText; tnode = c[++i]) {\n        textNodes.push(tnode)\n      }\n      i--\n      res.push(textNodes)\n    } else {\n      res.push(n)\n    }\n  }\n  return res\n}\n\n/**\n * @param {Y.XmlText} ytext\n * @param {Array<any>} ptexts\n */\nconst equalYTextPText = (ytext, ptexts) => {\n  const delta = ytext.toDelta()\n  return delta.length === ptexts.length &&\n    delta.every(/** @type {(d:any,i:number) => boolean} */ (d, i) =>\n      d.insert === /** @type {any} */ (ptexts[i]).text &&\n      lib0_object__WEBPACK_IMPORTED_MODULE_13__.keys(d.attributes || {}).length === ptexts[i].marks.length &&\n      lib0_object__WEBPACK_IMPORTED_MODULE_13__.every(d.attributes, (attr, yattrname) => {\n        const markname = yattr2markname(yattrname)\n        const pmarks = ptexts[i].marks\n        return equalAttrs(attr, pmarks.find(/** @param {any} mark */ mark => mark.type.name === markname)?.attrs)\n      })\n    )\n}\n\n/**\n * @param {Y.XmlElement|Y.XmlText|Y.XmlHook} ytype\n * @param {any|Array<any>} pnode\n */\nconst equalYTypePNode = (ytype, pnode) => {\n  if (\n    ytype instanceof yjs__WEBPACK_IMPORTED_MODULE_0__.XmlElement && !(pnode instanceof Array) &&\n    matchNodeName(ytype, pnode)\n  ) {\n    const normalizedContent = normalizePNodeContent(pnode)\n    return ytype._length === normalizedContent.length &&\n      equalAttrs(ytype.getAttributes(), pnode.attrs) &&\n      ytype.toArray().every((ychild, i) =>\n        equalYTypePNode(ychild, normalizedContent[i])\n      )\n  }\n  return ytype instanceof yjs__WEBPACK_IMPORTED_MODULE_0__.XmlText && pnode instanceof Array &&\n    equalYTextPText(ytype, pnode)\n}\n\n/**\n * @param {PModel.Node | Array<PModel.Node> | undefined} mapped\n * @param {PModel.Node | Array<PModel.Node>} pcontent\n */\nconst mappedIdentity = (mapped, pcontent) =>\n  mapped === pcontent ||\n  (mapped instanceof Array && pcontent instanceof Array &&\n    mapped.length === pcontent.length && mapped.every((a, i) =>\n    pcontent[i] === a\n  ))\n\n/**\n * @param {Y.XmlElement} ytype\n * @param {PModel.Node} pnode\n * @param {BindingMetadata} meta\n * @return {{ foundMappedChild: boolean, equalityFactor: number }}\n */\nconst computeChildEqualityFactor = (ytype, pnode, meta) => {\n  const yChildren = ytype.toArray()\n  const pChildren = normalizePNodeContent(pnode)\n  const pChildCnt = pChildren.length\n  const yChildCnt = yChildren.length\n  const minCnt = lib0_math__WEBPACK_IMPORTED_MODULE_11__.min(yChildCnt, pChildCnt)\n  let left = 0\n  let right = 0\n  let foundMappedChild = false\n  for (; left < minCnt; left++) {\n    const leftY = yChildren[left]\n    const leftP = pChildren[left]\n    if (mappedIdentity(meta.mapping.get(leftY), leftP)) {\n      foundMappedChild = true // definite (good) match!\n    } else if (!equalYTypePNode(leftY, leftP)) {\n      break\n    }\n  }\n  for (; left + right < minCnt; right++) {\n    const rightY = yChildren[yChildCnt - right - 1]\n    const rightP = pChildren[pChildCnt - right - 1]\n    if (mappedIdentity(meta.mapping.get(rightY), rightP)) {\n      foundMappedChild = true\n    } else if (!equalYTypePNode(rightY, rightP)) {\n      break\n    }\n  }\n  return {\n    equalityFactor: left + right,\n    foundMappedChild\n  }\n}\n\n/**\n * @param {Y.Text} ytext\n */\nconst ytextTrans = (ytext) => {\n  let str = ''\n  /**\n   * @type {Y.Item|null}\n   */\n  let n = ytext._start\n  const nAttrs = {}\n  while (n !== null) {\n    if (!n.deleted) {\n      if (n.countable && n.content instanceof yjs__WEBPACK_IMPORTED_MODULE_0__.ContentString) {\n        str += n.content.str\n      } else if (n.content instanceof yjs__WEBPACK_IMPORTED_MODULE_0__.ContentFormat) {\n        nAttrs[n.content.key] = null\n      }\n    }\n    n = n.right\n  }\n  return {\n    str,\n    nAttrs\n  }\n}\n\n/**\n * @todo test this more\n *\n * @param {Y.Text} ytext\n * @param {Array<any>} ptexts\n * @param {BindingMetadata} meta\n */\nconst updateYText = (ytext, ptexts, meta) => {\n  meta.mapping.set(ytext, ptexts)\n  const { nAttrs, str } = ytextTrans(ytext)\n  const content = ptexts.map((p) => ({\n    insert: /** @type {any} */ (p).text,\n    attributes: Object.assign({}, nAttrs, marksToAttributes(p.marks, meta))\n  }))\n  const { insert, remove, index } = (0,lib0_diff__WEBPACK_IMPORTED_MODULE_14__.simpleDiff)(\n    str,\n    content.map((c) => c.insert).join('')\n  )\n  ytext.delete(index, remove)\n  ytext.insert(index, insert)\n  ytext.applyDelta(\n    content.map((c) => ({ retain: c.insert.length, attributes: c.attributes }))\n  )\n}\n\nconst hashedMarkNameRegex = /(.*)(--[a-zA-Z0-9+/=]{8})$/\n/**\n * @param {string} attrName\n */\nconst yattr2markname = attrName => hashedMarkNameRegex.exec(attrName)?.[1] ?? attrName\n\n/**\n * @todo move this to markstoattributes\n *\n * @param {Object<string, any>} attrs\n * @param {import('prosemirror-model').Schema} schema\n */\nconst attributesToMarks = (attrs, schema) => {\n  /**\n   * @type {Array<import('prosemirror-model').Mark>}\n   */\n  const marks = []\n  for (const markName in attrs) {\n    // remove hashes if necessary\n    marks.push(schema.mark(yattr2markname(markName), attrs[markName]))\n  }\n  return marks\n}\n\n/**\n * @param {Array<import('prosemirror-model').Mark>} marks\n * @param {BindingMetadata} meta\n */\nconst marksToAttributes = (marks, meta) => {\n  const pattrs = {}\n  marks.forEach((mark) => {\n    if (mark.type.name !== 'ychange') {\n      const isOverlapping = lib0_map__WEBPACK_IMPORTED_MODULE_15__.setIfUndefined(meta.isOMark, mark.type, () => !mark.type.excludes(mark.type))\n      pattrs[isOverlapping ? `${mark.type.name}--${_utils_js__WEBPACK_IMPORTED_MODULE_16__.hashOfJSON(mark.toJSON())}` : mark.type.name] = mark.attrs\n    }\n  })\n  return pattrs\n}\n\n/**\n * Update a yDom node by syncing the current content of the prosemirror node.\n *\n * This is a y-prosemirror internal feature that you can use at your own risk.\n *\n * @private\n * @unstable\n *\n * @param {{transact: Function}} y\n * @param {Y.XmlFragment} yDomFragment\n * @param {any} pNode\n * @param {BindingMetadata} meta\n */\nconst updateYFragment = (y, yDomFragment, pNode, meta) => {\n  if (\n    yDomFragment instanceof yjs__WEBPACK_IMPORTED_MODULE_0__.XmlElement &&\n    yDomFragment.nodeName !== pNode.type.name\n  ) {\n    throw new Error('node name mismatch!')\n  }\n  meta.mapping.set(yDomFragment, pNode)\n  // update attributes\n  if (yDomFragment instanceof yjs__WEBPACK_IMPORTED_MODULE_0__.XmlElement) {\n    const yDomAttrs = yDomFragment.getAttributes()\n    const pAttrs = pNode.attrs\n    for (const key in pAttrs) {\n      if (pAttrs[key] !== null) {\n        if (yDomAttrs[key] !== pAttrs[key] && key !== 'ychange') {\n          yDomFragment.setAttribute(key, pAttrs[key])\n        }\n      } else {\n        yDomFragment.removeAttribute(key)\n      }\n    }\n    // remove all keys that are no longer in pAttrs\n    for (const key in yDomAttrs) {\n      if (pAttrs[key] === undefined) {\n        yDomFragment.removeAttribute(key)\n      }\n    }\n  }\n  // update children\n  const pChildren = normalizePNodeContent(pNode)\n  const pChildCnt = pChildren.length\n  const yChildren = yDomFragment.toArray()\n  const yChildCnt = yChildren.length\n  const minCnt = lib0_math__WEBPACK_IMPORTED_MODULE_11__.min(pChildCnt, yChildCnt)\n  let left = 0\n  let right = 0\n  // find number of matching elements from left\n  for (; left < minCnt; left++) {\n    const leftY = yChildren[left]\n    const leftP = pChildren[left]\n    if (!mappedIdentity(meta.mapping.get(leftY), leftP)) {\n      if (equalYTypePNode(leftY, leftP)) {\n        // update mapping\n        meta.mapping.set(leftY, leftP)\n      } else {\n        break\n      }\n    }\n  }\n  // find number of matching elements from right\n  for (; right + left + 1 < minCnt; right++) {\n    const rightY = yChildren[yChildCnt - right - 1]\n    const rightP = pChildren[pChildCnt - right - 1]\n    if (!mappedIdentity(meta.mapping.get(rightY), rightP)) {\n      if (equalYTypePNode(rightY, rightP)) {\n        // update mapping\n        meta.mapping.set(rightY, rightP)\n      } else {\n        break\n      }\n    }\n  }\n  y.transact(() => {\n    // try to compare and update\n    while (yChildCnt - left - right > 0 && pChildCnt - left - right > 0) {\n      const leftY = yChildren[left]\n      const leftP = pChildren[left]\n      const rightY = yChildren[yChildCnt - right - 1]\n      const rightP = pChildren[pChildCnt - right - 1]\n      if (leftY instanceof yjs__WEBPACK_IMPORTED_MODULE_0__.XmlText && leftP instanceof Array) {\n        if (!equalYTextPText(leftY, leftP)) {\n          updateYText(leftY, leftP, meta)\n        }\n        left += 1\n      } else {\n        let updateLeft = leftY instanceof yjs__WEBPACK_IMPORTED_MODULE_0__.XmlElement &&\n          matchNodeName(leftY, leftP)\n        let updateRight = rightY instanceof yjs__WEBPACK_IMPORTED_MODULE_0__.XmlElement &&\n          matchNodeName(rightY, rightP)\n        if (updateLeft && updateRight) {\n          // decide which which element to update\n          const equalityLeft = computeChildEqualityFactor(\n            /** @type {Y.XmlElement} */ (leftY),\n            /** @type {PModel.Node} */ (leftP),\n            meta\n          )\n          const equalityRight = computeChildEqualityFactor(\n            /** @type {Y.XmlElement} */ (rightY),\n            /** @type {PModel.Node} */ (rightP),\n            meta\n          )\n          if (\n            equalityLeft.foundMappedChild && !equalityRight.foundMappedChild\n          ) {\n            updateRight = false\n          } else if (\n            !equalityLeft.foundMappedChild && equalityRight.foundMappedChild\n          ) {\n            updateLeft = false\n          } else if (\n            equalityLeft.equalityFactor < equalityRight.equalityFactor\n          ) {\n            updateLeft = false\n          } else {\n            updateRight = false\n          }\n        }\n        if (updateLeft) {\n          updateYFragment(\n            y,\n            /** @type {Y.XmlFragment} */ (leftY),\n            /** @type {PModel.Node} */ (leftP),\n            meta\n          )\n          left += 1\n        } else if (updateRight) {\n          updateYFragment(\n            y,\n            /** @type {Y.XmlFragment} */ (rightY),\n            /** @type {PModel.Node} */ (rightP),\n            meta\n          )\n          right += 1\n        } else {\n          meta.mapping.delete(yDomFragment.get(left))\n          yDomFragment.delete(left, 1)\n          yDomFragment.insert(left, [\n            createTypeFromTextOrElementNode(leftP, meta)\n          ])\n          left += 1\n        }\n      }\n    }\n    const yDelLen = yChildCnt - left - right\n    if (\n      yChildCnt === 1 && pChildCnt === 0 && yChildren[0] instanceof yjs__WEBPACK_IMPORTED_MODULE_0__.XmlText\n    ) {\n      meta.mapping.delete(yChildren[0])\n      // Edge case handling https://github.com/yjs/y-prosemirror/issues/108\n      // Only delete the content of the Y.Text to retain remote changes on the same Y.Text object\n      yChildren[0].delete(0, yChildren[0].length)\n    } else if (yDelLen > 0) {\n      yDomFragment.slice(left, left + yDelLen).forEach(type => meta.mapping.delete(type))\n      yDomFragment.delete(left, yDelLen)\n    }\n    if (left + right < pChildCnt) {\n      const ins = []\n      for (let i = left; i < pChildCnt - right; i++) {\n        ins.push(createTypeFromTextOrElementNode(pChildren[i], meta))\n      }\n      yDomFragment.insert(left, ins)\n    }\n  }, _keys_js__WEBPACK_IMPORTED_MODULE_4__.ySyncPluginKey)\n}\n\n/**\n * @function\n * @param {Y.XmlElement} yElement\n * @param {any} pNode Prosemirror Node\n */\nconst matchNodeName = (yElement, pNode) =>\n  !(pNode instanceof Array) && yElement.nodeName === pNode.type.name\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/y-prosemirror/src/plugins/sync-plugin.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/y-prosemirror/src/plugins/undo-plugin.js":
/*!***************************************************************!*\
  !*** ./node_modules/y-prosemirror/src/plugins/undo-plugin.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultDeleteFilter: () => (/* binding */ defaultDeleteFilter),\n/* harmony export */   defaultProtectedNodes: () => (/* binding */ defaultProtectedNodes),\n/* harmony export */   redo: () => (/* binding */ redo),\n/* harmony export */   undo: () => (/* binding */ undo),\n/* harmony export */   yUndoPlugin: () => (/* binding */ yUndoPlugin)\n/* harmony export */ });\n/* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prosemirror-state */ \"(app-pages-browser)/./node_modules/prosemirror-state/dist/index.js\");\n/* harmony import */ var _sync_plugin_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sync-plugin.js */ \"(app-pages-browser)/./node_modules/y-prosemirror/src/plugins/sync-plugin.js\");\n/* harmony import */ var yjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! yjs */ \"(app-pages-browser)/./node_modules/yjs/dist/yjs.mjs\");\n/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./keys.js */ \"(app-pages-browser)/./node_modules/y-prosemirror/src/plugins/keys.js\");\n // eslint-disable-line\n\n\n\n\n\nconst undo = state => {\n  const undoManager = _keys_js__WEBPACK_IMPORTED_MODULE_0__.yUndoPluginKey.getState(state).undoManager\n  if (undoManager != null) {\n    undoManager.undo()\n    return true\n  }\n}\n\nconst redo = state => {\n  const undoManager = _keys_js__WEBPACK_IMPORTED_MODULE_0__.yUndoPluginKey.getState(state).undoManager\n  if (undoManager != null) {\n    undoManager.redo()\n    return true\n  }\n}\n\nconst defaultProtectedNodes = new Set(['paragraph'])\n\nconst defaultDeleteFilter = (item, protectedNodes) => !(item instanceof yjs__WEBPACK_IMPORTED_MODULE_1__.Item) ||\n!(item.content instanceof yjs__WEBPACK_IMPORTED_MODULE_1__.ContentType) ||\n!(item.content.type instanceof yjs__WEBPACK_IMPORTED_MODULE_1__.Text ||\n  (item.content.type instanceof yjs__WEBPACK_IMPORTED_MODULE_1__.XmlElement && protectedNodes.has(item.content.type.nodeName))) ||\nitem.content.type._length === 0\n\nconst yUndoPlugin = ({ protectedNodes = defaultProtectedNodes, trackedOrigins = [], undoManager = null } = {}) => new prosemirror_state__WEBPACK_IMPORTED_MODULE_2__.Plugin({\n  key: _keys_js__WEBPACK_IMPORTED_MODULE_0__.yUndoPluginKey,\n  state: {\n    init: (initargs, state) => {\n      // TODO: check if plugin order matches and fix\n      const ystate = _keys_js__WEBPACK_IMPORTED_MODULE_0__.ySyncPluginKey.getState(state)\n      const _undoManager = undoManager || new yjs__WEBPACK_IMPORTED_MODULE_1__.UndoManager(ystate.type, {\n        trackedOrigins: new Set([_keys_js__WEBPACK_IMPORTED_MODULE_0__.ySyncPluginKey].concat(trackedOrigins)),\n        deleteFilter: (item) => defaultDeleteFilter(item, protectedNodes),\n        captureTransaction: tr => tr.meta.get('addToHistory') !== false\n      })\n      return {\n        undoManager: _undoManager,\n        prevSel: null,\n        hasUndoOps: _undoManager.undoStack.length > 0,\n        hasRedoOps: _undoManager.redoStack.length > 0\n      }\n    },\n    /**\n     * @returns {any}\n     */\n    apply: (tr, val, oldState, state) => {\n      const binding = _keys_js__WEBPACK_IMPORTED_MODULE_0__.ySyncPluginKey.getState(state).binding\n      const undoManager = val.undoManager\n      const hasUndoOps = undoManager.undoStack.length > 0\n      const hasRedoOps = undoManager.redoStack.length > 0\n      if (binding) {\n        return {\n          undoManager,\n          prevSel: (0,_sync_plugin_js__WEBPACK_IMPORTED_MODULE_3__.getRelativeSelection)(binding, oldState),\n          hasUndoOps,\n          hasRedoOps\n        }\n      } else {\n        if (hasUndoOps !== val.hasUndoOps || hasRedoOps !== val.hasRedoOps) {\n          return Object.assign({}, val, {\n            hasUndoOps: undoManager.undoStack.length > 0,\n            hasRedoOps: undoManager.redoStack.length > 0\n          })\n        } else { // nothing changed\n          return val\n        }\n      }\n    }\n  },\n  view: view => {\n    const ystate = _keys_js__WEBPACK_IMPORTED_MODULE_0__.ySyncPluginKey.getState(view.state)\n    const undoManager = _keys_js__WEBPACK_IMPORTED_MODULE_0__.yUndoPluginKey.getState(view.state).undoManager\n    undoManager.on('stack-item-added', ({ stackItem }) => {\n      const binding = ystate.binding\n      if (binding) {\n        stackItem.meta.set(binding, _keys_js__WEBPACK_IMPORTED_MODULE_0__.yUndoPluginKey.getState(view.state).prevSel)\n      }\n    })\n    undoManager.on('stack-item-popped', ({ stackItem }) => {\n      const binding = ystate.binding\n      if (binding) {\n        binding.beforeTransactionSelection = stackItem.meta.get(binding) || binding.beforeTransactionSelection\n      }\n    })\n    return {\n      destroy: () => {\n        undoManager.destroy()\n      }\n    }\n  }\n})\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy95LXByb3NlbWlycm9yL3NyYy9wbHVnaW5zL3VuZG8tcGx1Z2luLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUEwQzs7QUFFYTtBQUNlO0FBQ1o7O0FBRW5EO0FBQ1Asc0JBQXNCLG9EQUFjO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRU87QUFDUCxzQkFBc0Isb0RBQWM7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFTzs7QUFFQSx3RUFBd0UscUNBQUk7QUFDbkYsMEJBQTBCLDRDQUFXO0FBQ3JDLCtCQUErQixxQ0FBSTtBQUNuQyxnQ0FBZ0MsMkNBQVU7QUFDMUM7O0FBRU8sdUJBQXVCLGtGQUFrRixJQUFJLFNBQVMscURBQU07QUFDbkksT0FBTyxvREFBYztBQUNyQjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsb0RBQWM7QUFDbkMsOENBQThDLDRDQUFXO0FBQ3pELGlDQUFpQyxvREFBYztBQUMvQztBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0Esc0JBQXNCLG9EQUFjO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixxRUFBb0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsVUFBVSxPQUFPO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsbUJBQW1CLG9EQUFjO0FBQ2pDLHdCQUF3QixvREFBYztBQUN0QywwQ0FBMEMsV0FBVztBQUNyRDtBQUNBO0FBQ0Esb0NBQW9DLG9EQUFjO0FBQ2xEO0FBQ0EsS0FBSztBQUNMLDJDQUEyQyxXQUFXO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIkM6XFxQcm9qZWN0c1xcdHVvbi1pby12MVxcbm9kZV9tb2R1bGVzXFx5LXByb3NlbWlycm9yXFxzcmNcXHBsdWdpbnNcXHVuZG8tcGx1Z2luLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBsdWdpbiB9IGZyb20gJ3Byb3NlbWlycm9yLXN0YXRlJyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbmltcG9ydCB7IGdldFJlbGF0aXZlU2VsZWN0aW9uIH0gZnJvbSAnLi9zeW5jLXBsdWdpbi5qcydcbmltcG9ydCB7IFVuZG9NYW5hZ2VyLCBJdGVtLCBDb250ZW50VHlwZSwgWG1sRWxlbWVudCwgVGV4dCB9IGZyb20gJ3lqcydcbmltcG9ydCB7IHlVbmRvUGx1Z2luS2V5LCB5U3luY1BsdWdpbktleSB9IGZyb20gJy4va2V5cy5qcydcblxuZXhwb3J0IGNvbnN0IHVuZG8gPSBzdGF0ZSA9PiB7XG4gIGNvbnN0IHVuZG9NYW5hZ2VyID0geVVuZG9QbHVnaW5LZXkuZ2V0U3RhdGUoc3RhdGUpLnVuZG9NYW5hZ2VyXG4gIGlmICh1bmRvTWFuYWdlciAhPSBudWxsKSB7XG4gICAgdW5kb01hbmFnZXIudW5kbygpXG4gICAgcmV0dXJuIHRydWVcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgcmVkbyA9IHN0YXRlID0+IHtcbiAgY29uc3QgdW5kb01hbmFnZXIgPSB5VW5kb1BsdWdpbktleS5nZXRTdGF0ZShzdGF0ZSkudW5kb01hbmFnZXJcbiAgaWYgKHVuZG9NYW5hZ2VyICE9IG51bGwpIHtcbiAgICB1bmRvTWFuYWdlci5yZWRvKClcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0UHJvdGVjdGVkTm9kZXMgPSBuZXcgU2V0KFsncGFyYWdyYXBoJ10pXG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0RGVsZXRlRmlsdGVyID0gKGl0ZW0sIHByb3RlY3RlZE5vZGVzKSA9PiAhKGl0ZW0gaW5zdGFuY2VvZiBJdGVtKSB8fFxuIShpdGVtLmNvbnRlbnQgaW5zdGFuY2VvZiBDb250ZW50VHlwZSkgfHxcbiEoaXRlbS5jb250ZW50LnR5cGUgaW5zdGFuY2VvZiBUZXh0IHx8XG4gIChpdGVtLmNvbnRlbnQudHlwZSBpbnN0YW5jZW9mIFhtbEVsZW1lbnQgJiYgcHJvdGVjdGVkTm9kZXMuaGFzKGl0ZW0uY29udGVudC50eXBlLm5vZGVOYW1lKSkpIHx8XG5pdGVtLmNvbnRlbnQudHlwZS5fbGVuZ3RoID09PSAwXG5cbmV4cG9ydCBjb25zdCB5VW5kb1BsdWdpbiA9ICh7IHByb3RlY3RlZE5vZGVzID0gZGVmYXVsdFByb3RlY3RlZE5vZGVzLCB0cmFja2VkT3JpZ2lucyA9IFtdLCB1bmRvTWFuYWdlciA9IG51bGwgfSA9IHt9KSA9PiBuZXcgUGx1Z2luKHtcbiAga2V5OiB5VW5kb1BsdWdpbktleSxcbiAgc3RhdGU6IHtcbiAgICBpbml0OiAoaW5pdGFyZ3MsIHN0YXRlKSA9PiB7XG4gICAgICAvLyBUT0RPOiBjaGVjayBpZiBwbHVnaW4gb3JkZXIgbWF0Y2hlcyBhbmQgZml4XG4gICAgICBjb25zdCB5c3RhdGUgPSB5U3luY1BsdWdpbktleS5nZXRTdGF0ZShzdGF0ZSlcbiAgICAgIGNvbnN0IF91bmRvTWFuYWdlciA9IHVuZG9NYW5hZ2VyIHx8IG5ldyBVbmRvTWFuYWdlcih5c3RhdGUudHlwZSwge1xuICAgICAgICB0cmFja2VkT3JpZ2luczogbmV3IFNldChbeVN5bmNQbHVnaW5LZXldLmNvbmNhdCh0cmFja2VkT3JpZ2lucykpLFxuICAgICAgICBkZWxldGVGaWx0ZXI6IChpdGVtKSA9PiBkZWZhdWx0RGVsZXRlRmlsdGVyKGl0ZW0sIHByb3RlY3RlZE5vZGVzKSxcbiAgICAgICAgY2FwdHVyZVRyYW5zYWN0aW9uOiB0ciA9PiB0ci5tZXRhLmdldCgnYWRkVG9IaXN0b3J5JykgIT09IGZhbHNlXG4gICAgICB9KVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdW5kb01hbmFnZXI6IF91bmRvTWFuYWdlcixcbiAgICAgICAgcHJldlNlbDogbnVsbCxcbiAgICAgICAgaGFzVW5kb09wczogX3VuZG9NYW5hZ2VyLnVuZG9TdGFjay5sZW5ndGggPiAwLFxuICAgICAgICBoYXNSZWRvT3BzOiBfdW5kb01hbmFnZXIucmVkb1N0YWNrLmxlbmd0aCA+IDBcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHthbnl9XG4gICAgICovXG4gICAgYXBwbHk6ICh0ciwgdmFsLCBvbGRTdGF0ZSwgc3RhdGUpID0+IHtcbiAgICAgIGNvbnN0IGJpbmRpbmcgPSB5U3luY1BsdWdpbktleS5nZXRTdGF0ZShzdGF0ZSkuYmluZGluZ1xuICAgICAgY29uc3QgdW5kb01hbmFnZXIgPSB2YWwudW5kb01hbmFnZXJcbiAgICAgIGNvbnN0IGhhc1VuZG9PcHMgPSB1bmRvTWFuYWdlci51bmRvU3RhY2subGVuZ3RoID4gMFxuICAgICAgY29uc3QgaGFzUmVkb09wcyA9IHVuZG9NYW5hZ2VyLnJlZG9TdGFjay5sZW5ndGggPiAwXG4gICAgICBpZiAoYmluZGluZykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHVuZG9NYW5hZ2VyLFxuICAgICAgICAgIHByZXZTZWw6IGdldFJlbGF0aXZlU2VsZWN0aW9uKGJpbmRpbmcsIG9sZFN0YXRlKSxcbiAgICAgICAgICBoYXNVbmRvT3BzLFxuICAgICAgICAgIGhhc1JlZG9PcHNcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGhhc1VuZG9PcHMgIT09IHZhbC5oYXNVbmRvT3BzIHx8IGhhc1JlZG9PcHMgIT09IHZhbC5oYXNSZWRvT3BzKSB7XG4gICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHZhbCwge1xuICAgICAgICAgICAgaGFzVW5kb09wczogdW5kb01hbmFnZXIudW5kb1N0YWNrLmxlbmd0aCA+IDAsXG4gICAgICAgICAgICBoYXNSZWRvT3BzOiB1bmRvTWFuYWdlci5yZWRvU3RhY2subGVuZ3RoID4gMFxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7IC8vIG5vdGhpbmcgY2hhbmdlZFxuICAgICAgICAgIHJldHVybiB2YWxcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgdmlldzogdmlldyA9PiB7XG4gICAgY29uc3QgeXN0YXRlID0geVN5bmNQbHVnaW5LZXkuZ2V0U3RhdGUodmlldy5zdGF0ZSlcbiAgICBjb25zdCB1bmRvTWFuYWdlciA9IHlVbmRvUGx1Z2luS2V5LmdldFN0YXRlKHZpZXcuc3RhdGUpLnVuZG9NYW5hZ2VyXG4gICAgdW5kb01hbmFnZXIub24oJ3N0YWNrLWl0ZW0tYWRkZWQnLCAoeyBzdGFja0l0ZW0gfSkgPT4ge1xuICAgICAgY29uc3QgYmluZGluZyA9IHlzdGF0ZS5iaW5kaW5nXG4gICAgICBpZiAoYmluZGluZykge1xuICAgICAgICBzdGFja0l0ZW0ubWV0YS5zZXQoYmluZGluZywgeVVuZG9QbHVnaW5LZXkuZ2V0U3RhdGUodmlldy5zdGF0ZSkucHJldlNlbClcbiAgICAgIH1cbiAgICB9KVxuICAgIHVuZG9NYW5hZ2VyLm9uKCdzdGFjay1pdGVtLXBvcHBlZCcsICh7IHN0YWNrSXRlbSB9KSA9PiB7XG4gICAgICBjb25zdCBiaW5kaW5nID0geXN0YXRlLmJpbmRpbmdcbiAgICAgIGlmIChiaW5kaW5nKSB7XG4gICAgICAgIGJpbmRpbmcuYmVmb3JlVHJhbnNhY3Rpb25TZWxlY3Rpb24gPSBzdGFja0l0ZW0ubWV0YS5nZXQoYmluZGluZykgfHwgYmluZGluZy5iZWZvcmVUcmFuc2FjdGlvblNlbGVjdGlvblxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIHtcbiAgICAgIGRlc3Ryb3k6ICgpID0+IHtcbiAgICAgICAgdW5kb01hbmFnZXIuZGVzdHJveSgpXG4gICAgICB9XG4gICAgfVxuICB9XG59KVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/y-prosemirror/src/plugins/undo-plugin.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/y-prosemirror/src/utils.js":
/*!*************************************************!*\
  !*** ./node_modules/y-prosemirror/src/utils.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hashOfJSON: () => (/* binding */ hashOfJSON)\n/* harmony export */ });\n/* harmony import */ var lib0_hash_sha256__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lib0/hash/sha256 */ \"(app-pages-browser)/./node_modules/lib0/hash/sha256.js\");\n/* harmony import */ var lib0_buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lib0/buffer */ \"(app-pages-browser)/./node_modules/lib0/buffer.js\");\n\n\n\n/**\n * Custom function to transform sha256 hash to N byte\n *\n * @param {Uint8Array} digest\n */\nconst _convolute = digest => {\n  const N = 6\n  for (let i = N; i < digest.length; i++) {\n    digest[i % N] = digest[i % N] ^ digest[i]\n  }\n  return digest.slice(0, N)\n}\n\n/**\n * @param {any} json\n */\nconst hashOfJSON = (json) => lib0_buffer__WEBPACK_IMPORTED_MODULE_0__.toBase64(_convolute(lib0_hash_sha256__WEBPACK_IMPORTED_MODULE_1__.digest(lib0_buffer__WEBPACK_IMPORTED_MODULE_0__.encodeAny(json))))\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy95LXByb3NlbWlycm9yL3NyYy91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMEM7QUFDUjs7QUFFbEM7QUFDQTtBQUNBO0FBQ0EsV0FBVyxZQUFZO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixtQkFBbUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLEtBQUs7QUFDaEI7QUFDTyw2QkFBNkIsaURBQVksWUFBWSxvREFBYSxDQUFDLGtEQUFhIiwic291cmNlcyI6WyJDOlxcUHJvamVjdHNcXHR1b24taW8tdjFcXG5vZGVfbW9kdWxlc1xceS1wcm9zZW1pcnJvclxcc3JjXFx1dGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBzaGEyNTYgZnJvbSAnbGliMC9oYXNoL3NoYTI1NidcbmltcG9ydCAqIGFzIGJ1ZiBmcm9tICdsaWIwL2J1ZmZlcidcblxuLyoqXG4gKiBDdXN0b20gZnVuY3Rpb24gdG8gdHJhbnNmb3JtIHNoYTI1NiBoYXNoIHRvIE4gYnl0ZVxuICpcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gZGlnZXN0XG4gKi9cbmNvbnN0IF9jb252b2x1dGUgPSBkaWdlc3QgPT4ge1xuICBjb25zdCBOID0gNlxuICBmb3IgKGxldCBpID0gTjsgaSA8IGRpZ2VzdC5sZW5ndGg7IGkrKykge1xuICAgIGRpZ2VzdFtpICUgTl0gPSBkaWdlc3RbaSAlIE5dIF4gZGlnZXN0W2ldXG4gIH1cbiAgcmV0dXJuIGRpZ2VzdC5zbGljZSgwLCBOKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBqc29uXG4gKi9cbmV4cG9ydCBjb25zdCBoYXNoT2ZKU09OID0gKGpzb24pID0+IGJ1Zi50b0Jhc2U2NChfY29udm9sdXRlKHNoYTI1Ni5kaWdlc3QoYnVmLmVuY29kZUFueShqc29uKSkpKVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/y-prosemirror/src/utils.js\n"));

/***/ })

}]);